{
  "openapi": "3.0.1",
  "info": {
    "title": "Gitea API.",
    "description": "This documentation describes the Gitea API.",
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "version": "1.14.3"
  },
  "servers": [
    {
      "url": "/api/v1"
    }
  ],
  "security": [
    {
      "BasicAuth": []
    },
    {
      "Token": []
    },
    {
      "AccessToken": []
    },
    {
      "AuthorizationHeaderToken": []
    },
    {
      "SudoParam": []
    },
    {
      "SudoHeader": []
    },
    {
      "TOTPHeader": []
    }
  ],
  "paths": {
    "/admin/cron": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List cron tasks",
        "operationId": "adminCronList",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CronList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cron"
                  }
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/admin/cron/{task}": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Run cron task",
        "operationId": "adminCronRun",
        "parameters": [
          {
            "name": "task",
            "in": "path",
            "description": "task to run",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/admin/orgs": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List all organizations",
        "operationId": "adminGetAllOrgs",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OrganizationList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/admin/unadopted": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List unadopted repositories",
        "operationId": "adminUnadoptedList",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pattern",
            "in": "query",
            "description": "pattern of repositories to search for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "StringSlice",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/admin/unadopted/{owner}/{repo}": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Adopt unadopted files as a repository",
        "operationId": "adminAdoptRepository",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Delete unadopted files",
        "operationId": "adminDeleteUnadoptedRepository",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/admin/users": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List all users",
        "operationId": "adminGetAllUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Create a user",
        "operationId": "adminCreateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/admin/users/{username}": {
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Delete a user",
        "operationId": "adminDeleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "admin"
        ],
        "summary": "Edit an existing user",
        "operationId": "adminEditUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditUserOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/admin/users/{username}/keys": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Add a public key on behalf of a user",
        "operationId": "adminCreatePublicKey",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "PublicKey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicKey"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "key"
      }
    },
    "/admin/users/{username}/keys/{id}": {
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Delete a user's public key",
        "operationId": "adminDeleteUserPublicKey",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the key to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/admin/users/{username}/orgs": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Create an organization",
        "operationId": "adminCreateOrg",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of the user that will own the created organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrgOption"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "organization"
      }
    },
    "/admin/users/{username}/repos": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Create a repository on behalf of a user",
        "operationId": "adminCreateRepo",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of the user. This user will own the created repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRepoOption"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "409": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "repository"
      }
    },
    "/markdown": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Render a markdown document as HTML",
        "operationId": "renderMarkdown",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkdownOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "MarkdownRender is a rendered markdown document",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/markdown/raw": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Render raw markdown as HTML",
        "operationId": "renderMarkdownRaw",
        "requestBody": {
          "description": "Request body to render",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "MarkdownRender is a rendered markdown document",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/notifications": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "List users's notification threads",
        "operationId": "notifyGetList",
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "If true, show notifications marked as read. Default value is false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status-types",
            "in": "query",
            "description": "Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread & pinned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Only show notifications updated after the given time. This is a timestamp in RFC 3339 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Only show notifications updated before the given time. This is a timestamp in RFC 3339 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "NotificationThreadList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationThread"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "notification"
        ],
        "summary": "Mark notification threads as read, pinned or unread",
        "operationId": "notifyReadList",
        "parameters": [
          {
            "name": "last_read_at",
            "in": "query",
            "description": "Describes the last point that notifications were checked. Anything updated since this time will not be updated.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "all",
            "in": "query",
            "description": "If true, mark all notifications on this repo. Default value is false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status-types",
            "in": "query",
            "description": "Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "to-status",
            "in": "query",
            "description": "Status to mark notifications as, Defaults to read.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "205": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      }
    },
    "/notifications/new": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Check if unread notifications exist",
        "operationId": "notifyNewAvailable",
        "responses": {
          "200": {
            "description": "Number of unread notifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationCount"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationCount"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/threads/{id}": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Get notification thread by ID",
        "operationId": "notifyGetThread",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of notification thread",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "NotificationThread",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationThread"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "notification"
        ],
        "summary": "Mark notification thread as read by ID",
        "operationId": "notifyReadThread",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of notification thread",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to-status",
            "in": "query",
            "description": "Status to mark notifications as",
            "schema": {
              "type": "string",
              "default": "read"
            }
          }
        ],
        "responses": {
          "205": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/org/{org}/repos": {
      "post": {
        "tags": [
          "organization"
        ],
        "summary": "Create a repository in an organization",
        "operationId": "createOrgRepoDeprecated",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRepoOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "deprecated": true,
        "x-codegen-request-body-name": "body"
      }
    },
    "/orgs": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get list of organizations",
        "operationId": "orgGetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OrganizationList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "organization"
        ],
        "summary": "Create an organization",
        "operationId": "orgCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrgOption"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "organization"
      }
    },
    "/orgs/{org}": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get an organization",
        "operationId": "orgGet",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "organization"
        ],
        "summary": "Delete an organization",
        "operationId": "orgDelete",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "organization that is to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "organization"
        ],
        "summary": "Edit an organization",
        "operationId": "orgEdit",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditOrgOption"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orgs/{org}/hooks": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "List an organization's webhooks",
        "operationId": "orgListHooks",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HookList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hook"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{org}/hooks/": {
      "post": {
        "tags": [
          "organization"
        ],
        "summary": "Create a hook",
        "operationId": "orgCreateHook",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHookOption"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Hook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orgs/{org}/hooks/{id}": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get a hook",
        "operationId": "orgGetHook",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the hook to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "organization"
        ],
        "summary": "Delete a hook",
        "operationId": "orgDeleteHook",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the hook to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "organization"
        ],
        "summary": "Update a hook",
        "operationId": "orgEditHook",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the hook to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditHookOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Hook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orgs/{org}/labels": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "List an organization's labels",
        "operationId": "orgListLabels",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LabelList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Label"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "organization"
        ],
        "summary": "Create a label for an organization",
        "operationId": "orgCreateLabel",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLabelOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Label",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orgs/{org}/labels/{id}": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get a single label",
        "operationId": "orgGetLabel",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the label to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Label",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "organization"
        ],
        "summary": "Delete a label",
        "operationId": "orgDeleteLabel",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the label to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "organization"
        ],
        "summary": "Update a label",
        "operationId": "orgEditLabel",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the label to edit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditLabelOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Label",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orgs/{org}/members": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "List an organization's members",
        "operationId": "orgListMembers",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{org}/members/{username}": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Check if a user is a member of an organization",
        "operationId": "orgIsMember",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "path",
            "description": "username of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "user is a member",
            "content": {}
          },
          "302": {
            "description": "redirection to /orgs/{org}/public_members/{username}",
            "content": {}
          },
          "404": {
            "description": "user is not a member",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "organization"
        ],
        "summary": "Remove a member from an organization",
        "operationId": "orgDeleteMember",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "path",
            "description": "username of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "member removed",
            "content": {}
          }
        }
      }
    },
    "/orgs/{org}/public_members": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "List an organization's public members",
        "operationId": "orgListPublicMembers",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{org}/public_members/{username}": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Check if a user is a public member of an organization",
        "operationId": "orgIsPublicMember",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "path",
            "description": "username of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "user is a public member",
            "content": {}
          },
          "404": {
            "description": "user is not a public member",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "organization"
        ],
        "summary": "Publicize a user's membership",
        "operationId": "orgPublicizeMember",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "path",
            "description": "username of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "membership publicized",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "organization"
        ],
        "summary": "Conceal a user's membership",
        "operationId": "orgConcealMember",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "path",
            "description": "username of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/orgs/{org}/repos": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "List an organization's repos",
        "operationId": "orgListRepos",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RepositoryList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Repository"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "organization"
        ],
        "summary": "Create a repository in an organization",
        "operationId": "createOrgRepo",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRepoOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orgs/{org}/teams": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "List an organization's teams",
        "operationId": "orgListTeams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TeamList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "organization"
        ],
        "summary": "Create a team",
        "operationId": "orgCreateTeam",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orgs/{org}/teams/search": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Search for teams within an organization",
        "operationId": "teamSearch",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "keywords to search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_desc",
            "in": "query",
            "description": "include search within team description (defaults to true)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SearchResults of a successful search",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Team"
                      }
                    },
                    "ok": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/repos/issues/search": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Search for issues across the repositories that the user has access to",
        "operationId": "issueSearchIssues",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "whether issue is open or closed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels",
            "in": "query",
            "description": "comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "search string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "priority_repo_id",
            "in": "query",
            "description": "repository to prioritize in the results",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "filter by type (issues / pulls) if set",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Only show notifications updated after the given time. This is a timestamp in RFC 3339 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Only show notifications updated before the given time. This is a timestamp in RFC 3339 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "assigned",
            "in": "query",
            "description": "filter (issues / pulls) assigned to you, default is false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "created",
            "in": "query",
            "description": "filter (issues / pulls) created by you, default is false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "mentioned",
            "in": "query",
            "description": "filter (issues / pulls) mentioning you, default is false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "review_requested",
            "in": "query",
            "description": "filter pulls requesting your review, default is false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IssueList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/repos/migrate": {
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Migrate a remote git repository",
        "operationId": "repoMigrate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MigrateRepoOptions"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/search": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Search for repositories",
        "operationId": "repoSearch",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "keyword",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic",
            "in": "query",
            "description": "Limit search to repositories with keyword as topic",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeDesc",
            "in": "query",
            "description": "include search of keyword within repository description",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "uid",
            "in": "query",
            "description": "search only for repos that the user with the given id owns or contributes to",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "priority_owner_id",
            "in": "query",
            "description": "repo owner to prioritize in the results",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "description": "search only for repos that belong to the given team id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "starredBy",
            "in": "query",
            "description": "search only for repos that the user with the given id has starred",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "private",
            "in": "query",
            "description": "include private repositories this user has access to (defaults to true)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_private",
            "in": "query",
            "description": "show only pubic, private or all repositories (defaults to all)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "include template repositories this user has access to (defaults to true)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "show only archived, non-archived or all repositories (defaults to all)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "type of repository to search for. Supported values are \"fork\", \"source\", \"mirror\" and \"collaborative\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclusive",
            "in": "query",
            "description": "if `uid` is given, search only for repos that the user owns",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort repos by attribute. Supported values are \"alpha\", \"created\", \"updated\", \"size\", and \"id\". Default is \"alpha\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "sort order, either \"asc\" (ascending) or \"desc\" (descending). Default is \"asc\", ignored if \"sort\" is not specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SearchResults",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResults"
                }
              }
            }
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a repository",
        "operationId": "repoGet",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a repository",
        "operationId": "repoDelete",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "repository"
        ],
        "summary": "Edit a repository's properties. Only fields that are set will be changed.",
        "operationId": "repoEdit",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of a repo that you can edit",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditRepoOption"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/EditRepoOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/archive/{archive}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get an archive of a repository",
        "operationId": "repoGetArchive",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "archive",
            "in": "path",
            "description": "the git reference for download with attached archive format (e.g. master.zip)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/branch_protections": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List branch protections for a repository",
        "operationId": "repoListBranchProtection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BranchProtectionList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BranchProtection"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Create a branch protections for a repository",
        "operationId": "repoCreateBranchProtection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBranchProtectionOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "BranchProtection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchProtection"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/branch_protections/{name}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a specific branch protection for the repository",
        "operationId": "repoGetBranchProtection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "name of protected branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BranchProtection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchProtection"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a specific branch protection for the repository",
        "operationId": "repoDeleteBranchProtection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "name of protected branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "repository"
        ],
        "summary": "Edit a branch protections for a repository. Only fields that are set will be changed",
        "operationId": "repoEditBranchProtection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "name of protected branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditBranchProtectionOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "BranchProtection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchProtection"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/branches": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a repository's branches",
        "operationId": "repoListBranches",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BranchList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Branch"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Create a branch",
        "operationId": "repoCreateBranch",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBranchRepoOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Branch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branch"
                }
              }
            }
          },
          "404": {
            "description": "The old branch does not exist.",
            "content": {}
          },
          "409": {
            "description": "The branch with the same name already exists.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Retrieve a specific branch from a repository, including its effective branch protection",
        "operationId": "repoGetBranch",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "description": "branch to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Branch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branch"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a specific branch from a repository",
        "operationId": "repoDeleteBranch",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "description": "branch to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/collaborators": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a repository's collaborators",
        "operationId": "repoListCollaborators",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/collaborators/{collaborator}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Check if a user is a collaborator of a repository",
        "operationId": "repoCheckCollaborator",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collaborator",
            "in": "path",
            "description": "username of the collaborator",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "repository"
        ],
        "summary": "Add a collaborator to a repository",
        "operationId": "repoAddCollaborator",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collaborator",
            "in": "path",
            "description": "username of the collaborator to add",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCollaboratorOption"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/AddCollaboratorOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a collaborator from a repository",
        "operationId": "repoDeleteCollaborator",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collaborator",
            "in": "path",
            "description": "username of the collaborator to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/commits": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a list of all commits from a repository",
        "operationId": "repoGetAllCommits",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sha",
            "in": "query",
            "description": "SHA or branch to start listing commits from (usually 'master')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CommitList",
            "headers": {
              "X-HasMore": {
                "description": "True if there is another page",
                "schema": {
                  "type": "boolean"
                }
              },
              "X-PageCount": {
                "description": "Total number of pages",
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "X-PerPage": {
                "description": "Commits per page",
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "X-Total": {
                "description": "Total commit count",
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "X-Page": {
                "description": "The current page",
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Commit"
                  }
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "409": {
            "description": "EmptyRepository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/status": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a commit's combined status, by branch/tag/commit reference",
        "operationId": "repoGetCombinedStatusByRef",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ref",
            "in": "path",
            "description": "name of branch/tag/commit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CombinedStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CombinedStatus"
                }
              }
            }
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/statuses": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a commit's statuses, by branch/tag/commit reference",
        "operationId": "repoListStatusesByRef",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ref",
            "in": "path",
            "description": "name of branch/tag/commit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "type of sort",
            "schema": {
              "type": "string",
              "enum": [
                "oldest",
                "recentupdate",
                "leastupdate",
                "leastindex",
                "highestindex"
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "type of state",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "success",
                "error",
                "failure",
                "warning"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CommitStatusList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommitStatus"
                  }
                }
              }
            }
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/contents": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Gets the metadata of all the entries of the root dir",
        "operationId": "repoGetContentsList",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ref",
            "in": "query",
            "description": "The name of the commit/branch/tag. Default the repository’s default branch (usually master)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ContentsListResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentsResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/contents/{filepath}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir",
        "operationId": "repoGetContents",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filepath",
            "in": "path",
            "description": "path of the dir, file, symlink or submodule in the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ref",
            "in": "query",
            "description": "The name of the commit/branch/tag. Default the repository’s default branch (usually master)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ContentsResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentsResponse"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "repository"
        ],
        "summary": "Update a file in a repository",
        "operationId": "repoUpdateFile",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filepath",
            "in": "path",
            "description": "path of the file to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFileOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "FileResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              }
            }
          },
          "403": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "422": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Create a file in a repository",
        "operationId": "repoCreateFile",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filepath",
            "in": "path",
            "description": "path of the file to create",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFileOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "FileResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              }
            }
          },
          "403": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "422": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a file in a repository",
        "operationId": "repoDeleteFile",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filepath",
            "in": "path",
            "description": "path of the file to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteFileOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "FileDeleteResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "403": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/editorconfig/{filepath}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get the EditorConfig definitions of a file in a repository",
        "operationId": "repoGetEditorConfig",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filepath",
            "in": "path",
            "description": "filepath of file to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/forks": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a repository's forks",
        "operationId": "listForks",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RepositoryList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Repository"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Fork a repository",
        "operationId": "createFork",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo to fork",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo to fork",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateForkOption"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/CreateForkOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "202": {
            "description": "Repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/git/blobs/{sha}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Gets the blob of a repository.",
        "operationId": "GetBlob",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sha",
            "in": "path",
            "description": "sha of the commit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GitBlobResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitBlobResponse"
                }
              }
            }
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/commits/{sha}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a single commit from a repository",
        "operationId": "repoGetSingleCommit",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sha",
            "in": "path",
            "description": "a git ref or commit sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Commit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Commit"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/refs": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get specified ref or filtered repository's refs",
        "operationId": "repoListAllGitRefs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ReferenceList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reference"
                  }
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/refs/{ref}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get specified ref or filtered repository's refs",
        "operationId": "repoListGitRefs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ref",
            "in": "path",
            "description": "part or full name of the ref",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ReferenceList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reference"
                  }
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/tags/{sha}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Gets the tag object of an annotated tag (not lightweight tags)",
        "operationId": "GetTag",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sha",
            "in": "path",
            "description": "sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AnnotatedTag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotatedTag"
                }
              }
            }
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/trees/{sha}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Gets the tree of a repository.",
        "operationId": "GetTree",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sha",
            "in": "path",
            "description": "sha of the commit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "show all directories and files",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number; the 'truncated' field in the response will be true if there are still more items after this page, false if the last page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "number of items per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GitTreeResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitTreeResponse"
                }
              }
            }
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/hooks": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List the hooks in a repository",
        "operationId": "repoListHooks",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HookList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hook"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Create a hook",
        "operationId": "repoCreateHook",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHookOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Hook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/hooks/git": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List the Git hooks in a repository",
        "operationId": "repoListGitHooks",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GitHookList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitHook"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/hooks/git/{id}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a Git hook",
        "operationId": "repoGetGitHook",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the hook to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GitHook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitHook"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a Git hook in a repository",
        "operationId": "repoDeleteGitHook",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the hook to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "repository"
        ],
        "summary": "Edit a Git hook in a repository",
        "operationId": "repoEditGitHook",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the hook to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditGitHookOption"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/EditGitHookOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "GitHook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitHook"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/hooks/{id}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a hook",
        "operationId": "repoGetHook",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the hook to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a hook in a repository",
        "operationId": "repoDeleteHook",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the hook to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "repository"
        ],
        "summary": "Edit a hook in a repository",
        "operationId": "repoEditHook",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "index of the hook",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditHookOption"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/EditHookOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Hook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/hooks/{id}/tests": {
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Test a push webhook",
        "operationId": "repoTestHook",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the hook to test",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issue_templates": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get available issue templates for a repository",
        "operationId": "repoGetIssueTemplates",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IssueTemplates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueTemplate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "List a repository's issues",
        "operationId": "issueListIssues",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "whether issue is open or closed",
            "schema": {
              "type": "string",
              "enum": [
                "closed",
                "open",
                "all"
              ]
            }
          },
          {
            "name": "labels",
            "in": "query",
            "description": "comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "search string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "filter by type (issues / pulls) if set",
            "schema": {
              "type": "string",
              "enum": [
                "issues",
                "pulls"
              ]
            }
          },
          {
            "name": "milestones",
            "in": "query",
            "description": "comma separated list of milestone names or ids. It uses names and fall back to ids. Fetch only issues that have any of this milestones. Non existent milestones are discarded",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IssueList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Create an issue. If using deadline only the date will be taken into account, and time of day ignored.",
        "operationId": "issueCreateIssue",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIssueOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Issue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "412": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/issues/comments": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "List all comments in a repository",
        "operationId": "issueGetRepoComments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "if provided, only comments updated since the provided time are returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "if provided, only comments updated before the provided time are returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CommentList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/comments/{id}": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get a comment",
        "operationId": "issueGetComment",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the comment",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Delete a comment",
        "operationId": "issueDeleteComment",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of comment to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "issue"
        ],
        "summary": "Edit a comment",
        "operationId": "issueEditComment",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the comment to edit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditIssueCommentOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/issues/comments/{id}/reactions": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get a list of reactions from a comment of an issue",
        "operationId": "issueGetCommentReactions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the comment to edit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ReactionList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reaction"
                  }
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Add a reaction to a comment of an issue",
        "operationId": "issuePostCommentReaction",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the comment to edit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditReactionOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Reaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reaction"
                }
              }
            }
          },
          "201": {
            "description": "Reaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reaction"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "content"
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Remove a reaction from a comment of an issue",
        "operationId": "issueDeleteCommentReaction",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the comment to edit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditReactionOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "content"
      }
    },
    "/repos/{owner}/{repo}/issues/{index}": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get an issue",
        "operationId": "issueGetIssue",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Issue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "issue"
        ],
        "summary": "Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.",
        "operationId": "issueEditIssue",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue to edit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditIssueOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Issue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "412": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/comments": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "List all comments on an issue",
        "operationId": "issueGetComments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "if provided, only comments updated since the specified time are returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "if provided, only comments updated before the provided time are returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CommentList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Add a comment to an issue",
        "operationId": "issueCreateComment",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIssueCommentOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/comments/{id}": {
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Delete a comment",
        "operationId": "issueDeleteCommentDeprecated",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "this parameter is ignored",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of comment to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": [
          "issue"
        ],
        "summary": "Edit a comment",
        "operationId": "issueEditCommentDeprecated",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "this parameter is ignored",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the comment to edit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditIssueCommentOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        },
        "deprecated": true,
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/deadline": {
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.",
        "operationId": "issueEditIssueDeadline",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue to create or update a deadline on",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditDeadlineOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "IssueDeadline",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueDeadline"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/labels": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get an issue's labels",
        "operationId": "issueGetLabels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LabelList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Label"
                  }
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "issue"
        ],
        "summary": "Replace an issue's labels",
        "operationId": "issueReplaceLabels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueLabelsOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "LabelList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Label"
                  }
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Add a label to an issue",
        "operationId": "issueAddLabel",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueLabelsOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "LabelList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Label"
                  }
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Remove all labels from an issue",
        "operationId": "issueClearLabels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/labels/{id}": {
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Remove a label from an issue",
        "operationId": "issueRemoveLabel",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the label to remove",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/reactions": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get a list reactions of an issue",
        "operationId": "issueGetIssueReactions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ReactionList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reaction"
                  }
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Add a reaction to an issue",
        "operationId": "issuePostIssueReaction",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditReactionOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Reaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reaction"
                }
              }
            }
          },
          "201": {
            "description": "Reaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reaction"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "content"
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Remove a reaction from an issue",
        "operationId": "issueDeleteIssueReaction",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditReactionOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "content"
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/stopwatch/delete": {
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Delete an issue's existing stopwatch.",
        "operationId": "issueDeleteStopWatch",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue to stop the stopwatch on",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "Not repo writer, user does not have rights to toggle stopwatch",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "409": {
            "description": "Cannot cancel a non existent stopwatch",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/stopwatch/start": {
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Start stopwatch on an issue.",
        "operationId": "issueStartStopWatch",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue to create the stopwatch on",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "Not repo writer, user does not have rights to toggle stopwatch",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "409": {
            "description": "Cannot start a stopwatch again if it already exists",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/stopwatch/stop": {
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Stop an issue's existing stopwatch.",
        "operationId": "issueStopStopWatch",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue to stop the stopwatch on",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "Not repo writer, user does not have rights to toggle stopwatch",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "409": {
            "description": "Cannot stop a non existent stopwatch",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/subscriptions": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get users who subscribed on an issue.",
        "operationId": "issueSubscriptions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/subscriptions/check": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Check if user is subscribed to an issue",
        "operationId": "issueCheckSubscription",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WatchInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchInfo"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}": {
      "put": {
        "tags": [
          "issue"
        ],
        "summary": "Subscribe user to issue",
        "operationId": "issueAddSubscription",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "user",
            "in": "path",
            "description": "user to subscribe",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Already subscribed",
            "content": {}
          },
          "201": {
            "description": "Successfully Subscribed",
            "content": {}
          },
          "304": {
            "description": "User can only subscribe itself if he is no admin",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Unsubscribe user from issue",
        "operationId": "issueDeleteSubscription",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "user",
            "in": "path",
            "description": "user witch unsubscribe",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Already unsubscribed",
            "content": {}
          },
          "201": {
            "description": "Successfully Unsubscribed",
            "content": {}
          },
          "304": {
            "description": "User can only subscribe itself if he is no admin",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/times": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "List an issue's tracked times",
        "operationId": "issueTrackedTimes",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "optional filter by user (available for issue managers)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Only show times updated after the given time. This is a timestamp in RFC 3339 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Only show times updated before the given time. This is a timestamp in RFC 3339 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TrackedTimeList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrackedTime"
                  }
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Add tracked time to a issue",
        "operationId": "issueAddTime",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTimeOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "TrackedTime",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackedTime"
                }
              }
            }
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Reset a tracked time of an issue",
        "operationId": "issueResetTime",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue to add tracked time to",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/times/{id}": {
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Delete specific tracked time",
        "operationId": "issueDeleteTime",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the issue",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of time to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/keys": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a repository's keys",
        "operationId": "repoListKeys",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key_id",
            "in": "query",
            "description": "the key_id to search for",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "description": "fingerprint of the key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DeployKeyList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployKey"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Add a key to a repository",
        "operationId": "repoCreateKey",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "DeployKey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployKey"
                }
              }
            }
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/keys/{id}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a repository's key by id",
        "operationId": "repoGetKey",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the key to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DeployKey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployKey"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a key from a repository",
        "operationId": "repoDeleteKey",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the key to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/labels": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get all of a repository's labels",
        "operationId": "issueListLabels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LabelList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Label"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Create a label",
        "operationId": "issueCreateLabel",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLabelOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Label",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/labels/{id}": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get a single label",
        "operationId": "issueGetLabel",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the label to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Label",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Delete a label",
        "operationId": "issueDeleteLabel",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the label to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "issue"
        ],
        "summary": "Update a label",
        "operationId": "issueEditLabel",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the label to edit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditLabelOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Label",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/languages": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get languages and number of bytes of code written",
        "operationId": "repoGetLanguages",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LanguageStatistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/milestones": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get all of a repository's opened milestones",
        "operationId": "issueGetMilestonesList",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Milestone state, Recognised values are open, closed and all. Defaults to \"open\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "filter by milestone name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MilestoneList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Milestone"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Create a milestone",
        "operationId": "issueCreateMilestone",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMilestoneOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Milestone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Milestone"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/milestones/{id}": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get a milestone",
        "operationId": "issueGetMilestone",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "the milestone to get, identified by ID and if not available by name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Milestone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Milestone"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Delete a milestone",
        "operationId": "issueDeleteMilestone",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "the milestone to delete, identified by ID and if not available by name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "issue"
        ],
        "summary": "Update a milestone",
        "operationId": "issueEditMilestone",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "the milestone to edit, identified by ID and if not available by name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditMilestoneOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Milestone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Milestone"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/mirror-sync": {
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Sync a mirrored repository",
        "operationId": "repoMirrorSync",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo to sync",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo to sync",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/notifications": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "List users's notification threads on a specific repo",
        "operationId": "notifyGetRepoList",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "all",
            "in": "query",
            "description": "If true, show notifications marked as read. Default value is false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status-types",
            "in": "query",
            "description": "Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread & pinned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Only show notifications updated after the given time. This is a timestamp in RFC 3339 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Only show notifications updated before the given time. This is a timestamp in RFC 3339 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "NotificationThreadList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationThread"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "notification"
        ],
        "summary": "Mark notification threads as read, pinned or unread on a specific repo",
        "operationId": "notifyReadRepoList",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "all",
            "in": "query",
            "description": "If true, mark all notifications on this repo. Default value is false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status-types",
            "in": "query",
            "description": "Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "to-status",
            "in": "query",
            "description": "Status to mark notifications as. Defaults to read.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "last_read_at",
            "in": "query",
            "description": "Describes the last point that notifications were checked. Anything updated since this time will not be updated.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "205": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a repo's pull requests",
        "operationId": "repoListPullRequests",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "State of pull request: open or closed (optional)",
            "schema": {
              "type": "string",
              "enum": [
                "closed",
                "open",
                "all"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Type of sort",
            "schema": {
              "type": "string",
              "enum": [
                "oldest",
                "recentupdate",
                "leastupdate",
                "mostcomment",
                "leastcomment",
                "priority"
              ]
            }
          },
          {
            "name": "milestone",
            "in": "query",
            "description": "ID of the milestone",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Label IDs",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PullRequestList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PullRequest"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Create a pull request",
        "operationId": "repoCreatePullRequest",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePullRequestOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "PullRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullRequest"
                }
              }
            }
          },
          "409": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a pull request",
        "operationId": "repoGetPullRequest",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PullRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullRequest"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "repository"
        ],
        "summary": "Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.",
        "operationId": "repoEditPullRequest",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request to edit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPullRequestOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "PullRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullRequest"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "409": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "412": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}.diff": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a pull request diff",
        "operationId": "repoDownloadPullDiff",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "APIString is a string response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}.patch": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a pull request patch file",
        "operationId": "repoDownloadPullPatch",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "APIString is a string response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}/merge": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Check if a pull request has been merged",
        "operationId": "repoPullRequestIsMerged",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "pull request has been merged",
            "content": {}
          },
          "404": {
            "description": "pull request has not been merged",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Merge a pull request",
        "operationId": "repoMergePullRequest",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request to merge",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergePullRequestOption"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/MergePullRequestOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "405": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "409": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}/requested_reviewers": {
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "create review requests for a pull request",
        "operationId": "repoCreatePullReviewRequests",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PullReviewRequestOptions"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/PullReviewRequestOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "PullReviewList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PullReview"
                  }
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "cancel review requests for a pull request",
        "operationId": "repoDeletePullReviewRequests",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PullReviewRequestOptions"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/PullReviewRequestOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}/reviews": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List all reviews for a pull request",
        "operationId": "repoListPullReviews",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PullReviewList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PullReview"
                  }
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Create a review to an pull request",
        "operationId": "repoCreatePullReview",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePullReviewOptions"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/CreatePullReviewOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PullReview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullReview"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a specific review for a pull request",
        "operationId": "repoGetPullReview",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the review",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PullReview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullReview"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Submit a pending review to an pull request",
        "operationId": "repoSubmitPullReview",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the review",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitPullReviewOptions"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/SubmitPullReviewOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PullReview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullReview"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a specific review from a pull request",
        "operationId": "repoDeletePullReview",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the review",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/comments": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a specific review for a pull request",
        "operationId": "repoGetPullReviewComments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the review",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PullCommentList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PullReviewComment"
                  }
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/dismissals": {
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Dismiss a review for a pull request",
        "operationId": "repoDismissPullReview",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the review",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DismissPullReviewOptions"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DismissPullReviewOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PullReview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullReview"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/undismissals": {
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Cancel to dismiss a review for a pull request",
        "operationId": "repoUnDismissPullReview",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the review",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PullReview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullReview"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}/update": {
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Merge PR's baseBranch into headBranch",
        "operationId": "repoUpdatePullRequest",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "index of the pull request to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "409": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/raw/{filepath}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a file from a repository",
        "operationId": "repoGetRawFile",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filepath",
            "in": "path",
            "description": "filepath of the file to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ref",
            "in": "query",
            "description": "The name of the commit/branch/tag. Default the repository’s default branch (usually master)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a repo's releases",
        "operationId": "repoListReleases",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "page size of results, deprecated - use limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Release"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Create a release",
        "operationId": "repoCreateRelease",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReleaseOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Release",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Release"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "409": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/releases/tags/{tag}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a release by tag name",
        "operationId": "repoGetReleaseByTag",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "path",
            "description": "tag name of the release to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Release",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Release"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a release by tag name",
        "operationId": "repoDeleteReleaseByTag",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "path",
            "description": "tag name of the release to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases/{id}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a release",
        "operationId": "repoGetRelease",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the release to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Release",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Release"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a release",
        "operationId": "repoDeleteRelease",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the release to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "repository"
        ],
        "summary": "Update a release",
        "operationId": "repoEditRelease",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the release to edit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditReleaseOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Release",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Release"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/releases/{id}/assets": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List release's attachments",
        "operationId": "repoListReleaseAttachments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the release",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AttachmentList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Create a release attachment",
        "operationId": "repoCreateReleaseAttachment",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the release",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "name of the attachment",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "attachment"
                ],
                "properties": {
                  "attachment": {
                    "type": "string",
                    "description": "attachment to upload",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Attachment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a release attachment",
        "operationId": "repoGetReleaseAttachment",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the release",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "id of the attachment to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attachment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a release attachment",
        "operationId": "repoDeleteReleaseAttachment",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the release",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "id of the attachment to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "repository"
        ],
        "summary": "Edit a release attachment",
        "operationId": "repoEditReleaseAttachment",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the release",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "id of the attachment to edit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditAttachmentOptions"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Attachment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/signing-key.gpg": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get signing-key.gpg for given repository",
        "operationId": "repoSigningKey",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GPG armored public key",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/stargazers": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a repo's stargazers",
        "operationId": "repoListStargazers",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/statuses/{sha}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a commit's statuses",
        "operationId": "repoListStatuses",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sha",
            "in": "path",
            "description": "sha of the commit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "type of sort",
            "schema": {
              "type": "string",
              "enum": [
                "oldest",
                "recentupdate",
                "leastupdate",
                "leastindex",
                "highestindex"
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "type of state",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "success",
                "error",
                "failure",
                "warning"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CommitStatusList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommitStatus"
                  }
                }
              }
            }
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Create a commit status",
        "operationId": "repoCreateStatus",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sha",
            "in": "path",
            "description": "sha of the commit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStatusOption"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/CreateStatusOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CommitStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitStatus"
                }
              }
            }
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/subscribers": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a repo's watchers",
        "operationId": "repoListSubscribers",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/subscription": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Check if the current user is watching a repo",
        "operationId": "userCurrentCheckSubscription",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WatchInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchInfo"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/WatchInfo"
                }
              }
            }
          },
          "404": {
            "description": "User is not watching this repo or repo do not exist",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "repository"
        ],
        "summary": "Watch a repo",
        "operationId": "userCurrentPutSubscription",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WatchInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchInfo"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/WatchInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Unwatch a repo",
        "operationId": "userCurrentDeleteSubscription",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/tags": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a repository's tags",
        "operationId": "repoListTags",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results, default maximum page size is 50",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TagList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/tags/{tag}": {
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a repository's tag by name",
        "operationId": "repoDeleteTag",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "path",
            "description": "name of tag to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "409": {
            "description": "APIConflict is a conflict empty response",
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/teams": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a repository's teams",
        "operationId": "repoListTeams",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TeamList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/teams/{team}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Check if a team is assigned to a repository",
        "operationId": "repoCheckTeam",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "path",
            "description": "team name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "405": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "repository"
        ],
        "summary": "Add a team to a repository",
        "operationId": "repoAddTeam",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "path",
            "description": "team name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "405": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a team from a repository",
        "operationId": "repoDeleteTeam",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "path",
            "description": "team name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "405": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/times": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a repo's tracked times",
        "operationId": "repoTrackedTimes",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "optional filter by user (available for issue managers)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Only show times updated after the given time. This is a timestamp in RFC 3339 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Only show times updated before the given time. This is a timestamp in RFC 3339 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TrackedTimeList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrackedTime"
                  }
                }
              }
            }
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/times/{user}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a user's tracked times in a repo",
        "operationId": "userTrackedTimes",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "path",
            "description": "username of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TrackedTimeList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrackedTime"
                  }
                }
              }
            }
          },
          "400": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/repos/{owner}/{repo}/topics": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get list of topics that a repository has",
        "operationId": "repoListTopics",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TopicNames",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicName"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "repository"
        ],
        "summary": "Replace list of topics for a repository",
        "operationId": "repoUpdateTopics",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepoTopicOptions"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/RepoTopicOptions"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "422": {
            "description": "APIInvalidTopicsError is error format response to invalid topics",
            "headers": {
              "invalidTopics": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "message": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repos/{owner}/{repo}/topics/{topic}": {
      "put": {
        "tags": [
          "repository"
        ],
        "summary": "Add a topic to a repository",
        "operationId": "repoAddTopíc",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic",
            "in": "path",
            "description": "name of the topic to add",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "422": {
            "description": "APIInvalidTopicsError is error format response to invalid topics",
            "headers": {
              "invalidTopics": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "message": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a topic from a repository",
        "operationId": "repoDeleteTopic",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic",
            "in": "path",
            "description": "name of the topic to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "422": {
            "description": "APIInvalidTopicsError is error format response to invalid topics",
            "headers": {
              "invalidTopics": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "message": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/repos/{owner}/{repo}/transfer": {
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Transfer a repo ownership",
        "operationId": "repoTransfer",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo to transfer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo to transfer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Transfer Options",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRepoOption"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/TransferRepoOption"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repositories/{id}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a repository by id",
        "operationId": "repoGetByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the repo to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          }
        }
      }
    },
    "/settings/api": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get instance's global settings for api",
        "operationId": "getGeneralAPISettings",
        "responses": {
          "200": {
            "description": "GeneralAPISettings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralAPISettings"
                }
              }
            }
          }
        }
      }
    },
    "/settings/attachment": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get instance's global settings for Attachment",
        "operationId": "getGeneralAttachmentSettings",
        "responses": {
          "200": {
            "description": "GeneralAttachmentSettings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralAttachmentSettings"
                }
              }
            }
          }
        }
      }
    },
    "/settings/repository": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get instance's global settings for repositories",
        "operationId": "getGeneralRepositorySettings",
        "responses": {
          "200": {
            "description": "GeneralRepoSettings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralRepoSettings"
                }
              }
            }
          }
        }
      }
    },
    "/settings/ui": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get instance's global settings for ui",
        "operationId": "getGeneralUISettings",
        "responses": {
          "200": {
            "description": "GeneralUISettings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralUISettings"
                }
              }
            }
          }
        }
      }
    },
    "/signing-key.gpg": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Get default signing-key.gpg",
        "operationId": "getSigningKey",
        "responses": {
          "200": {
            "description": "GPG armored public key",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get a team",
        "operationId": "orgGetTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the team to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "organization"
        ],
        "summary": "Delete a team",
        "operationId": "orgDeleteTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the team to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "team deleted",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "organization"
        ],
        "summary": "Edit a team",
        "operationId": "orgEditTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the team to edit",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditTeamOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/teams/{id}/members": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "List a team's members",
        "operationId": "orgListTeamMembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the team",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/teams/{id}/members/{username}": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "List a particular member of team",
        "operationId": "orgListTeamMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the team",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "username",
            "in": "path",
            "description": "username of the member to list",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "organization"
        ],
        "summary": "Add a team member",
        "operationId": "orgAddTeamMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the team",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "username",
            "in": "path",
            "description": "username of the user to add",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "organization"
        ],
        "summary": "Remove a team member",
        "operationId": "orgRemoveTeamMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the team",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "username",
            "in": "path",
            "description": "username of the user to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/teams/{id}/repos": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "List a team's repos",
        "operationId": "orgListTeamRepos",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the team",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RepositoryList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Repository"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/teams/{id}/repos/{org}/{repo}": {
      "put": {
        "tags": [
          "organization"
        ],
        "summary": "Add a repository to a team",
        "operationId": "orgAddTeamRepository",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the team",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "org",
            "in": "path",
            "description": "organization that owns the repo to add",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo to add",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "organization"
        ],
        "summary": "Remove a repository from a team",
        "description": "This does not delete the repository, it only removes the repository from the team.",
        "operationId": "orgRemoveTeamRepository",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the team",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "org",
            "in": "path",
            "description": "organization that owns the repo to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/topics/search": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "search topics via keyword",
        "operationId": "topicSearch",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "keywords to search",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TopicListResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopicResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the authenticated user",
        "operationId": "userGetCurrent",
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/user/applications/oauth2": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the authenticated user's oauth2 applications",
        "operationId": "userGetOauth2Application",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth2ApplicationList represents a list of OAuth2 applications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuth2Application"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "creates a new OAuth2 application",
        "operationId": "userCreateOAuth2Application",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOAuth2ApplicationOptions"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/CreateOAuth2ApplicationOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OAuth2Application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Application"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user/applications/oauth2/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "get an OAuth2 Application",
        "operationId": "userGetOAuth2Application",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID to be found",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth2Application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Application"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "delete an OAuth2 Application",
        "operationId": "userDeleteOAuth2Application",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "token to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "update an OAuth2 Application, this includes regenerating the client secret",
        "operationId": "userUpdateOAuth2Application",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "application to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOAuth2ApplicationOptions"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/CreateOAuth2ApplicationOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OAuth2Application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Application"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user/emails": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the authenticated user's email addresses",
        "operationId": "userListEmails",
        "responses": {
          "200": {
            "description": "EmailList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Email"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add email addresses",
        "operationId": "userAddEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailOption"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "EmailList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Email"
                  }
                }
              }
            }
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete email addresses",
        "operationId": "userDeleteEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteEmailOption"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DeleteEmailOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user/followers": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the authenticated user's followers",
        "operationId": "userCurrentListFollowers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/following": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the users that the authenticated user is following",
        "operationId": "userCurrentListFollowing",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/following/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Check whether a user is followed by the authenticated user",
        "operationId": "userCurrentCheckFollowing",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of followed user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Follow a user",
        "operationId": "userCurrentPutFollow",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user to follow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Unfollow a user",
        "operationId": "userCurrentDeleteFollow",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user to unfollow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      }
    },
    "/user/gpg_keys": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the authenticated user's GPG keys",
        "operationId": "userCurrentListGPGKeys",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GPGKeyList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GPGKey"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a GPG key",
        "operationId": "userCurrentPostGPGKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGPGKeyOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "GPGKey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GPGKey"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Form"
      }
    },
    "/user/gpg_keys/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a GPG key",
        "operationId": "userCurrentGetGPGKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of key to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GPGKey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GPGKey"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Remove a GPG key",
        "operationId": "userCurrentDeleteGPGKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of key to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/user/keys": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the authenticated user's public keys",
        "operationId": "userCurrentListKeys",
        "parameters": [
          {
            "name": "fingerprint",
            "in": "query",
            "description": "fingerprint of the key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PublicKeyList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a public key",
        "operationId": "userCurrentPostKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "PublicKey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicKey"
                }
              }
            }
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user/keys/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a public key",
        "operationId": "userCurrentGetKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of key to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PublicKey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicKey"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a public key",
        "operationId": "userCurrentDeleteKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of key to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "403": {
            "description": "APIForbiddenError is a forbidden error response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/user/orgs": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "List the current user's organizations",
        "operationId": "orgListCurrentUserOrgs",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OrganizationList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/repos": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the repos that the authenticated user owns or has access to",
        "operationId": "userCurrentListRepos",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RepositoryList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Repository"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "repository",
          "user"
        ],
        "summary": "Create a repository",
        "operationId": "createCurrentUserRepo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRepoOption"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "409": {
            "description": "The repository with the same name already exists.",
            "content": {}
          },
          "422": {
            "description": "APIValidationError is error format response related to input validation",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user/starred": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "The repos that the authenticated user has starred",
        "operationId": "userCurrentListStarred",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RepositoryList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Repository"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/starred/{owner}/{repo}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Whether the authenticated is starring the repo",
        "operationId": "userCurrentCheckStarring",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Star the given repo",
        "operationId": "userCurrentPutStar",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo to star",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo to star",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Unstar the given repo",
        "operationId": "userCurrentDeleteStar",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner of the repo to unstar",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "description": "name of the repo to unstar",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          }
        }
      }
    },
    "/user/stopwatches": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get list of all existing stopwatches",
        "operationId": "userGetStopWatches",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "StopWatchList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StopWatch"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/subscriptions": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List repositories watched by the authenticated user",
        "operationId": "userCurrentListSubscriptions",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RepositoryList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Repository"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/teams": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List all the teams a user belongs to",
        "operationId": "userListTeams",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TeamList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/times": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the current user's tracked times",
        "operationId": "userCurrentTrackedTimes",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Only show times updated after the given time. This is a timestamp in RFC 3339 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Only show times updated before the given time. This is a timestamp in RFC 3339 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TrackedTimeList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrackedTime"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/search": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Search for users",
        "operationId": "userSearch",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "keyword",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uid",
            "in": "query",
            "description": "ID of the user to search for",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SearchResults of a successful search",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "ok": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{follower}/following/{followee}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Check if one user is following another user",
        "operationId": "userCheckFollowing",
        "parameters": [
          {
            "name": "follower",
            "in": "path",
            "description": "username of following user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "followee",
            "in": "path",
            "description": "username of followed user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/users/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a user",
        "operationId": "userGet",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/users/{username}/followers": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the given user's followers",
        "operationId": "userListFollowers",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{username}/following": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the users that the given user is following",
        "operationId": "userListFollowing",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{username}/gpg_keys": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the given user's GPG keys",
        "operationId": "userListGPGKeys",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GPGKeyList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GPGKey"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{username}/heatmap": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a user's heatmap",
        "operationId": "userGetHeatmapData",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserHeatmapData",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserHeatmapData"
                  }
                }
              }
            }
          },
          "404": {
            "description": "APINotFound is a not found empty response",
            "content": {}
          }
        }
      }
    },
    "/users/{username}/keys": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the given user's public keys",
        "operationId": "userListKeys",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "description": "fingerprint of the key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PublicKeyList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{username}/orgs": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "List a user's organizations",
        "operationId": "orgListUserOrgs",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OrganizationList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{username}/repos": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the repos owned by the given user",
        "operationId": "userListRepos",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RepositoryList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Repository"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{username}/starred": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "The repos that the given user has starred",
        "operationId": "userListStarred",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RepositoryList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Repository"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{username}/subscriptions": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the repositories watched by a user",
        "operationId": "userListSubscriptions",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RepositoryList",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Repository"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{username}/tokens": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List the authenticated user's access tokens",
        "operationId": "userGetTokens",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number of results to return (1-based)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AccessTokenList represents a list of API access token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessToken"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create an access token",
        "operationId": "userCreateToken",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Name"
            },
            "x-go-name": "Name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "AccessToken represents an API access token.",
            "headers": {
              "sha1": {
                "schema": {
                  "type": "string"
                }
              },
              "name": {
                "schema": {
                  "type": "string"
                }
              },
              "token_last_eight": {
                "schema": {
                  "type": "string"
                }
              },
              "id": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "content": {}
          }
        },
        "x-codegen-request-body-name": "accessToken"
      }
    },
    "/users/{username}/tokens/{token}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "delete an access token",
        "operationId": "userDeleteAccessToken",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "path",
            "description": "token to be deleted, identified by ID and if not available by name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIEmpty is an empty response",
            "content": {}
          },
          "422": {
            "description": "APIError is error format response",
            "headers": {
              "message": {
                "schema": {
                  "type": "string"
                }
              },
              "url": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Returns the version of the Gitea application",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "ServerVersion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerVersion"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "description": "APIError is an api error with a message",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "AccessToken": {
        "title": "AccessToken represents an API access token.",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "sha1": {
            "type": "string",
            "x-go-name": "Token"
          },
          "token_last_eight": {
            "type": "string",
            "x-go-name": "TokenLastEight"
          }
        },
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "AddCollaboratorOption": {
        "type": "object",
        "properties": {
          "permission": {
            "type": "string",
            "x-go-name": "Permission"
          }
        },
        "description": "AddCollaboratorOption options when adding a user as a collaborator of a repository",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "AddTimeOption": {
        "required": [
          "time"
        ],
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "time": {
            "type": "integer",
            "description": "time in seconds",
            "format": "int64",
            "x-go-name": "Time"
          },
          "user_name": {
            "type": "string",
            "description": "User who spent the time (optional)",
            "x-go-name": "User"
          }
        },
        "description": "AddTimeOption options for adding time to an issue",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "AnnotatedTag": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "object": {
            "$ref": "#/components/schemas/AnnotatedTagObject"
          },
          "sha": {
            "type": "string",
            "x-go-name": "SHA"
          },
          "tag": {
            "type": "string",
            "x-go-name": "Tag"
          },
          "tagger": {
            "$ref": "#/components/schemas/CommitUser"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          },
          "verification": {
            "$ref": "#/components/schemas/PayloadCommitVerification"
          }
        },
        "description": "AnnotatedTag represents an annotated tag",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "AnnotatedTagObject": {
        "type": "object",
        "properties": {
          "sha": {
            "type": "string",
            "x-go-name": "SHA"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "description": "AnnotatedTagObject contains meta information of the tag object",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "browser_download_url": {
            "type": "string",
            "x-go-name": "DownloadURL"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "download_count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "DownloadCount"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Size"
          },
          "uuid": {
            "type": "string",
            "x-go-name": "UUID"
          }
        },
        "description": "Attachment a generic attachment",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Branch": {
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/PayloadCommit"
          },
          "effective_branch_protection_name": {
            "type": "string",
            "x-go-name": "EffectiveBranchProtectionName"
          },
          "enable_status_check": {
            "type": "boolean",
            "x-go-name": "EnableStatusCheck"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "protected": {
            "type": "boolean",
            "x-go-name": "Protected"
          },
          "required_approvals": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RequiredApprovals"
          },
          "status_check_contexts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "StatusCheckContexts"
          },
          "user_can_merge": {
            "type": "boolean",
            "x-go-name": "UserCanMerge"
          },
          "user_can_push": {
            "type": "boolean",
            "x-go-name": "UserCanPush"
          }
        },
        "description": "Branch represents a repository branch",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "BranchProtection": {
        "type": "object",
        "properties": {
          "approvals_whitelist_teams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "ApprovalsWhitelistTeams"
          },
          "approvals_whitelist_username": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "ApprovalsWhitelistUsernames"
          },
          "block_on_official_review_requests": {
            "type": "boolean",
            "x-go-name": "BlockOnOfficialReviewRequests"
          },
          "block_on_outdated_branch": {
            "type": "boolean",
            "x-go-name": "BlockOnOutdatedBranch"
          },
          "block_on_rejected_reviews": {
            "type": "boolean",
            "x-go-name": "BlockOnRejectedReviews"
          },
          "branch_name": {
            "type": "string",
            "x-go-name": "BranchName"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "dismiss_stale_approvals": {
            "type": "boolean",
            "x-go-name": "DismissStaleApprovals"
          },
          "enable_approvals_whitelist": {
            "type": "boolean",
            "x-go-name": "EnableApprovalsWhitelist"
          },
          "enable_merge_whitelist": {
            "type": "boolean",
            "x-go-name": "EnableMergeWhitelist"
          },
          "enable_push": {
            "type": "boolean",
            "x-go-name": "EnablePush"
          },
          "enable_push_whitelist": {
            "type": "boolean",
            "x-go-name": "EnablePushWhitelist"
          },
          "enable_status_check": {
            "type": "boolean",
            "x-go-name": "EnableStatusCheck"
          },
          "merge_whitelist_teams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "MergeWhitelistTeams"
          },
          "merge_whitelist_usernames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "MergeWhitelistUsernames"
          },
          "protected_file_patterns": {
            "type": "string",
            "x-go-name": "ProtectedFilePatterns"
          },
          "push_whitelist_deploy_keys": {
            "type": "boolean",
            "x-go-name": "PushWhitelistDeployKeys"
          },
          "push_whitelist_teams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "PushWhitelistTeams"
          },
          "push_whitelist_usernames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "PushWhitelistUsernames"
          },
          "require_signed_commits": {
            "type": "boolean",
            "x-go-name": "RequireSignedCommits"
          },
          "required_approvals": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RequiredApprovals"
          },
          "status_check_contexts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "StatusCheckContexts"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        },
        "description": "BranchProtection represents a branch protection for a repository",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CombinedStatus": {
        "type": "object",
        "properties": {
          "commit_url": {
            "type": "string",
            "x-go-name": "CommitURL"
          },
          "repository": {
            "$ref": "#/components/schemas/Repository"
          },
          "sha": {
            "type": "string",
            "x-go-name": "SHA"
          },
          "state": {
            "$ref": "#/components/schemas/CommitStatusState"
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitStatus"
            },
            "x-go-name": "Statuses"
          },
          "total_count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "TotalCount"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "description": "CombinedStatus holds the combined state of several statuses for a single commit",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Comment": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "x-go-name": "Body"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "html_url": {
            "type": "string",
            "x-go-name": "HTMLURL"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "issue_url": {
            "type": "string",
            "x-go-name": "IssueURL"
          },
          "original_author": {
            "type": "string",
            "x-go-name": "OriginalAuthor"
          },
          "original_author_id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "OriginalAuthorID"
          },
          "pull_request_url": {
            "type": "string",
            "x-go-name": "PRURL"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "description": "Comment represents a comment on a commit or issue",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Commit": {
        "title": "Commit contains information generated from a Git commit.",
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/User"
          },
          "commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "committer": {
            "$ref": "#/components/schemas/User"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitAffectedFiles"
            },
            "x-go-name": "Files"
          },
          "html_url": {
            "type": "string",
            "x-go-name": "HTMLURL"
          },
          "parents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitMeta"
            },
            "x-go-name": "Parents"
          },
          "sha": {
            "type": "string",
            "x-go-name": "SHA"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CommitAffectedFiles": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "x-go-name": "Filename"
          }
        },
        "description": "CommitAffectedFiles store information about files affected by the commit",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CommitDateOptions": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Author"
          },
          "committer": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Committer"
          }
        },
        "description": "CommitDateOptions store dates for GIT_AUTHOR_DATE and GIT_COMMITTER_DATE",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CommitMeta": {
        "title": "CommitMeta contains meta information of a commit in terms of API.",
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "sha": {
            "type": "string",
            "x-go-name": "SHA"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CommitStatus": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "x-go-name": "Context"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "creator": {
            "$ref": "#/components/schemas/User"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "status": {
            "$ref": "#/components/schemas/CommitStatusState"
          },
          "target_url": {
            "type": "string",
            "x-go-name": "TargetURL"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "description": "CommitStatus holds a single status of a single Commit",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CommitStatusState": {
        "type": "string",
        "description": "CommitStatusState holds the state of a CommitStatus\nIt can be \"pending\", \"success\", \"error\", \"failure\", and \"warning\"",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CommitUser": {
        "title": "CommitUser contains information of a user in the context of a commit.",
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "x-go-name": "Date"
          },
          "email": {
            "type": "string",
            "format": "email",
            "x-go-name": "Email"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        },
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "ContentsResponse": {
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/FileLinksResponse"
          },
          "content": {
            "type": "string",
            "description": "`content` is populated when `type` is `file`, otherwise null",
            "x-go-name": "Content"
          },
          "download_url": {
            "type": "string",
            "x-go-name": "DownloadURL"
          },
          "encoding": {
            "type": "string",
            "description": "`encoding` is populated when `type` is `file`, otherwise null",
            "x-go-name": "Encoding"
          },
          "git_url": {
            "type": "string",
            "x-go-name": "GitURL"
          },
          "html_url": {
            "type": "string",
            "x-go-name": "HTMLURL"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "path": {
            "type": "string",
            "x-go-name": "Path"
          },
          "sha": {
            "type": "string",
            "x-go-name": "SHA"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Size"
          },
          "submodule_git_url": {
            "type": "string",
            "description": "`submodule_git_url` is populated when `type` is `submodule`, otherwise null",
            "x-go-name": "SubmoduleGitURL"
          },
          "target": {
            "type": "string",
            "description": "`target` is populated when `type` is `symlink`, otherwise null",
            "x-go-name": "Target"
          },
          "type": {
            "type": "string",
            "description": "`type` will be `file`, `dir`, `symlink`, or `submodule`",
            "x-go-name": "Type"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "description": "ContentsResponse contains information about a repo's entry's (dir, file, symlink, submodule) metadata and content",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateBranchProtectionOption": {
        "type": "object",
        "properties": {
          "approvals_whitelist_teams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "ApprovalsWhitelistTeams"
          },
          "approvals_whitelist_username": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "ApprovalsWhitelistUsernames"
          },
          "block_on_official_review_requests": {
            "type": "boolean",
            "x-go-name": "BlockOnOfficialReviewRequests"
          },
          "block_on_outdated_branch": {
            "type": "boolean",
            "x-go-name": "BlockOnOutdatedBranch"
          },
          "block_on_rejected_reviews": {
            "type": "boolean",
            "x-go-name": "BlockOnRejectedReviews"
          },
          "branch_name": {
            "type": "string",
            "x-go-name": "BranchName"
          },
          "dismiss_stale_approvals": {
            "type": "boolean",
            "x-go-name": "DismissStaleApprovals"
          },
          "enable_approvals_whitelist": {
            "type": "boolean",
            "x-go-name": "EnableApprovalsWhitelist"
          },
          "enable_merge_whitelist": {
            "type": "boolean",
            "x-go-name": "EnableMergeWhitelist"
          },
          "enable_push": {
            "type": "boolean",
            "x-go-name": "EnablePush"
          },
          "enable_push_whitelist": {
            "type": "boolean",
            "x-go-name": "EnablePushWhitelist"
          },
          "enable_status_check": {
            "type": "boolean",
            "x-go-name": "EnableStatusCheck"
          },
          "merge_whitelist_teams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "MergeWhitelistTeams"
          },
          "merge_whitelist_usernames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "MergeWhitelistUsernames"
          },
          "protected_file_patterns": {
            "type": "string",
            "x-go-name": "ProtectedFilePatterns"
          },
          "push_whitelist_deploy_keys": {
            "type": "boolean",
            "x-go-name": "PushWhitelistDeployKeys"
          },
          "push_whitelist_teams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "PushWhitelistTeams"
          },
          "push_whitelist_usernames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "PushWhitelistUsernames"
          },
          "require_signed_commits": {
            "type": "boolean",
            "x-go-name": "RequireSignedCommits"
          },
          "required_approvals": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RequiredApprovals"
          },
          "status_check_contexts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "StatusCheckContexts"
          }
        },
        "description": "CreateBranchProtectionOption options for creating a branch protection",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateBranchRepoOption": {
        "required": [
          "new_branch_name"
        ],
        "type": "object",
        "properties": {
          "new_branch_name": {
            "type": "string",
            "description": "Name of the branch to create",
            "x-go-name": "BranchName"
          },
          "old_branch_name": {
            "type": "string",
            "description": "Name of the old branch to create from",
            "x-go-name": "OldBranchName"
          }
        },
        "description": "CreateBranchRepoOption options when creating a branch in a repository",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateEmailOption": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "description": "email addresses to add",
            "items": {
              "type": "string"
            },
            "x-go-name": "Emails"
          }
        },
        "description": "CreateEmailOption options when creating email addresses",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateFileOptions": {
        "required": [
          "content"
        ],
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/Identity"
          },
          "branch": {
            "type": "string",
            "description": "branch (optional) to base this file from. if not given, the default branch is used",
            "x-go-name": "BranchName"
          },
          "committer": {
            "$ref": "#/components/schemas/Identity"
          },
          "content": {
            "type": "string",
            "description": "content must be base64 encoded",
            "x-go-name": "Content"
          },
          "dates": {
            "$ref": "#/components/schemas/CommitDateOptions"
          },
          "message": {
            "type": "string",
            "description": "message (optional) for the commit of this file. if not supplied, a default message will be used",
            "x-go-name": "Message"
          },
          "new_branch": {
            "type": "string",
            "description": "new_branch (optional) will make a new branch from `branch` before creating the file",
            "x-go-name": "NewBranchName"
          },
          "signoff": {
            "type": "boolean",
            "description": "Add a Signed-off-by trailer by the committer at the end of the commit log message.",
            "x-go-name": "Signoff"
          }
        },
        "description": "CreateFileOptions options for creating files\nNote: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateForkOption": {
        "type": "object",
        "properties": {
          "organization": {
            "type": "string",
            "description": "organization name, if forking into an organization",
            "x-go-name": "Organization"
          }
        },
        "description": "CreateForkOption options for creating a fork",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateGPGKeyOption": {
        "required": [
          "armored_public_key"
        ],
        "type": "object",
        "properties": {
          "armored_public_key": {
            "type": "string",
            "description": "An armored GPG key to add",
            "x-go-name": "ArmoredKey"
          }
        },
        "description": "CreateGPGKeyOption options create user GPG key",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateHookOption": {
        "required": [
          "config",
          "type"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "default": false,
            "x-go-name": "Active"
          },
          "branch_filter": {
            "type": "string",
            "x-go-name": "BranchFilter"
          },
          "config": {
            "$ref": "#/components/schemas/CreateHookOptionConfig"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Events"
          },
          "type": {
            "type": "string",
            "enum": [
              "dingtalk",
              "discord",
              "gitea",
              "gogs",
              "msteams",
              "slack",
              "telegram",
              "feishu"
            ],
            "x-go-name": "Type"
          }
        },
        "description": "CreateHookOption options when create a hook",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateHookOptionConfig": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "description": "CreateHookOptionConfig has all config options in it\nrequired are \"content_type\" and \"url\" Required",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateIssueCommentOption": {
        "required": [
          "body"
        ],
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "x-go-name": "Body"
          }
        },
        "description": "CreateIssueCommentOption options for creating a comment on an issue",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateIssueOption": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "assignee": {
            "type": "string",
            "description": "deprecated",
            "x-go-name": "Assignee"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Assignees"
          },
          "body": {
            "type": "string",
            "x-go-name": "Body"
          },
          "closed": {
            "type": "boolean",
            "x-go-name": "Closed"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Deadline"
          },
          "labels": {
            "type": "array",
            "description": "list of label ids",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "x-go-name": "Labels"
          },
          "milestone": {
            "type": "integer",
            "description": "milestone id",
            "format": "int64",
            "x-go-name": "Milestone"
          },
          "ref": {
            "type": "string",
            "x-go-name": "Ref"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          }
        },
        "description": "CreateIssueOption options to create one issue",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateKeyOption": {
        "required": [
          "key",
          "title"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "An armored SSH key to add",
            "x-go-name": "Key"
          },
          "read_only": {
            "type": "boolean",
            "description": "Describe if the key has only read access or read/write",
            "x-go-name": "ReadOnly"
          },
          "title": {
            "type": "string",
            "description": "Title of the key to add",
            "x-go-name": "Title"
          }
        },
        "description": "CreateKeyOption options when creating a key",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateLabelOption": {
        "required": [
          "color",
          "name"
        ],
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "example": "#00aabb",
            "x-go-name": "Color"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        },
        "description": "CreateLabelOption options for creating a label",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateMilestoneOption": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "due_on": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Deadline"
          },
          "state": {
            "type": "string",
            "enum": [
              "open",
              "closed"
            ],
            "x-go-name": "State"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          }
        },
        "description": "CreateMilestoneOption options for creating a milestone",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateOAuth2ApplicationOptions": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "RedirectURIs"
          }
        },
        "description": "CreateOAuth2ApplicationOptions holds options to create an oauth2 application",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateOrgOption": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "full_name": {
            "type": "string",
            "x-go-name": "FullName"
          },
          "location": {
            "type": "string",
            "x-go-name": "Location"
          },
          "repo_admin_change_team_access": {
            "type": "boolean",
            "x-go-name": "RepoAdminChangeTeamAccess"
          },
          "username": {
            "type": "string",
            "x-go-name": "UserName"
          },
          "visibility": {
            "type": "string",
            "description": "possible values are `public` (default), `limited` or `private`",
            "enum": [
              "public",
              "limited",
              "private"
            ],
            "x-go-name": "Visibility"
          },
          "website": {
            "type": "string",
            "x-go-name": "Website"
          }
        },
        "description": "CreateOrgOption options for creating an organization",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreatePullRequestOption": {
        "type": "object",
        "properties": {
          "assignee": {
            "type": "string",
            "x-go-name": "Assignee"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Assignees"
          },
          "base": {
            "type": "string",
            "x-go-name": "Base"
          },
          "body": {
            "type": "string",
            "x-go-name": "Body"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Deadline"
          },
          "head": {
            "type": "string",
            "x-go-name": "Head"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "x-go-name": "Labels"
          },
          "milestone": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Milestone"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          }
        },
        "description": "CreatePullRequestOption options when creating a pull request",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreatePullReviewComment": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "x-go-name": "Body"
          },
          "new_position": {
            "type": "integer",
            "description": "if comment to new file line or 0",
            "format": "int64",
            "x-go-name": "NewLineNum"
          },
          "old_position": {
            "type": "integer",
            "description": "if comment to old file line or 0",
            "format": "int64",
            "x-go-name": "OldLineNum"
          },
          "path": {
            "type": "string",
            "description": "the tree path",
            "x-go-name": "Path"
          }
        },
        "description": "CreatePullReviewComment represent a review comment for creation api",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreatePullReviewOptions": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "x-go-name": "Body"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePullReviewComment"
            },
            "x-go-name": "Comments"
          },
          "commit_id": {
            "type": "string",
            "x-go-name": "CommitID"
          },
          "event": {
            "$ref": "#/components/schemas/ReviewStateType"
          }
        },
        "description": "CreatePullReviewOptions are options to create a pull review",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateReleaseOption": {
        "required": [
          "tag_name"
        ],
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "x-go-name": "Note"
          },
          "draft": {
            "type": "boolean",
            "x-go-name": "IsDraft"
          },
          "name": {
            "type": "string",
            "x-go-name": "Title"
          },
          "prerelease": {
            "type": "boolean",
            "x-go-name": "IsPrerelease"
          },
          "tag_name": {
            "type": "string",
            "x-go-name": "TagName"
          },
          "target_commitish": {
            "type": "string",
            "x-go-name": "Target"
          }
        },
        "description": "CreateReleaseOption options when creating a release",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateRepoOption": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "auto_init": {
            "type": "boolean",
            "description": "Whether the repository should be auto-intialized?",
            "x-go-name": "AutoInit"
          },
          "default_branch": {
            "type": "string",
            "description": "DefaultBranch of the repository (used when initializes and in template)",
            "x-go-name": "DefaultBranch"
          },
          "description": {
            "type": "string",
            "description": "Description of the repository to create",
            "x-go-name": "Description"
          },
          "gitignores": {
            "type": "string",
            "description": "Gitignores to use",
            "x-go-name": "Gitignores"
          },
          "issue_labels": {
            "type": "string",
            "description": "Label-Set to use",
            "x-go-name": "IssueLabels"
          },
          "license": {
            "type": "string",
            "description": "License to use",
            "x-go-name": "License"
          },
          "name": {
            "type": "string",
            "description": "Name of the repository to create",
            "x-go-name": "Name"
          },
          "private": {
            "type": "boolean",
            "description": "Whether the repository is private",
            "x-go-name": "Private"
          },
          "readme": {
            "type": "string",
            "description": "Readme of the repository to create",
            "x-go-name": "Readme"
          },
          "template": {
            "type": "boolean",
            "description": "Whether the repository is template",
            "x-go-name": "Template"
          },
          "trust_model": {
            "type": "string",
            "description": "TrustModel of the repository",
            "enum": [
              "default",
              "collaborator",
              "committer",
              "collaboratorcommitter"
            ],
            "x-go-name": "TrustModel"
          }
        },
        "description": "CreateRepoOption options when creating repository",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateStatusOption": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "x-go-name": "Context"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "state": {
            "$ref": "#/components/schemas/CommitStatusState"
          },
          "target_url": {
            "type": "string",
            "x-go-name": "TargetURL"
          }
        },
        "description": "CreateStatusOption holds the information needed to create a new CommitStatus for a Commit",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateTeamOption": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "can_create_org_repo": {
            "type": "boolean",
            "x-go-name": "CanCreateOrgRepo"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "includes_all_repositories": {
            "type": "boolean",
            "x-go-name": "IncludesAllRepositories"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "permission": {
            "type": "string",
            "enum": [
              "read",
              "write",
              "admin"
            ],
            "x-go-name": "Permission"
          },
          "units": {
            "type": "array",
            "example": [
              "repo.code",
              "repo.issues",
              "repo.ext_issues",
              "repo.wiki",
              "repo.pulls",
              "repo.releases",
              "repo.projects",
              "repo.ext_wiki"
            ],
            "items": {
              "type": "string"
            },
            "x-go-name": "Units"
          }
        },
        "description": "CreateTeamOption options for creating a team",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CreateUserOption": {
        "required": [
          "email",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "x-go-name": "Email"
          },
          "full_name": {
            "type": "string",
            "x-go-name": "FullName"
          },
          "login_name": {
            "type": "string",
            "x-go-name": "LoginName"
          },
          "must_change_password": {
            "type": "boolean",
            "x-go-name": "MustChangePassword"
          },
          "password": {
            "type": "string",
            "x-go-name": "Password"
          },
          "send_notify": {
            "type": "boolean",
            "x-go-name": "SendNotify"
          },
          "source_id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "SourceID"
          },
          "username": {
            "type": "string",
            "x-go-name": "Username"
          }
        },
        "description": "CreateUserOption create user options",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Cron": {
        "type": "object",
        "properties": {
          "exec_times": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ExecTimes"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "next": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Next"
          },
          "prev": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Prev"
          },
          "schedule": {
            "type": "string",
            "x-go-name": "Schedule"
          }
        },
        "description": "Cron represents a Cron task",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "DeleteEmailOption": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "description": "email addresses to delete",
            "items": {
              "type": "string"
            },
            "x-go-name": "Emails"
          }
        },
        "description": "DeleteEmailOption options when deleting email addresses",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "DeleteFileOptions": {
        "required": [
          "sha"
        ],
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/Identity"
          },
          "branch": {
            "type": "string",
            "description": "branch (optional) to base this file from. if not given, the default branch is used",
            "x-go-name": "BranchName"
          },
          "committer": {
            "$ref": "#/components/schemas/Identity"
          },
          "dates": {
            "$ref": "#/components/schemas/CommitDateOptions"
          },
          "message": {
            "type": "string",
            "description": "message (optional) for the commit of this file. if not supplied, a default message will be used",
            "x-go-name": "Message"
          },
          "new_branch": {
            "type": "string",
            "description": "new_branch (optional) will make a new branch from `branch` before creating the file",
            "x-go-name": "NewBranchName"
          },
          "sha": {
            "type": "string",
            "description": "sha is the SHA for the file that already exists",
            "x-go-name": "SHA"
          },
          "signoff": {
            "type": "boolean",
            "description": "Add a Signed-off-by trailer by the committer at the end of the commit log message.",
            "x-go-name": "Signoff"
          }
        },
        "description": "DeleteFileOptions options for deleting files (used for other File structs below)\nNote: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "DeployKey": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "fingerprint": {
            "type": "string",
            "x-go-name": "Fingerprint"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "key": {
            "type": "string",
            "x-go-name": "Key"
          },
          "key_id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "KeyID"
          },
          "read_only": {
            "type": "boolean",
            "x-go-name": "ReadOnly"
          },
          "repository": {
            "$ref": "#/components/schemas/Repository"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "description": "DeployKey a deploy key",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "DismissPullReviewOptions": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        },
        "description": "DismissPullReviewOptions are options to dismiss a pull review",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditAttachmentOptions": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        },
        "description": "EditAttachmentOptions options for editing attachments",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditBranchProtectionOption": {
        "type": "object",
        "properties": {
          "approvals_whitelist_teams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "ApprovalsWhitelistTeams"
          },
          "approvals_whitelist_username": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "ApprovalsWhitelistUsernames"
          },
          "block_on_official_review_requests": {
            "type": "boolean",
            "x-go-name": "BlockOnOfficialReviewRequests"
          },
          "block_on_outdated_branch": {
            "type": "boolean",
            "x-go-name": "BlockOnOutdatedBranch"
          },
          "block_on_rejected_reviews": {
            "type": "boolean",
            "x-go-name": "BlockOnRejectedReviews"
          },
          "dismiss_stale_approvals": {
            "type": "boolean",
            "x-go-name": "DismissStaleApprovals"
          },
          "enable_approvals_whitelist": {
            "type": "boolean",
            "x-go-name": "EnableApprovalsWhitelist"
          },
          "enable_merge_whitelist": {
            "type": "boolean",
            "x-go-name": "EnableMergeWhitelist"
          },
          "enable_push": {
            "type": "boolean",
            "x-go-name": "EnablePush"
          },
          "enable_push_whitelist": {
            "type": "boolean",
            "x-go-name": "EnablePushWhitelist"
          },
          "enable_status_check": {
            "type": "boolean",
            "x-go-name": "EnableStatusCheck"
          },
          "merge_whitelist_teams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "MergeWhitelistTeams"
          },
          "merge_whitelist_usernames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "MergeWhitelistUsernames"
          },
          "protected_file_patterns": {
            "type": "string",
            "x-go-name": "ProtectedFilePatterns"
          },
          "push_whitelist_deploy_keys": {
            "type": "boolean",
            "x-go-name": "PushWhitelistDeployKeys"
          },
          "push_whitelist_teams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "PushWhitelistTeams"
          },
          "push_whitelist_usernames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "PushWhitelistUsernames"
          },
          "require_signed_commits": {
            "type": "boolean",
            "x-go-name": "RequireSignedCommits"
          },
          "required_approvals": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RequiredApprovals"
          },
          "status_check_contexts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "StatusCheckContexts"
          }
        },
        "description": "EditBranchProtectionOption options for editing a branch protection",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditDeadlineOption": {
        "required": [
          "due_date"
        ],
        "type": "object",
        "properties": {
          "due_date": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Deadline"
          }
        },
        "description": "EditDeadlineOption options for creating a deadline",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditGitHookOption": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "x-go-name": "Content"
          }
        },
        "description": "EditGitHookOption options when modifying one Git hook",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditHookOption": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "x-go-name": "Active"
          },
          "branch_filter": {
            "type": "string",
            "x-go-name": "BranchFilter"
          },
          "config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Config"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Events"
          }
        },
        "description": "EditHookOption options when modify one hook",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditIssueCommentOption": {
        "required": [
          "body"
        ],
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "x-go-name": "Body"
          }
        },
        "description": "EditIssueCommentOption options for editing a comment",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditIssueOption": {
        "type": "object",
        "properties": {
          "assignee": {
            "type": "string",
            "description": "deprecated",
            "x-go-name": "Assignee"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Assignees"
          },
          "body": {
            "type": "string",
            "x-go-name": "Body"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Deadline"
          },
          "milestone": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Milestone"
          },
          "ref": {
            "type": "string",
            "x-go-name": "Ref"
          },
          "state": {
            "type": "string",
            "x-go-name": "State"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "unset_due_date": {
            "type": "boolean",
            "x-go-name": "RemoveDeadline"
          }
        },
        "description": "EditIssueOption options for editing an issue",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditLabelOption": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "x-go-name": "Color"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        },
        "description": "EditLabelOption options for editing a label",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditMilestoneOption": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "due_on": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Deadline"
          },
          "state": {
            "type": "string",
            "x-go-name": "State"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          }
        },
        "description": "EditMilestoneOption options for editing a milestone",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditOrgOption": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "full_name": {
            "type": "string",
            "x-go-name": "FullName"
          },
          "location": {
            "type": "string",
            "x-go-name": "Location"
          },
          "repo_admin_change_team_access": {
            "type": "boolean",
            "x-go-name": "RepoAdminChangeTeamAccess"
          },
          "visibility": {
            "type": "string",
            "description": "possible values are `public`, `limited` or `private`",
            "enum": [
              "public",
              "limited",
              "private"
            ],
            "x-go-name": "Visibility"
          },
          "website": {
            "type": "string",
            "x-go-name": "Website"
          }
        },
        "description": "EditOrgOption options for editing an organization",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditPullRequestOption": {
        "type": "object",
        "properties": {
          "assignee": {
            "type": "string",
            "x-go-name": "Assignee"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Assignees"
          },
          "base": {
            "type": "string",
            "x-go-name": "Base"
          },
          "body": {
            "type": "string",
            "x-go-name": "Body"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Deadline"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "x-go-name": "Labels"
          },
          "milestone": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Milestone"
          },
          "state": {
            "type": "string",
            "x-go-name": "State"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "unset_due_date": {
            "type": "boolean",
            "x-go-name": "RemoveDeadline"
          }
        },
        "description": "EditPullRequestOption options when modify pull request",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditReactionOption": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "x-go-name": "Reaction"
          }
        },
        "description": "EditReactionOption contain the reaction type",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditReleaseOption": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "x-go-name": "Note"
          },
          "draft": {
            "type": "boolean",
            "x-go-name": "IsDraft"
          },
          "name": {
            "type": "string",
            "x-go-name": "Title"
          },
          "prerelease": {
            "type": "boolean",
            "x-go-name": "IsPrerelease"
          },
          "tag_name": {
            "type": "string",
            "x-go-name": "TagName"
          },
          "target_commitish": {
            "type": "string",
            "x-go-name": "Target"
          }
        },
        "description": "EditReleaseOption options when editing a release",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditRepoOption": {
        "type": "object",
        "properties": {
          "allow_manual_merge": {
            "type": "boolean",
            "description": "either `true` to allow mark pr as merged manually, or `false` to prevent it. `has_pull_requests` must be `true`.",
            "x-go-name": "AllowManualMerge"
          },
          "allow_merge_commits": {
            "type": "boolean",
            "description": "either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. `has_pull_requests` must be `true`.",
            "x-go-name": "AllowMerge"
          },
          "allow_rebase": {
            "type": "boolean",
            "description": "either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. `has_pull_requests` must be `true`.",
            "x-go-name": "AllowRebase"
          },
          "allow_rebase_explicit": {
            "type": "boolean",
            "description": "either `true` to allow rebase with explicit merge commits (--no-ff), or `false` to prevent rebase with explicit merge commits. `has_pull_requests` must be `true`.",
            "x-go-name": "AllowRebaseMerge"
          },
          "allow_squash_merge": {
            "type": "boolean",
            "description": "either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. `has_pull_requests` must be `true`.",
            "x-go-name": "AllowSquash"
          },
          "archived": {
            "type": "boolean",
            "description": "set to `true` to archive this repository.",
            "x-go-name": "Archived"
          },
          "autodetect_manual_merge": {
            "type": "boolean",
            "description": "either `true` to enable AutodetectManualMerge, or `false` to prevent it. `has_pull_requests` must be `true`, Note: In some special cases, misjudgments can occur.",
            "x-go-name": "AutodetectManualMerge"
          },
          "default_branch": {
            "type": "string",
            "description": "sets the default branch for this repository.",
            "x-go-name": "DefaultBranch"
          },
          "description": {
            "type": "string",
            "description": "a short description of the repository.",
            "x-go-name": "Description"
          },
          "external_tracker": {
            "$ref": "#/components/schemas/ExternalTracker"
          },
          "external_wiki": {
            "$ref": "#/components/schemas/ExternalWiki"
          },
          "has_issues": {
            "type": "boolean",
            "description": "either `true` to enable issues for this repository or `false` to disable them.",
            "x-go-name": "HasIssues"
          },
          "has_projects": {
            "type": "boolean",
            "description": "either `true` to enable project unit, or `false` to disable them.",
            "x-go-name": "HasProjects"
          },
          "has_pull_requests": {
            "type": "boolean",
            "description": "either `true` to allow pull requests, or `false` to prevent pull request.",
            "x-go-name": "HasPullRequests"
          },
          "has_wiki": {
            "type": "boolean",
            "description": "either `true` to enable the wiki for this repository or `false` to disable it.",
            "x-go-name": "HasWiki"
          },
          "ignore_whitespace_conflicts": {
            "type": "boolean",
            "description": "either `true` to ignore whitespace for conflicts, or `false` to not ignore whitespace. `has_pull_requests` must be `true`.",
            "x-go-name": "IgnoreWhitespaceConflicts"
          },
          "internal_tracker": {
            "$ref": "#/components/schemas/InternalTracker"
          },
          "mirror_interval": {
            "type": "string",
            "description": "set to a string like `8h30m0s` to set the mirror interval time",
            "x-go-name": "MirrorInterval"
          },
          "name": {
            "type": "string",
            "description": "name of the repository",
            "x-go-name": "Name"
          },
          "private": {
            "type": "boolean",
            "description": "either `true` to make the repository private or `false` to make it public.\nNote: you will get a 422 error if the organization restricts changing repository visibility to organization\nowners and a non-owner tries to change the value of private.",
            "x-go-name": "Private"
          },
          "template": {
            "type": "boolean",
            "description": "either `true` to make this repository a template or `false` to make it a normal repository",
            "x-go-name": "Template"
          },
          "website": {
            "type": "string",
            "description": "a URL with more information about the repository.",
            "x-go-name": "Website"
          }
        },
        "description": "EditRepoOption options when editing a repository's properties",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditTeamOption": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "can_create_org_repo": {
            "type": "boolean",
            "x-go-name": "CanCreateOrgRepo"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "includes_all_repositories": {
            "type": "boolean",
            "x-go-name": "IncludesAllRepositories"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "permission": {
            "type": "string",
            "enum": [
              "read",
              "write",
              "admin"
            ],
            "x-go-name": "Permission"
          },
          "units": {
            "type": "array",
            "example": [
              "repo.code",
              "repo.issues",
              "repo.ext_issues",
              "repo.wiki",
              "repo.pulls",
              "repo.releases",
              "repo.projects",
              "repo.ext_wiki"
            ],
            "items": {
              "type": "string"
            },
            "x-go-name": "Units"
          }
        },
        "description": "EditTeamOption options for editing a team",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "EditUserOption": {
        "required": [
          "login_name",
          "source_id"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "x-go-name": "Active"
          },
          "admin": {
            "type": "boolean",
            "x-go-name": "Admin"
          },
          "allow_create_organization": {
            "type": "boolean",
            "x-go-name": "AllowCreateOrganization"
          },
          "allow_git_hook": {
            "type": "boolean",
            "x-go-name": "AllowGitHook"
          },
          "allow_import_local": {
            "type": "boolean",
            "x-go-name": "AllowImportLocal"
          },
          "email": {
            "type": "string",
            "format": "email",
            "x-go-name": "Email"
          },
          "full_name": {
            "type": "string",
            "x-go-name": "FullName"
          },
          "location": {
            "type": "string",
            "x-go-name": "Location"
          },
          "login_name": {
            "type": "string",
            "x-go-name": "LoginName"
          },
          "max_repo_creation": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxRepoCreation"
          },
          "must_change_password": {
            "type": "boolean",
            "x-go-name": "MustChangePassword"
          },
          "password": {
            "type": "string",
            "x-go-name": "Password"
          },
          "prohibit_login": {
            "type": "boolean",
            "x-go-name": "ProhibitLogin"
          },
          "restricted": {
            "type": "boolean",
            "x-go-name": "Restricted"
          },
          "source_id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "SourceID"
          },
          "website": {
            "type": "string",
            "x-go-name": "Website"
          }
        },
        "description": "EditUserOption edit user options",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Email": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "x-go-name": "Email"
          },
          "primary": {
            "type": "boolean",
            "x-go-name": "Primary"
          },
          "verified": {
            "type": "boolean",
            "x-go-name": "Verified"
          }
        },
        "description": "Email an email address belonging to a user",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "ExternalTracker": {
        "type": "object",
        "properties": {
          "external_tracker_format": {
            "type": "string",
            "description": "External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index.",
            "x-go-name": "ExternalTrackerFormat"
          },
          "external_tracker_style": {
            "type": "string",
            "description": "External Issue Tracker Number Format, either `numeric` or `alphanumeric`",
            "x-go-name": "ExternalTrackerStyle"
          },
          "external_tracker_url": {
            "type": "string",
            "description": "URL of external issue tracker.",
            "x-go-name": "ExternalTrackerURL"
          }
        },
        "description": "ExternalTracker represents settings for external tracker",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "ExternalWiki": {
        "type": "object",
        "properties": {
          "external_wiki_url": {
            "type": "string",
            "description": "URL of external wiki.",
            "x-go-name": "ExternalWikiURL"
          }
        },
        "description": "ExternalWiki represents setting for external wiki",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "FileCommitResponse": {
        "title": "FileCommitResponse contains information generated from a Git commit for a repo's file.",
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/CommitUser"
          },
          "committer": {
            "$ref": "#/components/schemas/CommitUser"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "html_url": {
            "type": "string",
            "x-go-name": "HTMLURL"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "parents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitMeta"
            },
            "x-go-name": "Parents"
          },
          "sha": {
            "type": "string",
            "x-go-name": "SHA"
          },
          "tree": {
            "$ref": "#/components/schemas/CommitMeta"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "FileDeleteResponse": {
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/FileCommitResponse"
          },
          "content": {
            "type": "object",
            "properties": {},
            "x-go-name": "Content"
          },
          "verification": {
            "$ref": "#/components/schemas/PayloadCommitVerification"
          }
        },
        "description": "FileDeleteResponse contains information about a repo's file that was deleted",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "FileLinksResponse": {
        "type": "object",
        "properties": {
          "git": {
            "type": "string",
            "x-go-name": "GitURL"
          },
          "html": {
            "type": "string",
            "x-go-name": "HTMLURL"
          },
          "self": {
            "type": "string",
            "x-go-name": "Self"
          }
        },
        "description": "FileLinksResponse contains the links for a repo's file",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "FileResponse": {
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/FileCommitResponse"
          },
          "content": {
            "$ref": "#/components/schemas/ContentsResponse"
          },
          "verification": {
            "$ref": "#/components/schemas/PayloadCommitVerification"
          }
        },
        "description": "FileResponse contains information about a repo's file",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "GPGKey": {
        "type": "object",
        "properties": {
          "can_certify": {
            "type": "boolean",
            "x-go-name": "CanCertify"
          },
          "can_encrypt_comms": {
            "type": "boolean",
            "x-go-name": "CanEncryptComms"
          },
          "can_encrypt_storage": {
            "type": "boolean",
            "x-go-name": "CanEncryptStorage"
          },
          "can_sign": {
            "type": "boolean",
            "x-go-name": "CanSign"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GPGKeyEmail"
            },
            "x-go-name": "Emails"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Expires"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "key_id": {
            "type": "string",
            "x-go-name": "KeyID"
          },
          "primary_key_id": {
            "type": "string",
            "x-go-name": "PrimaryKeyID"
          },
          "public_key": {
            "type": "string",
            "x-go-name": "PublicKey"
          },
          "subkeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GPGKey"
            },
            "x-go-name": "SubsKey"
          }
        },
        "description": "GPGKey a user GPG key to sign commit and tag in repository",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "GPGKeyEmail": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "verified": {
            "type": "boolean",
            "x-go-name": "Verified"
          }
        },
        "description": "GPGKeyEmail an email attached to a GPGKey",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "GeneralAPISettings": {
        "type": "object",
        "properties": {
          "default_git_trees_per_page": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "DefaultGitTreesPerPage"
          },
          "default_max_blob_size": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "DefaultMaxBlobSize"
          },
          "default_paging_num": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "DefaultPagingNum"
          },
          "max_response_items": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxResponseItems"
          }
        },
        "description": "GeneralAPISettings contains global api settings exposed by it",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "GeneralAttachmentSettings": {
        "type": "object",
        "properties": {
          "allowed_types": {
            "type": "string",
            "x-go-name": "AllowedTypes"
          },
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "max_files": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxFiles"
          },
          "max_size": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxSize"
          }
        },
        "description": "GeneralAttachmentSettings contains global Attachment settings exposed by API",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "GeneralRepoSettings": {
        "type": "object",
        "properties": {
          "http_git_disabled": {
            "type": "boolean",
            "x-go-name": "HTTPGitDisabled"
          },
          "lfs_disabled": {
            "type": "boolean",
            "x-go-name": "LFSDisabled"
          },
          "migrations_disabled": {
            "type": "boolean",
            "x-go-name": "MigrationsDisabled"
          },
          "mirrors_disabled": {
            "type": "boolean",
            "x-go-name": "MirrorsDisabled"
          },
          "time_tracking_disabled": {
            "type": "boolean",
            "x-go-name": "TimeTrackingDisabled"
          }
        },
        "description": "GeneralRepoSettings contains global repository settings exposed by API",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "GeneralUISettings": {
        "type": "object",
        "properties": {
          "allowed_reactions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "AllowedReactions"
          },
          "default_theme": {
            "type": "string",
            "x-go-name": "DefaultTheme"
          }
        },
        "description": "GeneralUISettings contains global ui settings exposed by API",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "GitBlobResponse": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "x-go-name": "Content"
          },
          "encoding": {
            "type": "string",
            "x-go-name": "Encoding"
          },
          "sha": {
            "type": "string",
            "x-go-name": "SHA"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Size"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "description": "GitBlobResponse represents a git blob",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "GitEntry": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "x-go-name": "Mode"
          },
          "path": {
            "type": "string",
            "x-go-name": "Path"
          },
          "sha": {
            "type": "string",
            "x-go-name": "SHA"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Size"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "description": "GitEntry represents a git tree",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "GitHook": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "x-go-name": "Content"
          },
          "is_active": {
            "type": "boolean",
            "x-go-name": "IsActive"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        },
        "description": "GitHook represents a Git repository hook",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "GitObject": {
        "title": "GitObject represents a Git object.",
        "type": "object",
        "properties": {
          "sha": {
            "type": "string",
            "x-go-name": "SHA"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "GitServiceType": {
        "type": "integer",
        "description": "GitServiceType represents a git service",
        "format": "int64",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "GitTreeResponse": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Page"
          },
          "sha": {
            "type": "string",
            "x-go-name": "SHA"
          },
          "total_count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "TotalCount"
          },
          "tree": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitEntry"
            },
            "x-go-name": "Entries"
          },
          "truncated": {
            "type": "boolean",
            "x-go-name": "Truncated"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "description": "GitTreeResponse returns a git tree",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Hook": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "x-go-name": "Active"
          },
          "config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Config"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Events"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        },
        "description": "Hook a hook is a web hook when one repository changed",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Identity": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "x-go-name": "Email"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        },
        "description": "Identity for a person's identity like an author or committer",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "InternalTracker": {
        "type": "object",
        "properties": {
          "allow_only_contributors_to_track_time": {
            "type": "boolean",
            "description": "Let only contributors track time (Built-in issue tracker)",
            "x-go-name": "AllowOnlyContributorsToTrackTime"
          },
          "enable_issue_dependencies": {
            "type": "boolean",
            "description": "Enable dependencies for issues and pull requests (Built-in issue tracker)",
            "x-go-name": "EnableIssueDependencies"
          },
          "enable_time_tracker": {
            "type": "boolean",
            "description": "Enable time tracking (Built-in issue tracker)",
            "x-go-name": "EnableTimeTracker"
          }
        },
        "description": "InternalTracker represents settings for internal tracker",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Issue": {
        "type": "object",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/User"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "x-go-name": "Assignees"
          },
          "body": {
            "type": "string",
            "x-go-name": "Body"
          },
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Closed"
          },
          "comments": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Comments"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Deadline"
          },
          "html_url": {
            "type": "string",
            "x-go-name": "HTMLURL"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "is_locked": {
            "type": "boolean",
            "x-go-name": "IsLocked"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "x-go-name": "Labels"
          },
          "milestone": {
            "$ref": "#/components/schemas/Milestone"
          },
          "number": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Index"
          },
          "original_author": {
            "type": "string",
            "x-go-name": "OriginalAuthor"
          },
          "original_author_id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "OriginalAuthorID"
          },
          "pull_request": {
            "$ref": "#/components/schemas/PullRequestMeta"
          },
          "ref": {
            "type": "string",
            "x-go-name": "Ref"
          },
          "repository": {
            "$ref": "#/components/schemas/RepositoryMeta"
          },
          "state": {
            "$ref": "#/components/schemas/StateType"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "description": "Issue represents an issue in a repository",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "IssueDeadline": {
        "type": "object",
        "properties": {
          "due_date": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Deadline"
          }
        },
        "description": "IssueDeadline represents an issue deadline",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "IssueLabelsOption": {
        "type": "object",
        "properties": {
          "labels": {
            "type": "array",
            "description": "list of label IDs",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "x-go-name": "Labels"
          }
        },
        "description": "IssueLabelsOption a collection of labels",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "IssueTemplate": {
        "type": "object",
        "properties": {
          "about": {
            "type": "string",
            "x-go-name": "About"
          },
          "content": {
            "type": "string",
            "x-go-name": "Content"
          },
          "file_name": {
            "type": "string",
            "x-go-name": "FileName"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Labels"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          }
        },
        "description": "IssueTemplate represents an issue template for a repository",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Label": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "example": "00aabb",
            "x-go-name": "Color"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "description": "Label a label to an issue or a pr",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "MarkdownOption": {
        "type": "object",
        "properties": {
          "Context": {
            "type": "string",
            "description": "Context to render\n\nin: body"
          },
          "Mode": {
            "type": "string",
            "description": "Mode to render\n\nin: body"
          },
          "Text": {
            "type": "string",
            "description": "Text markdown to render\n\nin: body"
          },
          "Wiki": {
            "type": "boolean",
            "description": "Is it a wiki page ?\n\nin: body"
          }
        },
        "description": "MarkdownOption markdown options",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "MergePullRequestOption": {
        "required": [
          "Do"
        ],
        "type": "object",
        "properties": {
          "Do": {
            "type": "string",
            "enum": [
              "merge",
              "rebase",
              "rebase-merge",
              "squash",
              "manually-merged"
            ]
          },
          "MergeCommitID": {
            "type": "string"
          },
          "MergeMessageField": {
            "type": "string"
          },
          "MergeTitleField": {
            "type": "string"
          },
          "force_merge": {
            "type": "boolean",
            "x-go-name": "ForceMerge"
          }
        },
        "description": "MergePullRequestForm form for merging Pull Request",
        "x-go-name": "MergePullRequestForm",
        "x-go-package": "code.gitea.io/gitea/modules/forms"
      },
      "MigrateRepoForm": {
        "required": [
          "clone_addr",
          "repo_name",
          "uid"
        ],
        "type": "object",
        "properties": {
          "auth_password": {
            "type": "string",
            "x-go-name": "AuthPassword"
          },
          "auth_token": {
            "type": "string",
            "x-go-name": "AuthToken"
          },
          "auth_username": {
            "type": "string",
            "x-go-name": "AuthUsername"
          },
          "clone_addr": {
            "type": "string",
            "x-go-name": "CloneAddr"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "issues": {
            "type": "boolean",
            "x-go-name": "Issues"
          },
          "labels": {
            "type": "boolean",
            "x-go-name": "Labels"
          },
          "milestones": {
            "type": "boolean",
            "x-go-name": "Milestones"
          },
          "mirror": {
            "type": "boolean",
            "x-go-name": "Mirror"
          },
          "mirror_interval": {
            "type": "string",
            "x-go-name": "MirrorInterval"
          },
          "private": {
            "type": "boolean",
            "x-go-name": "Private"
          },
          "pull_requests": {
            "type": "boolean",
            "x-go-name": "PullRequests"
          },
          "releases": {
            "type": "boolean",
            "x-go-name": "Releases"
          },
          "repo_name": {
            "type": "string",
            "x-go-name": "RepoName"
          },
          "service": {
            "$ref": "#/components/schemas/GitServiceType"
          },
          "uid": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "UID"
          },
          "wiki": {
            "type": "boolean",
            "x-go-name": "Wiki"
          }
        },
        "description": "MigrateRepoForm form for migrating repository\nthis is used to interact with web ui",
        "x-go-package": "code.gitea.io/gitea/modules/forms"
      },
      "MigrateRepoOptions": {
        "required": [
          "clone_addr",
          "repo_name"
        ],
        "type": "object",
        "properties": {
          "auth_password": {
            "type": "string",
            "x-go-name": "AuthPassword"
          },
          "auth_token": {
            "type": "string",
            "x-go-name": "AuthToken"
          },
          "auth_username": {
            "type": "string",
            "x-go-name": "AuthUsername"
          },
          "clone_addr": {
            "type": "string",
            "x-go-name": "CloneAddr"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "issues": {
            "type": "boolean",
            "x-go-name": "Issues"
          },
          "labels": {
            "type": "boolean",
            "x-go-name": "Labels"
          },
          "milestones": {
            "type": "boolean",
            "x-go-name": "Milestones"
          },
          "mirror": {
            "type": "boolean",
            "x-go-name": "Mirror"
          },
          "mirror_interval": {
            "type": "string",
            "x-go-name": "MirrorInterval"
          },
          "private": {
            "type": "boolean",
            "x-go-name": "Private"
          },
          "pull_requests": {
            "type": "boolean",
            "x-go-name": "PullRequests"
          },
          "releases": {
            "type": "boolean",
            "x-go-name": "Releases"
          },
          "repo_name": {
            "type": "string",
            "x-go-name": "RepoName"
          },
          "repo_owner": {
            "type": "string",
            "description": "Name of User or Organisation who will own Repo after migration",
            "x-go-name": "RepoOwner"
          },
          "service": {
            "type": "string",
            "enum": [
              "git",
              "github",
              "gitea",
              "gitlab"
            ],
            "x-go-name": "Service"
          },
          "uid": {
            "type": "integer",
            "description": "deprecated (only for backwards compatibility)",
            "format": "int64",
            "x-go-name": "RepoOwnerID"
          },
          "wiki": {
            "type": "boolean",
            "x-go-name": "Wiki"
          }
        },
        "description": "MigrateRepoOptions options for migrating repository's\nthis is used to interact with api v1",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Milestone": {
        "type": "object",
        "properties": {
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Closed"
          },
          "closed_issues": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ClosedIssues"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "due_on": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Deadline"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "open_issues": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "OpenIssues"
          },
          "state": {
            "$ref": "#/components/schemas/StateType"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        },
        "description": "Milestone milestone is a collection of issues on one repository",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "NotificationCount": {
        "type": "object",
        "properties": {
          "new": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "New"
          }
        },
        "description": "NotificationCount number of unread notifications",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "NotificationSubject": {
        "type": "object",
        "properties": {
          "latest_comment_url": {
            "type": "string",
            "x-go-name": "LatestCommentURL"
          },
          "state": {
            "$ref": "#/components/schemas/StateType"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "description": "NotificationSubject contains the notification subject (Issue/Pull/Commit)",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "NotificationThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "pinned": {
            "type": "boolean",
            "x-go-name": "Pinned"
          },
          "repository": {
            "$ref": "#/components/schemas/Repository"
          },
          "subject": {
            "$ref": "#/components/schemas/NotificationSubject"
          },
          "unread": {
            "type": "boolean",
            "x-go-name": "Unread"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "description": "NotificationThread expose Notification on API",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "OAuth2Application": {
        "title": "OAuth2Application represents an OAuth2 application.",
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "x-go-name": "ClientID"
          },
          "client_secret": {
            "type": "string",
            "x-go-name": "ClientSecret"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "RedirectURIs"
          }
        },
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Organization": {
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string",
            "x-go-name": "AvatarURL"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "full_name": {
            "type": "string",
            "x-go-name": "FullName"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "location": {
            "type": "string",
            "x-go-name": "Location"
          },
          "repo_admin_change_team_access": {
            "type": "boolean",
            "x-go-name": "RepoAdminChangeTeamAccess"
          },
          "username": {
            "type": "string",
            "x-go-name": "UserName"
          },
          "visibility": {
            "type": "string",
            "x-go-name": "Visibility"
          },
          "website": {
            "type": "string",
            "x-go-name": "Website"
          }
        },
        "description": "Organization represents an organization",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "PRBranchInfo": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "x-go-name": "Name"
          },
          "ref": {
            "type": "string",
            "x-go-name": "Ref"
          },
          "repo": {
            "$ref": "#/components/schemas/Repository"
          },
          "repo_id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RepoID"
          },
          "sha": {
            "type": "string",
            "x-go-name": "Sha"
          }
        },
        "description": "PRBranchInfo information about a branch",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "PayloadCommit": {
        "type": "object",
        "properties": {
          "added": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Added"
          },
          "author": {
            "$ref": "#/components/schemas/PayloadUser"
          },
          "committer": {
            "$ref": "#/components/schemas/PayloadUser"
          },
          "id": {
            "type": "string",
            "description": "sha1 hash of the commit",
            "x-go-name": "ID"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "modified": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Modified"
          },
          "removed": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Removed"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Timestamp"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          },
          "verification": {
            "$ref": "#/components/schemas/PayloadCommitVerification"
          }
        },
        "description": "PayloadCommit represents a commit",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "PayloadCommitVerification": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "string",
            "x-go-name": "Payload"
          },
          "reason": {
            "type": "string",
            "x-go-name": "Reason"
          },
          "signature": {
            "type": "string",
            "x-go-name": "Signature"
          },
          "signer": {
            "$ref": "#/components/schemas/PayloadUser"
          },
          "verified": {
            "type": "boolean",
            "x-go-name": "Verified"
          }
        },
        "description": "PayloadCommitVerification represents the GPG verification of a commit",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "PayloadUser": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "x-go-name": "Email"
          },
          "name": {
            "type": "string",
            "description": "Full name of the commit author",
            "x-go-name": "Name"
          },
          "username": {
            "type": "string",
            "x-go-name": "UserName"
          }
        },
        "description": "PayloadUser represents the author or committer of a commit",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Permission": {
        "type": "object",
        "properties": {
          "admin": {
            "type": "boolean",
            "x-go-name": "Admin"
          },
          "pull": {
            "type": "boolean",
            "x-go-name": "Pull"
          },
          "push": {
            "type": "boolean",
            "x-go-name": "Push"
          }
        },
        "description": "Permission represents a set of permissions",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "PublicKey": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "fingerprint": {
            "type": "string",
            "x-go-name": "Fingerprint"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "key": {
            "type": "string",
            "x-go-name": "Key"
          },
          "key_type": {
            "type": "string",
            "x-go-name": "KeyType"
          },
          "read_only": {
            "type": "boolean",
            "x-go-name": "ReadOnly"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "description": "PublicKey publickey is a user key to push code to repository",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "PullRequest": {
        "type": "object",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/User"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "x-go-name": "Assignees"
          },
          "base": {
            "$ref": "#/components/schemas/PRBranchInfo"
          },
          "body": {
            "type": "string",
            "x-go-name": "Body"
          },
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Closed"
          },
          "comments": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Comments"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "diff_url": {
            "type": "string",
            "x-go-name": "DiffURL"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Deadline"
          },
          "head": {
            "$ref": "#/components/schemas/PRBranchInfo"
          },
          "html_url": {
            "type": "string",
            "x-go-name": "HTMLURL"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "is_locked": {
            "type": "boolean",
            "x-go-name": "IsLocked"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "x-go-name": "Labels"
          },
          "merge_base": {
            "type": "string",
            "x-go-name": "MergeBase"
          },
          "merge_commit_sha": {
            "type": "string",
            "x-go-name": "MergedCommitID"
          },
          "mergeable": {
            "type": "boolean",
            "x-go-name": "Mergeable"
          },
          "merged": {
            "type": "boolean",
            "x-go-name": "HasMerged"
          },
          "merged_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Merged"
          },
          "merged_by": {
            "$ref": "#/components/schemas/User"
          },
          "milestone": {
            "$ref": "#/components/schemas/Milestone"
          },
          "number": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Index"
          },
          "patch_url": {
            "type": "string",
            "x-go-name": "PatchURL"
          },
          "state": {
            "$ref": "#/components/schemas/StateType"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "description": "PullRequest represents a pull request",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "PullRequestMeta": {
        "type": "object",
        "properties": {
          "merged": {
            "type": "boolean",
            "x-go-name": "HasMerged"
          },
          "merged_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Merged"
          }
        },
        "description": "PullRequestMeta PR info if an issue is a PR",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "PullReview": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "x-go-name": "Body"
          },
          "comments_count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "CodeCommentsCount"
          },
          "commit_id": {
            "type": "string",
            "x-go-name": "CommitID"
          },
          "dismissed": {
            "type": "boolean",
            "x-go-name": "Dismissed"
          },
          "html_url": {
            "type": "string",
            "x-go-name": "HTMLURL"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "official": {
            "type": "boolean",
            "x-go-name": "Official"
          },
          "pull_request_url": {
            "type": "string",
            "x-go-name": "HTMLPullURL"
          },
          "stale": {
            "type": "boolean",
            "x-go-name": "Stale"
          },
          "state": {
            "$ref": "#/components/schemas/ReviewStateType"
          },
          "submitted_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Submitted"
          },
          "team": {
            "$ref": "#/components/schemas/Team"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "description": "PullReview represents a pull request review",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "PullReviewComment": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "x-go-name": "Body"
          },
          "commit_id": {
            "type": "string",
            "x-go-name": "CommitID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "diff_hunk": {
            "type": "string",
            "x-go-name": "DiffHunk"
          },
          "html_url": {
            "type": "string",
            "x-go-name": "HTMLURL"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "original_commit_id": {
            "type": "string",
            "x-go-name": "OrigCommitID"
          },
          "original_position": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "OldLineNum"
          },
          "path": {
            "type": "string",
            "x-go-name": "Path"
          },
          "position": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "LineNum"
          },
          "pull_request_review_id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ReviewID"
          },
          "pull_request_url": {
            "type": "string",
            "x-go-name": "HTMLPullURL"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "description": "PullReviewComment represents a comment on a pull request review",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "PullReviewRequestOptions": {
        "type": "object",
        "properties": {
          "reviewers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Reviewers"
          },
          "team_reviewers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "TeamReviewers"
          }
        },
        "description": "PullReviewRequestOptions are options to add or remove pull review requests",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Reaction": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "x-go-name": "Reaction"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "description": "Reaction contain one reaction",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Reference": {
        "title": "Reference represents a Git reference.",
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/GitObject"
          },
          "ref": {
            "type": "string",
            "x-go-name": "Ref"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Release": {
        "type": "object",
        "properties": {
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            },
            "x-go-name": "Attachments"
          },
          "author": {
            "$ref": "#/components/schemas/User"
          },
          "body": {
            "type": "string",
            "x-go-name": "Note"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "draft": {
            "type": "boolean",
            "x-go-name": "IsDraft"
          },
          "html_url": {
            "type": "string",
            "x-go-name": "HTMLURL"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Title"
          },
          "prerelease": {
            "type": "boolean",
            "x-go-name": "IsPrerelease"
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "PublishedAt"
          },
          "tag_name": {
            "type": "string",
            "x-go-name": "TagName"
          },
          "tarball_url": {
            "type": "string",
            "x-go-name": "TarURL"
          },
          "target_commitish": {
            "type": "string",
            "x-go-name": "Target"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          },
          "zipball_url": {
            "type": "string",
            "x-go-name": "ZipURL"
          }
        },
        "description": "Release represents a repository release",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "RepoCommit": {
        "title": "RepoCommit contains information of a commit in the context of a repository.",
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/CommitUser"
          },
          "committer": {
            "$ref": "#/components/schemas/CommitUser"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "tree": {
            "$ref": "#/components/schemas/CommitMeta"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "RepoTopicOptions": {
        "type": "object",
        "properties": {
          "topics": {
            "type": "array",
            "description": "list of topic names",
            "items": {
              "type": "string"
            },
            "x-go-name": "Topics"
          }
        },
        "description": "RepoTopicOptions a collection of repo topic names",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Repository": {
        "type": "object",
        "properties": {
          "allow_merge_commits": {
            "type": "boolean",
            "x-go-name": "AllowMerge"
          },
          "allow_rebase": {
            "type": "boolean",
            "x-go-name": "AllowRebase"
          },
          "allow_rebase_explicit": {
            "type": "boolean",
            "x-go-name": "AllowRebaseMerge"
          },
          "allow_squash_merge": {
            "type": "boolean",
            "x-go-name": "AllowSquash"
          },
          "archived": {
            "type": "boolean",
            "x-go-name": "Archived"
          },
          "avatar_url": {
            "type": "string",
            "x-go-name": "AvatarURL"
          },
          "clone_url": {
            "type": "string",
            "x-go-name": "CloneURL"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "default_branch": {
            "type": "string",
            "x-go-name": "DefaultBranch"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "empty": {
            "type": "boolean",
            "x-go-name": "Empty"
          },
          "external_tracker": {
            "$ref": "#/components/schemas/ExternalTracker"
          },
          "external_wiki": {
            "$ref": "#/components/schemas/ExternalWiki"
          },
          "fork": {
            "type": "boolean",
            "x-go-name": "Fork"
          },
          "forks_count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Forks"
          },
          "full_name": {
            "type": "string",
            "x-go-name": "FullName"
          },
          "has_issues": {
            "type": "boolean",
            "x-go-name": "HasIssues"
          },
          "has_projects": {
            "type": "boolean",
            "x-go-name": "HasProjects"
          },
          "has_pull_requests": {
            "type": "boolean",
            "x-go-name": "HasPullRequests"
          },
          "has_wiki": {
            "type": "boolean",
            "x-go-name": "HasWiki"
          },
          "html_url": {
            "type": "string",
            "x-go-name": "HTMLURL"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "ignore_whitespace_conflicts": {
            "type": "boolean",
            "x-go-name": "IgnoreWhitespaceConflicts"
          },
          "internal": {
            "type": "boolean",
            "x-go-name": "Internal"
          },
          "internal_tracker": {
            "$ref": "#/components/schemas/InternalTracker"
          },
          "mirror": {
            "type": "boolean",
            "x-go-name": "Mirror"
          },
          "mirror_interval": {
            "type": "string",
            "x-go-name": "MirrorInterval"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "open_issues_count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "OpenIssues"
          },
          "open_pr_counter": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "OpenPulls"
          },
          "original_url": {
            "type": "string",
            "x-go-name": "OriginalURL"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          },
          "parent": {
            "$ref": "#/components/schemas/Repository"
          },
          "permissions": {
            "$ref": "#/components/schemas/Permission"
          },
          "private": {
            "type": "boolean",
            "x-go-name": "Private"
          },
          "release_counter": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Releases"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Size"
          },
          "ssh_url": {
            "type": "string",
            "x-go-name": "SSHURL"
          },
          "stars_count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Stars"
          },
          "template": {
            "type": "boolean",
            "x-go-name": "Template"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          },
          "watchers_count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Watchers"
          },
          "website": {
            "type": "string",
            "x-go-name": "Website"
          }
        },
        "description": "Repository represents a repository",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "RepositoryMeta": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string",
            "x-go-name": "FullName"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "owner": {
            "type": "string",
            "x-go-name": "Owner"
          }
        },
        "description": "RepositoryMeta basic repository information",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "ReviewStateType": {
        "type": "string",
        "description": "ReviewStateType review state type",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "SearchResults": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Repository"
            },
            "x-go-name": "Data"
          },
          "ok": {
            "type": "boolean",
            "x-go-name": "OK"
          }
        },
        "description": "SearchResults results of a successful search",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "ServerVersion": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "x-go-name": "Version"
          }
        },
        "description": "ServerVersion wraps the version of the server",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "StateType": {
        "type": "string",
        "description": "StateType issue state type",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "StopWatch": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "duration": {
            "type": "string",
            "x-go-name": "Duration"
          },
          "issue_index": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "IssueIndex"
          },
          "issue_title": {
            "type": "string",
            "x-go-name": "IssueTitle"
          },
          "repo_name": {
            "type": "string",
            "x-go-name": "RepoName"
          },
          "repo_owner_name": {
            "type": "string",
            "x-go-name": "RepoOwnerName"
          },
          "seconds": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Seconds"
          }
        },
        "description": "StopWatch represent a running stopwatch",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "SubmitPullReviewOptions": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "x-go-name": "Body"
          },
          "event": {
            "$ref": "#/components/schemas/ReviewStateType"
          }
        },
        "description": "SubmitPullReviewOptions are options to submit a pending pull review",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Tag": {
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/CommitMeta"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "tarball_url": {
            "type": "string",
            "x-go-name": "TarballURL"
          },
          "zipball_url": {
            "type": "string",
            "x-go-name": "ZipballURL"
          }
        },
        "description": "Tag represents a repository tag",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Team": {
        "type": "object",
        "properties": {
          "can_create_org_repo": {
            "type": "boolean",
            "x-go-name": "CanCreateOrgRepo"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "includes_all_repositories": {
            "type": "boolean",
            "x-go-name": "IncludesAllRepositories"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "permission": {
            "type": "string",
            "enum": [
              "none",
              "read",
              "write",
              "admin",
              "owner"
            ],
            "x-go-name": "Permission"
          },
          "units": {
            "type": "array",
            "example": [
              "repo.code",
              "repo.issues",
              "repo.ext_issues",
              "repo.wiki",
              "repo.pulls",
              "repo.releases",
              "repo.projects",
              "repo.ext_wiki"
            ],
            "items": {
              "type": "string"
            },
            "x-go-name": "Units"
          }
        },
        "description": "Team represents a team in an organization",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "TimeStamp": {
        "type": "integer",
        "description": "TimeStamp defines a timestamp",
        "format": "int64",
        "x-go-package": "code.gitea.io/gitea/modules/timeutil"
      },
      "TopicName": {
        "type": "object",
        "properties": {
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "TopicNames"
          }
        },
        "description": "TopicName a list of repo topic names",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "TopicResponse": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "repo_count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RepoCount"
          },
          "topic_name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        },
        "description": "TopicResponse for returning topics",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "TrackedTime": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "issue": {
            "$ref": "#/components/schemas/Issue"
          },
          "issue_id": {
            "type": "integer",
            "description": "deprecated (only for backwards compatibility)",
            "format": "int64",
            "x-go-name": "IssueID"
          },
          "time": {
            "type": "integer",
            "description": "Time in seconds",
            "format": "int64",
            "x-go-name": "Time"
          },
          "user_id": {
            "type": "integer",
            "description": "deprecated (only for backwards compatibility)",
            "format": "int64",
            "x-go-name": "UserID"
          },
          "user_name": {
            "type": "string",
            "x-go-name": "UserName"
          }
        },
        "description": "TrackedTime worked time for an issue / pr",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "TransferRepoOption": {
        "required": [
          "new_owner"
        ],
        "type": "object",
        "properties": {
          "new_owner": {
            "type": "string",
            "x-go-name": "NewOwner"
          },
          "team_ids": {
            "type": "array",
            "description": "ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "x-go-name": "TeamIDs"
          }
        },
        "description": "TransferRepoOption options when transfer a repository's ownership",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "UpdateFileOptions": {
        "required": [
          "content",
          "sha"
        ],
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/Identity"
          },
          "branch": {
            "type": "string",
            "description": "branch (optional) to base this file from. if not given, the default branch is used",
            "x-go-name": "BranchName"
          },
          "committer": {
            "$ref": "#/components/schemas/Identity"
          },
          "content": {
            "type": "string",
            "description": "content must be base64 encoded",
            "x-go-name": "Content"
          },
          "dates": {
            "$ref": "#/components/schemas/CommitDateOptions"
          },
          "from_path": {
            "type": "string",
            "description": "from_path (optional) is the path of the original file which will be moved/renamed to the path in the URL",
            "x-go-name": "FromPath"
          },
          "message": {
            "type": "string",
            "description": "message (optional) for the commit of this file. if not supplied, a default message will be used",
            "x-go-name": "Message"
          },
          "new_branch": {
            "type": "string",
            "description": "new_branch (optional) will make a new branch from `branch` before creating the file",
            "x-go-name": "NewBranchName"
          },
          "sha": {
            "type": "string",
            "description": "sha is the SHA for the file that already exists",
            "x-go-name": "SHA"
          },
          "signoff": {
            "type": "boolean",
            "description": "Add a Signed-off-by trailer by the committer at the end of the commit log message.",
            "x-go-name": "Signoff"
          }
        },
        "description": "UpdateFileOptions options for updating files\nNote: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "User": {
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string",
            "description": "URL to the user's avatar",
            "x-go-name": "AvatarURL"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "email": {
            "type": "string",
            "format": "email",
            "x-go-name": "Email"
          },
          "full_name": {
            "type": "string",
            "description": "the user's full name",
            "x-go-name": "FullName"
          },
          "id": {
            "type": "integer",
            "description": "the user's id",
            "format": "int64",
            "x-go-name": "ID"
          },
          "is_admin": {
            "type": "boolean",
            "description": "Is the user an administrator",
            "x-go-name": "IsAdmin"
          },
          "language": {
            "type": "string",
            "description": "User locale",
            "x-go-name": "Language"
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "LastLogin"
          },
          "login": {
            "type": "string",
            "description": "the user's username",
            "x-go-name": "UserName"
          },
          "restricted": {
            "type": "boolean",
            "description": "Is user restricted",
            "x-go-name": "Restricted"
          }
        },
        "description": "User represents a user",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "UserHeatmapData": {
        "type": "object",
        "properties": {
          "contributions": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Contributions"
          },
          "timestamp": {
            "$ref": "#/components/schemas/TimeStamp"
          }
        },
        "description": "UserHeatmapData represents the data needed to create a heatmap",
        "x-go-package": "code.gitea.io/gitea/models"
      },
      "WatchInfo": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "ignored": {
            "type": "boolean",
            "x-go-name": "Ignored"
          },
          "reason": {
            "type": "object",
            "properties": {},
            "x-go-name": "Reason"
          },
          "repository_url": {
            "type": "string",
            "x-go-name": "RepositoryURL"
          },
          "subscribed": {
            "type": "boolean",
            "x-go-name": "Subscribed"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "description": "WatchInfo represents an API watch status of one repository",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      }
    },
    "responses": {
      "AccessToken": {
        "description": "AccessToken represents an API access token.",
        "headers": {
          "sha1": {
            "schema": {
              "type": "string"
            }
          },
          "name": {
            "schema": {
              "type": "string"
            }
          },
          "token_last_eight": {
            "schema": {
              "type": "string"
            }
          },
          "id": {
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "content": {}
      },
      "AccessTokenList": {
        "description": "AccessTokenList represents a list of API access token.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessToken"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessToken"
              }
            }
          }
        }
      },
      "AnnotatedTag": {
        "description": "AnnotatedTag",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AnnotatedTag"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/AnnotatedTag"
            }
          }
        }
      },
      "Attachment": {
        "description": "Attachment",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Attachment"
            }
          }
        }
      },
      "AttachmentList": {
        "description": "AttachmentList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Attachment"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Attachment"
              }
            }
          }
        }
      },
      "Branch": {
        "description": "Branch",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Branch"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Branch"
            }
          }
        }
      },
      "BranchList": {
        "description": "BranchList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Branch"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Branch"
              }
            }
          }
        }
      },
      "BranchProtection": {
        "description": "BranchProtection",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BranchProtection"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/BranchProtection"
            }
          }
        }
      },
      "BranchProtectionList": {
        "description": "BranchProtectionList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BranchProtection"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BranchProtection"
              }
            }
          }
        }
      },
      "CombinedStatus": {
        "description": "CombinedStatus",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CombinedStatus"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/CombinedStatus"
            }
          }
        }
      },
      "Comment": {
        "description": "Comment",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        }
      },
      "CommentList": {
        "description": "CommentList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        }
      },
      "Commit": {
        "description": "Commit",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Commit"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Commit"
            }
          }
        }
      },
      "CommitList": {
        "description": "CommitList",
        "headers": {
          "X-HasMore": {
            "description": "True if there is another page",
            "schema": {
              "type": "boolean"
            }
          },
          "X-PageCount": {
            "description": "Total number of pages",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          "X-PerPage": {
            "description": "Commits per page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          "X-Total": {
            "description": "Total commit count",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          "X-Page": {
            "description": "The current page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Commit"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Commit"
              }
            }
          }
        }
      },
      "CommitStatus": {
        "description": "CommitStatus",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CommitStatus"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/CommitStatus"
            }
          }
        }
      },
      "CommitStatusList": {
        "description": "CommitStatusList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CommitStatus"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CommitStatus"
              }
            }
          }
        }
      },
      "ContentsListResponse": {
        "description": "ContentsListResponse",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ContentsResponse"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ContentsResponse"
              }
            }
          }
        }
      },
      "ContentsResponse": {
        "description": "ContentsResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ContentsResponse"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/ContentsResponse"
            }
          }
        }
      },
      "CronList": {
        "description": "CronList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Cron"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Cron"
              }
            }
          }
        }
      },
      "DeployKey": {
        "description": "DeployKey",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeployKey"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/DeployKey"
            }
          }
        }
      },
      "DeployKeyList": {
        "description": "DeployKeyList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DeployKey"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DeployKey"
              }
            }
          }
        }
      },
      "EmailList": {
        "description": "EmailList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Email"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Email"
              }
            }
          }
        }
      },
      "EmptyRepository": {
        "description": "EmptyRepository",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/APIError"
            }
          }
        }
      },
      "FileDeleteResponse": {
        "description": "FileDeleteResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FileDeleteResponse"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/FileDeleteResponse"
            }
          }
        }
      },
      "FileResponse": {
        "description": "FileResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FileResponse"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/FileResponse"
            }
          }
        }
      },
      "GPGKey": {
        "description": "GPGKey",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GPGKey"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/GPGKey"
            }
          }
        }
      },
      "GPGKeyList": {
        "description": "GPGKeyList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GPGKey"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GPGKey"
              }
            }
          }
        }
      },
      "GeneralAPISettings": {
        "description": "GeneralAPISettings",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeneralAPISettings"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/GeneralAPISettings"
            }
          }
        }
      },
      "GeneralAttachmentSettings": {
        "description": "GeneralAttachmentSettings",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeneralAttachmentSettings"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/GeneralAttachmentSettings"
            }
          }
        }
      },
      "GeneralRepoSettings": {
        "description": "GeneralRepoSettings",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeneralRepoSettings"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/GeneralRepoSettings"
            }
          }
        }
      },
      "GeneralUISettings": {
        "description": "GeneralUISettings",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeneralUISettings"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/GeneralUISettings"
            }
          }
        }
      },
      "GitBlobResponse": {
        "description": "GitBlobResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GitBlobResponse"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/GitBlobResponse"
            }
          }
        }
      },
      "GitHook": {
        "description": "GitHook",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GitHook"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/GitHook"
            }
          }
        }
      },
      "GitHookList": {
        "description": "GitHookList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GitHook"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GitHook"
              }
            }
          }
        }
      },
      "GitTreeResponse": {
        "description": "GitTreeResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GitTreeResponse"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/GitTreeResponse"
            }
          }
        }
      },
      "Hook": {
        "description": "Hook",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Hook"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Hook"
            }
          }
        }
      },
      "HookList": {
        "description": "HookList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Hook"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Hook"
              }
            }
          }
        }
      },
      "Issue": {
        "description": "Issue",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Issue"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Issue"
            }
          }
        }
      },
      "IssueDeadline": {
        "description": "IssueDeadline",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/IssueDeadline"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/IssueDeadline"
            }
          }
        }
      },
      "IssueList": {
        "description": "IssueList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Issue"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Issue"
              }
            }
          }
        }
      },
      "IssueTemplates": {
        "description": "IssueTemplates",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IssueTemplate"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IssueTemplate"
              }
            }
          }
        }
      },
      "Label": {
        "description": "Label",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Label"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Label"
            }
          }
        }
      },
      "LabelList": {
        "description": "LabelList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Label"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Label"
              }
            }
          }
        }
      },
      "LanguageStatistics": {
        "description": "LanguageStatistics",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      },
      "MarkdownRender": {
        "description": "MarkdownRender is a rendered markdown document",
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "Milestone": {
        "description": "Milestone",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Milestone"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Milestone"
            }
          }
        }
      },
      "MilestoneList": {
        "description": "MilestoneList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Milestone"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Milestone"
              }
            }
          }
        }
      },
      "NotificationCount": {
        "description": "Number of unread notifications",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotificationCount"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/NotificationCount"
            }
          }
        }
      },
      "NotificationThread": {
        "description": "NotificationThread",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotificationThread"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/NotificationThread"
            }
          }
        }
      },
      "NotificationThreadList": {
        "description": "NotificationThreadList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NotificationThread"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NotificationThread"
              }
            }
          }
        }
      },
      "OAuth2Application": {
        "description": "OAuth2Application",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OAuth2Application"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/OAuth2Application"
            }
          }
        }
      },
      "OAuth2ApplicationList": {
        "description": "OAuth2ApplicationList represents a list of OAuth2 applications.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OAuth2Application"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OAuth2Application"
              }
            }
          }
        }
      },
      "Organization": {
        "description": "Organization",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Organization"
            }
          }
        }
      },
      "OrganizationList": {
        "description": "OrganizationList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Organization"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Organization"
              }
            }
          }
        }
      },
      "PublicKey": {
        "description": "PublicKey",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicKey"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/PublicKey"
            }
          }
        }
      },
      "PublicKeyList": {
        "description": "PublicKeyList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PublicKey"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PublicKey"
              }
            }
          }
        }
      },
      "PullRequest": {
        "description": "PullRequest",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PullRequest"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/PullRequest"
            }
          }
        }
      },
      "PullRequestList": {
        "description": "PullRequestList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PullRequest"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PullRequest"
              }
            }
          }
        }
      },
      "PullReview": {
        "description": "PullReview",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PullReview"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/PullReview"
            }
          }
        }
      },
      "PullReviewComment": {
        "description": "PullComment",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PullReviewComment"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/PullReviewComment"
            }
          }
        }
      },
      "PullReviewCommentList": {
        "description": "PullCommentList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PullReviewComment"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PullReviewComment"
              }
            }
          }
        }
      },
      "PullReviewList": {
        "description": "PullReviewList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PullReview"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PullReview"
              }
            }
          }
        }
      },
      "Reaction": {
        "description": "Reaction",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Reaction"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Reaction"
            }
          }
        }
      },
      "ReactionList": {
        "description": "ReactionList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Reaction"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Reaction"
              }
            }
          }
        }
      },
      "Reference": {
        "description": "Reference",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Reference"
            }
          }
        }
      },
      "ReferenceList": {
        "description": "ReferenceList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Reference"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Reference"
              }
            }
          }
        }
      },
      "Release": {
        "description": "Release",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Release"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Release"
            }
          }
        }
      },
      "ReleaseList": {
        "description": "ReleaseList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Release"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Release"
              }
            }
          }
        }
      },
      "Repository": {
        "description": "Repository",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Repository"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Repository"
            }
          }
        }
      },
      "RepositoryList": {
        "description": "RepositoryList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Repository"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Repository"
              }
            }
          }
        }
      },
      "SearchResults": {
        "description": "SearchResults",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SearchResults"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/SearchResults"
            }
          }
        }
      },
      "ServerVersion": {
        "description": "ServerVersion",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServerVersion"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/ServerVersion"
            }
          }
        }
      },
      "StopWatch": {
        "description": "StopWatch",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/StopWatch"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/StopWatch"
            }
          }
        }
      },
      "StopWatchList": {
        "description": "StopWatchList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/StopWatch"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/StopWatch"
              }
            }
          }
        }
      },
      "StringSlice": {
        "description": "StringSlice",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "Tag": {
        "description": "Tag",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "TagList": {
        "description": "TagList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        }
      },
      "Team": {
        "description": "Team",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Team"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/Team"
            }
          }
        }
      },
      "TeamList": {
        "description": "TeamList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Team"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Team"
              }
            }
          }
        }
      },
      "TopicListResponse": {
        "description": "TopicListResponse",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TopicResponse"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TopicResponse"
              }
            }
          }
        }
      },
      "TopicNames": {
        "description": "TopicNames",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TopicName"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/TopicName"
            }
          }
        }
      },
      "TrackedTime": {
        "description": "TrackedTime",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TrackedTime"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/TrackedTime"
            }
          }
        }
      },
      "TrackedTimeList": {
        "description": "TrackedTimeList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TrackedTime"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TrackedTime"
              }
            }
          }
        }
      },
      "User": {
        "description": "User",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UserHeatmapData": {
        "description": "UserHeatmapData",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserHeatmapData"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserHeatmapData"
              }
            }
          }
        }
      },
      "UserList": {
        "description": "UserList",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "WatchInfo": {
        "description": "WatchInfo",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WatchInfo"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/WatchInfo"
            }
          }
        }
      },
      "conflict": {
        "description": "APIConflict is a conflict empty response",
        "content": {}
      },
      "empty": {
        "description": "APIEmpty is an empty response",
        "content": {}
      },
      "error": {
        "description": "APIError is error format response",
        "headers": {
          "message": {
            "schema": {
              "type": "string"
            }
          },
          "url": {
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {}
      },
      "forbidden": {
        "description": "APIForbiddenError is a forbidden error response",
        "headers": {
          "message": {
            "schema": {
              "type": "string"
            }
          },
          "url": {
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {}
      },
      "invalidTopicsError": {
        "description": "APIInvalidTopicsError is error format response to invalid topics",
        "headers": {
          "invalidTopics": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "message": {
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {}
      },
      "notFound": {
        "description": "APINotFound is a not found empty response",
        "content": {}
      },
      "parameterBodies": {
        "description": "parameterBodies",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PullReviewRequestOptions"
            }
          },
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/PullReviewRequestOptions"
            }
          }
        }
      },
      "redirect": {
        "description": "APIRedirect is a redirect response",
        "content": {}
      },
      "string": {
        "description": "APIString is a string response",
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "validationError": {
        "description": "APIValidationError is error format response related to input validation",
        "headers": {
          "message": {
            "schema": {
              "type": "string"
            }
          },
          "url": {
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {}
      }
    },
    "securitySchemes": {
      "AccessToken": {
        "type": "apiKey",
        "name": "access_token",
        "in": "query"
      },
      "AuthorizationHeaderToken": {
        "type": "apiKey",
        "description": "API tokens must be prepended with \"token\" followed by a space.",
        "name": "Authorization",
        "in": "header"
      },
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "SudoHeader": {
        "type": "apiKey",
        "description": "Sudo API request as the user provided as the key. Admin privileges are required.",
        "name": "Sudo",
        "in": "header"
      },
      "SudoParam": {
        "type": "apiKey",
        "description": "Sudo API request as the user provided as the key. Admin privileges are required.",
        "name": "sudo",
        "in": "query"
      },
      "TOTPHeader": {
        "type": "apiKey",
        "description": "Must be used in combination with BasicAuth if two-factor authentication is enabled.",
        "name": "X-GITEA-OTP",
        "in": "header"
      },
      "Token": {
        "type": "apiKey",
        "name": "token",
        "in": "query"
      }
    }
  }
}