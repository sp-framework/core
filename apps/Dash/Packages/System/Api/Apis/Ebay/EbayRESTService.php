<?php

namespace Apps\Dash\Packages\System\Api\Apis\Ebay;

use Apps\Dash\Packages\System\Api\Base\BaseRESTService;

/**
 * The base class for every eBay REST service class.
 */
class EbayRESTService extends BaseRESTService
{
    /**
     * HTTP header constant. Describes the natural language provided in the field values of the request payload.
     */
    const HDR_REQUEST_LANGUAGE = 'Content-Language';

    /**
     * HTTP header constant. Tells the server the natural language in which the client desires the response.
     */
    const HDR_RESPONSE_LANGUAGE = 'Accept-Language';

    /**
     * HTTP header constant. Tells the server the encoding in which the client desires the response.
     */
    const HDR_RESPONSE_ENCODING = 'Accept-Encoding';

    /**
     * @param array $config Configuration option values.
     */
    public function __construct(array $config)
    {
        parent::__construct($config);
    }

    /**
     * Returns definitions for each configuration option that is supported.
     *
     * @return array An associative array of configuration definitions.
     */
    public static function getConfigDefinitions()
    {
        return [
            'debug'             => [
                'valid'             => ['bool', 'array'],
                'fn'                => 'Apps\Dash\Packages\System\Api\Apis\Ebay\EbayFunctions::applyDebug',
                'default'           => false
            ],
            'sandbox'           => [
                'valid'             => ['bool'],
                'default'           => false
            ],
            'authorization'     => [
                'valid'             => ['string'],
                'default'           => self::$config['user_access_token'],
                'required'          => true
            ],
            'marketplaceId'     => [
                'valid'             => ['string'],
                'default'           => self::$config['marketplace_id'],
            ],
            'compressResponse'  => [
                'valid'             => ['bool'],
                'default'           => false
            ],
            'httpHandler'       => [
                'valid'             => ['callable'],
                'default'           => 'Apps\Dash\Packages\System\Api\Apis\Ebay\EbayFunctions::defaultHttpHandler'
            ],
            'httpOptions'       => [
                'valid'             => ['array'],
                'default'           => [
                    'http_errors'       => false,
                    'timeout'           => 300
                ]
            ],
            'requestLanguage'   => [
                'valid'             => ['string']
            ],
            'responseLanguage'  => [
                'valid'             => ['string']
            ]
        ];
    }

    /**
     * Helper function to return the URL as determined by the sandbox configuration option.
     *
     * @return string Either the production or sandbox URL.
     */
    protected function getUrl()
    {
        if (isset(static::$endPoints['primary'])) {
            if ($this->getConfig('sandbox')) {
                if (isset(static::$endPoints['primary']['sandbox'])) {
                    return static::$endPoints['primary']['sandbox'];
                }
                if (static::$config['api_type'] === 'ebay') {
                    return $this->buildEbaySandboxUrl(static::$endPoints['primary']['production']);
                }
            } else {
                return static::$endPoints['primary']['production'];
            }
        } else {
            if ($this->getConfig('sandbox')) {
                if (isset(static::$endPoints['primary']['sandbox'])) {
                    return static::$endPoints['primary']['sandbox'];
                }
                if (static::$config['api_type'] === 'ebay') {
                    return $this->buildEbaySandboxUrl(static::$endPoints['primary']['production']);
                }//Improve on this. URL should be autogenerated with prefix/suffix provided.
            } else {
                return static::$endPoints['primary']['production'];
            }
        }
    }

    protected function buildEbaySandboxUrl($url)
    {
        $url = ltrim($url, 'https://');

        $urlArr = explode('/', $url);

        $uriArr = explode('.', $urlArr[0]);

        $url = $uriArr[0] . '.sandbox.';
        unset($urlArr[0]);
        unset($uriArr[0]);

        return 'https://' . $url . implode('.', $uriArr) . '/' . implode('/', $urlArr);
    }

    /**
     * Helper function that builds the HTTP request headers.
     *
     * @param string $body The request body.
     *
     * @return array An associative array of HTTP headers.
     */
    protected function buildRequestHeaders($body)
    {
        $headers = $this->getEbayHeaders();

        $headers['Accept'] = 'application/json';
        $headers['Content-Type'] = 'application/json';
        $headers['Content-Length'] = strlen($body);

        // Add optional headers.
        if ($this->getConfig('requestLanguage')) {
            $headers[self::HDR_REQUEST_LANGUAGE] = $this->getConfig('requestLanguage');
        }

        if ($this->getConfig('responseLanguage')) {
            $headers[self::HDR_RESPONSE_LANGUAGE] = $this->getConfig('responseLanguage');
        }

        if ($this->getConfig('compressResponse')) {
            $headers[self::HDR_RESPONSE_ENCODING] = 'application/gzip';
        }

        return $headers;
    }
}