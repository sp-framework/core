<?php

namespace Apps\Dash\Packages\System\Api\Apis\Ebay;

use Apps\Dash\Packages\System\Api\Base\BaseXMLService;

/**
 * The base class for every eBay service class.
 */
class EbayXMLService extends BaseXMLService
{
    /**
     * @param array $config Configuration option values.
     */
    public function __construct(array $config) {

        parent::__construct($config);
    }

    /**
     * Returns definitions for each configuration option that is supported.
     *
     * @return array An associative array of configuration definitions.
     */
    public static function getConfigDefinitions()
    {
        return [
            'debug'             => [
                'valid'             => ['bool', 'array'],
                'fn'                => 'Apps\Dash\Packages\System\Api\Apis\Ebay\EbayFunctions::applyDebug',
                'default'           => false
            ],
            'sandbox'           => [
                'valid'             => ['bool'],
                'default'           => false
            ],
            'compressResponse'  => [
                'valid'             => ['bool'],
                'default'           => false
            ],
            'httpHandler'       => [
                'valid'             => ['callable'],
                'default'           => 'Apps\Dash\Packages\System\Api\Base\BaseFunctions::defaultHttpHandler'
            ],
            'httpOptions'       => [
                'valid'             => ['array'],
                'default'           => [
                    'http_errors'       => false,
                    'timeout'           => 300
                ]
            ]
        ];
    }

    /**
     * Helper function to return the URL as determined by the sandbox configuration option.
     *
     * @return string Either the production or sandbox URL.
     */
    protected function getUrl($name)
    {
        if (isset(static::$endPoints[$name])) {
            if ($this->getConfig('sandbox')) {
                if (isset(static::$endPoints[$name]['sandbox'])) {
                    return static::$endPoints[$name]['sandbox'];
                }
                if (static::$config['api_type'] === 'ebay') {
                    return rtrim($this->buildEbaySandboxUrl(static::$endPoints[$name]['production']), '/v1');
                }
            } else {
                return rtrim('v1', static::$endPoints[$name]['production']);
            }
        } else {
            if ($this->getConfig('sandbox')) {
                if (isset(static::$endPoints[$name]['sandbox'])) {
                    return static::$endPoints['primary']['sandbox'];
                }
                if (static::$config['api_type'] === 'ebay') {
                    return rtrim($this->buildEbaySandboxUrl(static::$endPoints['primary']['production']), '/v1');
                }//Improve on this. URL should be autogenerated with prefix/suffix provided.
            } else {
                return rtrim(static::$endPoints['primary']['production'], '/v1');
            }
        }
    }

    protected function buildEbaySandboxUrl($url)
    {
        $url = ltrim($url, 'https://');

        $urlArr = explode('/', $url);

        $uriArr = explode('.', $urlArr[0]);

        $url = $uriArr[0] . '.sandbox.';
        unset($urlArr[0]);
        unset($uriArr[0]);

        return 'https://' . $url . implode('.', $uriArr) . '/' . implode('/', $urlArr);
    }
}