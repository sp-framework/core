<?php
/**
 * PullRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.19.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Base\ObjectSerializer;

/**
 * PullRequest Class Doc Comment
 *
 * @category Class
 * @description PullRequest represents a pull request
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PullRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PullRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_maintainer_edit' => 'bool',
        'assignee' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\User',
        'assignees' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\User[]',
        'base' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\PRBranchInfo',
        'body' => 'string',
        'closed_at' => '\DateTime',
        'comments' => 'int',
        'created_at' => '\DateTime',
        'diff_url' => 'string',
        'due_date' => '\DateTime',
        'head' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\PRBranchInfo',
        'html_url' => 'string',
        'id' => 'int',
        'is_locked' => 'bool',
        'labels' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\Label[]',
        'merge_base' => 'string',
        'merge_commit_sha' => 'string',
        'mergeable' => 'bool',
        'merged' => 'bool',
        'merged_at' => '\DateTime',
        'merged_by' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\User',
        'milestone' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\Milestone',
        'number' => 'int',
        'patch_url' => 'string',
        'state' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\StateType',
        'title' => 'string',
        'updated_at' => '\DateTime',
        'url' => 'string',
        'user' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\User'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_maintainer_edit' => null,
        'assignee' => null,
        'assignees' => null,
        'base' => null,
        'body' => null,
        'closed_at' => 'date-time',
        'comments' => 'int64',
        'created_at' => 'date-time',
        'diff_url' => null,
        'due_date' => 'date-time',
        'head' => null,
        'html_url' => null,
        'id' => 'int64',
        'is_locked' => null,
        'labels' => null,
        'merge_base' => null,
        'merge_commit_sha' => null,
        'mergeable' => null,
        'merged' => null,
        'merged_at' => 'date-time',
        'merged_by' => null,
        'milestone' => null,
        'number' => 'int64',
        'patch_url' => null,
        'state' => null,
        'title' => null,
        'updated_at' => 'date-time',
        'url' => null,
        'user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_maintainer_edit' => 'allow_maintainer_edit',
        'assignee' => 'assignee',
        'assignees' => 'assignees',
        'base' => 'base',
        'body' => 'body',
        'closed_at' => 'closed_at',
        'comments' => 'comments',
        'created_at' => 'created_at',
        'diff_url' => 'diff_url',
        'due_date' => 'due_date',
        'head' => 'head',
        'html_url' => 'html_url',
        'id' => 'id',
        'is_locked' => 'is_locked',
        'labels' => 'labels',
        'merge_base' => 'merge_base',
        'merge_commit_sha' => 'merge_commit_sha',
        'mergeable' => 'mergeable',
        'merged' => 'merged',
        'merged_at' => 'merged_at',
        'merged_by' => 'merged_by',
        'milestone' => 'milestone',
        'number' => 'number',
        'patch_url' => 'patch_url',
        'state' => 'state',
        'title' => 'title',
        'updated_at' => 'updated_at',
        'url' => 'url',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_maintainer_edit' => 'setAllowMaintainerEdit',
        'assignee' => 'setAssignee',
        'assignees' => 'setAssignees',
        'base' => 'setBase',
        'body' => 'setBody',
        'closed_at' => 'setClosedAt',
        'comments' => 'setComments',
        'created_at' => 'setCreatedAt',
        'diff_url' => 'setDiffUrl',
        'due_date' => 'setDueDate',
        'head' => 'setHead',
        'html_url' => 'setHtmlUrl',
        'id' => 'setId',
        'is_locked' => 'setIsLocked',
        'labels' => 'setLabels',
        'merge_base' => 'setMergeBase',
        'merge_commit_sha' => 'setMergeCommitSha',
        'mergeable' => 'setMergeable',
        'merged' => 'setMerged',
        'merged_at' => 'setMergedAt',
        'merged_by' => 'setMergedBy',
        'milestone' => 'setMilestone',
        'number' => 'setNumber',
        'patch_url' => 'setPatchUrl',
        'state' => 'setState',
        'title' => 'setTitle',
        'updated_at' => 'setUpdatedAt',
        'url' => 'setUrl',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_maintainer_edit' => 'getAllowMaintainerEdit',
        'assignee' => 'getAssignee',
        'assignees' => 'getAssignees',
        'base' => 'getBase',
        'body' => 'getBody',
        'closed_at' => 'getClosedAt',
        'comments' => 'getComments',
        'created_at' => 'getCreatedAt',
        'diff_url' => 'getDiffUrl',
        'due_date' => 'getDueDate',
        'head' => 'getHead',
        'html_url' => 'getHtmlUrl',
        'id' => 'getId',
        'is_locked' => 'getIsLocked',
        'labels' => 'getLabels',
        'merge_base' => 'getMergeBase',
        'merge_commit_sha' => 'getMergeCommitSha',
        'mergeable' => 'getMergeable',
        'merged' => 'getMerged',
        'merged_at' => 'getMergedAt',
        'merged_by' => 'getMergedBy',
        'milestone' => 'getMilestone',
        'number' => 'getNumber',
        'patch_url' => 'getPatchUrl',
        'state' => 'getState',
        'title' => 'getTitle',
        'updated_at' => 'getUpdatedAt',
        'url' => 'getUrl',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_maintainer_edit'] = isset($data['allow_maintainer_edit']) ? $data['allow_maintainer_edit'] : null;
        $this->container['assignee'] = isset($data['assignee']) ? $data['assignee'] : null;
        $this->container['assignees'] = isset($data['assignees']) ? $data['assignees'] : null;
        $this->container['base'] = isset($data['base']) ? $data['base'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['closed_at'] = isset($data['closed_at']) ? $data['closed_at'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['diff_url'] = isset($data['diff_url']) ? $data['diff_url'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['head'] = isset($data['head']) ? $data['head'] : null;
        $this->container['html_url'] = isset($data['html_url']) ? $data['html_url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_locked'] = isset($data['is_locked']) ? $data['is_locked'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['merge_base'] = isset($data['merge_base']) ? $data['merge_base'] : null;
        $this->container['merge_commit_sha'] = isset($data['merge_commit_sha']) ? $data['merge_commit_sha'] : null;
        $this->container['mergeable'] = isset($data['mergeable']) ? $data['mergeable'] : null;
        $this->container['merged'] = isset($data['merged']) ? $data['merged'] : null;
        $this->container['merged_at'] = isset($data['merged_at']) ? $data['merged_at'] : null;
        $this->container['merged_by'] = isset($data['merged_by']) ? $data['merged_by'] : null;
        $this->container['milestone'] = isset($data['milestone']) ? $data['milestone'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['patch_url'] = isset($data['patch_url']) ? $data['patch_url'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_maintainer_edit
     *
     * @return bool
     */
    public function getAllowMaintainerEdit()
    {
        return $this->container['allow_maintainer_edit'];
    }

    /**
     * Sets allow_maintainer_edit
     *
     * @param bool $allow_maintainer_edit allow_maintainer_edit
     *
     * @return $this
     */
    public function setAllowMaintainerEdit($allow_maintainer_edit)
    {
        $this->container['allow_maintainer_edit'] = $allow_maintainer_edit;

        return $this;
    }

    /**
     * Gets assignee
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\User
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\User $assignee assignee
     *
     * @return $this
     */
    public function setAssignee($assignee)
    {
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets assignees
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\User[]
     */
    public function getAssignees()
    {
        return $this->container['assignees'];
    }

    /**
     * Sets assignees
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\User[] $assignees assignees
     *
     * @return $this
     */
    public function setAssignees($assignees)
    {
        $this->container['assignees'] = $assignees;

        return $this;
    }

    /**
     * Gets base
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\PRBranchInfo
     */
    public function getBase()
    {
        return $this->container['base'];
    }

    /**
     * Sets base
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\PRBranchInfo $base base
     *
     * @return $this
     */
    public function setBase($base)
    {
        $this->container['base'] = $base;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets closed_at
     *
     * @return \DateTime
     */
    public function getClosedAt()
    {
        return $this->container['closed_at'];
    }

    /**
     * Sets closed_at
     *
     * @param \DateTime $closed_at closed_at
     *
     * @return $this
     */
    public function setClosedAt($closed_at)
    {
        $this->container['closed_at'] = $closed_at;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return int
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param int $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets diff_url
     *
     * @return string
     */
    public function getDiffUrl()
    {
        return $this->container['diff_url'];
    }

    /**
     * Sets diff_url
     *
     * @param string $diff_url diff_url
     *
     * @return $this
     */
    public function setDiffUrl($diff_url)
    {
        $this->container['diff_url'] = $diff_url;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets head
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\PRBranchInfo
     */
    public function getHead()
    {
        return $this->container['head'];
    }

    /**
     * Sets head
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\PRBranchInfo $head head
     *
     * @return $this
     */
    public function setHead($head)
    {
        $this->container['head'] = $head;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return $this
     */
    public function setHtmlUrl($html_url)
    {
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_locked
     *
     * @return bool
     */
    public function getIsLocked()
    {
        return $this->container['is_locked'];
    }

    /**
     * Sets is_locked
     *
     * @param bool $is_locked is_locked
     *
     * @return $this
     */
    public function setIsLocked($is_locked)
    {
        $this->container['is_locked'] = $is_locked;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\Label[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\Label[] $labels labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets merge_base
     *
     * @return string
     */
    public function getMergeBase()
    {
        return $this->container['merge_base'];
    }

    /**
     * Sets merge_base
     *
     * @param string $merge_base merge_base
     *
     * @return $this
     */
    public function setMergeBase($merge_base)
    {
        $this->container['merge_base'] = $merge_base;

        return $this;
    }

    /**
     * Gets merge_commit_sha
     *
     * @return string
     */
    public function getMergeCommitSha()
    {
        return $this->container['merge_commit_sha'];
    }

    /**
     * Sets merge_commit_sha
     *
     * @param string $merge_commit_sha merge_commit_sha
     *
     * @return $this
     */
    public function setMergeCommitSha($merge_commit_sha)
    {
        $this->container['merge_commit_sha'] = $merge_commit_sha;

        return $this;
    }

    /**
     * Gets mergeable
     *
     * @return bool
     */
    public function getMergeable()
    {
        return $this->container['mergeable'];
    }

    /**
     * Sets mergeable
     *
     * @param bool $mergeable mergeable
     *
     * @return $this
     */
    public function setMergeable($mergeable)
    {
        $this->container['mergeable'] = $mergeable;

        return $this;
    }

    /**
     * Gets merged
     *
     * @return bool
     */
    public function getMerged()
    {
        return $this->container['merged'];
    }

    /**
     * Sets merged
     *
     * @param bool $merged merged
     *
     * @return $this
     */
    public function setMerged($merged)
    {
        $this->container['merged'] = $merged;

        return $this;
    }

    /**
     * Gets merged_at
     *
     * @return \DateTime
     */
    public function getMergedAt()
    {
        return $this->container['merged_at'];
    }

    /**
     * Sets merged_at
     *
     * @param \DateTime $merged_at merged_at
     *
     * @return $this
     */
    public function setMergedAt($merged_at)
    {
        $this->container['merged_at'] = $merged_at;

        return $this;
    }

    /**
     * Gets merged_by
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\User
     */
    public function getMergedBy()
    {
        return $this->container['merged_by'];
    }

    /**
     * Sets merged_by
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\User $merged_by merged_by
     *
     * @return $this
     */
    public function setMergedBy($merged_by)
    {
        $this->container['merged_by'] = $merged_by;

        return $this;
    }

    /**
     * Gets milestone
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\Milestone
     */
    public function getMilestone()
    {
        return $this->container['milestone'];
    }

    /**
     * Sets milestone
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\Milestone $milestone milestone
     *
     * @return $this
     */
    public function setMilestone($milestone)
    {
        $this->container['milestone'] = $milestone;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets patch_url
     *
     * @return string
     */
    public function getPatchUrl()
    {
        return $this->container['patch_url'];
    }

    /**
     * Sets patch_url
     *
     * @param string $patch_url patch_url
     *
     * @return $this
     */
    public function setPatchUrl($patch_url)
    {
        $this->container['patch_url'] = $patch_url;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\StateType
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\StateType $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\User
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model\User $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


