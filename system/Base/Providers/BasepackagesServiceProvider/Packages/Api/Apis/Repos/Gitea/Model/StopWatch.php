<?php
/**
 * StopWatch
 *
 * PHP version 5
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.19.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Base\ObjectSerializer;

/**
 * StopWatch Class Doc Comment
 *
 * @category Class
 * @description StopWatch represent a running stopwatch
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\Api\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StopWatch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StopWatch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => '\DateTime',
        'duration' => 'string',
        'issue_index' => 'int',
        'issue_title' => 'string',
        'repo_name' => 'string',
        'repo_owner_name' => 'string',
        'seconds' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => 'date-time',
        'duration' => null,
        'issue_index' => 'int64',
        'issue_title' => null,
        'repo_name' => null,
        'repo_owner_name' => null,
        'seconds' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'duration' => 'duration',
        'issue_index' => 'issue_index',
        'issue_title' => 'issue_title',
        'repo_name' => 'repo_name',
        'repo_owner_name' => 'repo_owner_name',
        'seconds' => 'seconds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'duration' => 'setDuration',
        'issue_index' => 'setIssueIndex',
        'issue_title' => 'setIssueTitle',
        'repo_name' => 'setRepoName',
        'repo_owner_name' => 'setRepoOwnerName',
        'seconds' => 'setSeconds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'duration' => 'getDuration',
        'issue_index' => 'getIssueIndex',
        'issue_title' => 'getIssueTitle',
        'repo_name' => 'getRepoName',
        'repo_owner_name' => 'getRepoOwnerName',
        'seconds' => 'getSeconds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['issue_index'] = isset($data['issue_index']) ? $data['issue_index'] : null;
        $this->container['issue_title'] = isset($data['issue_title']) ? $data['issue_title'] : null;
        $this->container['repo_name'] = isset($data['repo_name']) ? $data['repo_name'] : null;
        $this->container['repo_owner_name'] = isset($data['repo_owner_name']) ? $data['repo_owner_name'] : null;
        $this->container['seconds'] = isset($data['seconds']) ? $data['seconds'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets issue_index
     *
     * @return int
     */
    public function getIssueIndex()
    {
        return $this->container['issue_index'];
    }

    /**
     * Sets issue_index
     *
     * @param int $issue_index issue_index
     *
     * @return $this
     */
    public function setIssueIndex($issue_index)
    {
        $this->container['issue_index'] = $issue_index;

        return $this;
    }

    /**
     * Gets issue_title
     *
     * @return string
     */
    public function getIssueTitle()
    {
        return $this->container['issue_title'];
    }

    /**
     * Sets issue_title
     *
     * @param string $issue_title issue_title
     *
     * @return $this
     */
    public function setIssueTitle($issue_title)
    {
        $this->container['issue_title'] = $issue_title;

        return $this;
    }

    /**
     * Gets repo_name
     *
     * @return string
     */
    public function getRepoName()
    {
        return $this->container['repo_name'];
    }

    /**
     * Sets repo_name
     *
     * @param string $repo_name repo_name
     *
     * @return $this
     */
    public function setRepoName($repo_name)
    {
        $this->container['repo_name'] = $repo_name;

        return $this;
    }

    /**
     * Gets repo_owner_name
     *
     * @return string
     */
    public function getRepoOwnerName()
    {
        return $this->container['repo_owner_name'];
    }

    /**
     * Sets repo_owner_name
     *
     * @param string $repo_owner_name repo_owner_name
     *
     * @return $this
     */
    public function setRepoOwnerName($repo_owner_name)
    {
        $this->container['repo_owner_name'] = $repo_owner_name;

        return $this;
    }

    /**
     * Gets seconds
     *
     * @return int
     */
    public function getSeconds()
    {
        return $this->container['seconds'];
    }

    /**
     * Sets seconds
     *
     * @param int $seconds seconds
     *
     * @return $this
     */
    public function setSeconds($seconds)
    {
        $this->container['seconds'] = $seconds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


