<?php
/**
 * Activity
 *
 * PHP version 5
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.7
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Base\ObjectSerializer;

/**
 * Activity Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Activity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Activity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'act_user' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User',
        'act_user_id' => 'int',
        'comment' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Comment',
        'comment_id' => 'int',
        'content' => 'string',
        'created' => '\DateTime',
        'id' => 'int',
        'is_private' => 'bool',
        'op_type' => 'string',
        'ref_name' => 'string',
        'repo' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Repository',
        'repo_id' => 'int',
        'user_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'act_user' => null,
        'act_user_id' => 'int64',
        'comment' => null,
        'comment_id' => 'int64',
        'content' => null,
        'created' => 'date-time',
        'id' => 'int64',
        'is_private' => null,
        'op_type' => null,
        'ref_name' => null,
        'repo' => null,
        'repo_id' => 'int64',
        'user_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'act_user' => 'act_user',
        'act_user_id' => 'act_user_id',
        'comment' => 'comment',
        'comment_id' => 'comment_id',
        'content' => 'content',
        'created' => 'created',
        'id' => 'id',
        'is_private' => 'is_private',
        'op_type' => 'op_type',
        'ref_name' => 'ref_name',
        'repo' => 'repo',
        'repo_id' => 'repo_id',
        'user_id' => 'user_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'act_user' => 'setActUser',
        'act_user_id' => 'setActUserId',
        'comment' => 'setComment',
        'comment_id' => 'setCommentId',
        'content' => 'setContent',
        'created' => 'setCreated',
        'id' => 'setId',
        'is_private' => 'setIsPrivate',
        'op_type' => 'setOpType',
        'ref_name' => 'setRefName',
        'repo' => 'setRepo',
        'repo_id' => 'setRepoId',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'act_user' => 'getActUser',
        'act_user_id' => 'getActUserId',
        'comment' => 'getComment',
        'comment_id' => 'getCommentId',
        'content' => 'getContent',
        'created' => 'getCreated',
        'id' => 'getId',
        'is_private' => 'getIsPrivate',
        'op_type' => 'getOpType',
        'ref_name' => 'getRefName',
        'repo' => 'getRepo',
        'repo_id' => 'getRepoId',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['act_user'] = isset($data['act_user']) ? $data['act_user'] : null;
        $this->container['act_user_id'] = isset($data['act_user_id']) ? $data['act_user_id'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['comment_id'] = isset($data['comment_id']) ? $data['comment_id'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_private'] = isset($data['is_private']) ? $data['is_private'] : null;
        $this->container['op_type'] = isset($data['op_type']) ? $data['op_type'] : null;
        $this->container['ref_name'] = isset($data['ref_name']) ? $data['ref_name'] : null;
        $this->container['repo'] = isset($data['repo']) ? $data['repo'] : null;
        $this->container['repo_id'] = isset($data['repo_id']) ? $data['repo_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets act_user
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User
     */
    public function getActUser()
    {
        return $this->container['act_user'];
    }

    /**
     * Sets act_user
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User $act_user act_user
     *
     * @return $this
     */
    public function setActUser($act_user)
    {
        $this->container['act_user'] = $act_user;

        return $this;
    }

    /**
     * Gets act_user_id
     *
     * @return int
     */
    public function getActUserId()
    {
        return $this->container['act_user_id'];
    }

    /**
     * Sets act_user_id
     *
     * @param int $act_user_id act_user_id
     *
     * @return $this
     */
    public function setActUserId($act_user_id)
    {
        $this->container['act_user_id'] = $act_user_id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Comment
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Comment $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets comment_id
     *
     * @return int
     */
    public function getCommentId()
    {
        return $this->container['comment_id'];
    }

    /**
     * Sets comment_id
     *
     * @param int $comment_id comment_id
     *
     * @return $this
     */
    public function setCommentId($comment_id)
    {
        $this->container['comment_id'] = $comment_id;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content content
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_private
     *
     * @return bool
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     *
     * @param bool $is_private is_private
     *
     * @return $this
     */
    public function setIsPrivate($is_private)
    {
        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets op_type
     *
     * @return string
     */
    public function getOpType()
    {
        return $this->container['op_type'];
    }

    /**
     * Sets op_type
     *
     * @param string $op_type op_type
     *
     * @return $this
     */
    public function setOpType($op_type)
    {
        $this->container['op_type'] = $op_type;

        return $this;
    }

    /**
     * Gets ref_name
     *
     * @return string
     */
    public function getRefName()
    {
        return $this->container['ref_name'];
    }

    /**
     * Sets ref_name
     *
     * @param string $ref_name ref_name
     *
     * @return $this
     */
    public function setRefName($ref_name)
    {
        $this->container['ref_name'] = $ref_name;

        return $this;
    }

    /**
     * Gets repo
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Repository
     */
    public function getRepo()
    {
        return $this->container['repo'];
    }

    /**
     * Sets repo
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Repository $repo repo
     *
     * @return $this
     */
    public function setRepo($repo)
    {
        $this->container['repo'] = $repo;

        return $this;
    }

    /**
     * Gets repo_id
     *
     * @return int
     */
    public function getRepoId()
    {
        return $this->container['repo_id'];
    }

    /**
     * Sets repo_id
     *
     * @param int $repo_id repo_id
     *
     * @return $this
     */
    public function setRepoId($repo_id)
    {
        $this->container['repo_id'] = $repo_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


