<?php
/**
 * Branch
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.21.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\ObjectSerializer;

/**
 * Branch Class Doc Comment
 *
 * @category Class
 * @description Branch represents a repository branch
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Branch implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Branch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'commit' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\PayloadCommit',
        'effective_branch_protection_name' => 'string',
        'enable_status_check' => 'bool',
        'name' => 'string',
        'protected' => 'bool',
        'required_approvals' => 'int',
        'status_check_contexts' => 'string[]',
        'user_can_merge' => 'bool',
        'user_can_push' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'commit' => null,
        'effective_branch_protection_name' => null,
        'enable_status_check' => null,
        'name' => null,
        'protected' => null,
        'required_approvals' => 'int64',
        'status_check_contexts' => null,
        'user_can_merge' => null,
        'user_can_push' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'commit' => false,
        'effective_branch_protection_name' => false,
        'enable_status_check' => false,
        'name' => false,
        'protected' => false,
        'required_approvals' => false,
        'status_check_contexts' => false,
        'user_can_merge' => false,
        'user_can_push' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'commit' => 'commit',
        'effective_branch_protection_name' => 'effective_branch_protection_name',
        'enable_status_check' => 'enable_status_check',
        'name' => 'name',
        'protected' => 'protected',
        'required_approvals' => 'required_approvals',
        'status_check_contexts' => 'status_check_contexts',
        'user_can_merge' => 'user_can_merge',
        'user_can_push' => 'user_can_push'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'commit' => 'setCommit',
        'effective_branch_protection_name' => 'setEffectiveBranchProtectionName',
        'enable_status_check' => 'setEnableStatusCheck',
        'name' => 'setName',
        'protected' => 'setProtected',
        'required_approvals' => 'setRequiredApprovals',
        'status_check_contexts' => 'setStatusCheckContexts',
        'user_can_merge' => 'setUserCanMerge',
        'user_can_push' => 'setUserCanPush'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'commit' => 'getCommit',
        'effective_branch_protection_name' => 'getEffectiveBranchProtectionName',
        'enable_status_check' => 'getEnableStatusCheck',
        'name' => 'getName',
        'protected' => 'getProtected',
        'required_approvals' => 'getRequiredApprovals',
        'status_check_contexts' => 'getStatusCheckContexts',
        'user_can_merge' => 'getUserCanMerge',
        'user_can_push' => 'getUserCanPush'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('commit', $data ?? [], null);
        $this->setIfExists('effective_branch_protection_name', $data ?? [], null);
        $this->setIfExists('enable_status_check', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('protected', $data ?? [], null);
        $this->setIfExists('required_approvals', $data ?? [], null);
        $this->setIfExists('status_check_contexts', $data ?? [], null);
        $this->setIfExists('user_can_merge', $data ?? [], null);
        $this->setIfExists('user_can_push', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets commit
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\PayloadCommit|null
     */
    public function getCommit()
    {
        return $this->container['commit'];
    }

    /**
     * Sets commit
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\PayloadCommit|null $commit commit
     *
     * @return self
     */
    public function setCommit($commit)
    {
        if (is_null($commit)) {
            throw new \InvalidArgumentException('non-nullable commit cannot be null');
        }
        $this->container['commit'] = $commit;

        return $this;
    }

    /**
     * Gets effective_branch_protection_name
     *
     * @return string|null
     */
    public function getEffectiveBranchProtectionName()
    {
        return $this->container['effective_branch_protection_name'];
    }

    /**
     * Sets effective_branch_protection_name
     *
     * @param string|null $effective_branch_protection_name effective_branch_protection_name
     *
     * @return self
     */
    public function setEffectiveBranchProtectionName($effective_branch_protection_name)
    {
        if (is_null($effective_branch_protection_name)) {
            throw new \InvalidArgumentException('non-nullable effective_branch_protection_name cannot be null');
        }
        $this->container['effective_branch_protection_name'] = $effective_branch_protection_name;

        return $this;
    }

    /**
     * Gets enable_status_check
     *
     * @return bool|null
     */
    public function getEnableStatusCheck()
    {
        return $this->container['enable_status_check'];
    }

    /**
     * Sets enable_status_check
     *
     * @param bool|null $enable_status_check enable_status_check
     *
     * @return self
     */
    public function setEnableStatusCheck($enable_status_check)
    {
        if (is_null($enable_status_check)) {
            throw new \InvalidArgumentException('non-nullable enable_status_check cannot be null');
        }
        $this->container['enable_status_check'] = $enable_status_check;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets protected
     *
     * @return bool|null
     */
    public function getProtected()
    {
        return $this->container['protected'];
    }

    /**
     * Sets protected
     *
     * @param bool|null $protected protected
     *
     * @return self
     */
    public function setProtected($protected)
    {
        if (is_null($protected)) {
            throw new \InvalidArgumentException('non-nullable protected cannot be null');
        }
        $this->container['protected'] = $protected;

        return $this;
    }

    /**
     * Gets required_approvals
     *
     * @return int|null
     */
    public function getRequiredApprovals()
    {
        return $this->container['required_approvals'];
    }

    /**
     * Sets required_approvals
     *
     * @param int|null $required_approvals required_approvals
     *
     * @return self
     */
    public function setRequiredApprovals($required_approvals)
    {
        if (is_null($required_approvals)) {
            throw new \InvalidArgumentException('non-nullable required_approvals cannot be null');
        }
        $this->container['required_approvals'] = $required_approvals;

        return $this;
    }

    /**
     * Gets status_check_contexts
     *
     * @return string[]|null
     */
    public function getStatusCheckContexts()
    {
        return $this->container['status_check_contexts'];
    }

    /**
     * Sets status_check_contexts
     *
     * @param string[]|null $status_check_contexts status_check_contexts
     *
     * @return self
     */
    public function setStatusCheckContexts($status_check_contexts)
    {
        if (is_null($status_check_contexts)) {
            throw new \InvalidArgumentException('non-nullable status_check_contexts cannot be null');
        }
        $this->container['status_check_contexts'] = $status_check_contexts;

        return $this;
    }

    /**
     * Gets user_can_merge
     *
     * @return bool|null
     */
    public function getUserCanMerge()
    {
        return $this->container['user_can_merge'];
    }

    /**
     * Sets user_can_merge
     *
     * @param bool|null $user_can_merge user_can_merge
     *
     * @return self
     */
    public function setUserCanMerge($user_can_merge)
    {
        if (is_null($user_can_merge)) {
            throw new \InvalidArgumentException('non-nullable user_can_merge cannot be null');
        }
        $this->container['user_can_merge'] = $user_can_merge;

        return $this;
    }

    /**
     * Gets user_can_push
     *
     * @return bool|null
     */
    public function getUserCanPush()
    {
        return $this->container['user_can_push'];
    }

    /**
     * Sets user_can_push
     *
     * @param bool|null $user_can_push user_can_push
     *
     * @return self
     */
    public function setUserCanPush($user_can_push)
    {
        if (is_null($user_can_push)) {
            throw new \InvalidArgumentException('non-nullable user_can_push cannot be null');
        }
        $this->container['user_can_push'] = $user_can_push;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


