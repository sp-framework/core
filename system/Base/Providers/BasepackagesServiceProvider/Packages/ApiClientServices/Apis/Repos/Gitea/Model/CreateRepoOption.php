<?php
/**
 * CreateRepoOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.19.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Base\ObjectSerializer;

/**
 * CreateRepoOption Class Doc Comment
 *
 * @category Class
 * @description CreateRepoOption options when creating repository
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateRepoOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateRepoOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_init' => 'bool',
        'default_branch' => 'string',
        'description' => 'string',
        'gitignores' => 'string',
        'issue_labels' => 'string',
        'license' => 'string',
        'name' => 'string',
        'private' => 'bool',
        'readme' => 'string',
        'template' => 'bool',
        'trust_model' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_init' => null,
        'default_branch' => null,
        'description' => null,
        'gitignores' => null,
        'issue_labels' => null,
        'license' => null,
        'name' => null,
        'private' => null,
        'readme' => null,
        'template' => null,
        'trust_model' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_init' => 'auto_init',
        'default_branch' => 'default_branch',
        'description' => 'description',
        'gitignores' => 'gitignores',
        'issue_labels' => 'issue_labels',
        'license' => 'license',
        'name' => 'name',
        'private' => 'private',
        'readme' => 'readme',
        'template' => 'template',
        'trust_model' => 'trust_model'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_init' => 'setAutoInit',
        'default_branch' => 'setDefaultBranch',
        'description' => 'setDescription',
        'gitignores' => 'setGitignores',
        'issue_labels' => 'setIssueLabels',
        'license' => 'setLicense',
        'name' => 'setName',
        'private' => 'setPrivate',
        'readme' => 'setReadme',
        'template' => 'setTemplate',
        'trust_model' => 'setTrustModel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_init' => 'getAutoInit',
        'default_branch' => 'getDefaultBranch',
        'description' => 'getDescription',
        'gitignores' => 'getGitignores',
        'issue_labels' => 'getIssueLabels',
        'license' => 'getLicense',
        'name' => 'getName',
        'private' => 'getPrivate',
        'readme' => 'getReadme',
        'template' => 'getTemplate',
        'trust_model' => 'getTrustModel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRUST_MODEL__DEFAULT = 'default';
    const TRUST_MODEL_COLLABORATOR = 'collaborator';
    const TRUST_MODEL_COMMITTER = 'committer';
    const TRUST_MODEL_COLLABORATORCOMMITTER = 'collaboratorcommitter';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrustModelAllowableValues()
    {
        return [
            self::TRUST_MODEL__DEFAULT,
            self::TRUST_MODEL_COLLABORATOR,
            self::TRUST_MODEL_COMMITTER,
            self::TRUST_MODEL_COLLABORATORCOMMITTER,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_init'] = isset($data['auto_init']) ? $data['auto_init'] : null;
        $this->container['default_branch'] = isset($data['default_branch']) ? $data['default_branch'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['gitignores'] = isset($data['gitignores']) ? $data['gitignores'] : null;
        $this->container['issue_labels'] = isset($data['issue_labels']) ? $data['issue_labels'] : null;
        $this->container['license'] = isset($data['license']) ? $data['license'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['private'] = isset($data['private']) ? $data['private'] : null;
        $this->container['readme'] = isset($data['readme']) ? $data['readme'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['trust_model'] = isset($data['trust_model']) ? $data['trust_model'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getTrustModelAllowableValues();
        if (!is_null($this->container['trust_model']) && !in_array($this->container['trust_model'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'trust_model', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_init
     *
     * @return bool
     */
    public function getAutoInit()
    {
        return $this->container['auto_init'];
    }

    /**
     * Sets auto_init
     *
     * @param bool $auto_init Whether the repository should be auto-initialized?
     *
     * @return $this
     */
    public function setAutoInit($auto_init)
    {
        $this->container['auto_init'] = $auto_init;

        return $this;
    }

    /**
     * Gets default_branch
     *
     * @return string
     */
    public function getDefaultBranch()
    {
        return $this->container['default_branch'];
    }

    /**
     * Sets default_branch
     *
     * @param string $default_branch DefaultBranch of the repository (used when initializes and in template)
     *
     * @return $this
     */
    public function setDefaultBranch($default_branch)
    {
        $this->container['default_branch'] = $default_branch;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the repository to create
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets gitignores
     *
     * @return string
     */
    public function getGitignores()
    {
        return $this->container['gitignores'];
    }

    /**
     * Sets gitignores
     *
     * @param string $gitignores Gitignores to use
     *
     * @return $this
     */
    public function setGitignores($gitignores)
    {
        $this->container['gitignores'] = $gitignores;

        return $this;
    }

    /**
     * Gets issue_labels
     *
     * @return string
     */
    public function getIssueLabels()
    {
        return $this->container['issue_labels'];
    }

    /**
     * Sets issue_labels
     *
     * @param string $issue_labels Label-Set to use
     *
     * @return $this
     */
    public function setIssueLabels($issue_labels)
    {
        $this->container['issue_labels'] = $issue_labels;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string $license License to use
     *
     * @return $this
     */
    public function setLicense($license)
    {
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the repository to create
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool $private Whether the repository is private
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets readme
     *
     * @return string
     */
    public function getReadme()
    {
        return $this->container['readme'];
    }

    /**
     * Sets readme
     *
     * @param string $readme Readme of the repository to create
     *
     * @return $this
     */
    public function setReadme($readme)
    {
        $this->container['readme'] = $readme;

        return $this;
    }

    /**
     * Gets template
     *
     * @return bool
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param bool $template Whether the repository is template
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets trust_model
     *
     * @return string
     */
    public function getTrustModel()
    {
        return $this->container['trust_model'];
    }

    /**
     * Sets trust_model
     *
     * @param string $trust_model TrustModel of the repository
     *
     * @return $this
     */
    public function setTrustModel($trust_model)
    {
        $allowedValues = $this->getTrustModelAllowableValues();
        if (!is_null($trust_model) && !in_array($trust_model, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'trust_model', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trust_model'] = $trust_model;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


