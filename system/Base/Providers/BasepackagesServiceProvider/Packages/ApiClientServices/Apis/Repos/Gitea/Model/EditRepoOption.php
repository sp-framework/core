<?php
/**
 * EditRepoOption
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.21.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\ObjectSerializer;

/**
 * EditRepoOption Class Doc Comment
 *
 * @category Class
 * @description EditRepoOption options when editing a repository&#39;s properties
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EditRepoOption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EditRepoOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_manual_merge' => 'bool',
        'allow_merge_commits' => 'bool',
        'allow_rebase' => 'bool',
        'allow_rebase_explicit' => 'bool',
        'allow_rebase_update' => 'bool',
        'allow_squash_merge' => 'bool',
        'archived' => 'bool',
        'autodetect_manual_merge' => 'bool',
        'default_allow_maintainer_edit' => 'bool',
        'default_branch' => 'string',
        'default_delete_branch_after_merge' => 'bool',
        'default_merge_style' => 'string',
        'description' => 'string',
        'enable_prune' => 'bool',
        'external_tracker' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\ExternalTracker',
        'external_wiki' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\ExternalWiki',
        'has_actions' => 'bool',
        'has_issues' => 'bool',
        'has_packages' => 'bool',
        'has_projects' => 'bool',
        'has_pull_requests' => 'bool',
        'has_releases' => 'bool',
        'has_wiki' => 'bool',
        'ignore_whitespace_conflicts' => 'bool',
        'internal_tracker' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\InternalTracker',
        'mirror_interval' => 'string',
        'name' => 'string',
        'private' => 'bool',
        'template' => 'bool',
        'website' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_manual_merge' => null,
        'allow_merge_commits' => null,
        'allow_rebase' => null,
        'allow_rebase_explicit' => null,
        'allow_rebase_update' => null,
        'allow_squash_merge' => null,
        'archived' => null,
        'autodetect_manual_merge' => null,
        'default_allow_maintainer_edit' => null,
        'default_branch' => null,
        'default_delete_branch_after_merge' => null,
        'default_merge_style' => null,
        'description' => null,
        'enable_prune' => null,
        'external_tracker' => null,
        'external_wiki' => null,
        'has_actions' => null,
        'has_issues' => null,
        'has_packages' => null,
        'has_projects' => null,
        'has_pull_requests' => null,
        'has_releases' => null,
        'has_wiki' => null,
        'ignore_whitespace_conflicts' => null,
        'internal_tracker' => null,
        'mirror_interval' => null,
        'name' => null,
        'private' => null,
        'template' => null,
        'website' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allow_manual_merge' => false,
        'allow_merge_commits' => false,
        'allow_rebase' => false,
        'allow_rebase_explicit' => false,
        'allow_rebase_update' => false,
        'allow_squash_merge' => false,
        'archived' => false,
        'autodetect_manual_merge' => false,
        'default_allow_maintainer_edit' => false,
        'default_branch' => false,
        'default_delete_branch_after_merge' => false,
        'default_merge_style' => false,
        'description' => false,
        'enable_prune' => false,
        'external_tracker' => false,
        'external_wiki' => false,
        'has_actions' => false,
        'has_issues' => false,
        'has_packages' => false,
        'has_projects' => false,
        'has_pull_requests' => false,
        'has_releases' => false,
        'has_wiki' => false,
        'ignore_whitespace_conflicts' => false,
        'internal_tracker' => false,
        'mirror_interval' => false,
        'name' => false,
        'private' => false,
        'template' => false,
        'website' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_manual_merge' => 'allow_manual_merge',
        'allow_merge_commits' => 'allow_merge_commits',
        'allow_rebase' => 'allow_rebase',
        'allow_rebase_explicit' => 'allow_rebase_explicit',
        'allow_rebase_update' => 'allow_rebase_update',
        'allow_squash_merge' => 'allow_squash_merge',
        'archived' => 'archived',
        'autodetect_manual_merge' => 'autodetect_manual_merge',
        'default_allow_maintainer_edit' => 'default_allow_maintainer_edit',
        'default_branch' => 'default_branch',
        'default_delete_branch_after_merge' => 'default_delete_branch_after_merge',
        'default_merge_style' => 'default_merge_style',
        'description' => 'description',
        'enable_prune' => 'enable_prune',
        'external_tracker' => 'external_tracker',
        'external_wiki' => 'external_wiki',
        'has_actions' => 'has_actions',
        'has_issues' => 'has_issues',
        'has_packages' => 'has_packages',
        'has_projects' => 'has_projects',
        'has_pull_requests' => 'has_pull_requests',
        'has_releases' => 'has_releases',
        'has_wiki' => 'has_wiki',
        'ignore_whitespace_conflicts' => 'ignore_whitespace_conflicts',
        'internal_tracker' => 'internal_tracker',
        'mirror_interval' => 'mirror_interval',
        'name' => 'name',
        'private' => 'private',
        'template' => 'template',
        'website' => 'website'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_manual_merge' => 'setAllowManualMerge',
        'allow_merge_commits' => 'setAllowMergeCommits',
        'allow_rebase' => 'setAllowRebase',
        'allow_rebase_explicit' => 'setAllowRebaseExplicit',
        'allow_rebase_update' => 'setAllowRebaseUpdate',
        'allow_squash_merge' => 'setAllowSquashMerge',
        'archived' => 'setArchived',
        'autodetect_manual_merge' => 'setAutodetectManualMerge',
        'default_allow_maintainer_edit' => 'setDefaultAllowMaintainerEdit',
        'default_branch' => 'setDefaultBranch',
        'default_delete_branch_after_merge' => 'setDefaultDeleteBranchAfterMerge',
        'default_merge_style' => 'setDefaultMergeStyle',
        'description' => 'setDescription',
        'enable_prune' => 'setEnablePrune',
        'external_tracker' => 'setExternalTracker',
        'external_wiki' => 'setExternalWiki',
        'has_actions' => 'setHasActions',
        'has_issues' => 'setHasIssues',
        'has_packages' => 'setHasPackages',
        'has_projects' => 'setHasProjects',
        'has_pull_requests' => 'setHasPullRequests',
        'has_releases' => 'setHasReleases',
        'has_wiki' => 'setHasWiki',
        'ignore_whitespace_conflicts' => 'setIgnoreWhitespaceConflicts',
        'internal_tracker' => 'setInternalTracker',
        'mirror_interval' => 'setMirrorInterval',
        'name' => 'setName',
        'private' => 'setPrivate',
        'template' => 'setTemplate',
        'website' => 'setWebsite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_manual_merge' => 'getAllowManualMerge',
        'allow_merge_commits' => 'getAllowMergeCommits',
        'allow_rebase' => 'getAllowRebase',
        'allow_rebase_explicit' => 'getAllowRebaseExplicit',
        'allow_rebase_update' => 'getAllowRebaseUpdate',
        'allow_squash_merge' => 'getAllowSquashMerge',
        'archived' => 'getArchived',
        'autodetect_manual_merge' => 'getAutodetectManualMerge',
        'default_allow_maintainer_edit' => 'getDefaultAllowMaintainerEdit',
        'default_branch' => 'getDefaultBranch',
        'default_delete_branch_after_merge' => 'getDefaultDeleteBranchAfterMerge',
        'default_merge_style' => 'getDefaultMergeStyle',
        'description' => 'getDescription',
        'enable_prune' => 'getEnablePrune',
        'external_tracker' => 'getExternalTracker',
        'external_wiki' => 'getExternalWiki',
        'has_actions' => 'getHasActions',
        'has_issues' => 'getHasIssues',
        'has_packages' => 'getHasPackages',
        'has_projects' => 'getHasProjects',
        'has_pull_requests' => 'getHasPullRequests',
        'has_releases' => 'getHasReleases',
        'has_wiki' => 'getHasWiki',
        'ignore_whitespace_conflicts' => 'getIgnoreWhitespaceConflicts',
        'internal_tracker' => 'getInternalTracker',
        'mirror_interval' => 'getMirrorInterval',
        'name' => 'getName',
        'private' => 'getPrivate',
        'template' => 'getTemplate',
        'website' => 'getWebsite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allow_manual_merge', $data ?? [], null);
        $this->setIfExists('allow_merge_commits', $data ?? [], null);
        $this->setIfExists('allow_rebase', $data ?? [], null);
        $this->setIfExists('allow_rebase_explicit', $data ?? [], null);
        $this->setIfExists('allow_rebase_update', $data ?? [], null);
        $this->setIfExists('allow_squash_merge', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('autodetect_manual_merge', $data ?? [], null);
        $this->setIfExists('default_allow_maintainer_edit', $data ?? [], null);
        $this->setIfExists('default_branch', $data ?? [], null);
        $this->setIfExists('default_delete_branch_after_merge', $data ?? [], null);
        $this->setIfExists('default_merge_style', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('enable_prune', $data ?? [], null);
        $this->setIfExists('external_tracker', $data ?? [], null);
        $this->setIfExists('external_wiki', $data ?? [], null);
        $this->setIfExists('has_actions', $data ?? [], null);
        $this->setIfExists('has_issues', $data ?? [], null);
        $this->setIfExists('has_packages', $data ?? [], null);
        $this->setIfExists('has_projects', $data ?? [], null);
        $this->setIfExists('has_pull_requests', $data ?? [], null);
        $this->setIfExists('has_releases', $data ?? [], null);
        $this->setIfExists('has_wiki', $data ?? [], null);
        $this->setIfExists('ignore_whitespace_conflicts', $data ?? [], null);
        $this->setIfExists('internal_tracker', $data ?? [], null);
        $this->setIfExists('mirror_interval', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('private', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_manual_merge
     *
     * @return bool|null
     */
    public function getAllowManualMerge()
    {
        return $this->container['allow_manual_merge'];
    }

    /**
     * Sets allow_manual_merge
     *
     * @param bool|null $allow_manual_merge either `true` to allow mark pr as merged manually, or `false` to prevent it.
     *
     * @return self
     */
    public function setAllowManualMerge($allow_manual_merge)
    {
        if (is_null($allow_manual_merge)) {
            throw new \InvalidArgumentException('non-nullable allow_manual_merge cannot be null');
        }
        $this->container['allow_manual_merge'] = $allow_manual_merge;

        return $this;
    }

    /**
     * Gets allow_merge_commits
     *
     * @return bool|null
     */
    public function getAllowMergeCommits()
    {
        return $this->container['allow_merge_commits'];
    }

    /**
     * Sets allow_merge_commits
     *
     * @param bool|null $allow_merge_commits either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
     *
     * @return self
     */
    public function setAllowMergeCommits($allow_merge_commits)
    {
        if (is_null($allow_merge_commits)) {
            throw new \InvalidArgumentException('non-nullable allow_merge_commits cannot be null');
        }
        $this->container['allow_merge_commits'] = $allow_merge_commits;

        return $this;
    }

    /**
     * Gets allow_rebase
     *
     * @return bool|null
     */
    public function getAllowRebase()
    {
        return $this->container['allow_rebase'];
    }

    /**
     * Sets allow_rebase
     *
     * @param bool|null $allow_rebase either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
     *
     * @return self
     */
    public function setAllowRebase($allow_rebase)
    {
        if (is_null($allow_rebase)) {
            throw new \InvalidArgumentException('non-nullable allow_rebase cannot be null');
        }
        $this->container['allow_rebase'] = $allow_rebase;

        return $this;
    }

    /**
     * Gets allow_rebase_explicit
     *
     * @return bool|null
     */
    public function getAllowRebaseExplicit()
    {
        return $this->container['allow_rebase_explicit'];
    }

    /**
     * Sets allow_rebase_explicit
     *
     * @param bool|null $allow_rebase_explicit either `true` to allow rebase with explicit merge commits (--no-ff), or `false` to prevent rebase with explicit merge commits.
     *
     * @return self
     */
    public function setAllowRebaseExplicit($allow_rebase_explicit)
    {
        if (is_null($allow_rebase_explicit)) {
            throw new \InvalidArgumentException('non-nullable allow_rebase_explicit cannot be null');
        }
        $this->container['allow_rebase_explicit'] = $allow_rebase_explicit;

        return $this;
    }

    /**
     * Gets allow_rebase_update
     *
     * @return bool|null
     */
    public function getAllowRebaseUpdate()
    {
        return $this->container['allow_rebase_update'];
    }

    /**
     * Sets allow_rebase_update
     *
     * @param bool|null $allow_rebase_update either `true` to allow updating pull request branch by rebase, or `false` to prevent it.
     *
     * @return self
     */
    public function setAllowRebaseUpdate($allow_rebase_update)
    {
        if (is_null($allow_rebase_update)) {
            throw new \InvalidArgumentException('non-nullable allow_rebase_update cannot be null');
        }
        $this->container['allow_rebase_update'] = $allow_rebase_update;

        return $this;
    }

    /**
     * Gets allow_squash_merge
     *
     * @return bool|null
     */
    public function getAllowSquashMerge()
    {
        return $this->container['allow_squash_merge'];
    }

    /**
     * Sets allow_squash_merge
     *
     * @param bool|null $allow_squash_merge either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
     *
     * @return self
     */
    public function setAllowSquashMerge($allow_squash_merge)
    {
        if (is_null($allow_squash_merge)) {
            throw new \InvalidArgumentException('non-nullable allow_squash_merge cannot be null');
        }
        $this->container['allow_squash_merge'] = $allow_squash_merge;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived set to `true` to archive this repository.
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets autodetect_manual_merge
     *
     * @return bool|null
     */
    public function getAutodetectManualMerge()
    {
        return $this->container['autodetect_manual_merge'];
    }

    /**
     * Sets autodetect_manual_merge
     *
     * @param bool|null $autodetect_manual_merge either `true` to enable AutodetectManualMerge, or `false` to prevent it. Note: In some special cases, misjudgments can occur.
     *
     * @return self
     */
    public function setAutodetectManualMerge($autodetect_manual_merge)
    {
        if (is_null($autodetect_manual_merge)) {
            throw new \InvalidArgumentException('non-nullable autodetect_manual_merge cannot be null');
        }
        $this->container['autodetect_manual_merge'] = $autodetect_manual_merge;

        return $this;
    }

    /**
     * Gets default_allow_maintainer_edit
     *
     * @return bool|null
     */
    public function getDefaultAllowMaintainerEdit()
    {
        return $this->container['default_allow_maintainer_edit'];
    }

    /**
     * Sets default_allow_maintainer_edit
     *
     * @param bool|null $default_allow_maintainer_edit set to `true` to allow edits from maintainers by default
     *
     * @return self
     */
    public function setDefaultAllowMaintainerEdit($default_allow_maintainer_edit)
    {
        if (is_null($default_allow_maintainer_edit)) {
            throw new \InvalidArgumentException('non-nullable default_allow_maintainer_edit cannot be null');
        }
        $this->container['default_allow_maintainer_edit'] = $default_allow_maintainer_edit;

        return $this;
    }

    /**
     * Gets default_branch
     *
     * @return string|null
     */
    public function getDefaultBranch()
    {
        return $this->container['default_branch'];
    }

    /**
     * Sets default_branch
     *
     * @param string|null $default_branch sets the default branch for this repository.
     *
     * @return self
     */
    public function setDefaultBranch($default_branch)
    {
        if (is_null($default_branch)) {
            throw new \InvalidArgumentException('non-nullable default_branch cannot be null');
        }
        $this->container['default_branch'] = $default_branch;

        return $this;
    }

    /**
     * Gets default_delete_branch_after_merge
     *
     * @return bool|null
     */
    public function getDefaultDeleteBranchAfterMerge()
    {
        return $this->container['default_delete_branch_after_merge'];
    }

    /**
     * Sets default_delete_branch_after_merge
     *
     * @param bool|null $default_delete_branch_after_merge set to `true` to delete pr branch after merge by default
     *
     * @return self
     */
    public function setDefaultDeleteBranchAfterMerge($default_delete_branch_after_merge)
    {
        if (is_null($default_delete_branch_after_merge)) {
            throw new \InvalidArgumentException('non-nullable default_delete_branch_after_merge cannot be null');
        }
        $this->container['default_delete_branch_after_merge'] = $default_delete_branch_after_merge;

        return $this;
    }

    /**
     * Gets default_merge_style
     *
     * @return string|null
     */
    public function getDefaultMergeStyle()
    {
        return $this->container['default_merge_style'];
    }

    /**
     * Sets default_merge_style
     *
     * @param string|null $default_merge_style set to a merge style to be used by this repository: \"merge\", \"rebase\", \"rebase-merge\", or \"squash\".
     *
     * @return self
     */
    public function setDefaultMergeStyle($default_merge_style)
    {
        if (is_null($default_merge_style)) {
            throw new \InvalidArgumentException('non-nullable default_merge_style cannot be null');
        }
        $this->container['default_merge_style'] = $default_merge_style;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description a short description of the repository.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enable_prune
     *
     * @return bool|null
     */
    public function getEnablePrune()
    {
        return $this->container['enable_prune'];
    }

    /**
     * Sets enable_prune
     *
     * @param bool|null $enable_prune enable prune - remove obsolete remote-tracking references
     *
     * @return self
     */
    public function setEnablePrune($enable_prune)
    {
        if (is_null($enable_prune)) {
            throw new \InvalidArgumentException('non-nullable enable_prune cannot be null');
        }
        $this->container['enable_prune'] = $enable_prune;

        return $this;
    }

    /**
     * Gets external_tracker
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\ExternalTracker|null
     */
    public function getExternalTracker()
    {
        return $this->container['external_tracker'];
    }

    /**
     * Sets external_tracker
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\ExternalTracker|null $external_tracker external_tracker
     *
     * @return self
     */
    public function setExternalTracker($external_tracker)
    {
        if (is_null($external_tracker)) {
            throw new \InvalidArgumentException('non-nullable external_tracker cannot be null');
        }
        $this->container['external_tracker'] = $external_tracker;

        return $this;
    }

    /**
     * Gets external_wiki
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\ExternalWiki|null
     */
    public function getExternalWiki()
    {
        return $this->container['external_wiki'];
    }

    /**
     * Sets external_wiki
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\ExternalWiki|null $external_wiki external_wiki
     *
     * @return self
     */
    public function setExternalWiki($external_wiki)
    {
        if (is_null($external_wiki)) {
            throw new \InvalidArgumentException('non-nullable external_wiki cannot be null');
        }
        $this->container['external_wiki'] = $external_wiki;

        return $this;
    }

    /**
     * Gets has_actions
     *
     * @return bool|null
     */
    public function getHasActions()
    {
        return $this->container['has_actions'];
    }

    /**
     * Sets has_actions
     *
     * @param bool|null $has_actions either `true` to enable actions unit, or `false` to disable them.
     *
     * @return self
     */
    public function setHasActions($has_actions)
    {
        if (is_null($has_actions)) {
            throw new \InvalidArgumentException('non-nullable has_actions cannot be null');
        }
        $this->container['has_actions'] = $has_actions;

        return $this;
    }

    /**
     * Gets has_issues
     *
     * @return bool|null
     */
    public function getHasIssues()
    {
        return $this->container['has_issues'];
    }

    /**
     * Sets has_issues
     *
     * @param bool|null $has_issues either `true` to enable issues for this repository or `false` to disable them.
     *
     * @return self
     */
    public function setHasIssues($has_issues)
    {
        if (is_null($has_issues)) {
            throw new \InvalidArgumentException('non-nullable has_issues cannot be null');
        }
        $this->container['has_issues'] = $has_issues;

        return $this;
    }

    /**
     * Gets has_packages
     *
     * @return bool|null
     */
    public function getHasPackages()
    {
        return $this->container['has_packages'];
    }

    /**
     * Sets has_packages
     *
     * @param bool|null $has_packages either `true` to enable packages unit, or `false` to disable them.
     *
     * @return self
     */
    public function setHasPackages($has_packages)
    {
        if (is_null($has_packages)) {
            throw new \InvalidArgumentException('non-nullable has_packages cannot be null');
        }
        $this->container['has_packages'] = $has_packages;

        return $this;
    }

    /**
     * Gets has_projects
     *
     * @return bool|null
     */
    public function getHasProjects()
    {
        return $this->container['has_projects'];
    }

    /**
     * Sets has_projects
     *
     * @param bool|null $has_projects either `true` to enable project unit, or `false` to disable them.
     *
     * @return self
     */
    public function setHasProjects($has_projects)
    {
        if (is_null($has_projects)) {
            throw new \InvalidArgumentException('non-nullable has_projects cannot be null');
        }
        $this->container['has_projects'] = $has_projects;

        return $this;
    }

    /**
     * Gets has_pull_requests
     *
     * @return bool|null
     */
    public function getHasPullRequests()
    {
        return $this->container['has_pull_requests'];
    }

    /**
     * Sets has_pull_requests
     *
     * @param bool|null $has_pull_requests either `true` to allow pull requests, or `false` to prevent pull request.
     *
     * @return self
     */
    public function setHasPullRequests($has_pull_requests)
    {
        if (is_null($has_pull_requests)) {
            throw new \InvalidArgumentException('non-nullable has_pull_requests cannot be null');
        }
        $this->container['has_pull_requests'] = $has_pull_requests;

        return $this;
    }

    /**
     * Gets has_releases
     *
     * @return bool|null
     */
    public function getHasReleases()
    {
        return $this->container['has_releases'];
    }

    /**
     * Sets has_releases
     *
     * @param bool|null $has_releases either `true` to enable releases unit, or `false` to disable them.
     *
     * @return self
     */
    public function setHasReleases($has_releases)
    {
        if (is_null($has_releases)) {
            throw new \InvalidArgumentException('non-nullable has_releases cannot be null');
        }
        $this->container['has_releases'] = $has_releases;

        return $this;
    }

    /**
     * Gets has_wiki
     *
     * @return bool|null
     */
    public function getHasWiki()
    {
        return $this->container['has_wiki'];
    }

    /**
     * Sets has_wiki
     *
     * @param bool|null $has_wiki either `true` to enable the wiki for this repository or `false` to disable it.
     *
     * @return self
     */
    public function setHasWiki($has_wiki)
    {
        if (is_null($has_wiki)) {
            throw new \InvalidArgumentException('non-nullable has_wiki cannot be null');
        }
        $this->container['has_wiki'] = $has_wiki;

        return $this;
    }

    /**
     * Gets ignore_whitespace_conflicts
     *
     * @return bool|null
     */
    public function getIgnoreWhitespaceConflicts()
    {
        return $this->container['ignore_whitespace_conflicts'];
    }

    /**
     * Sets ignore_whitespace_conflicts
     *
     * @param bool|null $ignore_whitespace_conflicts either `true` to ignore whitespace for conflicts, or `false` to not ignore whitespace.
     *
     * @return self
     */
    public function setIgnoreWhitespaceConflicts($ignore_whitespace_conflicts)
    {
        if (is_null($ignore_whitespace_conflicts)) {
            throw new \InvalidArgumentException('non-nullable ignore_whitespace_conflicts cannot be null');
        }
        $this->container['ignore_whitespace_conflicts'] = $ignore_whitespace_conflicts;

        return $this;
    }

    /**
     * Gets internal_tracker
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\InternalTracker|null
     */
    public function getInternalTracker()
    {
        return $this->container['internal_tracker'];
    }

    /**
     * Sets internal_tracker
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\InternalTracker|null $internal_tracker internal_tracker
     *
     * @return self
     */
    public function setInternalTracker($internal_tracker)
    {
        if (is_null($internal_tracker)) {
            throw new \InvalidArgumentException('non-nullable internal_tracker cannot be null');
        }
        $this->container['internal_tracker'] = $internal_tracker;

        return $this;
    }

    /**
     * Gets mirror_interval
     *
     * @return string|null
     */
    public function getMirrorInterval()
    {
        return $this->container['mirror_interval'];
    }

    /**
     * Sets mirror_interval
     *
     * @param string|null $mirror_interval set to a string like `8h30m0s` to set the mirror interval time
     *
     * @return self
     */
    public function setMirrorInterval($mirror_interval)
    {
        if (is_null($mirror_interval)) {
            throw new \InvalidArgumentException('non-nullable mirror_interval cannot be null');
        }
        $this->container['mirror_interval'] = $mirror_interval;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name of the repository
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool|null
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool|null $private either `true` to make the repository private or `false` to make it public. Note: you will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private.
     *
     * @return self
     */
    public function setPrivate($private)
    {
        if (is_null($private)) {
            throw new \InvalidArgumentException('non-nullable private cannot be null');
        }
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets template
     *
     * @return bool|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param bool|null $template either `true` to make this repository a template or `false` to make it a normal repository
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website a URL with more information about the repository.
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


