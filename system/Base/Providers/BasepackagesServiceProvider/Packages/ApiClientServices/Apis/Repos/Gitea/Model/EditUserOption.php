<?php
/**
 * EditUserOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.19.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Base\ObjectSerializer;

/**
 * EditUserOption Class Doc Comment
 *
 * @category Class
 * @description EditUserOption edit user options
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EditUserOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EditUserOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'bool',
        'admin' => 'bool',
        'allow_create_organization' => 'bool',
        'allow_git_hook' => 'bool',
        'allow_import_local' => 'bool',
        'description' => 'string',
        'email' => 'string',
        'full_name' => 'string',
        'location' => 'string',
        'login_name' => 'string',
        'max_repo_creation' => 'int',
        'must_change_password' => 'bool',
        'password' => 'string',
        'prohibit_login' => 'bool',
        'restricted' => 'bool',
        'source_id' => 'int',
        'visibility' => 'string',
        'website' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => null,
        'admin' => null,
        'allow_create_organization' => null,
        'allow_git_hook' => null,
        'allow_import_local' => null,
        'description' => null,
        'email' => 'email',
        'full_name' => null,
        'location' => null,
        'login_name' => null,
        'max_repo_creation' => 'int64',
        'must_change_password' => null,
        'password' => null,
        'prohibit_login' => null,
        'restricted' => null,
        'source_id' => 'int64',
        'visibility' => null,
        'website' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'admin' => 'admin',
        'allow_create_organization' => 'allow_create_organization',
        'allow_git_hook' => 'allow_git_hook',
        'allow_import_local' => 'allow_import_local',
        'description' => 'description',
        'email' => 'email',
        'full_name' => 'full_name',
        'location' => 'location',
        'login_name' => 'login_name',
        'max_repo_creation' => 'max_repo_creation',
        'must_change_password' => 'must_change_password',
        'password' => 'password',
        'prohibit_login' => 'prohibit_login',
        'restricted' => 'restricted',
        'source_id' => 'source_id',
        'visibility' => 'visibility',
        'website' => 'website'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'admin' => 'setAdmin',
        'allow_create_organization' => 'setAllowCreateOrganization',
        'allow_git_hook' => 'setAllowGitHook',
        'allow_import_local' => 'setAllowImportLocal',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'full_name' => 'setFullName',
        'location' => 'setLocation',
        'login_name' => 'setLoginName',
        'max_repo_creation' => 'setMaxRepoCreation',
        'must_change_password' => 'setMustChangePassword',
        'password' => 'setPassword',
        'prohibit_login' => 'setProhibitLogin',
        'restricted' => 'setRestricted',
        'source_id' => 'setSourceId',
        'visibility' => 'setVisibility',
        'website' => 'setWebsite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'admin' => 'getAdmin',
        'allow_create_organization' => 'getAllowCreateOrganization',
        'allow_git_hook' => 'getAllowGitHook',
        'allow_import_local' => 'getAllowImportLocal',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'full_name' => 'getFullName',
        'location' => 'getLocation',
        'login_name' => 'getLoginName',
        'max_repo_creation' => 'getMaxRepoCreation',
        'must_change_password' => 'getMustChangePassword',
        'password' => 'getPassword',
        'prohibit_login' => 'getProhibitLogin',
        'restricted' => 'getRestricted',
        'source_id' => 'getSourceId',
        'visibility' => 'getVisibility',
        'website' => 'getWebsite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['admin'] = isset($data['admin']) ? $data['admin'] : null;
        $this->container['allow_create_organization'] = isset($data['allow_create_organization']) ? $data['allow_create_organization'] : null;
        $this->container['allow_git_hook'] = isset($data['allow_git_hook']) ? $data['allow_git_hook'] : null;
        $this->container['allow_import_local'] = isset($data['allow_import_local']) ? $data['allow_import_local'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['login_name'] = isset($data['login_name']) ? $data['login_name'] : null;
        $this->container['max_repo_creation'] = isset($data['max_repo_creation']) ? $data['max_repo_creation'] : null;
        $this->container['must_change_password'] = isset($data['must_change_password']) ? $data['must_change_password'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['prohibit_login'] = isset($data['prohibit_login']) ? $data['prohibit_login'] : null;
        $this->container['restricted'] = isset($data['restricted']) ? $data['restricted'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['login_name'] === null) {
            $invalidProperties[] = "'login_name' can't be null";
        }
        if ($this->container['source_id'] === null) {
            $invalidProperties[] = "'source_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets admin
     *
     * @return bool
     */
    public function getAdmin()
    {
        return $this->container['admin'];
    }

    /**
     * Sets admin
     *
     * @param bool $admin admin
     *
     * @return $this
     */
    public function setAdmin($admin)
    {
        $this->container['admin'] = $admin;

        return $this;
    }

    /**
     * Gets allow_create_organization
     *
     * @return bool
     */
    public function getAllowCreateOrganization()
    {
        return $this->container['allow_create_organization'];
    }

    /**
     * Sets allow_create_organization
     *
     * @param bool $allow_create_organization allow_create_organization
     *
     * @return $this
     */
    public function setAllowCreateOrganization($allow_create_organization)
    {
        $this->container['allow_create_organization'] = $allow_create_organization;

        return $this;
    }

    /**
     * Gets allow_git_hook
     *
     * @return bool
     */
    public function getAllowGitHook()
    {
        return $this->container['allow_git_hook'];
    }

    /**
     * Sets allow_git_hook
     *
     * @param bool $allow_git_hook allow_git_hook
     *
     * @return $this
     */
    public function setAllowGitHook($allow_git_hook)
    {
        $this->container['allow_git_hook'] = $allow_git_hook;

        return $this;
    }

    /**
     * Gets allow_import_local
     *
     * @return bool
     */
    public function getAllowImportLocal()
    {
        return $this->container['allow_import_local'];
    }

    /**
     * Sets allow_import_local
     *
     * @param bool $allow_import_local allow_import_local
     *
     * @return $this
     */
    public function setAllowImportLocal($allow_import_local)
    {
        $this->container['allow_import_local'] = $allow_import_local;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name full_name
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets login_name
     *
     * @return string
     */
    public function getLoginName()
    {
        return $this->container['login_name'];
    }

    /**
     * Sets login_name
     *
     * @param string $login_name login_name
     *
     * @return $this
     */
    public function setLoginName($login_name)
    {
        $this->container['login_name'] = $login_name;

        return $this;
    }

    /**
     * Gets max_repo_creation
     *
     * @return int
     */
    public function getMaxRepoCreation()
    {
        return $this->container['max_repo_creation'];
    }

    /**
     * Sets max_repo_creation
     *
     * @param int $max_repo_creation max_repo_creation
     *
     * @return $this
     */
    public function setMaxRepoCreation($max_repo_creation)
    {
        $this->container['max_repo_creation'] = $max_repo_creation;

        return $this;
    }

    /**
     * Gets must_change_password
     *
     * @return bool
     */
    public function getMustChangePassword()
    {
        return $this->container['must_change_password'];
    }

    /**
     * Sets must_change_password
     *
     * @param bool $must_change_password must_change_password
     *
     * @return $this
     */
    public function setMustChangePassword($must_change_password)
    {
        $this->container['must_change_password'] = $must_change_password;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets prohibit_login
     *
     * @return bool
     */
    public function getProhibitLogin()
    {
        return $this->container['prohibit_login'];
    }

    /**
     * Sets prohibit_login
     *
     * @param bool $prohibit_login prohibit_login
     *
     * @return $this
     */
    public function setProhibitLogin($prohibit_login)
    {
        $this->container['prohibit_login'] = $prohibit_login;

        return $this;
    }

    /**
     * Gets restricted
     *
     * @return bool
     */
    public function getRestricted()
    {
        return $this->container['restricted'];
    }

    /**
     * Sets restricted
     *
     * @param bool $restricted restricted
     *
     * @return $this
     */
    public function setRestricted($restricted)
    {
        $this->container['restricted'] = $restricted;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return int
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param int $source_id source_id
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string $visibility visibility
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website website
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


