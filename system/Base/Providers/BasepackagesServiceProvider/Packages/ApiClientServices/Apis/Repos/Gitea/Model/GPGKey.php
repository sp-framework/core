<?php
/**
 * GPGKey
 *
 * PHP version 5
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.19.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Base\ObjectSerializer;

/**
 * GPGKey Class Doc Comment
 *
 * @category Class
 * @description GPGKey a user GPG key to sign commit and tag in repository
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GPGKey implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GPGKey';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'can_certify' => 'bool',
        'can_encrypt_comms' => 'bool',
        'can_encrypt_storage' => 'bool',
        'can_sign' => 'bool',
        'created_at' => '\DateTime',
        'emails' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\GPGKeyEmail[]',
        'expires_at' => '\DateTime',
        'id' => 'int',
        'key_id' => 'string',
        'primary_key_id' => 'string',
        'public_key' => 'string',
        'subkeys' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\GPGKey[]',
        'verified' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'can_certify' => null,
        'can_encrypt_comms' => null,
        'can_encrypt_storage' => null,
        'can_sign' => null,
        'created_at' => 'date-time',
        'emails' => null,
        'expires_at' => 'date-time',
        'id' => 'int64',
        'key_id' => null,
        'primary_key_id' => null,
        'public_key' => null,
        'subkeys' => null,
        'verified' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can_certify' => 'can_certify',
        'can_encrypt_comms' => 'can_encrypt_comms',
        'can_encrypt_storage' => 'can_encrypt_storage',
        'can_sign' => 'can_sign',
        'created_at' => 'created_at',
        'emails' => 'emails',
        'expires_at' => 'expires_at',
        'id' => 'id',
        'key_id' => 'key_id',
        'primary_key_id' => 'primary_key_id',
        'public_key' => 'public_key',
        'subkeys' => 'subkeys',
        'verified' => 'verified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can_certify' => 'setCanCertify',
        'can_encrypt_comms' => 'setCanEncryptComms',
        'can_encrypt_storage' => 'setCanEncryptStorage',
        'can_sign' => 'setCanSign',
        'created_at' => 'setCreatedAt',
        'emails' => 'setEmails',
        'expires_at' => 'setExpiresAt',
        'id' => 'setId',
        'key_id' => 'setKeyId',
        'primary_key_id' => 'setPrimaryKeyId',
        'public_key' => 'setPublicKey',
        'subkeys' => 'setSubkeys',
        'verified' => 'setVerified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can_certify' => 'getCanCertify',
        'can_encrypt_comms' => 'getCanEncryptComms',
        'can_encrypt_storage' => 'getCanEncryptStorage',
        'can_sign' => 'getCanSign',
        'created_at' => 'getCreatedAt',
        'emails' => 'getEmails',
        'expires_at' => 'getExpiresAt',
        'id' => 'getId',
        'key_id' => 'getKeyId',
        'primary_key_id' => 'getPrimaryKeyId',
        'public_key' => 'getPublicKey',
        'subkeys' => 'getSubkeys',
        'verified' => 'getVerified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can_certify'] = isset($data['can_certify']) ? $data['can_certify'] : null;
        $this->container['can_encrypt_comms'] = isset($data['can_encrypt_comms']) ? $data['can_encrypt_comms'] : null;
        $this->container['can_encrypt_storage'] = isset($data['can_encrypt_storage']) ? $data['can_encrypt_storage'] : null;
        $this->container['can_sign'] = isset($data['can_sign']) ? $data['can_sign'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['key_id'] = isset($data['key_id']) ? $data['key_id'] : null;
        $this->container['primary_key_id'] = isset($data['primary_key_id']) ? $data['primary_key_id'] : null;
        $this->container['public_key'] = isset($data['public_key']) ? $data['public_key'] : null;
        $this->container['subkeys'] = isset($data['subkeys']) ? $data['subkeys'] : null;
        $this->container['verified'] = isset($data['verified']) ? $data['verified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can_certify
     *
     * @return bool
     */
    public function getCanCertify()
    {
        return $this->container['can_certify'];
    }

    /**
     * Sets can_certify
     *
     * @param bool $can_certify can_certify
     *
     * @return $this
     */
    public function setCanCertify($can_certify)
    {
        $this->container['can_certify'] = $can_certify;

        return $this;
    }

    /**
     * Gets can_encrypt_comms
     *
     * @return bool
     */
    public function getCanEncryptComms()
    {
        return $this->container['can_encrypt_comms'];
    }

    /**
     * Sets can_encrypt_comms
     *
     * @param bool $can_encrypt_comms can_encrypt_comms
     *
     * @return $this
     */
    public function setCanEncryptComms($can_encrypt_comms)
    {
        $this->container['can_encrypt_comms'] = $can_encrypt_comms;

        return $this;
    }

    /**
     * Gets can_encrypt_storage
     *
     * @return bool
     */
    public function getCanEncryptStorage()
    {
        return $this->container['can_encrypt_storage'];
    }

    /**
     * Sets can_encrypt_storage
     *
     * @param bool $can_encrypt_storage can_encrypt_storage
     *
     * @return $this
     */
    public function setCanEncryptStorage($can_encrypt_storage)
    {
        $this->container['can_encrypt_storage'] = $can_encrypt_storage;

        return $this;
    }

    /**
     * Gets can_sign
     *
     * @return bool
     */
    public function getCanSign()
    {
        return $this->container['can_sign'];
    }

    /**
     * Sets can_sign
     *
     * @param bool $can_sign can_sign
     *
     * @return $this
     */
    public function setCanSign($can_sign)
    {
        $this->container['can_sign'] = $can_sign;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\GPGKeyEmail[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\GPGKeyEmail[] $emails emails
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime $expires_at expires_at
     *
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets key_id
     *
     * @return string
     */
    public function getKeyId()
    {
        return $this->container['key_id'];
    }

    /**
     * Sets key_id
     *
     * @param string $key_id key_id
     *
     * @return $this
     */
    public function setKeyId($key_id)
    {
        $this->container['key_id'] = $key_id;

        return $this;
    }

    /**
     * Gets primary_key_id
     *
     * @return string
     */
    public function getPrimaryKeyId()
    {
        return $this->container['primary_key_id'];
    }

    /**
     * Sets primary_key_id
     *
     * @param string $primary_key_id primary_key_id
     *
     * @return $this
     */
    public function setPrimaryKeyId($primary_key_id)
    {
        $this->container['primary_key_id'] = $primary_key_id;

        return $this;
    }

    /**
     * Gets public_key
     *
     * @return string
     */
    public function getPublicKey()
    {
        return $this->container['public_key'];
    }

    /**
     * Sets public_key
     *
     * @param string $public_key public_key
     *
     * @return $this
     */
    public function setPublicKey($public_key)
    {
        $this->container['public_key'] = $public_key;

        return $this;
    }

    /**
     * Gets subkeys
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\GPGKey[]
     */
    public function getSubkeys()
    {
        return $this->container['subkeys'];
    }

    /**
     * Sets subkeys
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\GPGKey[] $subkeys subkeys
     *
     * @return $this
     */
    public function setSubkeys($subkeys)
    {
        $this->container['subkeys'] = $subkeys;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool $verified verified
     *
     * @return $this
     */
    public function setVerified($verified)
    {
        $this->container['verified'] = $verified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


