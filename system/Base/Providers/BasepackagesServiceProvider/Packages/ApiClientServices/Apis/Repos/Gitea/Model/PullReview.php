<?php
/**
 * PullReview
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.21.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\ObjectSerializer;

/**
 * PullReview Class Doc Comment
 *
 * @category Class
 * @description PullReview represents a pull request review
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PullReview implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PullReview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'body' => 'string',
        'comments_count' => 'int',
        'commit_id' => 'string',
        'dismissed' => 'bool',
        'html_url' => 'string',
        'id' => 'int',
        'official' => 'bool',
        'pull_request_url' => 'string',
        'stale' => 'bool',
        'state' => 'string',
        'submitted_at' => '\DateTime',
        'team' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Team',
        'updated_at' => '\DateTime',
        'user' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'body' => null,
        'comments_count' => 'int64',
        'commit_id' => null,
        'dismissed' => null,
        'html_url' => null,
        'id' => 'int64',
        'official' => null,
        'pull_request_url' => null,
        'stale' => null,
        'state' => null,
        'submitted_at' => 'date-time',
        'team' => null,
        'updated_at' => 'date-time',
        'user' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'body' => false,
        'comments_count' => false,
        'commit_id' => false,
        'dismissed' => false,
        'html_url' => false,
        'id' => false,
        'official' => false,
        'pull_request_url' => false,
        'stale' => false,
        'state' => false,
        'submitted_at' => false,
        'team' => false,
        'updated_at' => false,
        'user' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'body' => 'body',
        'comments_count' => 'comments_count',
        'commit_id' => 'commit_id',
        'dismissed' => 'dismissed',
        'html_url' => 'html_url',
        'id' => 'id',
        'official' => 'official',
        'pull_request_url' => 'pull_request_url',
        'stale' => 'stale',
        'state' => 'state',
        'submitted_at' => 'submitted_at',
        'team' => 'team',
        'updated_at' => 'updated_at',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'body' => 'setBody',
        'comments_count' => 'setCommentsCount',
        'commit_id' => 'setCommitId',
        'dismissed' => 'setDismissed',
        'html_url' => 'setHtmlUrl',
        'id' => 'setId',
        'official' => 'setOfficial',
        'pull_request_url' => 'setPullRequestUrl',
        'stale' => 'setStale',
        'state' => 'setState',
        'submitted_at' => 'setSubmittedAt',
        'team' => 'setTeam',
        'updated_at' => 'setUpdatedAt',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'body' => 'getBody',
        'comments_count' => 'getCommentsCount',
        'commit_id' => 'getCommitId',
        'dismissed' => 'getDismissed',
        'html_url' => 'getHtmlUrl',
        'id' => 'getId',
        'official' => 'getOfficial',
        'pull_request_url' => 'getPullRequestUrl',
        'stale' => 'getStale',
        'state' => 'getState',
        'submitted_at' => 'getSubmittedAt',
        'team' => 'getTeam',
        'updated_at' => 'getUpdatedAt',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('comments_count', $data ?? [], null);
        $this->setIfExists('commit_id', $data ?? [], null);
        $this->setIfExists('dismissed', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('official', $data ?? [], null);
        $this->setIfExists('pull_request_url', $data ?? [], null);
        $this->setIfExists('stale', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('submitted_at', $data ?? [], null);
        $this->setIfExists('team', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets comments_count
     *
     * @return int|null
     */
    public function getCommentsCount()
    {
        return $this->container['comments_count'];
    }

    /**
     * Sets comments_count
     *
     * @param int|null $comments_count comments_count
     *
     * @return self
     */
    public function setCommentsCount($comments_count)
    {
        if (is_null($comments_count)) {
            throw new \InvalidArgumentException('non-nullable comments_count cannot be null');
        }
        $this->container['comments_count'] = $comments_count;

        return $this;
    }

    /**
     * Gets commit_id
     *
     * @return string|null
     */
    public function getCommitId()
    {
        return $this->container['commit_id'];
    }

    /**
     * Sets commit_id
     *
     * @param string|null $commit_id commit_id
     *
     * @return self
     */
    public function setCommitId($commit_id)
    {
        if (is_null($commit_id)) {
            throw new \InvalidArgumentException('non-nullable commit_id cannot be null');
        }
        $this->container['commit_id'] = $commit_id;

        return $this;
    }

    /**
     * Gets dismissed
     *
     * @return bool|null
     */
    public function getDismissed()
    {
        return $this->container['dismissed'];
    }

    /**
     * Sets dismissed
     *
     * @param bool|null $dismissed dismissed
     *
     * @return self
     */
    public function setDismissed($dismissed)
    {
        if (is_null($dismissed)) {
            throw new \InvalidArgumentException('non-nullable dismissed cannot be null');
        }
        $this->container['dismissed'] = $dismissed;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string|null
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string|null $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets official
     *
     * @return bool|null
     */
    public function getOfficial()
    {
        return $this->container['official'];
    }

    /**
     * Sets official
     *
     * @param bool|null $official official
     *
     * @return self
     */
    public function setOfficial($official)
    {
        if (is_null($official)) {
            throw new \InvalidArgumentException('non-nullable official cannot be null');
        }
        $this->container['official'] = $official;

        return $this;
    }

    /**
     * Gets pull_request_url
     *
     * @return string|null
     */
    public function getPullRequestUrl()
    {
        return $this->container['pull_request_url'];
    }

    /**
     * Sets pull_request_url
     *
     * @param string|null $pull_request_url pull_request_url
     *
     * @return self
     */
    public function setPullRequestUrl($pull_request_url)
    {
        if (is_null($pull_request_url)) {
            throw new \InvalidArgumentException('non-nullable pull_request_url cannot be null');
        }
        $this->container['pull_request_url'] = $pull_request_url;

        return $this;
    }

    /**
     * Gets stale
     *
     * @return bool|null
     */
    public function getStale()
    {
        return $this->container['stale'];
    }

    /**
     * Sets stale
     *
     * @param bool|null $stale stale
     *
     * @return self
     */
    public function setStale($stale)
    {
        if (is_null($stale)) {
            throw new \InvalidArgumentException('non-nullable stale cannot be null');
        }
        $this->container['stale'] = $stale;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state ReviewStateType review state type
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets submitted_at
     *
     * @return \DateTime|null
     */
    public function getSubmittedAt()
    {
        return $this->container['submitted_at'];
    }

    /**
     * Sets submitted_at
     *
     * @param \DateTime|null $submitted_at submitted_at
     *
     * @return self
     */
    public function setSubmittedAt($submitted_at)
    {
        if (is_null($submitted_at)) {
            throw new \InvalidArgumentException('non-nullable submitted_at cannot be null');
        }
        $this->container['submitted_at'] = $submitted_at;

        return $this;
    }

    /**
     * Gets team
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Team|null
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Team|null $team team
     *
     * @return self
     */
    public function setTeam($team)
    {
        if (is_null($team)) {
            throw new \InvalidArgumentException('non-nullable team cannot be null');
        }
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


