<?php
/**
 * PullReviewComment
 *
 * PHP version 5
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.19.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Base\ObjectSerializer;

/**
 * PullReviewComment Class Doc Comment
 *
 * @category Class
 * @description PullReviewComment represents a comment on a pull request review
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PullReviewComment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PullReviewComment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'body' => 'string',
        'commit_id' => 'string',
        'created_at' => '\DateTime',
        'diff_hunk' => 'string',
        'html_url' => 'string',
        'id' => 'int',
        'original_commit_id' => 'string',
        'original_position' => 'int',
        'path' => 'string',
        'position' => 'int',
        'pull_request_review_id' => 'int',
        'pull_request_url' => 'string',
        'resolver' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User',
        'updated_at' => '\DateTime',
        'user' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'body' => null,
        'commit_id' => null,
        'created_at' => 'date-time',
        'diff_hunk' => null,
        'html_url' => null,
        'id' => 'int64',
        'original_commit_id' => null,
        'original_position' => 'uint64',
        'path' => null,
        'position' => 'uint64',
        'pull_request_review_id' => 'int64',
        'pull_request_url' => null,
        'resolver' => null,
        'updated_at' => 'date-time',
        'user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'body' => 'body',
        'commit_id' => 'commit_id',
        'created_at' => 'created_at',
        'diff_hunk' => 'diff_hunk',
        'html_url' => 'html_url',
        'id' => 'id',
        'original_commit_id' => 'original_commit_id',
        'original_position' => 'original_position',
        'path' => 'path',
        'position' => 'position',
        'pull_request_review_id' => 'pull_request_review_id',
        'pull_request_url' => 'pull_request_url',
        'resolver' => 'resolver',
        'updated_at' => 'updated_at',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'body' => 'setBody',
        'commit_id' => 'setCommitId',
        'created_at' => 'setCreatedAt',
        'diff_hunk' => 'setDiffHunk',
        'html_url' => 'setHtmlUrl',
        'id' => 'setId',
        'original_commit_id' => 'setOriginalCommitId',
        'original_position' => 'setOriginalPosition',
        'path' => 'setPath',
        'position' => 'setPosition',
        'pull_request_review_id' => 'setPullRequestReviewId',
        'pull_request_url' => 'setPullRequestUrl',
        'resolver' => 'setResolver',
        'updated_at' => 'setUpdatedAt',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'body' => 'getBody',
        'commit_id' => 'getCommitId',
        'created_at' => 'getCreatedAt',
        'diff_hunk' => 'getDiffHunk',
        'html_url' => 'getHtmlUrl',
        'id' => 'getId',
        'original_commit_id' => 'getOriginalCommitId',
        'original_position' => 'getOriginalPosition',
        'path' => 'getPath',
        'position' => 'getPosition',
        'pull_request_review_id' => 'getPullRequestReviewId',
        'pull_request_url' => 'getPullRequestUrl',
        'resolver' => 'getResolver',
        'updated_at' => 'getUpdatedAt',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['commit_id'] = isset($data['commit_id']) ? $data['commit_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['diff_hunk'] = isset($data['diff_hunk']) ? $data['diff_hunk'] : null;
        $this->container['html_url'] = isset($data['html_url']) ? $data['html_url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['original_commit_id'] = isset($data['original_commit_id']) ? $data['original_commit_id'] : null;
        $this->container['original_position'] = isset($data['original_position']) ? $data['original_position'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['pull_request_review_id'] = isset($data['pull_request_review_id']) ? $data['pull_request_review_id'] : null;
        $this->container['pull_request_url'] = isset($data['pull_request_url']) ? $data['pull_request_url'] : null;
        $this->container['resolver'] = isset($data['resolver']) ? $data['resolver'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets commit_id
     *
     * @return string
     */
    public function getCommitId()
    {
        return $this->container['commit_id'];
    }

    /**
     * Sets commit_id
     *
     * @param string $commit_id commit_id
     *
     * @return $this
     */
    public function setCommitId($commit_id)
    {
        $this->container['commit_id'] = $commit_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets diff_hunk
     *
     * @return string
     */
    public function getDiffHunk()
    {
        return $this->container['diff_hunk'];
    }

    /**
     * Sets diff_hunk
     *
     * @param string $diff_hunk diff_hunk
     *
     * @return $this
     */
    public function setDiffHunk($diff_hunk)
    {
        $this->container['diff_hunk'] = $diff_hunk;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return $this
     */
    public function setHtmlUrl($html_url)
    {
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets original_commit_id
     *
     * @return string
     */
    public function getOriginalCommitId()
    {
        return $this->container['original_commit_id'];
    }

    /**
     * Sets original_commit_id
     *
     * @param string $original_commit_id original_commit_id
     *
     * @return $this
     */
    public function setOriginalCommitId($original_commit_id)
    {
        $this->container['original_commit_id'] = $original_commit_id;

        return $this;
    }

    /**
     * Gets original_position
     *
     * @return int
     */
    public function getOriginalPosition()
    {
        return $this->container['original_position'];
    }

    /**
     * Sets original_position
     *
     * @param int $original_position original_position
     *
     * @return $this
     */
    public function setOriginalPosition($original_position)
    {
        $this->container['original_position'] = $original_position;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets pull_request_review_id
     *
     * @return int
     */
    public function getPullRequestReviewId()
    {
        return $this->container['pull_request_review_id'];
    }

    /**
     * Sets pull_request_review_id
     *
     * @param int $pull_request_review_id pull_request_review_id
     *
     * @return $this
     */
    public function setPullRequestReviewId($pull_request_review_id)
    {
        $this->container['pull_request_review_id'] = $pull_request_review_id;

        return $this;
    }

    /**
     * Gets pull_request_url
     *
     * @return string
     */
    public function getPullRequestUrl()
    {
        return $this->container['pull_request_url'];
    }

    /**
     * Sets pull_request_url
     *
     * @param string $pull_request_url pull_request_url
     *
     * @return $this
     */
    public function setPullRequestUrl($pull_request_url)
    {
        $this->container['pull_request_url'] = $pull_request_url;

        return $this;
    }

    /**
     * Gets resolver
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User
     */
    public function getResolver()
    {
        return $this->container['resolver'];
    }

    /**
     * Sets resolver
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User $resolver resolver
     *
     * @return $this
     */
    public function setResolver($resolver)
    {
        $this->container['resolver'] = $resolver;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


