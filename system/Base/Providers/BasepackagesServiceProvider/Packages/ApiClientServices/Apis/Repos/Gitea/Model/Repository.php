<?php
/**
 * Repository
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.21.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\ObjectSerializer;

/**
 * Repository Class Doc Comment
 *
 * @category Class
 * @description Repository represents a repository
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Repository implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Repository';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_merge_commits' => 'bool',
        'allow_rebase' => 'bool',
        'allow_rebase_explicit' => 'bool',
        'allow_rebase_update' => 'bool',
        'allow_squash_merge' => 'bool',
        'archived' => 'bool',
        'archived_at' => '\DateTime',
        'avatar_url' => 'string',
        'clone_url' => 'string',
        'created_at' => '\DateTime',
        'default_allow_maintainer_edit' => 'bool',
        'default_branch' => 'string',
        'default_delete_branch_after_merge' => 'bool',
        'default_merge_style' => 'string',
        'description' => 'string',
        'empty' => 'bool',
        'external_tracker' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\ExternalTracker',
        'external_wiki' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\ExternalWiki',
        'fork' => 'bool',
        'forks_count' => 'int',
        'full_name' => 'string',
        'has_actions' => 'bool',
        'has_issues' => 'bool',
        'has_packages' => 'bool',
        'has_projects' => 'bool',
        'has_pull_requests' => 'bool',
        'has_releases' => 'bool',
        'has_wiki' => 'bool',
        'html_url' => 'string',
        'id' => 'int',
        'ignore_whitespace_conflicts' => 'bool',
        'internal' => 'bool',
        'internal_tracker' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\InternalTracker',
        'language' => 'string',
        'languages_url' => 'string',
        'link' => 'string',
        'mirror' => 'bool',
        'mirror_interval' => 'string',
        'mirror_updated' => '\DateTime',
        'name' => 'string',
        'open_issues_count' => 'int',
        'open_pr_counter' => 'int',
        'original_url' => 'string',
        'owner' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User',
        'parent' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Repository',
        'permissions' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Permission',
        'private' => 'bool',
        'release_counter' => 'int',
        'repo_transfer' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\RepoTransfer',
        'size' => 'int',
        'ssh_url' => 'string',
        'stars_count' => 'int',
        'template' => 'bool',
        'updated_at' => '\DateTime',
        'url' => 'string',
        'watchers_count' => 'int',
        'website' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_merge_commits' => null,
        'allow_rebase' => null,
        'allow_rebase_explicit' => null,
        'allow_rebase_update' => null,
        'allow_squash_merge' => null,
        'archived' => null,
        'archived_at' => 'date-time',
        'avatar_url' => null,
        'clone_url' => null,
        'created_at' => 'date-time',
        'default_allow_maintainer_edit' => null,
        'default_branch' => null,
        'default_delete_branch_after_merge' => null,
        'default_merge_style' => null,
        'description' => null,
        'empty' => null,
        'external_tracker' => null,
        'external_wiki' => null,
        'fork' => null,
        'forks_count' => 'int64',
        'full_name' => null,
        'has_actions' => null,
        'has_issues' => null,
        'has_packages' => null,
        'has_projects' => null,
        'has_pull_requests' => null,
        'has_releases' => null,
        'has_wiki' => null,
        'html_url' => null,
        'id' => 'int64',
        'ignore_whitespace_conflicts' => null,
        'internal' => null,
        'internal_tracker' => null,
        'language' => null,
        'languages_url' => null,
        'link' => null,
        'mirror' => null,
        'mirror_interval' => null,
        'mirror_updated' => 'date-time',
        'name' => null,
        'open_issues_count' => 'int64',
        'open_pr_counter' => 'int64',
        'original_url' => null,
        'owner' => null,
        'parent' => null,
        'permissions' => null,
        'private' => null,
        'release_counter' => 'int64',
        'repo_transfer' => null,
        'size' => 'int64',
        'ssh_url' => null,
        'stars_count' => 'int64',
        'template' => null,
        'updated_at' => 'date-time',
        'url' => null,
        'watchers_count' => 'int64',
        'website' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allow_merge_commits' => false,
        'allow_rebase' => false,
        'allow_rebase_explicit' => false,
        'allow_rebase_update' => false,
        'allow_squash_merge' => false,
        'archived' => false,
        'archived_at' => false,
        'avatar_url' => false,
        'clone_url' => false,
        'created_at' => false,
        'default_allow_maintainer_edit' => false,
        'default_branch' => false,
        'default_delete_branch_after_merge' => false,
        'default_merge_style' => false,
        'description' => false,
        'empty' => false,
        'external_tracker' => false,
        'external_wiki' => false,
        'fork' => false,
        'forks_count' => false,
        'full_name' => false,
        'has_actions' => false,
        'has_issues' => false,
        'has_packages' => false,
        'has_projects' => false,
        'has_pull_requests' => false,
        'has_releases' => false,
        'has_wiki' => false,
        'html_url' => false,
        'id' => false,
        'ignore_whitespace_conflicts' => false,
        'internal' => false,
        'internal_tracker' => false,
        'language' => false,
        'languages_url' => false,
        'link' => false,
        'mirror' => false,
        'mirror_interval' => false,
        'mirror_updated' => false,
        'name' => false,
        'open_issues_count' => false,
        'open_pr_counter' => false,
        'original_url' => false,
        'owner' => false,
        'parent' => false,
        'permissions' => false,
        'private' => false,
        'release_counter' => false,
        'repo_transfer' => false,
        'size' => false,
        'ssh_url' => false,
        'stars_count' => false,
        'template' => false,
        'updated_at' => false,
        'url' => false,
        'watchers_count' => false,
        'website' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_merge_commits' => 'allow_merge_commits',
        'allow_rebase' => 'allow_rebase',
        'allow_rebase_explicit' => 'allow_rebase_explicit',
        'allow_rebase_update' => 'allow_rebase_update',
        'allow_squash_merge' => 'allow_squash_merge',
        'archived' => 'archived',
        'archived_at' => 'archived_at',
        'avatar_url' => 'avatar_url',
        'clone_url' => 'clone_url',
        'created_at' => 'created_at',
        'default_allow_maintainer_edit' => 'default_allow_maintainer_edit',
        'default_branch' => 'default_branch',
        'default_delete_branch_after_merge' => 'default_delete_branch_after_merge',
        'default_merge_style' => 'default_merge_style',
        'description' => 'description',
        'empty' => 'empty',
        'external_tracker' => 'external_tracker',
        'external_wiki' => 'external_wiki',
        'fork' => 'fork',
        'forks_count' => 'forks_count',
        'full_name' => 'full_name',
        'has_actions' => 'has_actions',
        'has_issues' => 'has_issues',
        'has_packages' => 'has_packages',
        'has_projects' => 'has_projects',
        'has_pull_requests' => 'has_pull_requests',
        'has_releases' => 'has_releases',
        'has_wiki' => 'has_wiki',
        'html_url' => 'html_url',
        'id' => 'id',
        'ignore_whitespace_conflicts' => 'ignore_whitespace_conflicts',
        'internal' => 'internal',
        'internal_tracker' => 'internal_tracker',
        'language' => 'language',
        'languages_url' => 'languages_url',
        'link' => 'link',
        'mirror' => 'mirror',
        'mirror_interval' => 'mirror_interval',
        'mirror_updated' => 'mirror_updated',
        'name' => 'name',
        'open_issues_count' => 'open_issues_count',
        'open_pr_counter' => 'open_pr_counter',
        'original_url' => 'original_url',
        'owner' => 'owner',
        'parent' => 'parent',
        'permissions' => 'permissions',
        'private' => 'private',
        'release_counter' => 'release_counter',
        'repo_transfer' => 'repo_transfer',
        'size' => 'size',
        'ssh_url' => 'ssh_url',
        'stars_count' => 'stars_count',
        'template' => 'template',
        'updated_at' => 'updated_at',
        'url' => 'url',
        'watchers_count' => 'watchers_count',
        'website' => 'website'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_merge_commits' => 'setAllowMergeCommits',
        'allow_rebase' => 'setAllowRebase',
        'allow_rebase_explicit' => 'setAllowRebaseExplicit',
        'allow_rebase_update' => 'setAllowRebaseUpdate',
        'allow_squash_merge' => 'setAllowSquashMerge',
        'archived' => 'setArchived',
        'archived_at' => 'setArchivedAt',
        'avatar_url' => 'setAvatarUrl',
        'clone_url' => 'setCloneUrl',
        'created_at' => 'setCreatedAt',
        'default_allow_maintainer_edit' => 'setDefaultAllowMaintainerEdit',
        'default_branch' => 'setDefaultBranch',
        'default_delete_branch_after_merge' => 'setDefaultDeleteBranchAfterMerge',
        'default_merge_style' => 'setDefaultMergeStyle',
        'description' => 'setDescription',
        'empty' => 'setEmpty',
        'external_tracker' => 'setExternalTracker',
        'external_wiki' => 'setExternalWiki',
        'fork' => 'setFork',
        'forks_count' => 'setForksCount',
        'full_name' => 'setFullName',
        'has_actions' => 'setHasActions',
        'has_issues' => 'setHasIssues',
        'has_packages' => 'setHasPackages',
        'has_projects' => 'setHasProjects',
        'has_pull_requests' => 'setHasPullRequests',
        'has_releases' => 'setHasReleases',
        'has_wiki' => 'setHasWiki',
        'html_url' => 'setHtmlUrl',
        'id' => 'setId',
        'ignore_whitespace_conflicts' => 'setIgnoreWhitespaceConflicts',
        'internal' => 'setInternal',
        'internal_tracker' => 'setInternalTracker',
        'language' => 'setLanguage',
        'languages_url' => 'setLanguagesUrl',
        'link' => 'setLink',
        'mirror' => 'setMirror',
        'mirror_interval' => 'setMirrorInterval',
        'mirror_updated' => 'setMirrorUpdated',
        'name' => 'setName',
        'open_issues_count' => 'setOpenIssuesCount',
        'open_pr_counter' => 'setOpenPrCounter',
        'original_url' => 'setOriginalUrl',
        'owner' => 'setOwner',
        'parent' => 'setParent',
        'permissions' => 'setPermissions',
        'private' => 'setPrivate',
        'release_counter' => 'setReleaseCounter',
        'repo_transfer' => 'setRepoTransfer',
        'size' => 'setSize',
        'ssh_url' => 'setSshUrl',
        'stars_count' => 'setStarsCount',
        'template' => 'setTemplate',
        'updated_at' => 'setUpdatedAt',
        'url' => 'setUrl',
        'watchers_count' => 'setWatchersCount',
        'website' => 'setWebsite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_merge_commits' => 'getAllowMergeCommits',
        'allow_rebase' => 'getAllowRebase',
        'allow_rebase_explicit' => 'getAllowRebaseExplicit',
        'allow_rebase_update' => 'getAllowRebaseUpdate',
        'allow_squash_merge' => 'getAllowSquashMerge',
        'archived' => 'getArchived',
        'archived_at' => 'getArchivedAt',
        'avatar_url' => 'getAvatarUrl',
        'clone_url' => 'getCloneUrl',
        'created_at' => 'getCreatedAt',
        'default_allow_maintainer_edit' => 'getDefaultAllowMaintainerEdit',
        'default_branch' => 'getDefaultBranch',
        'default_delete_branch_after_merge' => 'getDefaultDeleteBranchAfterMerge',
        'default_merge_style' => 'getDefaultMergeStyle',
        'description' => 'getDescription',
        'empty' => 'getEmpty',
        'external_tracker' => 'getExternalTracker',
        'external_wiki' => 'getExternalWiki',
        'fork' => 'getFork',
        'forks_count' => 'getForksCount',
        'full_name' => 'getFullName',
        'has_actions' => 'getHasActions',
        'has_issues' => 'getHasIssues',
        'has_packages' => 'getHasPackages',
        'has_projects' => 'getHasProjects',
        'has_pull_requests' => 'getHasPullRequests',
        'has_releases' => 'getHasReleases',
        'has_wiki' => 'getHasWiki',
        'html_url' => 'getHtmlUrl',
        'id' => 'getId',
        'ignore_whitespace_conflicts' => 'getIgnoreWhitespaceConflicts',
        'internal' => 'getInternal',
        'internal_tracker' => 'getInternalTracker',
        'language' => 'getLanguage',
        'languages_url' => 'getLanguagesUrl',
        'link' => 'getLink',
        'mirror' => 'getMirror',
        'mirror_interval' => 'getMirrorInterval',
        'mirror_updated' => 'getMirrorUpdated',
        'name' => 'getName',
        'open_issues_count' => 'getOpenIssuesCount',
        'open_pr_counter' => 'getOpenPrCounter',
        'original_url' => 'getOriginalUrl',
        'owner' => 'getOwner',
        'parent' => 'getParent',
        'permissions' => 'getPermissions',
        'private' => 'getPrivate',
        'release_counter' => 'getReleaseCounter',
        'repo_transfer' => 'getRepoTransfer',
        'size' => 'getSize',
        'ssh_url' => 'getSshUrl',
        'stars_count' => 'getStarsCount',
        'template' => 'getTemplate',
        'updated_at' => 'getUpdatedAt',
        'url' => 'getUrl',
        'watchers_count' => 'getWatchersCount',
        'website' => 'getWebsite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allow_merge_commits', $data ?? [], null);
        $this->setIfExists('allow_rebase', $data ?? [], null);
        $this->setIfExists('allow_rebase_explicit', $data ?? [], null);
        $this->setIfExists('allow_rebase_update', $data ?? [], null);
        $this->setIfExists('allow_squash_merge', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('archived_at', $data ?? [], null);
        $this->setIfExists('avatar_url', $data ?? [], null);
        $this->setIfExists('clone_url', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('default_allow_maintainer_edit', $data ?? [], null);
        $this->setIfExists('default_branch', $data ?? [], null);
        $this->setIfExists('default_delete_branch_after_merge', $data ?? [], null);
        $this->setIfExists('default_merge_style', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('empty', $data ?? [], null);
        $this->setIfExists('external_tracker', $data ?? [], null);
        $this->setIfExists('external_wiki', $data ?? [], null);
        $this->setIfExists('fork', $data ?? [], null);
        $this->setIfExists('forks_count', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('has_actions', $data ?? [], null);
        $this->setIfExists('has_issues', $data ?? [], null);
        $this->setIfExists('has_packages', $data ?? [], null);
        $this->setIfExists('has_projects', $data ?? [], null);
        $this->setIfExists('has_pull_requests', $data ?? [], null);
        $this->setIfExists('has_releases', $data ?? [], null);
        $this->setIfExists('has_wiki', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('ignore_whitespace_conflicts', $data ?? [], null);
        $this->setIfExists('internal', $data ?? [], null);
        $this->setIfExists('internal_tracker', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('languages_url', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('mirror', $data ?? [], null);
        $this->setIfExists('mirror_interval', $data ?? [], null);
        $this->setIfExists('mirror_updated', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('open_issues_count', $data ?? [], null);
        $this->setIfExists('open_pr_counter', $data ?? [], null);
        $this->setIfExists('original_url', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('parent', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('private', $data ?? [], null);
        $this->setIfExists('release_counter', $data ?? [], null);
        $this->setIfExists('repo_transfer', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('ssh_url', $data ?? [], null);
        $this->setIfExists('stars_count', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('watchers_count', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_merge_commits
     *
     * @return bool|null
     */
    public function getAllowMergeCommits()
    {
        return $this->container['allow_merge_commits'];
    }

    /**
     * Sets allow_merge_commits
     *
     * @param bool|null $allow_merge_commits allow_merge_commits
     *
     * @return self
     */
    public function setAllowMergeCommits($allow_merge_commits)
    {
        if (is_null($allow_merge_commits)) {
            throw new \InvalidArgumentException('non-nullable allow_merge_commits cannot be null');
        }
        $this->container['allow_merge_commits'] = $allow_merge_commits;

        return $this;
    }

    /**
     * Gets allow_rebase
     *
     * @return bool|null
     */
    public function getAllowRebase()
    {
        return $this->container['allow_rebase'];
    }

    /**
     * Sets allow_rebase
     *
     * @param bool|null $allow_rebase allow_rebase
     *
     * @return self
     */
    public function setAllowRebase($allow_rebase)
    {
        if (is_null($allow_rebase)) {
            throw new \InvalidArgumentException('non-nullable allow_rebase cannot be null');
        }
        $this->container['allow_rebase'] = $allow_rebase;

        return $this;
    }

    /**
     * Gets allow_rebase_explicit
     *
     * @return bool|null
     */
    public function getAllowRebaseExplicit()
    {
        return $this->container['allow_rebase_explicit'];
    }

    /**
     * Sets allow_rebase_explicit
     *
     * @param bool|null $allow_rebase_explicit allow_rebase_explicit
     *
     * @return self
     */
    public function setAllowRebaseExplicit($allow_rebase_explicit)
    {
        if (is_null($allow_rebase_explicit)) {
            throw new \InvalidArgumentException('non-nullable allow_rebase_explicit cannot be null');
        }
        $this->container['allow_rebase_explicit'] = $allow_rebase_explicit;

        return $this;
    }

    /**
     * Gets allow_rebase_update
     *
     * @return bool|null
     */
    public function getAllowRebaseUpdate()
    {
        return $this->container['allow_rebase_update'];
    }

    /**
     * Sets allow_rebase_update
     *
     * @param bool|null $allow_rebase_update allow_rebase_update
     *
     * @return self
     */
    public function setAllowRebaseUpdate($allow_rebase_update)
    {
        if (is_null($allow_rebase_update)) {
            throw new \InvalidArgumentException('non-nullable allow_rebase_update cannot be null');
        }
        $this->container['allow_rebase_update'] = $allow_rebase_update;

        return $this;
    }

    /**
     * Gets allow_squash_merge
     *
     * @return bool|null
     */
    public function getAllowSquashMerge()
    {
        return $this->container['allow_squash_merge'];
    }

    /**
     * Sets allow_squash_merge
     *
     * @param bool|null $allow_squash_merge allow_squash_merge
     *
     * @return self
     */
    public function setAllowSquashMerge($allow_squash_merge)
    {
        if (is_null($allow_squash_merge)) {
            throw new \InvalidArgumentException('non-nullable allow_squash_merge cannot be null');
        }
        $this->container['allow_squash_merge'] = $allow_squash_merge;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets archived_at
     *
     * @return \DateTime|null
     */
    public function getArchivedAt()
    {
        return $this->container['archived_at'];
    }

    /**
     * Sets archived_at
     *
     * @param \DateTime|null $archived_at archived_at
     *
     * @return self
     */
    public function setArchivedAt($archived_at)
    {
        if (is_null($archived_at)) {
            throw new \InvalidArgumentException('non-nullable archived_at cannot be null');
        }
        $this->container['archived_at'] = $archived_at;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string|null
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string|null $avatar_url avatar_url
     *
     * @return self
     */
    public function setAvatarUrl($avatar_url)
    {
        if (is_null($avatar_url)) {
            throw new \InvalidArgumentException('non-nullable avatar_url cannot be null');
        }
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets clone_url
     *
     * @return string|null
     */
    public function getCloneUrl()
    {
        return $this->container['clone_url'];
    }

    /**
     * Sets clone_url
     *
     * @param string|null $clone_url clone_url
     *
     * @return self
     */
    public function setCloneUrl($clone_url)
    {
        if (is_null($clone_url)) {
            throw new \InvalidArgumentException('non-nullable clone_url cannot be null');
        }
        $this->container['clone_url'] = $clone_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets default_allow_maintainer_edit
     *
     * @return bool|null
     */
    public function getDefaultAllowMaintainerEdit()
    {
        return $this->container['default_allow_maintainer_edit'];
    }

    /**
     * Sets default_allow_maintainer_edit
     *
     * @param bool|null $default_allow_maintainer_edit default_allow_maintainer_edit
     *
     * @return self
     */
    public function setDefaultAllowMaintainerEdit($default_allow_maintainer_edit)
    {
        if (is_null($default_allow_maintainer_edit)) {
            throw new \InvalidArgumentException('non-nullable default_allow_maintainer_edit cannot be null');
        }
        $this->container['default_allow_maintainer_edit'] = $default_allow_maintainer_edit;

        return $this;
    }

    /**
     * Gets default_branch
     *
     * @return string|null
     */
    public function getDefaultBranch()
    {
        return $this->container['default_branch'];
    }

    /**
     * Sets default_branch
     *
     * @param string|null $default_branch default_branch
     *
     * @return self
     */
    public function setDefaultBranch($default_branch)
    {
        if (is_null($default_branch)) {
            throw new \InvalidArgumentException('non-nullable default_branch cannot be null');
        }
        $this->container['default_branch'] = $default_branch;

        return $this;
    }

    /**
     * Gets default_delete_branch_after_merge
     *
     * @return bool|null
     */
    public function getDefaultDeleteBranchAfterMerge()
    {
        return $this->container['default_delete_branch_after_merge'];
    }

    /**
     * Sets default_delete_branch_after_merge
     *
     * @param bool|null $default_delete_branch_after_merge default_delete_branch_after_merge
     *
     * @return self
     */
    public function setDefaultDeleteBranchAfterMerge($default_delete_branch_after_merge)
    {
        if (is_null($default_delete_branch_after_merge)) {
            throw new \InvalidArgumentException('non-nullable default_delete_branch_after_merge cannot be null');
        }
        $this->container['default_delete_branch_after_merge'] = $default_delete_branch_after_merge;

        return $this;
    }

    /**
     * Gets default_merge_style
     *
     * @return string|null
     */
    public function getDefaultMergeStyle()
    {
        return $this->container['default_merge_style'];
    }

    /**
     * Sets default_merge_style
     *
     * @param string|null $default_merge_style default_merge_style
     *
     * @return self
     */
    public function setDefaultMergeStyle($default_merge_style)
    {
        if (is_null($default_merge_style)) {
            throw new \InvalidArgumentException('non-nullable default_merge_style cannot be null');
        }
        $this->container['default_merge_style'] = $default_merge_style;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets empty
     *
     * @return bool|null
     */
    public function getEmpty()
    {
        return $this->container['empty'];
    }

    /**
     * Sets empty
     *
     * @param bool|null $empty empty
     *
     * @return self
     */
    public function setEmpty($empty)
    {
        if (is_null($empty)) {
            throw new \InvalidArgumentException('non-nullable empty cannot be null');
        }
        $this->container['empty'] = $empty;

        return $this;
    }

    /**
     * Gets external_tracker
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\ExternalTracker|null
     */
    public function getExternalTracker()
    {
        return $this->container['external_tracker'];
    }

    /**
     * Sets external_tracker
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\ExternalTracker|null $external_tracker external_tracker
     *
     * @return self
     */
    public function setExternalTracker($external_tracker)
    {
        if (is_null($external_tracker)) {
            throw new \InvalidArgumentException('non-nullable external_tracker cannot be null');
        }
        $this->container['external_tracker'] = $external_tracker;

        return $this;
    }

    /**
     * Gets external_wiki
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\ExternalWiki|null
     */
    public function getExternalWiki()
    {
        return $this->container['external_wiki'];
    }

    /**
     * Sets external_wiki
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\ExternalWiki|null $external_wiki external_wiki
     *
     * @return self
     */
    public function setExternalWiki($external_wiki)
    {
        if (is_null($external_wiki)) {
            throw new \InvalidArgumentException('non-nullable external_wiki cannot be null');
        }
        $this->container['external_wiki'] = $external_wiki;

        return $this;
    }

    /**
     * Gets fork
     *
     * @return bool|null
     */
    public function getFork()
    {
        return $this->container['fork'];
    }

    /**
     * Sets fork
     *
     * @param bool|null $fork fork
     *
     * @return self
     */
    public function setFork($fork)
    {
        if (is_null($fork)) {
            throw new \InvalidArgumentException('non-nullable fork cannot be null');
        }
        $this->container['fork'] = $fork;

        return $this;
    }

    /**
     * Gets forks_count
     *
     * @return int|null
     */
    public function getForksCount()
    {
        return $this->container['forks_count'];
    }

    /**
     * Sets forks_count
     *
     * @param int|null $forks_count forks_count
     *
     * @return self
     */
    public function setForksCount($forks_count)
    {
        if (is_null($forks_count)) {
            throw new \InvalidArgumentException('non-nullable forks_count cannot be null');
        }
        $this->container['forks_count'] = $forks_count;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name full_name
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            throw new \InvalidArgumentException('non-nullable full_name cannot be null');
        }
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets has_actions
     *
     * @return bool|null
     */
    public function getHasActions()
    {
        return $this->container['has_actions'];
    }

    /**
     * Sets has_actions
     *
     * @param bool|null $has_actions has_actions
     *
     * @return self
     */
    public function setHasActions($has_actions)
    {
        if (is_null($has_actions)) {
            throw new \InvalidArgumentException('non-nullable has_actions cannot be null');
        }
        $this->container['has_actions'] = $has_actions;

        return $this;
    }

    /**
     * Gets has_issues
     *
     * @return bool|null
     */
    public function getHasIssues()
    {
        return $this->container['has_issues'];
    }

    /**
     * Sets has_issues
     *
     * @param bool|null $has_issues has_issues
     *
     * @return self
     */
    public function setHasIssues($has_issues)
    {
        if (is_null($has_issues)) {
            throw new \InvalidArgumentException('non-nullable has_issues cannot be null');
        }
        $this->container['has_issues'] = $has_issues;

        return $this;
    }

    /**
     * Gets has_packages
     *
     * @return bool|null
     */
    public function getHasPackages()
    {
        return $this->container['has_packages'];
    }

    /**
     * Sets has_packages
     *
     * @param bool|null $has_packages has_packages
     *
     * @return self
     */
    public function setHasPackages($has_packages)
    {
        if (is_null($has_packages)) {
            throw new \InvalidArgumentException('non-nullable has_packages cannot be null');
        }
        $this->container['has_packages'] = $has_packages;

        return $this;
    }

    /**
     * Gets has_projects
     *
     * @return bool|null
     */
    public function getHasProjects()
    {
        return $this->container['has_projects'];
    }

    /**
     * Sets has_projects
     *
     * @param bool|null $has_projects has_projects
     *
     * @return self
     */
    public function setHasProjects($has_projects)
    {
        if (is_null($has_projects)) {
            throw new \InvalidArgumentException('non-nullable has_projects cannot be null');
        }
        $this->container['has_projects'] = $has_projects;

        return $this;
    }

    /**
     * Gets has_pull_requests
     *
     * @return bool|null
     */
    public function getHasPullRequests()
    {
        return $this->container['has_pull_requests'];
    }

    /**
     * Sets has_pull_requests
     *
     * @param bool|null $has_pull_requests has_pull_requests
     *
     * @return self
     */
    public function setHasPullRequests($has_pull_requests)
    {
        if (is_null($has_pull_requests)) {
            throw new \InvalidArgumentException('non-nullable has_pull_requests cannot be null');
        }
        $this->container['has_pull_requests'] = $has_pull_requests;

        return $this;
    }

    /**
     * Gets has_releases
     *
     * @return bool|null
     */
    public function getHasReleases()
    {
        return $this->container['has_releases'];
    }

    /**
     * Sets has_releases
     *
     * @param bool|null $has_releases has_releases
     *
     * @return self
     */
    public function setHasReleases($has_releases)
    {
        if (is_null($has_releases)) {
            throw new \InvalidArgumentException('non-nullable has_releases cannot be null');
        }
        $this->container['has_releases'] = $has_releases;

        return $this;
    }

    /**
     * Gets has_wiki
     *
     * @return bool|null
     */
    public function getHasWiki()
    {
        return $this->container['has_wiki'];
    }

    /**
     * Sets has_wiki
     *
     * @param bool|null $has_wiki has_wiki
     *
     * @return self
     */
    public function setHasWiki($has_wiki)
    {
        if (is_null($has_wiki)) {
            throw new \InvalidArgumentException('non-nullable has_wiki cannot be null');
        }
        $this->container['has_wiki'] = $has_wiki;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string|null
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string|null $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ignore_whitespace_conflicts
     *
     * @return bool|null
     */
    public function getIgnoreWhitespaceConflicts()
    {
        return $this->container['ignore_whitespace_conflicts'];
    }

    /**
     * Sets ignore_whitespace_conflicts
     *
     * @param bool|null $ignore_whitespace_conflicts ignore_whitespace_conflicts
     *
     * @return self
     */
    public function setIgnoreWhitespaceConflicts($ignore_whitespace_conflicts)
    {
        if (is_null($ignore_whitespace_conflicts)) {
            throw new \InvalidArgumentException('non-nullable ignore_whitespace_conflicts cannot be null');
        }
        $this->container['ignore_whitespace_conflicts'] = $ignore_whitespace_conflicts;

        return $this;
    }

    /**
     * Gets internal
     *
     * @return bool|null
     */
    public function getInternal()
    {
        return $this->container['internal'];
    }

    /**
     * Sets internal
     *
     * @param bool|null $internal internal
     *
     * @return self
     */
    public function setInternal($internal)
    {
        if (is_null($internal)) {
            throw new \InvalidArgumentException('non-nullable internal cannot be null');
        }
        $this->container['internal'] = $internal;

        return $this;
    }

    /**
     * Gets internal_tracker
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\InternalTracker|null
     */
    public function getInternalTracker()
    {
        return $this->container['internal_tracker'];
    }

    /**
     * Sets internal_tracker
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\InternalTracker|null $internal_tracker internal_tracker
     *
     * @return self
     */
    public function setInternalTracker($internal_tracker)
    {
        if (is_null($internal_tracker)) {
            throw new \InvalidArgumentException('non-nullable internal_tracker cannot be null');
        }
        $this->container['internal_tracker'] = $internal_tracker;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets languages_url
     *
     * @return string|null
     */
    public function getLanguagesUrl()
    {
        return $this->container['languages_url'];
    }

    /**
     * Sets languages_url
     *
     * @param string|null $languages_url languages_url
     *
     * @return self
     */
    public function setLanguagesUrl($languages_url)
    {
        if (is_null($languages_url)) {
            throw new \InvalidArgumentException('non-nullable languages_url cannot be null');
        }
        $this->container['languages_url'] = $languages_url;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string|null $link link
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            throw new \InvalidArgumentException('non-nullable link cannot be null');
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets mirror
     *
     * @return bool|null
     */
    public function getMirror()
    {
        return $this->container['mirror'];
    }

    /**
     * Sets mirror
     *
     * @param bool|null $mirror mirror
     *
     * @return self
     */
    public function setMirror($mirror)
    {
        if (is_null($mirror)) {
            throw new \InvalidArgumentException('non-nullable mirror cannot be null');
        }
        $this->container['mirror'] = $mirror;

        return $this;
    }

    /**
     * Gets mirror_interval
     *
     * @return string|null
     */
    public function getMirrorInterval()
    {
        return $this->container['mirror_interval'];
    }

    /**
     * Sets mirror_interval
     *
     * @param string|null $mirror_interval mirror_interval
     *
     * @return self
     */
    public function setMirrorInterval($mirror_interval)
    {
        if (is_null($mirror_interval)) {
            throw new \InvalidArgumentException('non-nullable mirror_interval cannot be null');
        }
        $this->container['mirror_interval'] = $mirror_interval;

        return $this;
    }

    /**
     * Gets mirror_updated
     *
     * @return \DateTime|null
     */
    public function getMirrorUpdated()
    {
        return $this->container['mirror_updated'];
    }

    /**
     * Sets mirror_updated
     *
     * @param \DateTime|null $mirror_updated mirror_updated
     *
     * @return self
     */
    public function setMirrorUpdated($mirror_updated)
    {
        if (is_null($mirror_updated)) {
            throw new \InvalidArgumentException('non-nullable mirror_updated cannot be null');
        }
        $this->container['mirror_updated'] = $mirror_updated;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets open_issues_count
     *
     * @return int|null
     */
    public function getOpenIssuesCount()
    {
        return $this->container['open_issues_count'];
    }

    /**
     * Sets open_issues_count
     *
     * @param int|null $open_issues_count open_issues_count
     *
     * @return self
     */
    public function setOpenIssuesCount($open_issues_count)
    {
        if (is_null($open_issues_count)) {
            throw new \InvalidArgumentException('non-nullable open_issues_count cannot be null');
        }
        $this->container['open_issues_count'] = $open_issues_count;

        return $this;
    }

    /**
     * Gets open_pr_counter
     *
     * @return int|null
     */
    public function getOpenPrCounter()
    {
        return $this->container['open_pr_counter'];
    }

    /**
     * Sets open_pr_counter
     *
     * @param int|null $open_pr_counter open_pr_counter
     *
     * @return self
     */
    public function setOpenPrCounter($open_pr_counter)
    {
        if (is_null($open_pr_counter)) {
            throw new \InvalidArgumentException('non-nullable open_pr_counter cannot be null');
        }
        $this->container['open_pr_counter'] = $open_pr_counter;

        return $this;
    }

    /**
     * Gets original_url
     *
     * @return string|null
     */
    public function getOriginalUrl()
    {
        return $this->container['original_url'];
    }

    /**
     * Sets original_url
     *
     * @param string|null $original_url original_url
     *
     * @return self
     */
    public function setOriginalUrl($original_url)
    {
        if (is_null($original_url)) {
            throw new \InvalidArgumentException('non-nullable original_url cannot be null');
        }
        $this->container['original_url'] = $original_url;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\User|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Repository|null
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Repository|null $parent parent
     *
     * @return self
     */
    public function setParent($parent)
    {
        if (is_null($parent)) {
            throw new \InvalidArgumentException('non-nullable parent cannot be null');
        }
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Permission|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\Permission|null $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        if (is_null($permissions)) {
            throw new \InvalidArgumentException('non-nullable permissions cannot be null');
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool|null
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool|null $private private
     *
     * @return self
     */
    public function setPrivate($private)
    {
        if (is_null($private)) {
            throw new \InvalidArgumentException('non-nullable private cannot be null');
        }
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets release_counter
     *
     * @return int|null
     */
    public function getReleaseCounter()
    {
        return $this->container['release_counter'];
    }

    /**
     * Sets release_counter
     *
     * @param int|null $release_counter release_counter
     *
     * @return self
     */
    public function setReleaseCounter($release_counter)
    {
        if (is_null($release_counter)) {
            throw new \InvalidArgumentException('non-nullable release_counter cannot be null');
        }
        $this->container['release_counter'] = $release_counter;

        return $this;
    }

    /**
     * Gets repo_transfer
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\RepoTransfer|null
     */
    public function getRepoTransfer()
    {
        return $this->container['repo_transfer'];
    }

    /**
     * Sets repo_transfer
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\RepoTransfer|null $repo_transfer repo_transfer
     *
     * @return self
     */
    public function setRepoTransfer($repo_transfer)
    {
        if (is_null($repo_transfer)) {
            throw new \InvalidArgumentException('non-nullable repo_transfer cannot be null');
        }
        $this->container['repo_transfer'] = $repo_transfer;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets ssh_url
     *
     * @return string|null
     */
    public function getSshUrl()
    {
        return $this->container['ssh_url'];
    }

    /**
     * Sets ssh_url
     *
     * @param string|null $ssh_url ssh_url
     *
     * @return self
     */
    public function setSshUrl($ssh_url)
    {
        if (is_null($ssh_url)) {
            throw new \InvalidArgumentException('non-nullable ssh_url cannot be null');
        }
        $this->container['ssh_url'] = $ssh_url;

        return $this;
    }

    /**
     * Gets stars_count
     *
     * @return int|null
     */
    public function getStarsCount()
    {
        return $this->container['stars_count'];
    }

    /**
     * Sets stars_count
     *
     * @param int|null $stars_count stars_count
     *
     * @return self
     */
    public function setStarsCount($stars_count)
    {
        if (is_null($stars_count)) {
            throw new \InvalidArgumentException('non-nullable stars_count cannot be null');
        }
        $this->container['stars_count'] = $stars_count;

        return $this;
    }

    /**
     * Gets template
     *
     * @return bool|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param bool|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets watchers_count
     *
     * @return int|null
     */
    public function getWatchersCount()
    {
        return $this->container['watchers_count'];
    }

    /**
     * Sets watchers_count
     *
     * @param int|null $watchers_count watchers_count
     *
     * @return self
     */
    public function setWatchersCount($watchers_count)
    {
        if (is_null($watchers_count)) {
            throw new \InvalidArgumentException('non-nullable watchers_count cannot be null');
        }
        $this->container['watchers_count'] = $watchers_count;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


