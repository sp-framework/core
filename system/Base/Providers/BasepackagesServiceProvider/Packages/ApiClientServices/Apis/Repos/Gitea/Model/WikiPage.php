<?php
/**
 * WikiPage
 *
 * PHP version 5
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Base\ObjectSerializer;

/**
 * WikiPage Class Doc Comment
 *
 * @category Class
 * @description WikiPage a wiki page
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WikiPage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WikiPage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'commit_count' => 'int',
        'content_base64' => 'string',
        'footer' => 'string',
        'html_url' => 'string',
        'last_commit' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\WikiCommit',
        'sidebar' => 'string',
        'sub_url' => 'string',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'commit_count' => 'int64',
        'content_base64' => null,
        'footer' => null,
        'html_url' => null,
        'last_commit' => null,
        'sidebar' => null,
        'sub_url' => null,
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'commit_count' => 'commit_count',
        'content_base64' => 'content_base64',
        'footer' => 'footer',
        'html_url' => 'html_url',
        'last_commit' => 'last_commit',
        'sidebar' => 'sidebar',
        'sub_url' => 'sub_url',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'commit_count' => 'setCommitCount',
        'content_base64' => 'setContentBase64',
        'footer' => 'setFooter',
        'html_url' => 'setHtmlUrl',
        'last_commit' => 'setLastCommit',
        'sidebar' => 'setSidebar',
        'sub_url' => 'setSubUrl',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'commit_count' => 'getCommitCount',
        'content_base64' => 'getContentBase64',
        'footer' => 'getFooter',
        'html_url' => 'getHtmlUrl',
        'last_commit' => 'getLastCommit',
        'sidebar' => 'getSidebar',
        'sub_url' => 'getSubUrl',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['commit_count'] = isset($data['commit_count']) ? $data['commit_count'] : null;
        $this->container['content_base64'] = isset($data['content_base64']) ? $data['content_base64'] : null;
        $this->container['footer'] = isset($data['footer']) ? $data['footer'] : null;
        $this->container['html_url'] = isset($data['html_url']) ? $data['html_url'] : null;
        $this->container['last_commit'] = isset($data['last_commit']) ? $data['last_commit'] : null;
        $this->container['sidebar'] = isset($data['sidebar']) ? $data['sidebar'] : null;
        $this->container['sub_url'] = isset($data['sub_url']) ? $data['sub_url'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets commit_count
     *
     * @return int
     */
    public function getCommitCount()
    {
        return $this->container['commit_count'];
    }

    /**
     * Sets commit_count
     *
     * @param int $commit_count commit_count
     *
     * @return $this
     */
    public function setCommitCount($commit_count)
    {
        $this->container['commit_count'] = $commit_count;

        return $this;
    }

    /**
     * Gets content_base64
     *
     * @return string
     */
    public function getContentBase64()
    {
        return $this->container['content_base64'];
    }

    /**
     * Sets content_base64
     *
     * @param string $content_base64 Page content, base64 encoded
     *
     * @return $this
     */
    public function setContentBase64($content_base64)
    {
        $this->container['content_base64'] = $content_base64;

        return $this;
    }

    /**
     * Gets footer
     *
     * @return string
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     *
     * @param string $footer footer
     *
     * @return $this
     */
    public function setFooter($footer)
    {
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return $this
     */
    public function setHtmlUrl($html_url)
    {
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets last_commit
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\WikiCommit
     */
    public function getLastCommit()
    {
        return $this->container['last_commit'];
    }

    /**
     * Sets last_commit
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Gitea\Model\WikiCommit $last_commit last_commit
     *
     * @return $this
     */
    public function setLastCommit($last_commit)
    {
        $this->container['last_commit'] = $last_commit;

        return $this;
    }

    /**
     * Gets sidebar
     *
     * @return string
     */
    public function getSidebar()
    {
        return $this->container['sidebar'];
    }

    /**
     * Sets sidebar
     *
     * @param string $sidebar sidebar
     *
     * @return $this
     */
    public function setSidebar($sidebar)
    {
        $this->container['sidebar'] = $sidebar;

        return $this;
    }

    /**
     * Gets sub_url
     *
     * @return string
     */
    public function getSubUrl()
    {
        return $this->container['sub_url'];
    }

    /**
     * Sets sub_url
     *
     * @param string $sub_url sub_url
     *
     * @return $this
     */
    public function setSubUrl($sub_url)
    {
        $this->container['sub_url'] = $sub_url;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


