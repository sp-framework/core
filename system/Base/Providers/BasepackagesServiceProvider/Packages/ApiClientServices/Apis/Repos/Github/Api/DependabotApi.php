<?php
/**
 * DependabotApi
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException;
use System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Configuration;
use System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\HeaderSelector;
use System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * DependabotApi Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DependabotApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'dependabotAddSelectedRepoToOrgSecret' => [
            'application/json',
        ],
        'dependabotCreateOrUpdateOrgSecret' => [
            'application/json',
        ],
        'dependabotCreateOrUpdateRepoSecret' => [
            'application/json',
        ],
        'dependabotDeleteOrgSecret' => [
            'application/json',
        ],
        'dependabotDeleteRepoSecret' => [
            'application/json',
        ],
        'dependabotGetAlert' => [
            'application/json',
        ],
        'dependabotGetOrgPublicKey' => [
            'application/json',
        ],
        'dependabotGetOrgSecret' => [
            'application/json',
        ],
        'dependabotGetRepoPublicKey' => [
            'application/json',
        ],
        'dependabotGetRepoSecret' => [
            'application/json',
        ],
        'dependabotListAlertsForEnterprise' => [
            'application/json',
        ],
        'dependabotListAlertsForOrg' => [
            'application/json',
        ],
        'dependabotListAlertsForRepo' => [
            'application/json',
        ],
        'dependabotListOrgSecrets' => [
            'application/json',
        ],
        'dependabotListRepoSecrets' => [
            'application/json',
        ],
        'dependabotListSelectedReposForOrgSecret' => [
            'application/json',
        ],
        'dependabotRemoveSelectedRepoFromOrgSecret' => [
            'application/json',
        ],
        'dependabotSetSelectedReposForOrgSecret' => [
            'application/json',
        ],
        'dependabotUpdateAlert' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation dependabotAddSelectedRepoToOrgSecret
     *
     * Add selected repository to an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $repository_id repository_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotAddSelectedRepoToOrgSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dependabotAddSelectedRepoToOrgSecret($org, $secret_name, $repository_id, string $contentType = self::contentTypes['dependabotAddSelectedRepoToOrgSecret'][0])
    {
        $this->dependabotAddSelectedRepoToOrgSecretWithHttpInfo($org, $secret_name, $repository_id, $contentType);
    }

    /**
     * Operation dependabotAddSelectedRepoToOrgSecretWithHttpInfo
     *
     * Add selected repository to an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $repository_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotAddSelectedRepoToOrgSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotAddSelectedRepoToOrgSecretWithHttpInfo($org, $secret_name, $repository_id, string $contentType = self::contentTypes['dependabotAddSelectedRepoToOrgSecret'][0])
    {
        $request = $this->dependabotAddSelectedRepoToOrgSecretRequest($org, $secret_name, $repository_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotAddSelectedRepoToOrgSecretAsync
     *
     * Add selected repository to an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $repository_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotAddSelectedRepoToOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotAddSelectedRepoToOrgSecretAsync($org, $secret_name, $repository_id, string $contentType = self::contentTypes['dependabotAddSelectedRepoToOrgSecret'][0])
    {
        return $this->dependabotAddSelectedRepoToOrgSecretAsyncWithHttpInfo($org, $secret_name, $repository_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotAddSelectedRepoToOrgSecretAsyncWithHttpInfo
     *
     * Add selected repository to an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $repository_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotAddSelectedRepoToOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotAddSelectedRepoToOrgSecretAsyncWithHttpInfo($org, $secret_name, $repository_id, string $contentType = self::contentTypes['dependabotAddSelectedRepoToOrgSecret'][0])
    {
        $returnType = '';
        $request = $this->dependabotAddSelectedRepoToOrgSecretRequest($org, $secret_name, $repository_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotAddSelectedRepoToOrgSecret'
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $repository_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotAddSelectedRepoToOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotAddSelectedRepoToOrgSecretRequest($org, $secret_name, $repository_id, string $contentType = self::contentTypes['dependabotAddSelectedRepoToOrgSecret'][0])
    {

        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling dependabotAddSelectedRepoToOrgSecret'
            );
        }

        // verify the required parameter 'secret_name' is set
        if ($secret_name === null || (is_array($secret_name) && count($secret_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secret_name when calling dependabotAddSelectedRepoToOrgSecret'
            );
        }

        // verify the required parameter 'repository_id' is set
        if ($repository_id === null || (is_array($repository_id) && count($repository_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repository_id when calling dependabotAddSelectedRepoToOrgSecret'
            );
        }


        $resourcePath = '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }
        // path params
        if ($secret_name !== null) {
            $resourcePath = str_replace(
                '{' . 'secret_name' . '}',
                ObjectSerializer::toPathValue($secret_name),
                $resourcePath
            );
        }
        // path params
        if ($repository_id !== null) {
            $resourcePath = str_replace(
                '{' . 'repository_id' . '}',
                ObjectSerializer::toPathValue($repository_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotCreateOrUpdateOrgSecret
     *
     * Create or update an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotCreateOrUpdateOrgSecretRequest $dependabot_create_or_update_org_secret_request dependabot_create_or_update_org_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotCreateOrUpdateOrgSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function dependabotCreateOrUpdateOrgSecret($org, $secret_name, $dependabot_create_or_update_org_secret_request, string $contentType = self::contentTypes['dependabotCreateOrUpdateOrgSecret'][0])
    {
        list($response) = $this->dependabotCreateOrUpdateOrgSecretWithHttpInfo($org, $secret_name, $dependabot_create_or_update_org_secret_request, $contentType);
        return $response;
    }

    /**
     * Operation dependabotCreateOrUpdateOrgSecretWithHttpInfo
     *
     * Create or update an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotCreateOrUpdateOrgSecretRequest $dependabot_create_or_update_org_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotCreateOrUpdateOrgSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotCreateOrUpdateOrgSecretWithHttpInfo($org, $secret_name, $dependabot_create_or_update_org_secret_request, string $contentType = self::contentTypes['dependabotCreateOrUpdateOrgSecret'][0])
    {
        $request = $this->dependabotCreateOrUpdateOrgSecretRequest($org, $secret_name, $dependabot_create_or_update_org_secret_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotCreateOrUpdateOrgSecretAsync
     *
     * Create or update an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotCreateOrUpdateOrgSecretRequest $dependabot_create_or_update_org_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotCreateOrUpdateOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotCreateOrUpdateOrgSecretAsync($org, $secret_name, $dependabot_create_or_update_org_secret_request, string $contentType = self::contentTypes['dependabotCreateOrUpdateOrgSecret'][0])
    {
        return $this->dependabotCreateOrUpdateOrgSecretAsyncWithHttpInfo($org, $secret_name, $dependabot_create_or_update_org_secret_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotCreateOrUpdateOrgSecretAsyncWithHttpInfo
     *
     * Create or update an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotCreateOrUpdateOrgSecretRequest $dependabot_create_or_update_org_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotCreateOrUpdateOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotCreateOrUpdateOrgSecretAsyncWithHttpInfo($org, $secret_name, $dependabot_create_or_update_org_secret_request, string $contentType = self::contentTypes['dependabotCreateOrUpdateOrgSecret'][0])
    {
        $returnType = 'object';
        $request = $this->dependabotCreateOrUpdateOrgSecretRequest($org, $secret_name, $dependabot_create_or_update_org_secret_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotCreateOrUpdateOrgSecret'
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotCreateOrUpdateOrgSecretRequest $dependabot_create_or_update_org_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotCreateOrUpdateOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotCreateOrUpdateOrgSecretRequest($org, $secret_name, $dependabot_create_or_update_org_secret_request, string $contentType = self::contentTypes['dependabotCreateOrUpdateOrgSecret'][0])
    {

        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling dependabotCreateOrUpdateOrgSecret'
            );
        }

        // verify the required parameter 'secret_name' is set
        if ($secret_name === null || (is_array($secret_name) && count($secret_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secret_name when calling dependabotCreateOrUpdateOrgSecret'
            );
        }

        // verify the required parameter 'dependabot_create_or_update_org_secret_request' is set
        if ($dependabot_create_or_update_org_secret_request === null || (is_array($dependabot_create_or_update_org_secret_request) && count($dependabot_create_or_update_org_secret_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dependabot_create_or_update_org_secret_request when calling dependabotCreateOrUpdateOrgSecret'
            );
        }


        $resourcePath = '/orgs/{org}/dependabot/secrets/{secret_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }
        // path params
        if ($secret_name !== null) {
            $resourcePath = str_replace(
                '{' . 'secret_name' . '}',
                ObjectSerializer::toPathValue($secret_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dependabot_create_or_update_org_secret_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dependabot_create_or_update_org_secret_request));
            } else {
                $httpBody = $dependabot_create_or_update_org_secret_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotCreateOrUpdateRepoSecret
     *
     * Create or update a repository secret
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotCreateOrUpdateRepoSecretRequest $dependabot_create_or_update_repo_secret_request dependabot_create_or_update_repo_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotCreateOrUpdateRepoSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function dependabotCreateOrUpdateRepoSecret($owner, $repo, $secret_name, $dependabot_create_or_update_repo_secret_request, string $contentType = self::contentTypes['dependabotCreateOrUpdateRepoSecret'][0])
    {
        list($response) = $this->dependabotCreateOrUpdateRepoSecretWithHttpInfo($owner, $repo, $secret_name, $dependabot_create_or_update_repo_secret_request, $contentType);
        return $response;
    }

    /**
     * Operation dependabotCreateOrUpdateRepoSecretWithHttpInfo
     *
     * Create or update a repository secret
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotCreateOrUpdateRepoSecretRequest $dependabot_create_or_update_repo_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotCreateOrUpdateRepoSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotCreateOrUpdateRepoSecretWithHttpInfo($owner, $repo, $secret_name, $dependabot_create_or_update_repo_secret_request, string $contentType = self::contentTypes['dependabotCreateOrUpdateRepoSecret'][0])
    {
        $request = $this->dependabotCreateOrUpdateRepoSecretRequest($owner, $repo, $secret_name, $dependabot_create_or_update_repo_secret_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotCreateOrUpdateRepoSecretAsync
     *
     * Create or update a repository secret
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotCreateOrUpdateRepoSecretRequest $dependabot_create_or_update_repo_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotCreateOrUpdateRepoSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotCreateOrUpdateRepoSecretAsync($owner, $repo, $secret_name, $dependabot_create_or_update_repo_secret_request, string $contentType = self::contentTypes['dependabotCreateOrUpdateRepoSecret'][0])
    {
        return $this->dependabotCreateOrUpdateRepoSecretAsyncWithHttpInfo($owner, $repo, $secret_name, $dependabot_create_or_update_repo_secret_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotCreateOrUpdateRepoSecretAsyncWithHttpInfo
     *
     * Create or update a repository secret
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotCreateOrUpdateRepoSecretRequest $dependabot_create_or_update_repo_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotCreateOrUpdateRepoSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotCreateOrUpdateRepoSecretAsyncWithHttpInfo($owner, $repo, $secret_name, $dependabot_create_or_update_repo_secret_request, string $contentType = self::contentTypes['dependabotCreateOrUpdateRepoSecret'][0])
    {
        $returnType = 'object';
        $request = $this->dependabotCreateOrUpdateRepoSecretRequest($owner, $repo, $secret_name, $dependabot_create_or_update_repo_secret_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotCreateOrUpdateRepoSecret'
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotCreateOrUpdateRepoSecretRequest $dependabot_create_or_update_repo_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotCreateOrUpdateRepoSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotCreateOrUpdateRepoSecretRequest($owner, $repo, $secret_name, $dependabot_create_or_update_repo_secret_request, string $contentType = self::contentTypes['dependabotCreateOrUpdateRepoSecret'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling dependabotCreateOrUpdateRepoSecret'
            );
        }

        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling dependabotCreateOrUpdateRepoSecret'
            );
        }

        // verify the required parameter 'secret_name' is set
        if ($secret_name === null || (is_array($secret_name) && count($secret_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secret_name when calling dependabotCreateOrUpdateRepoSecret'
            );
        }

        // verify the required parameter 'dependabot_create_or_update_repo_secret_request' is set
        if ($dependabot_create_or_update_repo_secret_request === null || (is_array($dependabot_create_or_update_repo_secret_request) && count($dependabot_create_or_update_repo_secret_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dependabot_create_or_update_repo_secret_request when calling dependabotCreateOrUpdateRepoSecret'
            );
        }


        $resourcePath = '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($secret_name !== null) {
            $resourcePath = str_replace(
                '{' . 'secret_name' . '}',
                ObjectSerializer::toPathValue($secret_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dependabot_create_or_update_repo_secret_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dependabot_create_or_update_repo_secret_request));
            } else {
                $httpBody = $dependabot_create_or_update_repo_secret_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotDeleteOrgSecret
     *
     * Delete an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotDeleteOrgSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dependabotDeleteOrgSecret($org, $secret_name, string $contentType = self::contentTypes['dependabotDeleteOrgSecret'][0])
    {
        $this->dependabotDeleteOrgSecretWithHttpInfo($org, $secret_name, $contentType);
    }

    /**
     * Operation dependabotDeleteOrgSecretWithHttpInfo
     *
     * Delete an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotDeleteOrgSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotDeleteOrgSecretWithHttpInfo($org, $secret_name, string $contentType = self::contentTypes['dependabotDeleteOrgSecret'][0])
    {
        $request = $this->dependabotDeleteOrgSecretRequest($org, $secret_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotDeleteOrgSecretAsync
     *
     * Delete an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotDeleteOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotDeleteOrgSecretAsync($org, $secret_name, string $contentType = self::contentTypes['dependabotDeleteOrgSecret'][0])
    {
        return $this->dependabotDeleteOrgSecretAsyncWithHttpInfo($org, $secret_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotDeleteOrgSecretAsyncWithHttpInfo
     *
     * Delete an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotDeleteOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotDeleteOrgSecretAsyncWithHttpInfo($org, $secret_name, string $contentType = self::contentTypes['dependabotDeleteOrgSecret'][0])
    {
        $returnType = '';
        $request = $this->dependabotDeleteOrgSecretRequest($org, $secret_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotDeleteOrgSecret'
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotDeleteOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotDeleteOrgSecretRequest($org, $secret_name, string $contentType = self::contentTypes['dependabotDeleteOrgSecret'][0])
    {

        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling dependabotDeleteOrgSecret'
            );
        }

        // verify the required parameter 'secret_name' is set
        if ($secret_name === null || (is_array($secret_name) && count($secret_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secret_name when calling dependabotDeleteOrgSecret'
            );
        }


        $resourcePath = '/orgs/{org}/dependabot/secrets/{secret_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }
        // path params
        if ($secret_name !== null) {
            $resourcePath = str_replace(
                '{' . 'secret_name' . '}',
                ObjectSerializer::toPathValue($secret_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotDeleteRepoSecret
     *
     * Delete a repository secret
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotDeleteRepoSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dependabotDeleteRepoSecret($owner, $repo, $secret_name, string $contentType = self::contentTypes['dependabotDeleteRepoSecret'][0])
    {
        $this->dependabotDeleteRepoSecretWithHttpInfo($owner, $repo, $secret_name, $contentType);
    }

    /**
     * Operation dependabotDeleteRepoSecretWithHttpInfo
     *
     * Delete a repository secret
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotDeleteRepoSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotDeleteRepoSecretWithHttpInfo($owner, $repo, $secret_name, string $contentType = self::contentTypes['dependabotDeleteRepoSecret'][0])
    {
        $request = $this->dependabotDeleteRepoSecretRequest($owner, $repo, $secret_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotDeleteRepoSecretAsync
     *
     * Delete a repository secret
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotDeleteRepoSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotDeleteRepoSecretAsync($owner, $repo, $secret_name, string $contentType = self::contentTypes['dependabotDeleteRepoSecret'][0])
    {
        return $this->dependabotDeleteRepoSecretAsyncWithHttpInfo($owner, $repo, $secret_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotDeleteRepoSecretAsyncWithHttpInfo
     *
     * Delete a repository secret
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotDeleteRepoSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotDeleteRepoSecretAsyncWithHttpInfo($owner, $repo, $secret_name, string $contentType = self::contentTypes['dependabotDeleteRepoSecret'][0])
    {
        $returnType = '';
        $request = $this->dependabotDeleteRepoSecretRequest($owner, $repo, $secret_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotDeleteRepoSecret'
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotDeleteRepoSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotDeleteRepoSecretRequest($owner, $repo, $secret_name, string $contentType = self::contentTypes['dependabotDeleteRepoSecret'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling dependabotDeleteRepoSecret'
            );
        }

        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling dependabotDeleteRepoSecret'
            );
        }

        // verify the required parameter 'secret_name' is set
        if ($secret_name === null || (is_array($secret_name) && count($secret_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secret_name when calling dependabotDeleteRepoSecret'
            );
        }


        $resourcePath = '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($secret_name !== null) {
            $resourcePath = str_replace(
                '{' . 'secret_name' . '}',
                ObjectSerializer::toPathValue($secret_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotGetAlert
     *
     * Get a Dependabot alert
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $alert_number The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetAlert'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError
     */
    public function dependabotGetAlert($owner, $repo, $alert_number, string $contentType = self::contentTypes['dependabotGetAlert'][0])
    {
        list($response) = $this->dependabotGetAlertWithHttpInfo($owner, $repo, $alert_number, $contentType);
        return $response;
    }

    /**
     * Operation dependabotGetAlertWithHttpInfo
     *
     * Get a Dependabot alert
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $alert_number The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetAlert'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotGetAlertWithHttpInfo($owner, $repo, $alert_number, string $contentType = self::contentTypes['dependabotGetAlert'][0])
    {
        $request = $this->dependabotGetAlertRequest($owner, $repo, $alert_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotGetAlertAsync
     *
     * Get a Dependabot alert
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $alert_number The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotGetAlertAsync($owner, $repo, $alert_number, string $contentType = self::contentTypes['dependabotGetAlert'][0])
    {
        return $this->dependabotGetAlertAsyncWithHttpInfo($owner, $repo, $alert_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotGetAlertAsyncWithHttpInfo
     *
     * Get a Dependabot alert
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $alert_number The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotGetAlertAsyncWithHttpInfo($owner, $repo, $alert_number, string $contentType = self::contentTypes['dependabotGetAlert'][0])
    {
        $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert';
        $request = $this->dependabotGetAlertRequest($owner, $repo, $alert_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotGetAlert'
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $alert_number The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotGetAlertRequest($owner, $repo, $alert_number, string $contentType = self::contentTypes['dependabotGetAlert'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling dependabotGetAlert'
            );
        }

        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling dependabotGetAlert'
            );
        }

        // verify the required parameter 'alert_number' is set
        if ($alert_number === null || (is_array($alert_number) && count($alert_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alert_number when calling dependabotGetAlert'
            );
        }


        $resourcePath = '/repos/{owner}/{repo}/dependabot/alerts/{alert_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($alert_number !== null) {
            $resourcePath = str_replace(
                '{' . 'alert_number' . '}',
                ObjectSerializer::toPathValue($alert_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotGetOrgPublicKey
     *
     * Get an organization public key
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetOrgPublicKey'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey
     */
    public function dependabotGetOrgPublicKey($org, string $contentType = self::contentTypes['dependabotGetOrgPublicKey'][0])
    {
        list($response) = $this->dependabotGetOrgPublicKeyWithHttpInfo($org, $contentType);
        return $response;
    }

    /**
     * Operation dependabotGetOrgPublicKeyWithHttpInfo
     *
     * Get an organization public key
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetOrgPublicKey'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotGetOrgPublicKeyWithHttpInfo($org, string $contentType = self::contentTypes['dependabotGetOrgPublicKey'][0])
    {
        $request = $this->dependabotGetOrgPublicKeyRequest($org, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotGetOrgPublicKeyAsync
     *
     * Get an organization public key
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetOrgPublicKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotGetOrgPublicKeyAsync($org, string $contentType = self::contentTypes['dependabotGetOrgPublicKey'][0])
    {
        return $this->dependabotGetOrgPublicKeyAsyncWithHttpInfo($org, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotGetOrgPublicKeyAsyncWithHttpInfo
     *
     * Get an organization public key
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetOrgPublicKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotGetOrgPublicKeyAsyncWithHttpInfo($org, string $contentType = self::contentTypes['dependabotGetOrgPublicKey'][0])
    {
        $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey';
        $request = $this->dependabotGetOrgPublicKeyRequest($org, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotGetOrgPublicKey'
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetOrgPublicKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotGetOrgPublicKeyRequest($org, string $contentType = self::contentTypes['dependabotGetOrgPublicKey'][0])
    {

        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling dependabotGetOrgPublicKey'
            );
        }


        $resourcePath = '/orgs/{org}/dependabot/secrets/public-key';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotGetOrgSecret
     *
     * Get an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetOrgSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\OrganizationDependabotSecret
     */
    public function dependabotGetOrgSecret($org, $secret_name, string $contentType = self::contentTypes['dependabotGetOrgSecret'][0])
    {
        list($response) = $this->dependabotGetOrgSecretWithHttpInfo($org, $secret_name, $contentType);
        return $response;
    }

    /**
     * Operation dependabotGetOrgSecretWithHttpInfo
     *
     * Get an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetOrgSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\OrganizationDependabotSecret, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotGetOrgSecretWithHttpInfo($org, $secret_name, string $contentType = self::contentTypes['dependabotGetOrgSecret'][0])
    {
        $request = $this->dependabotGetOrgSecretRequest($org, $secret_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\OrganizationDependabotSecret' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\OrganizationDependabotSecret' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\OrganizationDependabotSecret', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\OrganizationDependabotSecret';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\OrganizationDependabotSecret',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotGetOrgSecretAsync
     *
     * Get an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotGetOrgSecretAsync($org, $secret_name, string $contentType = self::contentTypes['dependabotGetOrgSecret'][0])
    {
        return $this->dependabotGetOrgSecretAsyncWithHttpInfo($org, $secret_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotGetOrgSecretAsyncWithHttpInfo
     *
     * Get an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotGetOrgSecretAsyncWithHttpInfo($org, $secret_name, string $contentType = self::contentTypes['dependabotGetOrgSecret'][0])
    {
        $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\OrganizationDependabotSecret';
        $request = $this->dependabotGetOrgSecretRequest($org, $secret_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotGetOrgSecret'
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotGetOrgSecretRequest($org, $secret_name, string $contentType = self::contentTypes['dependabotGetOrgSecret'][0])
    {

        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling dependabotGetOrgSecret'
            );
        }

        // verify the required parameter 'secret_name' is set
        if ($secret_name === null || (is_array($secret_name) && count($secret_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secret_name when calling dependabotGetOrgSecret'
            );
        }


        $resourcePath = '/orgs/{org}/dependabot/secrets/{secret_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }
        // path params
        if ($secret_name !== null) {
            $resourcePath = str_replace(
                '{' . 'secret_name' . '}',
                ObjectSerializer::toPathValue($secret_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotGetRepoPublicKey
     *
     * Get a repository public key
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetRepoPublicKey'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey
     */
    public function dependabotGetRepoPublicKey($owner, $repo, string $contentType = self::contentTypes['dependabotGetRepoPublicKey'][0])
    {
        list($response) = $this->dependabotGetRepoPublicKeyWithHttpInfo($owner, $repo, $contentType);
        return $response;
    }

    /**
     * Operation dependabotGetRepoPublicKeyWithHttpInfo
     *
     * Get a repository public key
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetRepoPublicKey'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotGetRepoPublicKeyWithHttpInfo($owner, $repo, string $contentType = self::contentTypes['dependabotGetRepoPublicKey'][0])
    {
        $request = $this->dependabotGetRepoPublicKeyRequest($owner, $repo, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotGetRepoPublicKeyAsync
     *
     * Get a repository public key
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetRepoPublicKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotGetRepoPublicKeyAsync($owner, $repo, string $contentType = self::contentTypes['dependabotGetRepoPublicKey'][0])
    {
        return $this->dependabotGetRepoPublicKeyAsyncWithHttpInfo($owner, $repo, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotGetRepoPublicKeyAsyncWithHttpInfo
     *
     * Get a repository public key
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetRepoPublicKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotGetRepoPublicKeyAsyncWithHttpInfo($owner, $repo, string $contentType = self::contentTypes['dependabotGetRepoPublicKey'][0])
    {
        $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotPublicKey';
        $request = $this->dependabotGetRepoPublicKeyRequest($owner, $repo, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotGetRepoPublicKey'
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetRepoPublicKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotGetRepoPublicKeyRequest($owner, $repo, string $contentType = self::contentTypes['dependabotGetRepoPublicKey'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling dependabotGetRepoPublicKey'
            );
        }

        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling dependabotGetRepoPublicKey'
            );
        }


        $resourcePath = '/repos/{owner}/{repo}/dependabot/secrets/public-key';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotGetRepoSecret
     *
     * Get a repository secret
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetRepoSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotSecret
     */
    public function dependabotGetRepoSecret($owner, $repo, $secret_name, string $contentType = self::contentTypes['dependabotGetRepoSecret'][0])
    {
        list($response) = $this->dependabotGetRepoSecretWithHttpInfo($owner, $repo, $secret_name, $contentType);
        return $response;
    }

    /**
     * Operation dependabotGetRepoSecretWithHttpInfo
     *
     * Get a repository secret
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetRepoSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotSecret, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotGetRepoSecretWithHttpInfo($owner, $repo, $secret_name, string $contentType = self::contentTypes['dependabotGetRepoSecret'][0])
    {
        $request = $this->dependabotGetRepoSecretRequest($owner, $repo, $secret_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotSecret' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotSecret' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotSecret', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotSecret';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotSecret',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotGetRepoSecretAsync
     *
     * Get a repository secret
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetRepoSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotGetRepoSecretAsync($owner, $repo, $secret_name, string $contentType = self::contentTypes['dependabotGetRepoSecret'][0])
    {
        return $this->dependabotGetRepoSecretAsyncWithHttpInfo($owner, $repo, $secret_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotGetRepoSecretAsyncWithHttpInfo
     *
     * Get a repository secret
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetRepoSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotGetRepoSecretAsyncWithHttpInfo($owner, $repo, $secret_name, string $contentType = self::contentTypes['dependabotGetRepoSecret'][0])
    {
        $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotSecret';
        $request = $this->dependabotGetRepoSecretRequest($owner, $repo, $secret_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotGetRepoSecret'
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotGetRepoSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotGetRepoSecretRequest($owner, $repo, $secret_name, string $contentType = self::contentTypes['dependabotGetRepoSecret'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling dependabotGetRepoSecret'
            );
        }

        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling dependabotGetRepoSecret'
            );
        }

        // verify the required parameter 'secret_name' is set
        if ($secret_name === null || (is_array($secret_name) && count($secret_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secret_name when calling dependabotGetRepoSecret'
            );
        }


        $resourcePath = '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($secret_name !== null) {
            $resourcePath = str_replace(
                '{' . 'secret_name' . '}',
                ObjectSerializer::toPathValue($secret_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotListAlertsForEnterprise
     *
     * List Dependabot alerts for an enterprise
     *
     * @param  string $enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForEnterprise'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple
     */
    public function dependabotListAlertsForEnterprise($enterprise, $state = null, $severity = null, $ecosystem = null, $package = null, $scope = null, $sort = 'created', $direction = 'desc', $before = null, $after = null, $first = 30, $last = null, $per_page = 30, string $contentType = self::contentTypes['dependabotListAlertsForEnterprise'][0])
    {
        list($response) = $this->dependabotListAlertsForEnterpriseWithHttpInfo($enterprise, $state, $severity, $ecosystem, $package, $scope, $sort, $direction, $before, $after, $first, $last, $per_page, $contentType);
        return $response;
    }

    /**
     * Operation dependabotListAlertsForEnterpriseWithHttpInfo
     *
     * List Dependabot alerts for an enterprise
     *
     * @param  string $enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForEnterprise'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotListAlertsForEnterpriseWithHttpInfo($enterprise, $state = null, $severity = null, $ecosystem = null, $package = null, $scope = null, $sort = 'created', $direction = 'desc', $before = null, $after = null, $first = 30, $last = null, $per_page = 30, string $contentType = self::contentTypes['dependabotListAlertsForEnterprise'][0])
    {
        $request = $this->dependabotListAlertsForEnterpriseRequest($enterprise, $state, $severity, $ecosystem, $package, $scope, $sort, $direction, $before, $after, $first, $last, $per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotListAlertsForEnterpriseAsync
     *
     * List Dependabot alerts for an enterprise
     *
     * @param  string $enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForEnterprise'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotListAlertsForEnterpriseAsync($enterprise, $state = null, $severity = null, $ecosystem = null, $package = null, $scope = null, $sort = 'created', $direction = 'desc', $before = null, $after = null, $first = 30, $last = null, $per_page = 30, string $contentType = self::contentTypes['dependabotListAlertsForEnterprise'][0])
    {
        return $this->dependabotListAlertsForEnterpriseAsyncWithHttpInfo($enterprise, $state, $severity, $ecosystem, $package, $scope, $sort, $direction, $before, $after, $first, $last, $per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotListAlertsForEnterpriseAsyncWithHttpInfo
     *
     * List Dependabot alerts for an enterprise
     *
     * @param  string $enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForEnterprise'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotListAlertsForEnterpriseAsyncWithHttpInfo($enterprise, $state = null, $severity = null, $ecosystem = null, $package = null, $scope = null, $sort = 'created', $direction = 'desc', $before = null, $after = null, $first = 30, $last = null, $per_page = 30, string $contentType = self::contentTypes['dependabotListAlertsForEnterprise'][0])
    {
        $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]';
        $request = $this->dependabotListAlertsForEnterpriseRequest($enterprise, $state, $severity, $ecosystem, $package, $scope, $sort, $direction, $before, $after, $first, $last, $per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotListAlertsForEnterprise'
     *
     * @param  string $enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForEnterprise'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotListAlertsForEnterpriseRequest($enterprise, $state = null, $severity = null, $ecosystem = null, $package = null, $scope = null, $sort = 'created', $direction = 'desc', $before = null, $after = null, $first = 30, $last = null, $per_page = 30, string $contentType = self::contentTypes['dependabotListAlertsForEnterprise'][0])
    {

        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling dependabotListAlertsForEnterprise'
            );
        }










        if ($first !== null && $first > 100) {
            throw new \InvalidArgumentException('invalid value for "$first" when calling DependabotApi.dependabotListAlertsForEnterprise, must be smaller than or equal to 100.');
        }
        if ($first !== null && $first < 1) {
            throw new \InvalidArgumentException('invalid value for "$first" when calling DependabotApi.dependabotListAlertsForEnterprise, must be bigger than or equal to 1.');
        }
        
        if ($last !== null && $last > 100) {
            throw new \InvalidArgumentException('invalid value for "$last" when calling DependabotApi.dependabotListAlertsForEnterprise, must be smaller than or equal to 100.');
        }
        if ($last !== null && $last < 1) {
            throw new \InvalidArgumentException('invalid value for "$last" when calling DependabotApi.dependabotListAlertsForEnterprise, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/enterprises/{enterprise}/dependabot/alerts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $severity,
            'severity', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ecosystem,
            'ecosystem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $package,
            'package', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scope,
            'scope', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first,
            'first', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last,
            'last', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotListAlertsForOrg
     *
     * List Dependabot alerts for an organization
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForOrg'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple
     */
    public function dependabotListAlertsForOrg($org, $state = null, $severity = null, $ecosystem = null, $package = null, $scope = null, $sort = 'created', $direction = 'desc', $before = null, $after = null, $first = 30, $last = null, $per_page = 30, string $contentType = self::contentTypes['dependabotListAlertsForOrg'][0])
    {
        list($response) = $this->dependabotListAlertsForOrgWithHttpInfo($org, $state, $severity, $ecosystem, $package, $scope, $sort, $direction, $before, $after, $first, $last, $per_page, $contentType);
        return $response;
    }

    /**
     * Operation dependabotListAlertsForOrgWithHttpInfo
     *
     * List Dependabot alerts for an organization
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForOrg'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotListAlertsForOrgWithHttpInfo($org, $state = null, $severity = null, $ecosystem = null, $package = null, $scope = null, $sort = 'created', $direction = 'desc', $before = null, $after = null, $first = 30, $last = null, $per_page = 30, string $contentType = self::contentTypes['dependabotListAlertsForOrg'][0])
    {
        $request = $this->dependabotListAlertsForOrgRequest($org, $state, $severity, $ecosystem, $package, $scope, $sort, $direction, $before, $after, $first, $last, $per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotListAlertsForOrgAsync
     *
     * List Dependabot alerts for an organization
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotListAlertsForOrgAsync($org, $state = null, $severity = null, $ecosystem = null, $package = null, $scope = null, $sort = 'created', $direction = 'desc', $before = null, $after = null, $first = 30, $last = null, $per_page = 30, string $contentType = self::contentTypes['dependabotListAlertsForOrg'][0])
    {
        return $this->dependabotListAlertsForOrgAsyncWithHttpInfo($org, $state, $severity, $ecosystem, $package, $scope, $sort, $direction, $before, $after, $first, $last, $per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotListAlertsForOrgAsyncWithHttpInfo
     *
     * List Dependabot alerts for an organization
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotListAlertsForOrgAsyncWithHttpInfo($org, $state = null, $severity = null, $ecosystem = null, $package = null, $scope = null, $sort = 'created', $direction = 'desc', $before = null, $after = null, $first = 30, $last = null, $per_page = 30, string $contentType = self::contentTypes['dependabotListAlertsForOrg'][0])
    {
        $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlertWithRepository[]';
        $request = $this->dependabotListAlertsForOrgRequest($org, $state, $severity, $ecosystem, $package, $scope, $sort, $direction, $before, $after, $first, $last, $per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotListAlertsForOrg'
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotListAlertsForOrgRequest($org, $state = null, $severity = null, $ecosystem = null, $package = null, $scope = null, $sort = 'created', $direction = 'desc', $before = null, $after = null, $first = 30, $last = null, $per_page = 30, string $contentType = self::contentTypes['dependabotListAlertsForOrg'][0])
    {

        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling dependabotListAlertsForOrg'
            );
        }










        if ($first !== null && $first > 100) {
            throw new \InvalidArgumentException('invalid value for "$first" when calling DependabotApi.dependabotListAlertsForOrg, must be smaller than or equal to 100.');
        }
        if ($first !== null && $first < 1) {
            throw new \InvalidArgumentException('invalid value for "$first" when calling DependabotApi.dependabotListAlertsForOrg, must be bigger than or equal to 1.');
        }
        
        if ($last !== null && $last > 100) {
            throw new \InvalidArgumentException('invalid value for "$last" when calling DependabotApi.dependabotListAlertsForOrg, must be smaller than or equal to 100.');
        }
        if ($last !== null && $last < 1) {
            throw new \InvalidArgumentException('invalid value for "$last" when calling DependabotApi.dependabotListAlertsForOrg, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/orgs/{org}/dependabot/alerts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $severity,
            'severity', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ecosystem,
            'ecosystem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $package,
            'package', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scope,
            'scope', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first,
            'first', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last,
            'last', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/scim+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotListAlertsForRepo
     *
     * List Dependabot alerts for a repository
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $manifest A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  int $page **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with &#x60;before&#x60; or &#x60;after&#x60; instead. (optional, default to 1) (deprecated)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30) (deprecated)
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForRepo'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert[]|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple
     */
    public function dependabotListAlertsForRepo($owner, $repo, $state = null, $severity = null, $ecosystem = null, $package = null, $manifest = null, $scope = null, $sort = 'created', $direction = 'desc', $page = 1, $per_page = 30, $before = null, $after = null, $first = 30, $last = null, string $contentType = self::contentTypes['dependabotListAlertsForRepo'][0])
    {
        list($response) = $this->dependabotListAlertsForRepoWithHttpInfo($owner, $repo, $state, $severity, $ecosystem, $package, $manifest, $scope, $sort, $direction, $page, $per_page, $before, $after, $first, $last, $contentType);
        return $response;
    }

    /**
     * Operation dependabotListAlertsForRepoWithHttpInfo
     *
     * List Dependabot alerts for a repository
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $manifest A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  int $page **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with &#x60;before&#x60; or &#x60;after&#x60; instead. (optional, default to 1) (deprecated)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30) (deprecated)
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForRepo'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert[]|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotListAlertsForRepoWithHttpInfo($owner, $repo, $state = null, $severity = null, $ecosystem = null, $package = null, $manifest = null, $scope = null, $sort = 'created', $direction = 'desc', $page = 1, $per_page = 30, $before = null, $after = null, $first = 30, $last = null, string $contentType = self::contentTypes['dependabotListAlertsForRepo'][0])
    {
        $request = $this->dependabotListAlertsForRepoRequest($owner, $repo, $state, $severity, $ecosystem, $package, $manifest, $scope, $sort, $direction, $page, $per_page, $before, $after, $first, $last, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotListAlertsForRepoAsync
     *
     * List Dependabot alerts for a repository
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $manifest A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  int $page **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with &#x60;before&#x60; or &#x60;after&#x60; instead. (optional, default to 1) (deprecated)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30) (deprecated)
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotListAlertsForRepoAsync($owner, $repo, $state = null, $severity = null, $ecosystem = null, $package = null, $manifest = null, $scope = null, $sort = 'created', $direction = 'desc', $page = 1, $per_page = 30, $before = null, $after = null, $first = 30, $last = null, string $contentType = self::contentTypes['dependabotListAlertsForRepo'][0])
    {
        return $this->dependabotListAlertsForRepoAsyncWithHttpInfo($owner, $repo, $state, $severity, $ecosystem, $package, $manifest, $scope, $sort, $direction, $page, $per_page, $before, $after, $first, $last, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotListAlertsForRepoAsyncWithHttpInfo
     *
     * List Dependabot alerts for a repository
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $manifest A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  int $page **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with &#x60;before&#x60; or &#x60;after&#x60; instead. (optional, default to 1) (deprecated)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30) (deprecated)
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotListAlertsForRepoAsyncWithHttpInfo($owner, $repo, $state = null, $severity = null, $ecosystem = null, $package = null, $manifest = null, $scope = null, $sort = 'created', $direction = 'desc', $page = 1, $per_page = 30, $before = null, $after = null, $first = 30, $last = null, string $contentType = self::contentTypes['dependabotListAlertsForRepo'][0])
    {
        $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert[]';
        $request = $this->dependabotListAlertsForRepoRequest($owner, $repo, $state, $severity, $ecosystem, $package, $manifest, $scope, $sort, $direction, $page, $per_page, $before, $after, $first, $last, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotListAlertsForRepo'
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  string $state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
     * @param  string $severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
     * @param  string $ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
     * @param  string $package A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
     * @param  string $manifest A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. (optional)
     * @param  string $scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
     * @param  string $sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to 'created')
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  int $page **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with &#x60;before&#x60; or &#x60;after&#x60; instead. (optional, default to 1) (deprecated)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30) (deprecated)
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  int $first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
     * @param  int $last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListAlertsForRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotListAlertsForRepoRequest($owner, $repo, $state = null, $severity = null, $ecosystem = null, $package = null, $manifest = null, $scope = null, $sort = 'created', $direction = 'desc', $page = 1, $per_page = 30, $before = null, $after = null, $first = 30, $last = null, string $contentType = self::contentTypes['dependabotListAlertsForRepo'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling dependabotListAlertsForRepo'
            );
        }

        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling dependabotListAlertsForRepo'
            );
        }













        if ($first !== null && $first > 100) {
            throw new \InvalidArgumentException('invalid value for "$first" when calling DependabotApi.dependabotListAlertsForRepo, must be smaller than or equal to 100.');
        }
        if ($first !== null && $first < 1) {
            throw new \InvalidArgumentException('invalid value for "$first" when calling DependabotApi.dependabotListAlertsForRepo, must be bigger than or equal to 1.');
        }
        
        if ($last !== null && $last > 100) {
            throw new \InvalidArgumentException('invalid value for "$last" when calling DependabotApi.dependabotListAlertsForRepo, must be smaller than or equal to 100.');
        }
        if ($last !== null && $last < 1) {
            throw new \InvalidArgumentException('invalid value for "$last" when calling DependabotApi.dependabotListAlertsForRepo, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/repos/{owner}/{repo}/dependabot/alerts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $severity,
            'severity', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ecosystem,
            'ecosystem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $package,
            'package', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $manifest,
            'manifest', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scope,
            'scope', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first,
            'first', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last,
            'last', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/scim+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotListOrgSecrets
     *
     * List organization secrets
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListOrgSecrets'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListOrgSecrets200Response
     */
    public function dependabotListOrgSecrets($org, $per_page = 30, $page = 1, string $contentType = self::contentTypes['dependabotListOrgSecrets'][0])
    {
        list($response) = $this->dependabotListOrgSecretsWithHttpInfo($org, $per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation dependabotListOrgSecretsWithHttpInfo
     *
     * List organization secrets
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListOrgSecrets'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListOrgSecrets200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotListOrgSecretsWithHttpInfo($org, $per_page = 30, $page = 1, string $contentType = self::contentTypes['dependabotListOrgSecrets'][0])
    {
        $request = $this->dependabotListOrgSecretsRequest($org, $per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListOrgSecrets200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListOrgSecrets200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListOrgSecrets200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListOrgSecrets200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListOrgSecrets200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotListOrgSecretsAsync
     *
     * List organization secrets
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListOrgSecrets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotListOrgSecretsAsync($org, $per_page = 30, $page = 1, string $contentType = self::contentTypes['dependabotListOrgSecrets'][0])
    {
        return $this->dependabotListOrgSecretsAsyncWithHttpInfo($org, $per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotListOrgSecretsAsyncWithHttpInfo
     *
     * List organization secrets
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListOrgSecrets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotListOrgSecretsAsyncWithHttpInfo($org, $per_page = 30, $page = 1, string $contentType = self::contentTypes['dependabotListOrgSecrets'][0])
    {
        $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListOrgSecrets200Response';
        $request = $this->dependabotListOrgSecretsRequest($org, $per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotListOrgSecrets'
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListOrgSecrets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotListOrgSecretsRequest($org, $per_page = 30, $page = 1, string $contentType = self::contentTypes['dependabotListOrgSecrets'][0])
    {

        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling dependabotListOrgSecrets'
            );
        }




        $resourcePath = '/orgs/{org}/dependabot/secrets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotListRepoSecrets
     *
     * List repository secrets
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListRepoSecrets'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListRepoSecrets200Response
     */
    public function dependabotListRepoSecrets($owner, $repo, $per_page = 30, $page = 1, string $contentType = self::contentTypes['dependabotListRepoSecrets'][0])
    {
        list($response) = $this->dependabotListRepoSecretsWithHttpInfo($owner, $repo, $per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation dependabotListRepoSecretsWithHttpInfo
     *
     * List repository secrets
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListRepoSecrets'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListRepoSecrets200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotListRepoSecretsWithHttpInfo($owner, $repo, $per_page = 30, $page = 1, string $contentType = self::contentTypes['dependabotListRepoSecrets'][0])
    {
        $request = $this->dependabotListRepoSecretsRequest($owner, $repo, $per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListRepoSecrets200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListRepoSecrets200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListRepoSecrets200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListRepoSecrets200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListRepoSecrets200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotListRepoSecretsAsync
     *
     * List repository secrets
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListRepoSecrets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotListRepoSecretsAsync($owner, $repo, $per_page = 30, $page = 1, string $contentType = self::contentTypes['dependabotListRepoSecrets'][0])
    {
        return $this->dependabotListRepoSecretsAsyncWithHttpInfo($owner, $repo, $per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotListRepoSecretsAsyncWithHttpInfo
     *
     * List repository secrets
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListRepoSecrets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotListRepoSecretsAsyncWithHttpInfo($owner, $repo, $per_page = 30, $page = 1, string $contentType = self::contentTypes['dependabotListRepoSecrets'][0])
    {
        $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotListRepoSecrets200Response';
        $request = $this->dependabotListRepoSecretsRequest($owner, $repo, $per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotListRepoSecrets'
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListRepoSecrets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotListRepoSecretsRequest($owner, $repo, $per_page = 30, $page = 1, string $contentType = self::contentTypes['dependabotListRepoSecrets'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling dependabotListRepoSecrets'
            );
        }

        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling dependabotListRepoSecrets'
            );
        }




        $resourcePath = '/repos/{owner}/{repo}/dependabot/secrets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotListSelectedReposForOrgSecret
     *
     * List selected repositories for an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListSelectedReposForOrgSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ActionsListSelectedReposForOrgSecret200Response
     */
    public function dependabotListSelectedReposForOrgSecret($org, $secret_name, $page = 1, $per_page = 30, string $contentType = self::contentTypes['dependabotListSelectedReposForOrgSecret'][0])
    {
        list($response) = $this->dependabotListSelectedReposForOrgSecretWithHttpInfo($org, $secret_name, $page, $per_page, $contentType);
        return $response;
    }

    /**
     * Operation dependabotListSelectedReposForOrgSecretWithHttpInfo
     *
     * List selected repositories for an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListSelectedReposForOrgSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ActionsListSelectedReposForOrgSecret200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotListSelectedReposForOrgSecretWithHttpInfo($org, $secret_name, $page = 1, $per_page = 30, string $contentType = self::contentTypes['dependabotListSelectedReposForOrgSecret'][0])
    {
        $request = $this->dependabotListSelectedReposForOrgSecretRequest($org, $secret_name, $page, $per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ActionsListSelectedReposForOrgSecret200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ActionsListSelectedReposForOrgSecret200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ActionsListSelectedReposForOrgSecret200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ActionsListSelectedReposForOrgSecret200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ActionsListSelectedReposForOrgSecret200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotListSelectedReposForOrgSecretAsync
     *
     * List selected repositories for an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListSelectedReposForOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotListSelectedReposForOrgSecretAsync($org, $secret_name, $page = 1, $per_page = 30, string $contentType = self::contentTypes['dependabotListSelectedReposForOrgSecret'][0])
    {
        return $this->dependabotListSelectedReposForOrgSecretAsyncWithHttpInfo($org, $secret_name, $page, $per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotListSelectedReposForOrgSecretAsyncWithHttpInfo
     *
     * List selected repositories for an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListSelectedReposForOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotListSelectedReposForOrgSecretAsyncWithHttpInfo($org, $secret_name, $page = 1, $per_page = 30, string $contentType = self::contentTypes['dependabotListSelectedReposForOrgSecret'][0])
    {
        $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ActionsListSelectedReposForOrgSecret200Response';
        $request = $this->dependabotListSelectedReposForOrgSecretRequest($org, $secret_name, $page, $per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotListSelectedReposForOrgSecret'
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotListSelectedReposForOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotListSelectedReposForOrgSecretRequest($org, $secret_name, $page = 1, $per_page = 30, string $contentType = self::contentTypes['dependabotListSelectedReposForOrgSecret'][0])
    {

        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling dependabotListSelectedReposForOrgSecret'
            );
        }

        // verify the required parameter 'secret_name' is set
        if ($secret_name === null || (is_array($secret_name) && count($secret_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secret_name when calling dependabotListSelectedReposForOrgSecret'
            );
        }




        $resourcePath = '/orgs/{org}/dependabot/secrets/{secret_name}/repositories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }
        // path params
        if ($secret_name !== null) {
            $resourcePath = str_replace(
                '{' . 'secret_name' . '}',
                ObjectSerializer::toPathValue($secret_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotRemoveSelectedRepoFromOrgSecret
     *
     * Remove selected repository from an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $repository_id repository_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotRemoveSelectedRepoFromOrgSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dependabotRemoveSelectedRepoFromOrgSecret($org, $secret_name, $repository_id, string $contentType = self::contentTypes['dependabotRemoveSelectedRepoFromOrgSecret'][0])
    {
        $this->dependabotRemoveSelectedRepoFromOrgSecretWithHttpInfo($org, $secret_name, $repository_id, $contentType);
    }

    /**
     * Operation dependabotRemoveSelectedRepoFromOrgSecretWithHttpInfo
     *
     * Remove selected repository from an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $repository_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotRemoveSelectedRepoFromOrgSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotRemoveSelectedRepoFromOrgSecretWithHttpInfo($org, $secret_name, $repository_id, string $contentType = self::contentTypes['dependabotRemoveSelectedRepoFromOrgSecret'][0])
    {
        $request = $this->dependabotRemoveSelectedRepoFromOrgSecretRequest($org, $secret_name, $repository_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotRemoveSelectedRepoFromOrgSecretAsync
     *
     * Remove selected repository from an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $repository_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotRemoveSelectedRepoFromOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotRemoveSelectedRepoFromOrgSecretAsync($org, $secret_name, $repository_id, string $contentType = self::contentTypes['dependabotRemoveSelectedRepoFromOrgSecret'][0])
    {
        return $this->dependabotRemoveSelectedRepoFromOrgSecretAsyncWithHttpInfo($org, $secret_name, $repository_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotRemoveSelectedRepoFromOrgSecretAsyncWithHttpInfo
     *
     * Remove selected repository from an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $repository_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotRemoveSelectedRepoFromOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotRemoveSelectedRepoFromOrgSecretAsyncWithHttpInfo($org, $secret_name, $repository_id, string $contentType = self::contentTypes['dependabotRemoveSelectedRepoFromOrgSecret'][0])
    {
        $returnType = '';
        $request = $this->dependabotRemoveSelectedRepoFromOrgSecretRequest($org, $secret_name, $repository_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotRemoveSelectedRepoFromOrgSecret'
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  int $repository_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotRemoveSelectedRepoFromOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotRemoveSelectedRepoFromOrgSecretRequest($org, $secret_name, $repository_id, string $contentType = self::contentTypes['dependabotRemoveSelectedRepoFromOrgSecret'][0])
    {

        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling dependabotRemoveSelectedRepoFromOrgSecret'
            );
        }

        // verify the required parameter 'secret_name' is set
        if ($secret_name === null || (is_array($secret_name) && count($secret_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secret_name when calling dependabotRemoveSelectedRepoFromOrgSecret'
            );
        }

        // verify the required parameter 'repository_id' is set
        if ($repository_id === null || (is_array($repository_id) && count($repository_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repository_id when calling dependabotRemoveSelectedRepoFromOrgSecret'
            );
        }


        $resourcePath = '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }
        // path params
        if ($secret_name !== null) {
            $resourcePath = str_replace(
                '{' . 'secret_name' . '}',
                ObjectSerializer::toPathValue($secret_name),
                $resourcePath
            );
        }
        // path params
        if ($repository_id !== null) {
            $resourcePath = str_replace(
                '{' . 'repository_id' . '}',
                ObjectSerializer::toPathValue($repository_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotSetSelectedReposForOrgSecret
     *
     * Set selected repositories for an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotSetSelectedReposForOrgSecretRequest $dependabot_set_selected_repos_for_org_secret_request dependabot_set_selected_repos_for_org_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotSetSelectedReposForOrgSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dependabotSetSelectedReposForOrgSecret($org, $secret_name, $dependabot_set_selected_repos_for_org_secret_request, string $contentType = self::contentTypes['dependabotSetSelectedReposForOrgSecret'][0])
    {
        $this->dependabotSetSelectedReposForOrgSecretWithHttpInfo($org, $secret_name, $dependabot_set_selected_repos_for_org_secret_request, $contentType);
    }

    /**
     * Operation dependabotSetSelectedReposForOrgSecretWithHttpInfo
     *
     * Set selected repositories for an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotSetSelectedReposForOrgSecretRequest $dependabot_set_selected_repos_for_org_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotSetSelectedReposForOrgSecret'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotSetSelectedReposForOrgSecretWithHttpInfo($org, $secret_name, $dependabot_set_selected_repos_for_org_secret_request, string $contentType = self::contentTypes['dependabotSetSelectedReposForOrgSecret'][0])
    {
        $request = $this->dependabotSetSelectedReposForOrgSecretRequest($org, $secret_name, $dependabot_set_selected_repos_for_org_secret_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotSetSelectedReposForOrgSecretAsync
     *
     * Set selected repositories for an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotSetSelectedReposForOrgSecretRequest $dependabot_set_selected_repos_for_org_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotSetSelectedReposForOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotSetSelectedReposForOrgSecretAsync($org, $secret_name, $dependabot_set_selected_repos_for_org_secret_request, string $contentType = self::contentTypes['dependabotSetSelectedReposForOrgSecret'][0])
    {
        return $this->dependabotSetSelectedReposForOrgSecretAsyncWithHttpInfo($org, $secret_name, $dependabot_set_selected_repos_for_org_secret_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotSetSelectedReposForOrgSecretAsyncWithHttpInfo
     *
     * Set selected repositories for an organization secret
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotSetSelectedReposForOrgSecretRequest $dependabot_set_selected_repos_for_org_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotSetSelectedReposForOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotSetSelectedReposForOrgSecretAsyncWithHttpInfo($org, $secret_name, $dependabot_set_selected_repos_for_org_secret_request, string $contentType = self::contentTypes['dependabotSetSelectedReposForOrgSecret'][0])
    {
        $returnType = '';
        $request = $this->dependabotSetSelectedReposForOrgSecretRequest($org, $secret_name, $dependabot_set_selected_repos_for_org_secret_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotSetSelectedReposForOrgSecret'
     *
     * @param  string $org The organization name. The name is not case sensitive. (required)
     * @param  string $secret_name The name of the secret. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotSetSelectedReposForOrgSecretRequest $dependabot_set_selected_repos_for_org_secret_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotSetSelectedReposForOrgSecret'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotSetSelectedReposForOrgSecretRequest($org, $secret_name, $dependabot_set_selected_repos_for_org_secret_request, string $contentType = self::contentTypes['dependabotSetSelectedReposForOrgSecret'][0])
    {

        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling dependabotSetSelectedReposForOrgSecret'
            );
        }

        // verify the required parameter 'secret_name' is set
        if ($secret_name === null || (is_array($secret_name) && count($secret_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secret_name when calling dependabotSetSelectedReposForOrgSecret'
            );
        }

        // verify the required parameter 'dependabot_set_selected_repos_for_org_secret_request' is set
        if ($dependabot_set_selected_repos_for_org_secret_request === null || (is_array($dependabot_set_selected_repos_for_org_secret_request) && count($dependabot_set_selected_repos_for_org_secret_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dependabot_set_selected_repos_for_org_secret_request when calling dependabotSetSelectedReposForOrgSecret'
            );
        }


        $resourcePath = '/orgs/{org}/dependabot/secrets/{secret_name}/repositories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }
        // path params
        if ($secret_name !== null) {
            $resourcePath = str_replace(
                '{' . 'secret_name' . '}',
                ObjectSerializer::toPathValue($secret_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dependabot_set_selected_repos_for_org_secret_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dependabot_set_selected_repos_for_org_secret_request));
            } else {
                $httpBody = $dependabot_set_selected_repos_for_org_secret_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dependabotUpdateAlert
     *
     * Update a Dependabot alert
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $alert_number The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotUpdateAlertRequest $dependabot_update_alert_request dependabot_update_alert_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotUpdateAlert'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple
     */
    public function dependabotUpdateAlert($owner, $repo, $alert_number, $dependabot_update_alert_request, string $contentType = self::contentTypes['dependabotUpdateAlert'][0])
    {
        list($response) = $this->dependabotUpdateAlertWithHttpInfo($owner, $repo, $alert_number, $dependabot_update_alert_request, $contentType);
        return $response;
    }

    /**
     * Operation dependabotUpdateAlertWithHttpInfo
     *
     * Update a Dependabot alert
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $alert_number The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotUpdateAlertRequest $dependabot_update_alert_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotUpdateAlert'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple, HTTP status code, HTTP response headers (array of strings)
     */
    public function dependabotUpdateAlertWithHttpInfo($owner, $repo, $alert_number, $dependabot_update_alert_request, string $contentType = self::contentTypes['dependabotUpdateAlert'][0])
    {
        $request = $this->dependabotUpdateAlertRequest($owner, $repo, $alert_number, $dependabot_update_alert_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dependabotUpdateAlertAsync
     *
     * Update a Dependabot alert
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $alert_number The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotUpdateAlertRequest $dependabot_update_alert_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotUpdateAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotUpdateAlertAsync($owner, $repo, $alert_number, $dependabot_update_alert_request, string $contentType = self::contentTypes['dependabotUpdateAlert'][0])
    {
        return $this->dependabotUpdateAlertAsyncWithHttpInfo($owner, $repo, $alert_number, $dependabot_update_alert_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dependabotUpdateAlertAsyncWithHttpInfo
     *
     * Update a Dependabot alert
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $alert_number The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotUpdateAlertRequest $dependabot_update_alert_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotUpdateAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dependabotUpdateAlertAsyncWithHttpInfo($owner, $repo, $alert_number, $dependabot_update_alert_request, string $contentType = self::contentTypes['dependabotUpdateAlert'][0])
    {
        $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotAlert';
        $request = $this->dependabotUpdateAlertRequest($owner, $repo, $alert_number, $dependabot_update_alert_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dependabotUpdateAlert'
     *
     * @param  string $owner The account owner of the repository. The name is not case sensitive. (required)
     * @param  string $repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. (required)
     * @param  int $alert_number The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation. (required)
     * @param  \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependabotUpdateAlertRequest $dependabot_update_alert_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dependabotUpdateAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dependabotUpdateAlertRequest($owner, $repo, $alert_number, $dependabot_update_alert_request, string $contentType = self::contentTypes['dependabotUpdateAlert'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling dependabotUpdateAlert'
            );
        }

        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling dependabotUpdateAlert'
            );
        }

        // verify the required parameter 'alert_number' is set
        if ($alert_number === null || (is_array($alert_number) && count($alert_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alert_number when calling dependabotUpdateAlert'
            );
        }

        // verify the required parameter 'dependabot_update_alert_request' is set
        if ($dependabot_update_alert_request === null || (is_array($dependabot_update_alert_request) && count($dependabot_update_alert_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dependabot_update_alert_request when calling dependabotUpdateAlert'
            );
        }


        $resourcePath = '/repos/{owner}/{repo}/dependabot/alerts/{alert_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($alert_number !== null) {
            $resourcePath = str_replace(
                '{' . 'alert_number' . '}',
                ObjectSerializer::toPathValue($alert_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/scim+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dependabot_update_alert_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dependabot_update_alert_request));
            } else {
                $httpBody = $dependabot_update_alert_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
