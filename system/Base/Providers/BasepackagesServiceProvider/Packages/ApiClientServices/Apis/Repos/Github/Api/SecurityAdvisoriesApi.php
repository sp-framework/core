<?php
/**
 * SecurityAdvisoriesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException;
use System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Configuration;
use System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\HeaderSelector;
use System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * SecurityAdvisoriesApi Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SecurityAdvisoriesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'securityAdvisoriesGetGlobalAdvisory' => [
            'application/json',
        ],
        'securityAdvisoriesListGlobalAdvisories' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation securityAdvisoriesGetGlobalAdvisory
     *
     * Get a global security advisory
     *
     * @param  string $ghsa_id The GHSA (GitHub Security Advisory) identifier of the advisory. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityAdvisoriesGetGlobalAdvisory'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError
     */
    public function securityAdvisoriesGetGlobalAdvisory($ghsa_id, string $contentType = self::contentTypes['securityAdvisoriesGetGlobalAdvisory'][0])
    {
        list($response) = $this->securityAdvisoriesGetGlobalAdvisoryWithHttpInfo($ghsa_id, $contentType);
        return $response;
    }

    /**
     * Operation securityAdvisoriesGetGlobalAdvisoryWithHttpInfo
     *
     * Get a global security advisory
     *
     * @param  string $ghsa_id The GHSA (GitHub Security Advisory) identifier of the advisory. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityAdvisoriesGetGlobalAdvisory'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError, HTTP status code, HTTP response headers (array of strings)
     */
    public function securityAdvisoriesGetGlobalAdvisoryWithHttpInfo($ghsa_id, string $contentType = self::contentTypes['securityAdvisoriesGetGlobalAdvisory'][0])
    {
        $request = $this->securityAdvisoriesGetGlobalAdvisoryRequest($ghsa_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation securityAdvisoriesGetGlobalAdvisoryAsync
     *
     * Get a global security advisory
     *
     * @param  string $ghsa_id The GHSA (GitHub Security Advisory) identifier of the advisory. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityAdvisoriesGetGlobalAdvisory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securityAdvisoriesGetGlobalAdvisoryAsync($ghsa_id, string $contentType = self::contentTypes['securityAdvisoriesGetGlobalAdvisory'][0])
    {
        return $this->securityAdvisoriesGetGlobalAdvisoryAsyncWithHttpInfo($ghsa_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation securityAdvisoriesGetGlobalAdvisoryAsyncWithHttpInfo
     *
     * Get a global security advisory
     *
     * @param  string $ghsa_id The GHSA (GitHub Security Advisory) identifier of the advisory. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityAdvisoriesGetGlobalAdvisory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securityAdvisoriesGetGlobalAdvisoryAsyncWithHttpInfo($ghsa_id, string $contentType = self::contentTypes['securityAdvisoriesGetGlobalAdvisory'][0])
    {
        $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory';
        $request = $this->securityAdvisoriesGetGlobalAdvisoryRequest($ghsa_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'securityAdvisoriesGetGlobalAdvisory'
     *
     * @param  string $ghsa_id The GHSA (GitHub Security Advisory) identifier of the advisory. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityAdvisoriesGetGlobalAdvisory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function securityAdvisoriesGetGlobalAdvisoryRequest($ghsa_id, string $contentType = self::contentTypes['securityAdvisoriesGetGlobalAdvisory'][0])
    {

        // verify the required parameter 'ghsa_id' is set
        if ($ghsa_id === null || (is_array($ghsa_id) && count($ghsa_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ghsa_id when calling securityAdvisoriesGetGlobalAdvisory'
            );
        }


        $resourcePath = '/advisories/{ghsa_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ghsa_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ghsa_id' . '}',
                ObjectSerializer::toPathValue($ghsa_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation securityAdvisoriesListGlobalAdvisories
     *
     * List global security advisories
     *
     * @param  string $ghsa_id If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned. (optional)
     * @param  string $type If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware. (optional, default to 'reviewed')
     * @param  string $cve_id If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned. (optional)
     * @param  SecurityAdvisoryEcosystems $ecosystem If specified, only advisories for these ecosystems will be returned. (optional)
     * @param  string $severity If specified, only advisories with these severities will be returned. (optional)
     * @param  SecurityAdvisoriesListGlobalAdvisoriesCwesParameter $cwes If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.  Example: &#x60;cwes&#x3D;79,284,22&#x60; or &#x60;cwes[]&#x3D;79&amp;cwes[]&#x3D;284&amp;cwes[]&#x3D;22&#x60; (optional)
     * @param  bool $is_withdrawn Whether to only return advisories that have been withdrawn. (optional)
     * @param  SecurityAdvisoriesListGlobalAdvisoriesAffectsParameter $affects If specified, only return advisories that affect any of &#x60;package&#x60; or &#x60;package@version&#x60;. A maximum of 1000 packages can be specified. If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.  Example: &#x60;affects&#x3D;package1,package2@1.0.0,package3@^2.0.0&#x60; or &#x60;affects[]&#x3D;package1&amp;affects[]&#x3D;package2@1.0.0&#x60; (optional)
     * @param  string $published If specified, only return advisories that were published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $updated If specified, only return advisories that were updated on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $modified If specified, only show advisories that were updated or published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.12/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.12/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $sort The property to sort the results by. (optional, default to 'published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityAdvisoriesListGlobalAdvisories'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory[]|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple
     */
    public function securityAdvisoriesListGlobalAdvisories($ghsa_id = null, $type = 'reviewed', $cve_id = null, $ecosystem = null, $severity = null, $cwes = null, $is_withdrawn = null, $affects = null, $published = null, $updated = null, $modified = null, $before = null, $after = null, $direction = 'desc', $per_page = 30, $sort = 'published', string $contentType = self::contentTypes['securityAdvisoriesListGlobalAdvisories'][0])
    {
        list($response) = $this->securityAdvisoriesListGlobalAdvisoriesWithHttpInfo($ghsa_id, $type, $cve_id, $ecosystem, $severity, $cwes, $is_withdrawn, $affects, $published, $updated, $modified, $before, $after, $direction, $per_page, $sort, $contentType);
        return $response;
    }

    /**
     * Operation securityAdvisoriesListGlobalAdvisoriesWithHttpInfo
     *
     * List global security advisories
     *
     * @param  string $ghsa_id If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned. (optional)
     * @param  string $type If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware. (optional, default to 'reviewed')
     * @param  string $cve_id If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned. (optional)
     * @param  SecurityAdvisoryEcosystems $ecosystem If specified, only advisories for these ecosystems will be returned. (optional)
     * @param  string $severity If specified, only advisories with these severities will be returned. (optional)
     * @param  SecurityAdvisoriesListGlobalAdvisoriesCwesParameter $cwes If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.  Example: &#x60;cwes&#x3D;79,284,22&#x60; or &#x60;cwes[]&#x3D;79&amp;cwes[]&#x3D;284&amp;cwes[]&#x3D;22&#x60; (optional)
     * @param  bool $is_withdrawn Whether to only return advisories that have been withdrawn. (optional)
     * @param  SecurityAdvisoriesListGlobalAdvisoriesAffectsParameter $affects If specified, only return advisories that affect any of &#x60;package&#x60; or &#x60;package@version&#x60;. A maximum of 1000 packages can be specified. If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.  Example: &#x60;affects&#x3D;package1,package2@1.0.0,package3@^2.0.0&#x60; or &#x60;affects[]&#x3D;package1&amp;affects[]&#x3D;package2@1.0.0&#x60; (optional)
     * @param  string $published If specified, only return advisories that were published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $updated If specified, only return advisories that were updated on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $modified If specified, only show advisories that were updated or published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.12/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.12/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $sort The property to sort the results by. (optional, default to 'published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityAdvisoriesListGlobalAdvisories'] to see the possible values for this operation
     *
     * @throws \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory[]|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError|\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple, HTTP status code, HTTP response headers (array of strings)
     */
    public function securityAdvisoriesListGlobalAdvisoriesWithHttpInfo($ghsa_id = null, $type = 'reviewed', $cve_id = null, $ecosystem = null, $severity = null, $cwes = null, $is_withdrawn = null, $affects = null, $published = null, $updated = null, $modified = null, $before = null, $after = null, $direction = 'desc', $per_page = 30, $sort = 'published', string $contentType = self::contentTypes['securityAdvisoriesListGlobalAdvisories'][0])
    {
        $request = $this->securityAdvisoriesListGlobalAdvisoriesRequest($ghsa_id, $type, $cve_id, $ecosystem, $severity, $cwes, $is_withdrawn, $affects, $published, $updated, $modified, $before, $after, $direction, $per_page, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BasicError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ValidationErrorSimple',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation securityAdvisoriesListGlobalAdvisoriesAsync
     *
     * List global security advisories
     *
     * @param  string $ghsa_id If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned. (optional)
     * @param  string $type If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware. (optional, default to 'reviewed')
     * @param  string $cve_id If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned. (optional)
     * @param  SecurityAdvisoryEcosystems $ecosystem If specified, only advisories for these ecosystems will be returned. (optional)
     * @param  string $severity If specified, only advisories with these severities will be returned. (optional)
     * @param  SecurityAdvisoriesListGlobalAdvisoriesCwesParameter $cwes If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.  Example: &#x60;cwes&#x3D;79,284,22&#x60; or &#x60;cwes[]&#x3D;79&amp;cwes[]&#x3D;284&amp;cwes[]&#x3D;22&#x60; (optional)
     * @param  bool $is_withdrawn Whether to only return advisories that have been withdrawn. (optional)
     * @param  SecurityAdvisoriesListGlobalAdvisoriesAffectsParameter $affects If specified, only return advisories that affect any of &#x60;package&#x60; or &#x60;package@version&#x60;. A maximum of 1000 packages can be specified. If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.  Example: &#x60;affects&#x3D;package1,package2@1.0.0,package3@^2.0.0&#x60; or &#x60;affects[]&#x3D;package1&amp;affects[]&#x3D;package2@1.0.0&#x60; (optional)
     * @param  string $published If specified, only return advisories that were published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $updated If specified, only return advisories that were updated on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $modified If specified, only show advisories that were updated or published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.12/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.12/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $sort The property to sort the results by. (optional, default to 'published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityAdvisoriesListGlobalAdvisories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securityAdvisoriesListGlobalAdvisoriesAsync($ghsa_id = null, $type = 'reviewed', $cve_id = null, $ecosystem = null, $severity = null, $cwes = null, $is_withdrawn = null, $affects = null, $published = null, $updated = null, $modified = null, $before = null, $after = null, $direction = 'desc', $per_page = 30, $sort = 'published', string $contentType = self::contentTypes['securityAdvisoriesListGlobalAdvisories'][0])
    {
        return $this->securityAdvisoriesListGlobalAdvisoriesAsyncWithHttpInfo($ghsa_id, $type, $cve_id, $ecosystem, $severity, $cwes, $is_withdrawn, $affects, $published, $updated, $modified, $before, $after, $direction, $per_page, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation securityAdvisoriesListGlobalAdvisoriesAsyncWithHttpInfo
     *
     * List global security advisories
     *
     * @param  string $ghsa_id If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned. (optional)
     * @param  string $type If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware. (optional, default to 'reviewed')
     * @param  string $cve_id If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned. (optional)
     * @param  SecurityAdvisoryEcosystems $ecosystem If specified, only advisories for these ecosystems will be returned. (optional)
     * @param  string $severity If specified, only advisories with these severities will be returned. (optional)
     * @param  SecurityAdvisoriesListGlobalAdvisoriesCwesParameter $cwes If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.  Example: &#x60;cwes&#x3D;79,284,22&#x60; or &#x60;cwes[]&#x3D;79&amp;cwes[]&#x3D;284&amp;cwes[]&#x3D;22&#x60; (optional)
     * @param  bool $is_withdrawn Whether to only return advisories that have been withdrawn. (optional)
     * @param  SecurityAdvisoriesListGlobalAdvisoriesAffectsParameter $affects If specified, only return advisories that affect any of &#x60;package&#x60; or &#x60;package@version&#x60;. A maximum of 1000 packages can be specified. If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.  Example: &#x60;affects&#x3D;package1,package2@1.0.0,package3@^2.0.0&#x60; or &#x60;affects[]&#x3D;package1&amp;affects[]&#x3D;package2@1.0.0&#x60; (optional)
     * @param  string $published If specified, only return advisories that were published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $updated If specified, only return advisories that were updated on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $modified If specified, only show advisories that were updated or published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.12/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.12/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $sort The property to sort the results by. (optional, default to 'published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityAdvisoriesListGlobalAdvisories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securityAdvisoriesListGlobalAdvisoriesAsyncWithHttpInfo($ghsa_id = null, $type = 'reviewed', $cve_id = null, $ecosystem = null, $severity = null, $cwes = null, $is_withdrawn = null, $affects = null, $published = null, $updated = null, $modified = null, $before = null, $after = null, $direction = 'desc', $per_page = 30, $sort = 'published', string $contentType = self::contentTypes['securityAdvisoriesListGlobalAdvisories'][0])
    {
        $returnType = '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisory[]';
        $request = $this->securityAdvisoriesListGlobalAdvisoriesRequest($ghsa_id, $type, $cve_id, $ecosystem, $severity, $cwes, $is_withdrawn, $affects, $published, $updated, $modified, $before, $after, $direction, $per_page, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'securityAdvisoriesListGlobalAdvisories'
     *
     * @param  string $ghsa_id If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned. (optional)
     * @param  string $type If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware. (optional, default to 'reviewed')
     * @param  string $cve_id If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned. (optional)
     * @param  SecurityAdvisoryEcosystems $ecosystem If specified, only advisories for these ecosystems will be returned. (optional)
     * @param  string $severity If specified, only advisories with these severities will be returned. (optional)
     * @param  SecurityAdvisoriesListGlobalAdvisoriesCwesParameter $cwes If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.  Example: &#x60;cwes&#x3D;79,284,22&#x60; or &#x60;cwes[]&#x3D;79&amp;cwes[]&#x3D;284&amp;cwes[]&#x3D;22&#x60; (optional)
     * @param  bool $is_withdrawn Whether to only return advisories that have been withdrawn. (optional)
     * @param  SecurityAdvisoriesListGlobalAdvisoriesAffectsParameter $affects If specified, only return advisories that affect any of &#x60;package&#x60; or &#x60;package@version&#x60;. A maximum of 1000 packages can be specified. If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.  Example: &#x60;affects&#x3D;package1,package2@1.0.0,package3@^2.0.0&#x60; or &#x60;affects[]&#x3D;package1&amp;affects[]&#x3D;package2@1.0.0&#x60; (optional)
     * @param  string $published If specified, only return advisories that were published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $updated If specified, only return advisories that were updated on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $modified If specified, only show advisories that were updated or published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.12/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param  string $before A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.12/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $after A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.12/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
     * @param  string $direction The direction to sort the results by. (optional, default to 'desc')
     * @param  int $per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.12/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
     * @param  string $sort The property to sort the results by. (optional, default to 'published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityAdvisoriesListGlobalAdvisories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function securityAdvisoriesListGlobalAdvisoriesRequest($ghsa_id = null, $type = 'reviewed', $cve_id = null, $ecosystem = null, $severity = null, $cwes = null, $is_withdrawn = null, $affects = null, $published = null, $updated = null, $modified = null, $before = null, $after = null, $direction = 'desc', $per_page = 30, $sort = 'published', string $contentType = self::contentTypes['securityAdvisoriesListGlobalAdvisories'][0])
    {















        if ($per_page !== null && $per_page > 100) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling SecurityAdvisoriesApi.securityAdvisoriesListGlobalAdvisories, must be smaller than or equal to 100.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling SecurityAdvisoriesApi.securityAdvisoriesListGlobalAdvisories, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/advisories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ghsa_id,
            'ghsa_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cve_id,
            'cve_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ecosystem,
            'ecosystem', // param base name
            'SecurityAdvisoryEcosystems', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $severity,
            'severity', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cwes,
            'cwes', // param base name
            'OneOfStringArray', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_withdrawn,
            'is_withdrawn', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $affects,
            'affects', // param base name
            'OneOfStringArray', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $published,
            'published', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updated,
            'updated', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified,
            'modified', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
