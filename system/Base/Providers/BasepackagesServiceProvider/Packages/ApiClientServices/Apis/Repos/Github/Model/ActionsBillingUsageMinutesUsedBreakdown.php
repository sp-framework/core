<?php
/**
 * ActionsBillingUsageMinutesUsedBreakdown
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * ActionsBillingUsageMinutesUsedBreakdown Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ActionsBillingUsageMinutesUsedBreakdown implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'actions_billing_usage_minutes_used_breakdown';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ubuntu' => 'int',
        'macos' => 'int',
        'windows' => 'int',
        'ubuntu_4_core' => 'int',
        'ubuntu_8_core' => 'int',
        'ubuntu_16_core' => 'int',
        'ubuntu_32_core' => 'int',
        'ubuntu_64_core' => 'int',
        'windows_4_core' => 'int',
        'windows_8_core' => 'int',
        'windows_16_core' => 'int',
        'windows_32_core' => 'int',
        'windows_64_core' => 'int',
        'macos_12_core' => 'int',
        'total' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ubuntu' => null,
        'macos' => null,
        'windows' => null,
        'ubuntu_4_core' => null,
        'ubuntu_8_core' => null,
        'ubuntu_16_core' => null,
        'ubuntu_32_core' => null,
        'ubuntu_64_core' => null,
        'windows_4_core' => null,
        'windows_8_core' => null,
        'windows_16_core' => null,
        'windows_32_core' => null,
        'windows_64_core' => null,
        'macos_12_core' => null,
        'total' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ubuntu' => false,
        'macos' => false,
        'windows' => false,
        'ubuntu_4_core' => false,
        'ubuntu_8_core' => false,
        'ubuntu_16_core' => false,
        'ubuntu_32_core' => false,
        'ubuntu_64_core' => false,
        'windows_4_core' => false,
        'windows_8_core' => false,
        'windows_16_core' => false,
        'windows_32_core' => false,
        'windows_64_core' => false,
        'macos_12_core' => false,
        'total' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ubuntu' => 'UBUNTU',
        'macos' => 'MACOS',
        'windows' => 'WINDOWS',
        'ubuntu_4_core' => 'ubuntu_4_core',
        'ubuntu_8_core' => 'ubuntu_8_core',
        'ubuntu_16_core' => 'ubuntu_16_core',
        'ubuntu_32_core' => 'ubuntu_32_core',
        'ubuntu_64_core' => 'ubuntu_64_core',
        'windows_4_core' => 'windows_4_core',
        'windows_8_core' => 'windows_8_core',
        'windows_16_core' => 'windows_16_core',
        'windows_32_core' => 'windows_32_core',
        'windows_64_core' => 'windows_64_core',
        'macos_12_core' => 'macos_12_core',
        'total' => 'total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ubuntu' => 'setUbuntu',
        'macos' => 'setMacos',
        'windows' => 'setWindows',
        'ubuntu_4_core' => 'setUbuntu4Core',
        'ubuntu_8_core' => 'setUbuntu8Core',
        'ubuntu_16_core' => 'setUbuntu16Core',
        'ubuntu_32_core' => 'setUbuntu32Core',
        'ubuntu_64_core' => 'setUbuntu64Core',
        'windows_4_core' => 'setWindows4Core',
        'windows_8_core' => 'setWindows8Core',
        'windows_16_core' => 'setWindows16Core',
        'windows_32_core' => 'setWindows32Core',
        'windows_64_core' => 'setWindows64Core',
        'macos_12_core' => 'setMacos12Core',
        'total' => 'setTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ubuntu' => 'getUbuntu',
        'macos' => 'getMacos',
        'windows' => 'getWindows',
        'ubuntu_4_core' => 'getUbuntu4Core',
        'ubuntu_8_core' => 'getUbuntu8Core',
        'ubuntu_16_core' => 'getUbuntu16Core',
        'ubuntu_32_core' => 'getUbuntu32Core',
        'ubuntu_64_core' => 'getUbuntu64Core',
        'windows_4_core' => 'getWindows4Core',
        'windows_8_core' => 'getWindows8Core',
        'windows_16_core' => 'getWindows16Core',
        'windows_32_core' => 'getWindows32Core',
        'windows_64_core' => 'getWindows64Core',
        'macos_12_core' => 'getMacos12Core',
        'total' => 'getTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ubuntu', $data ?? [], null);
        $this->setIfExists('macos', $data ?? [], null);
        $this->setIfExists('windows', $data ?? [], null);
        $this->setIfExists('ubuntu_4_core', $data ?? [], null);
        $this->setIfExists('ubuntu_8_core', $data ?? [], null);
        $this->setIfExists('ubuntu_16_core', $data ?? [], null);
        $this->setIfExists('ubuntu_32_core', $data ?? [], null);
        $this->setIfExists('ubuntu_64_core', $data ?? [], null);
        $this->setIfExists('windows_4_core', $data ?? [], null);
        $this->setIfExists('windows_8_core', $data ?? [], null);
        $this->setIfExists('windows_16_core', $data ?? [], null);
        $this->setIfExists('windows_32_core', $data ?? [], null);
        $this->setIfExists('windows_64_core', $data ?? [], null);
        $this->setIfExists('macos_12_core', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ubuntu
     *
     * @return int|null
     */
    public function getUbuntu()
    {
        return $this->container['ubuntu'];
    }

    /**
     * Sets ubuntu
     *
     * @param int|null $ubuntu Total minutes used on Ubuntu runner machines.
     *
     * @return self
     */
    public function setUbuntu($ubuntu)
    {
        if (is_null($ubuntu)) {
            throw new \InvalidArgumentException('non-nullable ubuntu cannot be null');
        }
        $this->container['ubuntu'] = $ubuntu;

        return $this;
    }

    /**
     * Gets macos
     *
     * @return int|null
     */
    public function getMacos()
    {
        return $this->container['macos'];
    }

    /**
     * Sets macos
     *
     * @param int|null $macos Total minutes used on macOS runner machines.
     *
     * @return self
     */
    public function setMacos($macos)
    {
        if (is_null($macos)) {
            throw new \InvalidArgumentException('non-nullable macos cannot be null');
        }
        $this->container['macos'] = $macos;

        return $this;
    }

    /**
     * Gets windows
     *
     * @return int|null
     */
    public function getWindows()
    {
        return $this->container['windows'];
    }

    /**
     * Sets windows
     *
     * @param int|null $windows Total minutes used on Windows runner machines.
     *
     * @return self
     */
    public function setWindows($windows)
    {
        if (is_null($windows)) {
            throw new \InvalidArgumentException('non-nullable windows cannot be null');
        }
        $this->container['windows'] = $windows;

        return $this;
    }

    /**
     * Gets ubuntu_4_core
     *
     * @return int|null
     */
    public function getUbuntu4Core()
    {
        return $this->container['ubuntu_4_core'];
    }

    /**
     * Sets ubuntu_4_core
     *
     * @param int|null $ubuntu_4_core Total minutes used on Ubuntu 4 core runner machines.
     *
     * @return self
     */
    public function setUbuntu4Core($ubuntu_4_core)
    {
        if (is_null($ubuntu_4_core)) {
            throw new \InvalidArgumentException('non-nullable ubuntu_4_core cannot be null');
        }
        $this->container['ubuntu_4_core'] = $ubuntu_4_core;

        return $this;
    }

    /**
     * Gets ubuntu_8_core
     *
     * @return int|null
     */
    public function getUbuntu8Core()
    {
        return $this->container['ubuntu_8_core'];
    }

    /**
     * Sets ubuntu_8_core
     *
     * @param int|null $ubuntu_8_core Total minutes used on Ubuntu 8 core runner machines.
     *
     * @return self
     */
    public function setUbuntu8Core($ubuntu_8_core)
    {
        if (is_null($ubuntu_8_core)) {
            throw new \InvalidArgumentException('non-nullable ubuntu_8_core cannot be null');
        }
        $this->container['ubuntu_8_core'] = $ubuntu_8_core;

        return $this;
    }

    /**
     * Gets ubuntu_16_core
     *
     * @return int|null
     */
    public function getUbuntu16Core()
    {
        return $this->container['ubuntu_16_core'];
    }

    /**
     * Sets ubuntu_16_core
     *
     * @param int|null $ubuntu_16_core Total minutes used on Ubuntu 16 core runner machines.
     *
     * @return self
     */
    public function setUbuntu16Core($ubuntu_16_core)
    {
        if (is_null($ubuntu_16_core)) {
            throw new \InvalidArgumentException('non-nullable ubuntu_16_core cannot be null');
        }
        $this->container['ubuntu_16_core'] = $ubuntu_16_core;

        return $this;
    }

    /**
     * Gets ubuntu_32_core
     *
     * @return int|null
     */
    public function getUbuntu32Core()
    {
        return $this->container['ubuntu_32_core'];
    }

    /**
     * Sets ubuntu_32_core
     *
     * @param int|null $ubuntu_32_core Total minutes used on Ubuntu 32 core runner machines.
     *
     * @return self
     */
    public function setUbuntu32Core($ubuntu_32_core)
    {
        if (is_null($ubuntu_32_core)) {
            throw new \InvalidArgumentException('non-nullable ubuntu_32_core cannot be null');
        }
        $this->container['ubuntu_32_core'] = $ubuntu_32_core;

        return $this;
    }

    /**
     * Gets ubuntu_64_core
     *
     * @return int|null
     */
    public function getUbuntu64Core()
    {
        return $this->container['ubuntu_64_core'];
    }

    /**
     * Sets ubuntu_64_core
     *
     * @param int|null $ubuntu_64_core Total minutes used on Ubuntu 64 core runner machines.
     *
     * @return self
     */
    public function setUbuntu64Core($ubuntu_64_core)
    {
        if (is_null($ubuntu_64_core)) {
            throw new \InvalidArgumentException('non-nullable ubuntu_64_core cannot be null');
        }
        $this->container['ubuntu_64_core'] = $ubuntu_64_core;

        return $this;
    }

    /**
     * Gets windows_4_core
     *
     * @return int|null
     */
    public function getWindows4Core()
    {
        return $this->container['windows_4_core'];
    }

    /**
     * Sets windows_4_core
     *
     * @param int|null $windows_4_core Total minutes used on Windows 4 core runner machines.
     *
     * @return self
     */
    public function setWindows4Core($windows_4_core)
    {
        if (is_null($windows_4_core)) {
            throw new \InvalidArgumentException('non-nullable windows_4_core cannot be null');
        }
        $this->container['windows_4_core'] = $windows_4_core;

        return $this;
    }

    /**
     * Gets windows_8_core
     *
     * @return int|null
     */
    public function getWindows8Core()
    {
        return $this->container['windows_8_core'];
    }

    /**
     * Sets windows_8_core
     *
     * @param int|null $windows_8_core Total minutes used on Windows 8 core runner machines.
     *
     * @return self
     */
    public function setWindows8Core($windows_8_core)
    {
        if (is_null($windows_8_core)) {
            throw new \InvalidArgumentException('non-nullable windows_8_core cannot be null');
        }
        $this->container['windows_8_core'] = $windows_8_core;

        return $this;
    }

    /**
     * Gets windows_16_core
     *
     * @return int|null
     */
    public function getWindows16Core()
    {
        return $this->container['windows_16_core'];
    }

    /**
     * Sets windows_16_core
     *
     * @param int|null $windows_16_core Total minutes used on Windows 16 core runner machines.
     *
     * @return self
     */
    public function setWindows16Core($windows_16_core)
    {
        if (is_null($windows_16_core)) {
            throw new \InvalidArgumentException('non-nullable windows_16_core cannot be null');
        }
        $this->container['windows_16_core'] = $windows_16_core;

        return $this;
    }

    /**
     * Gets windows_32_core
     *
     * @return int|null
     */
    public function getWindows32Core()
    {
        return $this->container['windows_32_core'];
    }

    /**
     * Sets windows_32_core
     *
     * @param int|null $windows_32_core Total minutes used on Windows 32 core runner machines.
     *
     * @return self
     */
    public function setWindows32Core($windows_32_core)
    {
        if (is_null($windows_32_core)) {
            throw new \InvalidArgumentException('non-nullable windows_32_core cannot be null');
        }
        $this->container['windows_32_core'] = $windows_32_core;

        return $this;
    }

    /**
     * Gets windows_64_core
     *
     * @return int|null
     */
    public function getWindows64Core()
    {
        return $this->container['windows_64_core'];
    }

    /**
     * Sets windows_64_core
     *
     * @param int|null $windows_64_core Total minutes used on Windows 64 core runner machines.
     *
     * @return self
     */
    public function setWindows64Core($windows_64_core)
    {
        if (is_null($windows_64_core)) {
            throw new \InvalidArgumentException('non-nullable windows_64_core cannot be null');
        }
        $this->container['windows_64_core'] = $windows_64_core;

        return $this;
    }

    /**
     * Gets macos_12_core
     *
     * @return int|null
     */
    public function getMacos12Core()
    {
        return $this->container['macos_12_core'];
    }

    /**
     * Sets macos_12_core
     *
     * @param int|null $macos_12_core Total minutes used on macOS 12 core runner machines.
     *
     * @return self
     */
    public function setMacos12Core($macos_12_core)
    {
        if (is_null($macos_12_core)) {
            throw new \InvalidArgumentException('non-nullable macos_12_core cannot be null');
        }
        $this->container['macos_12_core'] = $macos_12_core;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total Total minutes used on all runner machines.
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


