<?php
/**
 * ApiOverview
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * ApiOverview Class Doc Comment
 *
 * @category Class
 * @description Api Overview
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiOverview implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'api-overview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'verifiable_password_authentication' => 'bool',
        'ssh_key_fingerprints' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ApiOverviewSshKeyFingerprints',
        'ssh_keys' => 'string[]',
        'hooks' => 'string[]',
        'github_enterprise_importer' => 'string[]',
        'web' => 'string[]',
        'api' => 'string[]',
        'git' => 'string[]',
        'packages' => 'string[]',
        'pages' => 'string[]',
        'importer' => 'string[]',
        'actions' => 'string[]',
        'actions_macos' => 'string[]',
        'dependabot' => 'string[]',
        'domains' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ApiOverviewDomains'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'verifiable_password_authentication' => null,
        'ssh_key_fingerprints' => null,
        'ssh_keys' => null,
        'hooks' => null,
        'github_enterprise_importer' => null,
        'web' => null,
        'api' => null,
        'git' => null,
        'packages' => null,
        'pages' => null,
        'importer' => null,
        'actions' => null,
        'actions_macos' => null,
        'dependabot' => null,
        'domains' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'verifiable_password_authentication' => false,
        'ssh_key_fingerprints' => false,
        'ssh_keys' => false,
        'hooks' => false,
        'github_enterprise_importer' => false,
        'web' => false,
        'api' => false,
        'git' => false,
        'packages' => false,
        'pages' => false,
        'importer' => false,
        'actions' => false,
        'actions_macos' => false,
        'dependabot' => false,
        'domains' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'verifiable_password_authentication' => 'verifiable_password_authentication',
        'ssh_key_fingerprints' => 'ssh_key_fingerprints',
        'ssh_keys' => 'ssh_keys',
        'hooks' => 'hooks',
        'github_enterprise_importer' => 'github_enterprise_importer',
        'web' => 'web',
        'api' => 'api',
        'git' => 'git',
        'packages' => 'packages',
        'pages' => 'pages',
        'importer' => 'importer',
        'actions' => 'actions',
        'actions_macos' => 'actions_macos',
        'dependabot' => 'dependabot',
        'domains' => 'domains'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'verifiable_password_authentication' => 'setVerifiablePasswordAuthentication',
        'ssh_key_fingerprints' => 'setSshKeyFingerprints',
        'ssh_keys' => 'setSshKeys',
        'hooks' => 'setHooks',
        'github_enterprise_importer' => 'setGithubEnterpriseImporter',
        'web' => 'setWeb',
        'api' => 'setApi',
        'git' => 'setGit',
        'packages' => 'setPackages',
        'pages' => 'setPages',
        'importer' => 'setImporter',
        'actions' => 'setActions',
        'actions_macos' => 'setActionsMacos',
        'dependabot' => 'setDependabot',
        'domains' => 'setDomains'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'verifiable_password_authentication' => 'getVerifiablePasswordAuthentication',
        'ssh_key_fingerprints' => 'getSshKeyFingerprints',
        'ssh_keys' => 'getSshKeys',
        'hooks' => 'getHooks',
        'github_enterprise_importer' => 'getGithubEnterpriseImporter',
        'web' => 'getWeb',
        'api' => 'getApi',
        'git' => 'getGit',
        'packages' => 'getPackages',
        'pages' => 'getPages',
        'importer' => 'getImporter',
        'actions' => 'getActions',
        'actions_macos' => 'getActionsMacos',
        'dependabot' => 'getDependabot',
        'domains' => 'getDomains'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('verifiable_password_authentication', $data ?? [], null);
        $this->setIfExists('ssh_key_fingerprints', $data ?? [], null);
        $this->setIfExists('ssh_keys', $data ?? [], null);
        $this->setIfExists('hooks', $data ?? [], null);
        $this->setIfExists('github_enterprise_importer', $data ?? [], null);
        $this->setIfExists('web', $data ?? [], null);
        $this->setIfExists('api', $data ?? [], null);
        $this->setIfExists('git', $data ?? [], null);
        $this->setIfExists('packages', $data ?? [], null);
        $this->setIfExists('pages', $data ?? [], null);
        $this->setIfExists('importer', $data ?? [], null);
        $this->setIfExists('actions', $data ?? [], null);
        $this->setIfExists('actions_macos', $data ?? [], null);
        $this->setIfExists('dependabot', $data ?? [], null);
        $this->setIfExists('domains', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['verifiable_password_authentication'] === null) {
            $invalidProperties[] = "'verifiable_password_authentication' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets verifiable_password_authentication
     *
     * @return bool
     */
    public function getVerifiablePasswordAuthentication()
    {
        return $this->container['verifiable_password_authentication'];
    }

    /**
     * Sets verifiable_password_authentication
     *
     * @param bool $verifiable_password_authentication verifiable_password_authentication
     *
     * @return self
     */
    public function setVerifiablePasswordAuthentication($verifiable_password_authentication)
    {
        if (is_null($verifiable_password_authentication)) {
            throw new \InvalidArgumentException('non-nullable verifiable_password_authentication cannot be null');
        }
        $this->container['verifiable_password_authentication'] = $verifiable_password_authentication;

        return $this;
    }

    /**
     * Gets ssh_key_fingerprints
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ApiOverviewSshKeyFingerprints|null
     */
    public function getSshKeyFingerprints()
    {
        return $this->container['ssh_key_fingerprints'];
    }

    /**
     * Sets ssh_key_fingerprints
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ApiOverviewSshKeyFingerprints|null $ssh_key_fingerprints ssh_key_fingerprints
     *
     * @return self
     */
    public function setSshKeyFingerprints($ssh_key_fingerprints)
    {
        if (is_null($ssh_key_fingerprints)) {
            throw new \InvalidArgumentException('non-nullable ssh_key_fingerprints cannot be null');
        }
        $this->container['ssh_key_fingerprints'] = $ssh_key_fingerprints;

        return $this;
    }

    /**
     * Gets ssh_keys
     *
     * @return string[]|null
     */
    public function getSshKeys()
    {
        return $this->container['ssh_keys'];
    }

    /**
     * Sets ssh_keys
     *
     * @param string[]|null $ssh_keys ssh_keys
     *
     * @return self
     */
    public function setSshKeys($ssh_keys)
    {
        if (is_null($ssh_keys)) {
            throw new \InvalidArgumentException('non-nullable ssh_keys cannot be null');
        }
        $this->container['ssh_keys'] = $ssh_keys;

        return $this;
    }

    /**
     * Gets hooks
     *
     * @return string[]|null
     */
    public function getHooks()
    {
        return $this->container['hooks'];
    }

    /**
     * Sets hooks
     *
     * @param string[]|null $hooks hooks
     *
     * @return self
     */
    public function setHooks($hooks)
    {
        if (is_null($hooks)) {
            throw new \InvalidArgumentException('non-nullable hooks cannot be null');
        }
        $this->container['hooks'] = $hooks;

        return $this;
    }

    /**
     * Gets github_enterprise_importer
     *
     * @return string[]|null
     */
    public function getGithubEnterpriseImporter()
    {
        return $this->container['github_enterprise_importer'];
    }

    /**
     * Sets github_enterprise_importer
     *
     * @param string[]|null $github_enterprise_importer github_enterprise_importer
     *
     * @return self
     */
    public function setGithubEnterpriseImporter($github_enterprise_importer)
    {
        if (is_null($github_enterprise_importer)) {
            throw new \InvalidArgumentException('non-nullable github_enterprise_importer cannot be null');
        }
        $this->container['github_enterprise_importer'] = $github_enterprise_importer;

        return $this;
    }

    /**
     * Gets web
     *
     * @return string[]|null
     */
    public function getWeb()
    {
        return $this->container['web'];
    }

    /**
     * Sets web
     *
     * @param string[]|null $web web
     *
     * @return self
     */
    public function setWeb($web)
    {
        if (is_null($web)) {
            throw new \InvalidArgumentException('non-nullable web cannot be null');
        }
        $this->container['web'] = $web;

        return $this;
    }

    /**
     * Gets api
     *
     * @return string[]|null
     */
    public function getApi()
    {
        return $this->container['api'];
    }

    /**
     * Sets api
     *
     * @param string[]|null $api api
     *
     * @return self
     */
    public function setApi($api)
    {
        if (is_null($api)) {
            throw new \InvalidArgumentException('non-nullable api cannot be null');
        }
        $this->container['api'] = $api;

        return $this;
    }

    /**
     * Gets git
     *
     * @return string[]|null
     */
    public function getGit()
    {
        return $this->container['git'];
    }

    /**
     * Sets git
     *
     * @param string[]|null $git git
     *
     * @return self
     */
    public function setGit($git)
    {
        if (is_null($git)) {
            throw new \InvalidArgumentException('non-nullable git cannot be null');
        }
        $this->container['git'] = $git;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return string[]|null
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param string[]|null $packages packages
     *
     * @return self
     */
    public function setPackages($packages)
    {
        if (is_null($packages)) {
            throw new \InvalidArgumentException('non-nullable packages cannot be null');
        }
        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return string[]|null
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param string[]|null $pages pages
     *
     * @return self
     */
    public function setPages($pages)
    {
        if (is_null($pages)) {
            throw new \InvalidArgumentException('non-nullable pages cannot be null');
        }
        $this->container['pages'] = $pages;

        return $this;
    }

    /**
     * Gets importer
     *
     * @return string[]|null
     */
    public function getImporter()
    {
        return $this->container['importer'];
    }

    /**
     * Sets importer
     *
     * @param string[]|null $importer importer
     *
     * @return self
     */
    public function setImporter($importer)
    {
        if (is_null($importer)) {
            throw new \InvalidArgumentException('non-nullable importer cannot be null');
        }
        $this->container['importer'] = $importer;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return string[]|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param string[]|null $actions actions
     *
     * @return self
     */
    public function setActions($actions)
    {
        if (is_null($actions)) {
            throw new \InvalidArgumentException('non-nullable actions cannot be null');
        }
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets actions_macos
     *
     * @return string[]|null
     */
    public function getActionsMacos()
    {
        return $this->container['actions_macos'];
    }

    /**
     * Sets actions_macos
     *
     * @param string[]|null $actions_macos actions_macos
     *
     * @return self
     */
    public function setActionsMacos($actions_macos)
    {
        if (is_null($actions_macos)) {
            throw new \InvalidArgumentException('non-nullable actions_macos cannot be null');
        }
        $this->container['actions_macos'] = $actions_macos;

        return $this;
    }

    /**
     * Gets dependabot
     *
     * @return string[]|null
     */
    public function getDependabot()
    {
        return $this->container['dependabot'];
    }

    /**
     * Sets dependabot
     *
     * @param string[]|null $dependabot dependabot
     *
     * @return self
     */
    public function setDependabot($dependabot)
    {
        if (is_null($dependabot)) {
            throw new \InvalidArgumentException('non-nullable dependabot cannot be null');
        }
        $this->container['dependabot'] = $dependabot;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ApiOverviewDomains|null
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ApiOverviewDomains|null $domains domains
     *
     * @return self
     */
    public function setDomains($domains)
    {
        if (is_null($domains)) {
            throw new \InvalidArgumentException('non-nullable domains cannot be null');
        }
        $this->container['domains'] = $domains;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


