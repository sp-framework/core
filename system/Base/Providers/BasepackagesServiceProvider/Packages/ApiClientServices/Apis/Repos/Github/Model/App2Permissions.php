<?php
/**
 * App2Permissions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * App2Permissions Class Doc Comment
 *
 * @category Class
 * @description The set of permissions for the GitHub app
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class App2Permissions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'App_2_permissions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actions' => 'string',
        'administration' => 'string',
        'checks' => 'string',
        'content_references' => 'string',
        'contents' => 'string',
        'deployments' => 'string',
        'discussions' => 'string',
        'emails' => 'string',
        'environments' => 'string',
        'issues' => 'string',
        'keys' => 'string',
        'members' => 'string',
        'metadata' => 'string',
        'organization_administration' => 'string',
        'organization_hooks' => 'string',
        'organization_packages' => 'string',
        'organization_plan' => 'string',
        'organization_projects' => 'string',
        'organization_secrets' => 'string',
        'organization_self_hosted_runners' => 'string',
        'organization_user_blocking' => 'string',
        'packages' => 'string',
        'pages' => 'string',
        'pull_requests' => 'string',
        'repository_hooks' => 'string',
        'repository_projects' => 'string',
        'secret_scanning_alerts' => 'string',
        'secrets' => 'string',
        'security_events' => 'string',
        'security_scanning_alert' => 'string',
        'single_file' => 'string',
        'statuses' => 'string',
        'team_discussions' => 'string',
        'vulnerability_alerts' => 'string',
        'workflows' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actions' => null,
        'administration' => null,
        'checks' => null,
        'content_references' => null,
        'contents' => null,
        'deployments' => null,
        'discussions' => null,
        'emails' => null,
        'environments' => null,
        'issues' => null,
        'keys' => null,
        'members' => null,
        'metadata' => null,
        'organization_administration' => null,
        'organization_hooks' => null,
        'organization_packages' => null,
        'organization_plan' => null,
        'organization_projects' => null,
        'organization_secrets' => null,
        'organization_self_hosted_runners' => null,
        'organization_user_blocking' => null,
        'packages' => null,
        'pages' => null,
        'pull_requests' => null,
        'repository_hooks' => null,
        'repository_projects' => null,
        'secret_scanning_alerts' => null,
        'secrets' => null,
        'security_events' => null,
        'security_scanning_alert' => null,
        'single_file' => null,
        'statuses' => null,
        'team_discussions' => null,
        'vulnerability_alerts' => null,
        'workflows' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'actions' => false,
        'administration' => false,
        'checks' => false,
        'content_references' => false,
        'contents' => false,
        'deployments' => false,
        'discussions' => false,
        'emails' => false,
        'environments' => false,
        'issues' => false,
        'keys' => false,
        'members' => false,
        'metadata' => false,
        'organization_administration' => false,
        'organization_hooks' => false,
        'organization_packages' => false,
        'organization_plan' => false,
        'organization_projects' => false,
        'organization_secrets' => false,
        'organization_self_hosted_runners' => false,
        'organization_user_blocking' => false,
        'packages' => false,
        'pages' => false,
        'pull_requests' => false,
        'repository_hooks' => false,
        'repository_projects' => false,
        'secret_scanning_alerts' => false,
        'secrets' => false,
        'security_events' => false,
        'security_scanning_alert' => false,
        'single_file' => false,
        'statuses' => false,
        'team_discussions' => false,
        'vulnerability_alerts' => false,
        'workflows' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actions' => 'actions',
        'administration' => 'administration',
        'checks' => 'checks',
        'content_references' => 'content_references',
        'contents' => 'contents',
        'deployments' => 'deployments',
        'discussions' => 'discussions',
        'emails' => 'emails',
        'environments' => 'environments',
        'issues' => 'issues',
        'keys' => 'keys',
        'members' => 'members',
        'metadata' => 'metadata',
        'organization_administration' => 'organization_administration',
        'organization_hooks' => 'organization_hooks',
        'organization_packages' => 'organization_packages',
        'organization_plan' => 'organization_plan',
        'organization_projects' => 'organization_projects',
        'organization_secrets' => 'organization_secrets',
        'organization_self_hosted_runners' => 'organization_self_hosted_runners',
        'organization_user_blocking' => 'organization_user_blocking',
        'packages' => 'packages',
        'pages' => 'pages',
        'pull_requests' => 'pull_requests',
        'repository_hooks' => 'repository_hooks',
        'repository_projects' => 'repository_projects',
        'secret_scanning_alerts' => 'secret_scanning_alerts',
        'secrets' => 'secrets',
        'security_events' => 'security_events',
        'security_scanning_alert' => 'security_scanning_alert',
        'single_file' => 'single_file',
        'statuses' => 'statuses',
        'team_discussions' => 'team_discussions',
        'vulnerability_alerts' => 'vulnerability_alerts',
        'workflows' => 'workflows'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actions' => 'setActions',
        'administration' => 'setAdministration',
        'checks' => 'setChecks',
        'content_references' => 'setContentReferences',
        'contents' => 'setContents',
        'deployments' => 'setDeployments',
        'discussions' => 'setDiscussions',
        'emails' => 'setEmails',
        'environments' => 'setEnvironments',
        'issues' => 'setIssues',
        'keys' => 'setKeys',
        'members' => 'setMembers',
        'metadata' => 'setMetadata',
        'organization_administration' => 'setOrganizationAdministration',
        'organization_hooks' => 'setOrganizationHooks',
        'organization_packages' => 'setOrganizationPackages',
        'organization_plan' => 'setOrganizationPlan',
        'organization_projects' => 'setOrganizationProjects',
        'organization_secrets' => 'setOrganizationSecrets',
        'organization_self_hosted_runners' => 'setOrganizationSelfHostedRunners',
        'organization_user_blocking' => 'setOrganizationUserBlocking',
        'packages' => 'setPackages',
        'pages' => 'setPages',
        'pull_requests' => 'setPullRequests',
        'repository_hooks' => 'setRepositoryHooks',
        'repository_projects' => 'setRepositoryProjects',
        'secret_scanning_alerts' => 'setSecretScanningAlerts',
        'secrets' => 'setSecrets',
        'security_events' => 'setSecurityEvents',
        'security_scanning_alert' => 'setSecurityScanningAlert',
        'single_file' => 'setSingleFile',
        'statuses' => 'setStatuses',
        'team_discussions' => 'setTeamDiscussions',
        'vulnerability_alerts' => 'setVulnerabilityAlerts',
        'workflows' => 'setWorkflows'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actions' => 'getActions',
        'administration' => 'getAdministration',
        'checks' => 'getChecks',
        'content_references' => 'getContentReferences',
        'contents' => 'getContents',
        'deployments' => 'getDeployments',
        'discussions' => 'getDiscussions',
        'emails' => 'getEmails',
        'environments' => 'getEnvironments',
        'issues' => 'getIssues',
        'keys' => 'getKeys',
        'members' => 'getMembers',
        'metadata' => 'getMetadata',
        'organization_administration' => 'getOrganizationAdministration',
        'organization_hooks' => 'getOrganizationHooks',
        'organization_packages' => 'getOrganizationPackages',
        'organization_plan' => 'getOrganizationPlan',
        'organization_projects' => 'getOrganizationProjects',
        'organization_secrets' => 'getOrganizationSecrets',
        'organization_self_hosted_runners' => 'getOrganizationSelfHostedRunners',
        'organization_user_blocking' => 'getOrganizationUserBlocking',
        'packages' => 'getPackages',
        'pages' => 'getPages',
        'pull_requests' => 'getPullRequests',
        'repository_hooks' => 'getRepositoryHooks',
        'repository_projects' => 'getRepositoryProjects',
        'secret_scanning_alerts' => 'getSecretScanningAlerts',
        'secrets' => 'getSecrets',
        'security_events' => 'getSecurityEvents',
        'security_scanning_alert' => 'getSecurityScanningAlert',
        'single_file' => 'getSingleFile',
        'statuses' => 'getStatuses',
        'team_discussions' => 'getTeamDiscussions',
        'vulnerability_alerts' => 'getVulnerabilityAlerts',
        'workflows' => 'getWorkflows'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACTIONS_READ = 'read';
    public const ACTIONS_WRITE = 'write';
    public const ADMINISTRATION_READ = 'read';
    public const ADMINISTRATION_WRITE = 'write';
    public const CHECKS_READ = 'read';
    public const CHECKS_WRITE = 'write';
    public const CONTENT_REFERENCES_READ = 'read';
    public const CONTENT_REFERENCES_WRITE = 'write';
    public const CONTENTS_READ = 'read';
    public const CONTENTS_WRITE = 'write';
    public const DEPLOYMENTS_READ = 'read';
    public const DEPLOYMENTS_WRITE = 'write';
    public const DISCUSSIONS_READ = 'read';
    public const DISCUSSIONS_WRITE = 'write';
    public const EMAILS_READ = 'read';
    public const EMAILS_WRITE = 'write';
    public const ENVIRONMENTS_READ = 'read';
    public const ENVIRONMENTS_WRITE = 'write';
    public const ISSUES_READ = 'read';
    public const ISSUES_WRITE = 'write';
    public const KEYS_READ = 'read';
    public const KEYS_WRITE = 'write';
    public const MEMBERS_READ = 'read';
    public const MEMBERS_WRITE = 'write';
    public const METADATA_READ = 'read';
    public const METADATA_WRITE = 'write';
    public const ORGANIZATION_ADMINISTRATION_READ = 'read';
    public const ORGANIZATION_ADMINISTRATION_WRITE = 'write';
    public const ORGANIZATION_HOOKS_READ = 'read';
    public const ORGANIZATION_HOOKS_WRITE = 'write';
    public const ORGANIZATION_PACKAGES_READ = 'read';
    public const ORGANIZATION_PACKAGES_WRITE = 'write';
    public const ORGANIZATION_PLAN_READ = 'read';
    public const ORGANIZATION_PLAN_WRITE = 'write';
    public const ORGANIZATION_PROJECTS_READ = 'read';
    public const ORGANIZATION_PROJECTS_WRITE = 'write';
    public const ORGANIZATION_PROJECTS_ADMIN = 'admin';
    public const ORGANIZATION_SECRETS_READ = 'read';
    public const ORGANIZATION_SECRETS_WRITE = 'write';
    public const ORGANIZATION_SELF_HOSTED_RUNNERS_READ = 'read';
    public const ORGANIZATION_SELF_HOSTED_RUNNERS_WRITE = 'write';
    public const ORGANIZATION_USER_BLOCKING_READ = 'read';
    public const ORGANIZATION_USER_BLOCKING_WRITE = 'write';
    public const PACKAGES_READ = 'read';
    public const PACKAGES_WRITE = 'write';
    public const PAGES_READ = 'read';
    public const PAGES_WRITE = 'write';
    public const PULL_REQUESTS_READ = 'read';
    public const PULL_REQUESTS_WRITE = 'write';
    public const REPOSITORY_HOOKS_READ = 'read';
    public const REPOSITORY_HOOKS_WRITE = 'write';
    public const REPOSITORY_PROJECTS_READ = 'read';
    public const REPOSITORY_PROJECTS_WRITE = 'write';
    public const REPOSITORY_PROJECTS_ADMIN = 'admin';
    public const SECRET_SCANNING_ALERTS_READ = 'read';
    public const SECRET_SCANNING_ALERTS_WRITE = 'write';
    public const SECRETS_READ = 'read';
    public const SECRETS_WRITE = 'write';
    public const SECURITY_EVENTS_READ = 'read';
    public const SECURITY_EVENTS_WRITE = 'write';
    public const SECURITY_SCANNING_ALERT_READ = 'read';
    public const SECURITY_SCANNING_ALERT_WRITE = 'write';
    public const SINGLE_FILE_READ = 'read';
    public const SINGLE_FILE_WRITE = 'write';
    public const STATUSES_READ = 'read';
    public const STATUSES_WRITE = 'write';
    public const TEAM_DISCUSSIONS_READ = 'read';
    public const TEAM_DISCUSSIONS_WRITE = 'write';
    public const VULNERABILITY_ALERTS_READ = 'read';
    public const VULNERABILITY_ALERTS_WRITE = 'write';
    public const WORKFLOWS_READ = 'read';
    public const WORKFLOWS_WRITE = 'write';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionsAllowableValues()
    {
        return [
            self::ACTIONS_READ,
            self::ACTIONS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdministrationAllowableValues()
    {
        return [
            self::ADMINISTRATION_READ,
            self::ADMINISTRATION_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChecksAllowableValues()
    {
        return [
            self::CHECKS_READ,
            self::CHECKS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentReferencesAllowableValues()
    {
        return [
            self::CONTENT_REFERENCES_READ,
            self::CONTENT_REFERENCES_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentsAllowableValues()
    {
        return [
            self::CONTENTS_READ,
            self::CONTENTS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeploymentsAllowableValues()
    {
        return [
            self::DEPLOYMENTS_READ,
            self::DEPLOYMENTS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDiscussionsAllowableValues()
    {
        return [
            self::DISCUSSIONS_READ,
            self::DISCUSSIONS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmailsAllowableValues()
    {
        return [
            self::EMAILS_READ,
            self::EMAILS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnvironmentsAllowableValues()
    {
        return [
            self::ENVIRONMENTS_READ,
            self::ENVIRONMENTS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIssuesAllowableValues()
    {
        return [
            self::ISSUES_READ,
            self::ISSUES_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKeysAllowableValues()
    {
        return [
            self::KEYS_READ,
            self::KEYS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMembersAllowableValues()
    {
        return [
            self::MEMBERS_READ,
            self::MEMBERS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMetadataAllowableValues()
    {
        return [
            self::METADATA_READ,
            self::METADATA_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrganizationAdministrationAllowableValues()
    {
        return [
            self::ORGANIZATION_ADMINISTRATION_READ,
            self::ORGANIZATION_ADMINISTRATION_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrganizationHooksAllowableValues()
    {
        return [
            self::ORGANIZATION_HOOKS_READ,
            self::ORGANIZATION_HOOKS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrganizationPackagesAllowableValues()
    {
        return [
            self::ORGANIZATION_PACKAGES_READ,
            self::ORGANIZATION_PACKAGES_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrganizationPlanAllowableValues()
    {
        return [
            self::ORGANIZATION_PLAN_READ,
            self::ORGANIZATION_PLAN_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrganizationProjectsAllowableValues()
    {
        return [
            self::ORGANIZATION_PROJECTS_READ,
            self::ORGANIZATION_PROJECTS_WRITE,
            self::ORGANIZATION_PROJECTS_ADMIN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrganizationSecretsAllowableValues()
    {
        return [
            self::ORGANIZATION_SECRETS_READ,
            self::ORGANIZATION_SECRETS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrganizationSelfHostedRunnersAllowableValues()
    {
        return [
            self::ORGANIZATION_SELF_HOSTED_RUNNERS_READ,
            self::ORGANIZATION_SELF_HOSTED_RUNNERS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrganizationUserBlockingAllowableValues()
    {
        return [
            self::ORGANIZATION_USER_BLOCKING_READ,
            self::ORGANIZATION_USER_BLOCKING_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackagesAllowableValues()
    {
        return [
            self::PACKAGES_READ,
            self::PACKAGES_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPagesAllowableValues()
    {
        return [
            self::PAGES_READ,
            self::PAGES_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPullRequestsAllowableValues()
    {
        return [
            self::PULL_REQUESTS_READ,
            self::PULL_REQUESTS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRepositoryHooksAllowableValues()
    {
        return [
            self::REPOSITORY_HOOKS_READ,
            self::REPOSITORY_HOOKS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRepositoryProjectsAllowableValues()
    {
        return [
            self::REPOSITORY_PROJECTS_READ,
            self::REPOSITORY_PROJECTS_WRITE,
            self::REPOSITORY_PROJECTS_ADMIN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecretScanningAlertsAllowableValues()
    {
        return [
            self::SECRET_SCANNING_ALERTS_READ,
            self::SECRET_SCANNING_ALERTS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecretsAllowableValues()
    {
        return [
            self::SECRETS_READ,
            self::SECRETS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityEventsAllowableValues()
    {
        return [
            self::SECURITY_EVENTS_READ,
            self::SECURITY_EVENTS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityScanningAlertAllowableValues()
    {
        return [
            self::SECURITY_SCANNING_ALERT_READ,
            self::SECURITY_SCANNING_ALERT_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSingleFileAllowableValues()
    {
        return [
            self::SINGLE_FILE_READ,
            self::SINGLE_FILE_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusesAllowableValues()
    {
        return [
            self::STATUSES_READ,
            self::STATUSES_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTeamDiscussionsAllowableValues()
    {
        return [
            self::TEAM_DISCUSSIONS_READ,
            self::TEAM_DISCUSSIONS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVulnerabilityAlertsAllowableValues()
    {
        return [
            self::VULNERABILITY_ALERTS_READ,
            self::VULNERABILITY_ALERTS_WRITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWorkflowsAllowableValues()
    {
        return [
            self::WORKFLOWS_READ,
            self::WORKFLOWS_WRITE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('actions', $data ?? [], null);
        $this->setIfExists('administration', $data ?? [], null);
        $this->setIfExists('checks', $data ?? [], null);
        $this->setIfExists('content_references', $data ?? [], null);
        $this->setIfExists('contents', $data ?? [], null);
        $this->setIfExists('deployments', $data ?? [], null);
        $this->setIfExists('discussions', $data ?? [], null);
        $this->setIfExists('emails', $data ?? [], null);
        $this->setIfExists('environments', $data ?? [], null);
        $this->setIfExists('issues', $data ?? [], null);
        $this->setIfExists('keys', $data ?? [], null);
        $this->setIfExists('members', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('organization_administration', $data ?? [], null);
        $this->setIfExists('organization_hooks', $data ?? [], null);
        $this->setIfExists('organization_packages', $data ?? [], null);
        $this->setIfExists('organization_plan', $data ?? [], null);
        $this->setIfExists('organization_projects', $data ?? [], null);
        $this->setIfExists('organization_secrets', $data ?? [], null);
        $this->setIfExists('organization_self_hosted_runners', $data ?? [], null);
        $this->setIfExists('organization_user_blocking', $data ?? [], null);
        $this->setIfExists('packages', $data ?? [], null);
        $this->setIfExists('pages', $data ?? [], null);
        $this->setIfExists('pull_requests', $data ?? [], null);
        $this->setIfExists('repository_hooks', $data ?? [], null);
        $this->setIfExists('repository_projects', $data ?? [], null);
        $this->setIfExists('secret_scanning_alerts', $data ?? [], null);
        $this->setIfExists('secrets', $data ?? [], null);
        $this->setIfExists('security_events', $data ?? [], null);
        $this->setIfExists('security_scanning_alert', $data ?? [], null);
        $this->setIfExists('single_file', $data ?? [], null);
        $this->setIfExists('statuses', $data ?? [], null);
        $this->setIfExists('team_discussions', $data ?? [], null);
        $this->setIfExists('vulnerability_alerts', $data ?? [], null);
        $this->setIfExists('workflows', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActionsAllowableValues();
        if (!is_null($this->container['actions']) && !in_array($this->container['actions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'actions', must be one of '%s'",
                $this->container['actions'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdministrationAllowableValues();
        if (!is_null($this->container['administration']) && !in_array($this->container['administration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'administration', must be one of '%s'",
                $this->container['administration'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChecksAllowableValues();
        if (!is_null($this->container['checks']) && !in_array($this->container['checks'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'checks', must be one of '%s'",
                $this->container['checks'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContentReferencesAllowableValues();
        if (!is_null($this->container['content_references']) && !in_array($this->container['content_references'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'content_references', must be one of '%s'",
                $this->container['content_references'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContentsAllowableValues();
        if (!is_null($this->container['contents']) && !in_array($this->container['contents'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'contents', must be one of '%s'",
                $this->container['contents'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeploymentsAllowableValues();
        if (!is_null($this->container['deployments']) && !in_array($this->container['deployments'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deployments', must be one of '%s'",
                $this->container['deployments'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDiscussionsAllowableValues();
        if (!is_null($this->container['discussions']) && !in_array($this->container['discussions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'discussions', must be one of '%s'",
                $this->container['discussions'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEmailsAllowableValues();
        if (!is_null($this->container['emails']) && !in_array($this->container['emails'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'emails', must be one of '%s'",
                $this->container['emails'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEnvironmentsAllowableValues();
        if (!is_null($this->container['environments']) && !in_array($this->container['environments'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'environments', must be one of '%s'",
                $this->container['environments'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIssuesAllowableValues();
        if (!is_null($this->container['issues']) && !in_array($this->container['issues'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'issues', must be one of '%s'",
                $this->container['issues'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getKeysAllowableValues();
        if (!is_null($this->container['keys']) && !in_array($this->container['keys'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'keys', must be one of '%s'",
                $this->container['keys'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMembersAllowableValues();
        if (!is_null($this->container['members']) && !in_array($this->container['members'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'members', must be one of '%s'",
                $this->container['members'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMetadataAllowableValues();
        if (!is_null($this->container['metadata']) && !in_array($this->container['metadata'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'metadata', must be one of '%s'",
                $this->container['metadata'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrganizationAdministrationAllowableValues();
        if (!is_null($this->container['organization_administration']) && !in_array($this->container['organization_administration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'organization_administration', must be one of '%s'",
                $this->container['organization_administration'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrganizationHooksAllowableValues();
        if (!is_null($this->container['organization_hooks']) && !in_array($this->container['organization_hooks'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'organization_hooks', must be one of '%s'",
                $this->container['organization_hooks'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrganizationPackagesAllowableValues();
        if (!is_null($this->container['organization_packages']) && !in_array($this->container['organization_packages'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'organization_packages', must be one of '%s'",
                $this->container['organization_packages'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrganizationPlanAllowableValues();
        if (!is_null($this->container['organization_plan']) && !in_array($this->container['organization_plan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'organization_plan', must be one of '%s'",
                $this->container['organization_plan'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrganizationProjectsAllowableValues();
        if (!is_null($this->container['organization_projects']) && !in_array($this->container['organization_projects'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'organization_projects', must be one of '%s'",
                $this->container['organization_projects'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrganizationSecretsAllowableValues();
        if (!is_null($this->container['organization_secrets']) && !in_array($this->container['organization_secrets'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'organization_secrets', must be one of '%s'",
                $this->container['organization_secrets'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrganizationSelfHostedRunnersAllowableValues();
        if (!is_null($this->container['organization_self_hosted_runners']) && !in_array($this->container['organization_self_hosted_runners'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'organization_self_hosted_runners', must be one of '%s'",
                $this->container['organization_self_hosted_runners'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrganizationUserBlockingAllowableValues();
        if (!is_null($this->container['organization_user_blocking']) && !in_array($this->container['organization_user_blocking'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'organization_user_blocking', must be one of '%s'",
                $this->container['organization_user_blocking'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPackagesAllowableValues();
        if (!is_null($this->container['packages']) && !in_array($this->container['packages'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'packages', must be one of '%s'",
                $this->container['packages'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPagesAllowableValues();
        if (!is_null($this->container['pages']) && !in_array($this->container['pages'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pages', must be one of '%s'",
                $this->container['pages'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPullRequestsAllowableValues();
        if (!is_null($this->container['pull_requests']) && !in_array($this->container['pull_requests'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pull_requests', must be one of '%s'",
                $this->container['pull_requests'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRepositoryHooksAllowableValues();
        if (!is_null($this->container['repository_hooks']) && !in_array($this->container['repository_hooks'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'repository_hooks', must be one of '%s'",
                $this->container['repository_hooks'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRepositoryProjectsAllowableValues();
        if (!is_null($this->container['repository_projects']) && !in_array($this->container['repository_projects'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'repository_projects', must be one of '%s'",
                $this->container['repository_projects'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecretScanningAlertsAllowableValues();
        if (!is_null($this->container['secret_scanning_alerts']) && !in_array($this->container['secret_scanning_alerts'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'secret_scanning_alerts', must be one of '%s'",
                $this->container['secret_scanning_alerts'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecretsAllowableValues();
        if (!is_null($this->container['secrets']) && !in_array($this->container['secrets'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'secrets', must be one of '%s'",
                $this->container['secrets'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecurityEventsAllowableValues();
        if (!is_null($this->container['security_events']) && !in_array($this->container['security_events'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security_events', must be one of '%s'",
                $this->container['security_events'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecurityScanningAlertAllowableValues();
        if (!is_null($this->container['security_scanning_alert']) && !in_array($this->container['security_scanning_alert'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security_scanning_alert', must be one of '%s'",
                $this->container['security_scanning_alert'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSingleFileAllowableValues();
        if (!is_null($this->container['single_file']) && !in_array($this->container['single_file'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'single_file', must be one of '%s'",
                $this->container['single_file'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusesAllowableValues();
        if (!is_null($this->container['statuses']) && !in_array($this->container['statuses'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'statuses', must be one of '%s'",
                $this->container['statuses'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTeamDiscussionsAllowableValues();
        if (!is_null($this->container['team_discussions']) && !in_array($this->container['team_discussions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'team_discussions', must be one of '%s'",
                $this->container['team_discussions'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVulnerabilityAlertsAllowableValues();
        if (!is_null($this->container['vulnerability_alerts']) && !in_array($this->container['vulnerability_alerts'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vulnerability_alerts', must be one of '%s'",
                $this->container['vulnerability_alerts'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWorkflowsAllowableValues();
        if (!is_null($this->container['workflows']) && !in_array($this->container['workflows'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'workflows', must be one of '%s'",
                $this->container['workflows'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actions
     *
     * @return string|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param string|null $actions actions
     *
     * @return self
     */
    public function setActions($actions)
    {
        if (is_null($actions)) {
            throw new \InvalidArgumentException('non-nullable actions cannot be null');
        }
        $allowedValues = $this->getActionsAllowableValues();
        if (!in_array($actions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'actions', must be one of '%s'",
                    $actions,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets administration
     *
     * @return string|null
     */
    public function getAdministration()
    {
        return $this->container['administration'];
    }

    /**
     * Sets administration
     *
     * @param string|null $administration administration
     *
     * @return self
     */
    public function setAdministration($administration)
    {
        if (is_null($administration)) {
            throw new \InvalidArgumentException('non-nullable administration cannot be null');
        }
        $allowedValues = $this->getAdministrationAllowableValues();
        if (!in_array($administration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'administration', must be one of '%s'",
                    $administration,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['administration'] = $administration;

        return $this;
    }

    /**
     * Gets checks
     *
     * @return string|null
     */
    public function getChecks()
    {
        return $this->container['checks'];
    }

    /**
     * Sets checks
     *
     * @param string|null $checks checks
     *
     * @return self
     */
    public function setChecks($checks)
    {
        if (is_null($checks)) {
            throw new \InvalidArgumentException('non-nullable checks cannot be null');
        }
        $allowedValues = $this->getChecksAllowableValues();
        if (!in_array($checks, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'checks', must be one of '%s'",
                    $checks,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['checks'] = $checks;

        return $this;
    }

    /**
     * Gets content_references
     *
     * @return string|null
     */
    public function getContentReferences()
    {
        return $this->container['content_references'];
    }

    /**
     * Sets content_references
     *
     * @param string|null $content_references content_references
     *
     * @return self
     */
    public function setContentReferences($content_references)
    {
        if (is_null($content_references)) {
            throw new \InvalidArgumentException('non-nullable content_references cannot be null');
        }
        $allowedValues = $this->getContentReferencesAllowableValues();
        if (!in_array($content_references, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'content_references', must be one of '%s'",
                    $content_references,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['content_references'] = $content_references;

        return $this;
    }

    /**
     * Gets contents
     *
     * @return string|null
     */
    public function getContents()
    {
        return $this->container['contents'];
    }

    /**
     * Sets contents
     *
     * @param string|null $contents contents
     *
     * @return self
     */
    public function setContents($contents)
    {
        if (is_null($contents)) {
            throw new \InvalidArgumentException('non-nullable contents cannot be null');
        }
        $allowedValues = $this->getContentsAllowableValues();
        if (!in_array($contents, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'contents', must be one of '%s'",
                    $contents,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contents'] = $contents;

        return $this;
    }

    /**
     * Gets deployments
     *
     * @return string|null
     */
    public function getDeployments()
    {
        return $this->container['deployments'];
    }

    /**
     * Sets deployments
     *
     * @param string|null $deployments deployments
     *
     * @return self
     */
    public function setDeployments($deployments)
    {
        if (is_null($deployments)) {
            throw new \InvalidArgumentException('non-nullable deployments cannot be null');
        }
        $allowedValues = $this->getDeploymentsAllowableValues();
        if (!in_array($deployments, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deployments', must be one of '%s'",
                    $deployments,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deployments'] = $deployments;

        return $this;
    }

    /**
     * Gets discussions
     *
     * @return string|null
     */
    public function getDiscussions()
    {
        return $this->container['discussions'];
    }

    /**
     * Sets discussions
     *
     * @param string|null $discussions discussions
     *
     * @return self
     */
    public function setDiscussions($discussions)
    {
        if (is_null($discussions)) {
            throw new \InvalidArgumentException('non-nullable discussions cannot be null');
        }
        $allowedValues = $this->getDiscussionsAllowableValues();
        if (!in_array($discussions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'discussions', must be one of '%s'",
                    $discussions,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['discussions'] = $discussions;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return string|null
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param string|null $emails emails
     *
     * @return self
     */
    public function setEmails($emails)
    {
        if (is_null($emails)) {
            throw new \InvalidArgumentException('non-nullable emails cannot be null');
        }
        $allowedValues = $this->getEmailsAllowableValues();
        if (!in_array($emails, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'emails', must be one of '%s'",
                    $emails,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets environments
     *
     * @return string|null
     */
    public function getEnvironments()
    {
        return $this->container['environments'];
    }

    /**
     * Sets environments
     *
     * @param string|null $environments environments
     *
     * @return self
     */
    public function setEnvironments($environments)
    {
        if (is_null($environments)) {
            throw new \InvalidArgumentException('non-nullable environments cannot be null');
        }
        $allowedValues = $this->getEnvironmentsAllowableValues();
        if (!in_array($environments, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'environments', must be one of '%s'",
                    $environments,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['environments'] = $environments;

        return $this;
    }

    /**
     * Gets issues
     *
     * @return string|null
     */
    public function getIssues()
    {
        return $this->container['issues'];
    }

    /**
     * Sets issues
     *
     * @param string|null $issues issues
     *
     * @return self
     */
    public function setIssues($issues)
    {
        if (is_null($issues)) {
            throw new \InvalidArgumentException('non-nullable issues cannot be null');
        }
        $allowedValues = $this->getIssuesAllowableValues();
        if (!in_array($issues, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'issues', must be one of '%s'",
                    $issues,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['issues'] = $issues;

        return $this;
    }

    /**
     * Gets keys
     *
     * @return string|null
     */
    public function getKeys()
    {
        return $this->container['keys'];
    }

    /**
     * Sets keys
     *
     * @param string|null $keys keys
     *
     * @return self
     */
    public function setKeys($keys)
    {
        if (is_null($keys)) {
            throw new \InvalidArgumentException('non-nullable keys cannot be null');
        }
        $allowedValues = $this->getKeysAllowableValues();
        if (!in_array($keys, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'keys', must be one of '%s'",
                    $keys,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['keys'] = $keys;

        return $this;
    }

    /**
     * Gets members
     *
     * @return string|null
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param string|null $members members
     *
     * @return self
     */
    public function setMembers($members)
    {
        if (is_null($members)) {
            throw new \InvalidArgumentException('non-nullable members cannot be null');
        }
        $allowedValues = $this->getMembersAllowableValues();
        if (!in_array($members, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'members', must be one of '%s'",
                    $members,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $allowedValues = $this->getMetadataAllowableValues();
        if (!in_array($metadata, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'metadata', must be one of '%s'",
                    $metadata,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets organization_administration
     *
     * @return string|null
     */
    public function getOrganizationAdministration()
    {
        return $this->container['organization_administration'];
    }

    /**
     * Sets organization_administration
     *
     * @param string|null $organization_administration organization_administration
     *
     * @return self
     */
    public function setOrganizationAdministration($organization_administration)
    {
        if (is_null($organization_administration)) {
            throw new \InvalidArgumentException('non-nullable organization_administration cannot be null');
        }
        $allowedValues = $this->getOrganizationAdministrationAllowableValues();
        if (!in_array($organization_administration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'organization_administration', must be one of '%s'",
                    $organization_administration,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['organization_administration'] = $organization_administration;

        return $this;
    }

    /**
     * Gets organization_hooks
     *
     * @return string|null
     */
    public function getOrganizationHooks()
    {
        return $this->container['organization_hooks'];
    }

    /**
     * Sets organization_hooks
     *
     * @param string|null $organization_hooks organization_hooks
     *
     * @return self
     */
    public function setOrganizationHooks($organization_hooks)
    {
        if (is_null($organization_hooks)) {
            throw new \InvalidArgumentException('non-nullable organization_hooks cannot be null');
        }
        $allowedValues = $this->getOrganizationHooksAllowableValues();
        if (!in_array($organization_hooks, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'organization_hooks', must be one of '%s'",
                    $organization_hooks,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['organization_hooks'] = $organization_hooks;

        return $this;
    }

    /**
     * Gets organization_packages
     *
     * @return string|null
     */
    public function getOrganizationPackages()
    {
        return $this->container['organization_packages'];
    }

    /**
     * Sets organization_packages
     *
     * @param string|null $organization_packages organization_packages
     *
     * @return self
     */
    public function setOrganizationPackages($organization_packages)
    {
        if (is_null($organization_packages)) {
            throw new \InvalidArgumentException('non-nullable organization_packages cannot be null');
        }
        $allowedValues = $this->getOrganizationPackagesAllowableValues();
        if (!in_array($organization_packages, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'organization_packages', must be one of '%s'",
                    $organization_packages,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['organization_packages'] = $organization_packages;

        return $this;
    }

    /**
     * Gets organization_plan
     *
     * @return string|null
     */
    public function getOrganizationPlan()
    {
        return $this->container['organization_plan'];
    }

    /**
     * Sets organization_plan
     *
     * @param string|null $organization_plan organization_plan
     *
     * @return self
     */
    public function setOrganizationPlan($organization_plan)
    {
        if (is_null($organization_plan)) {
            throw new \InvalidArgumentException('non-nullable organization_plan cannot be null');
        }
        $allowedValues = $this->getOrganizationPlanAllowableValues();
        if (!in_array($organization_plan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'organization_plan', must be one of '%s'",
                    $organization_plan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['organization_plan'] = $organization_plan;

        return $this;
    }

    /**
     * Gets organization_projects
     *
     * @return string|null
     */
    public function getOrganizationProjects()
    {
        return $this->container['organization_projects'];
    }

    /**
     * Sets organization_projects
     *
     * @param string|null $organization_projects organization_projects
     *
     * @return self
     */
    public function setOrganizationProjects($organization_projects)
    {
        if (is_null($organization_projects)) {
            throw new \InvalidArgumentException('non-nullable organization_projects cannot be null');
        }
        $allowedValues = $this->getOrganizationProjectsAllowableValues();
        if (!in_array($organization_projects, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'organization_projects', must be one of '%s'",
                    $organization_projects,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['organization_projects'] = $organization_projects;

        return $this;
    }

    /**
     * Gets organization_secrets
     *
     * @return string|null
     */
    public function getOrganizationSecrets()
    {
        return $this->container['organization_secrets'];
    }

    /**
     * Sets organization_secrets
     *
     * @param string|null $organization_secrets organization_secrets
     *
     * @return self
     */
    public function setOrganizationSecrets($organization_secrets)
    {
        if (is_null($organization_secrets)) {
            throw new \InvalidArgumentException('non-nullable organization_secrets cannot be null');
        }
        $allowedValues = $this->getOrganizationSecretsAllowableValues();
        if (!in_array($organization_secrets, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'organization_secrets', must be one of '%s'",
                    $organization_secrets,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['organization_secrets'] = $organization_secrets;

        return $this;
    }

    /**
     * Gets organization_self_hosted_runners
     *
     * @return string|null
     */
    public function getOrganizationSelfHostedRunners()
    {
        return $this->container['organization_self_hosted_runners'];
    }

    /**
     * Sets organization_self_hosted_runners
     *
     * @param string|null $organization_self_hosted_runners organization_self_hosted_runners
     *
     * @return self
     */
    public function setOrganizationSelfHostedRunners($organization_self_hosted_runners)
    {
        if (is_null($organization_self_hosted_runners)) {
            throw new \InvalidArgumentException('non-nullable organization_self_hosted_runners cannot be null');
        }
        $allowedValues = $this->getOrganizationSelfHostedRunnersAllowableValues();
        if (!in_array($organization_self_hosted_runners, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'organization_self_hosted_runners', must be one of '%s'",
                    $organization_self_hosted_runners,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['organization_self_hosted_runners'] = $organization_self_hosted_runners;

        return $this;
    }

    /**
     * Gets organization_user_blocking
     *
     * @return string|null
     */
    public function getOrganizationUserBlocking()
    {
        return $this->container['organization_user_blocking'];
    }

    /**
     * Sets organization_user_blocking
     *
     * @param string|null $organization_user_blocking organization_user_blocking
     *
     * @return self
     */
    public function setOrganizationUserBlocking($organization_user_blocking)
    {
        if (is_null($organization_user_blocking)) {
            throw new \InvalidArgumentException('non-nullable organization_user_blocking cannot be null');
        }
        $allowedValues = $this->getOrganizationUserBlockingAllowableValues();
        if (!in_array($organization_user_blocking, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'organization_user_blocking', must be one of '%s'",
                    $organization_user_blocking,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['organization_user_blocking'] = $organization_user_blocking;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return string|null
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param string|null $packages packages
     *
     * @return self
     */
    public function setPackages($packages)
    {
        if (is_null($packages)) {
            throw new \InvalidArgumentException('non-nullable packages cannot be null');
        }
        $allowedValues = $this->getPackagesAllowableValues();
        if (!in_array($packages, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'packages', must be one of '%s'",
                    $packages,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return string|null
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param string|null $pages pages
     *
     * @return self
     */
    public function setPages($pages)
    {
        if (is_null($pages)) {
            throw new \InvalidArgumentException('non-nullable pages cannot be null');
        }
        $allowedValues = $this->getPagesAllowableValues();
        if (!in_array($pages, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pages', must be one of '%s'",
                    $pages,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pages'] = $pages;

        return $this;
    }

    /**
     * Gets pull_requests
     *
     * @return string|null
     */
    public function getPullRequests()
    {
        return $this->container['pull_requests'];
    }

    /**
     * Sets pull_requests
     *
     * @param string|null $pull_requests pull_requests
     *
     * @return self
     */
    public function setPullRequests($pull_requests)
    {
        if (is_null($pull_requests)) {
            throw new \InvalidArgumentException('non-nullable pull_requests cannot be null');
        }
        $allowedValues = $this->getPullRequestsAllowableValues();
        if (!in_array($pull_requests, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pull_requests', must be one of '%s'",
                    $pull_requests,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pull_requests'] = $pull_requests;

        return $this;
    }

    /**
     * Gets repository_hooks
     *
     * @return string|null
     */
    public function getRepositoryHooks()
    {
        return $this->container['repository_hooks'];
    }

    /**
     * Sets repository_hooks
     *
     * @param string|null $repository_hooks repository_hooks
     *
     * @return self
     */
    public function setRepositoryHooks($repository_hooks)
    {
        if (is_null($repository_hooks)) {
            throw new \InvalidArgumentException('non-nullable repository_hooks cannot be null');
        }
        $allowedValues = $this->getRepositoryHooksAllowableValues();
        if (!in_array($repository_hooks, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'repository_hooks', must be one of '%s'",
                    $repository_hooks,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['repository_hooks'] = $repository_hooks;

        return $this;
    }

    /**
     * Gets repository_projects
     *
     * @return string|null
     */
    public function getRepositoryProjects()
    {
        return $this->container['repository_projects'];
    }

    /**
     * Sets repository_projects
     *
     * @param string|null $repository_projects repository_projects
     *
     * @return self
     */
    public function setRepositoryProjects($repository_projects)
    {
        if (is_null($repository_projects)) {
            throw new \InvalidArgumentException('non-nullable repository_projects cannot be null');
        }
        $allowedValues = $this->getRepositoryProjectsAllowableValues();
        if (!in_array($repository_projects, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'repository_projects', must be one of '%s'",
                    $repository_projects,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['repository_projects'] = $repository_projects;

        return $this;
    }

    /**
     * Gets secret_scanning_alerts
     *
     * @return string|null
     */
    public function getSecretScanningAlerts()
    {
        return $this->container['secret_scanning_alerts'];
    }

    /**
     * Sets secret_scanning_alerts
     *
     * @param string|null $secret_scanning_alerts secret_scanning_alerts
     *
     * @return self
     */
    public function setSecretScanningAlerts($secret_scanning_alerts)
    {
        if (is_null($secret_scanning_alerts)) {
            throw new \InvalidArgumentException('non-nullable secret_scanning_alerts cannot be null');
        }
        $allowedValues = $this->getSecretScanningAlertsAllowableValues();
        if (!in_array($secret_scanning_alerts, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'secret_scanning_alerts', must be one of '%s'",
                    $secret_scanning_alerts,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secret_scanning_alerts'] = $secret_scanning_alerts;

        return $this;
    }

    /**
     * Gets secrets
     *
     * @return string|null
     */
    public function getSecrets()
    {
        return $this->container['secrets'];
    }

    /**
     * Sets secrets
     *
     * @param string|null $secrets secrets
     *
     * @return self
     */
    public function setSecrets($secrets)
    {
        if (is_null($secrets)) {
            throw new \InvalidArgumentException('non-nullable secrets cannot be null');
        }
        $allowedValues = $this->getSecretsAllowableValues();
        if (!in_array($secrets, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'secrets', must be one of '%s'",
                    $secrets,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secrets'] = $secrets;

        return $this;
    }

    /**
     * Gets security_events
     *
     * @return string|null
     */
    public function getSecurityEvents()
    {
        return $this->container['security_events'];
    }

    /**
     * Sets security_events
     *
     * @param string|null $security_events security_events
     *
     * @return self
     */
    public function setSecurityEvents($security_events)
    {
        if (is_null($security_events)) {
            throw new \InvalidArgumentException('non-nullable security_events cannot be null');
        }
        $allowedValues = $this->getSecurityEventsAllowableValues();
        if (!in_array($security_events, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security_events', must be one of '%s'",
                    $security_events,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_events'] = $security_events;

        return $this;
    }

    /**
     * Gets security_scanning_alert
     *
     * @return string|null
     */
    public function getSecurityScanningAlert()
    {
        return $this->container['security_scanning_alert'];
    }

    /**
     * Sets security_scanning_alert
     *
     * @param string|null $security_scanning_alert security_scanning_alert
     *
     * @return self
     */
    public function setSecurityScanningAlert($security_scanning_alert)
    {
        if (is_null($security_scanning_alert)) {
            throw new \InvalidArgumentException('non-nullable security_scanning_alert cannot be null');
        }
        $allowedValues = $this->getSecurityScanningAlertAllowableValues();
        if (!in_array($security_scanning_alert, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security_scanning_alert', must be one of '%s'",
                    $security_scanning_alert,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_scanning_alert'] = $security_scanning_alert;

        return $this;
    }

    /**
     * Gets single_file
     *
     * @return string|null
     */
    public function getSingleFile()
    {
        return $this->container['single_file'];
    }

    /**
     * Sets single_file
     *
     * @param string|null $single_file single_file
     *
     * @return self
     */
    public function setSingleFile($single_file)
    {
        if (is_null($single_file)) {
            throw new \InvalidArgumentException('non-nullable single_file cannot be null');
        }
        $allowedValues = $this->getSingleFileAllowableValues();
        if (!in_array($single_file, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'single_file', must be one of '%s'",
                    $single_file,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['single_file'] = $single_file;

        return $this;
    }

    /**
     * Gets statuses
     *
     * @return string|null
     */
    public function getStatuses()
    {
        return $this->container['statuses'];
    }

    /**
     * Sets statuses
     *
     * @param string|null $statuses statuses
     *
     * @return self
     */
    public function setStatuses($statuses)
    {
        if (is_null($statuses)) {
            throw new \InvalidArgumentException('non-nullable statuses cannot be null');
        }
        $allowedValues = $this->getStatusesAllowableValues();
        if (!in_array($statuses, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'statuses', must be one of '%s'",
                    $statuses,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['statuses'] = $statuses;

        return $this;
    }

    /**
     * Gets team_discussions
     *
     * @return string|null
     */
    public function getTeamDiscussions()
    {
        return $this->container['team_discussions'];
    }

    /**
     * Sets team_discussions
     *
     * @param string|null $team_discussions team_discussions
     *
     * @return self
     */
    public function setTeamDiscussions($team_discussions)
    {
        if (is_null($team_discussions)) {
            throw new \InvalidArgumentException('non-nullable team_discussions cannot be null');
        }
        $allowedValues = $this->getTeamDiscussionsAllowableValues();
        if (!in_array($team_discussions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'team_discussions', must be one of '%s'",
                    $team_discussions,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['team_discussions'] = $team_discussions;

        return $this;
    }

    /**
     * Gets vulnerability_alerts
     *
     * @return string|null
     */
    public function getVulnerabilityAlerts()
    {
        return $this->container['vulnerability_alerts'];
    }

    /**
     * Sets vulnerability_alerts
     *
     * @param string|null $vulnerability_alerts vulnerability_alerts
     *
     * @return self
     */
    public function setVulnerabilityAlerts($vulnerability_alerts)
    {
        if (is_null($vulnerability_alerts)) {
            throw new \InvalidArgumentException('non-nullable vulnerability_alerts cannot be null');
        }
        $allowedValues = $this->getVulnerabilityAlertsAllowableValues();
        if (!in_array($vulnerability_alerts, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vulnerability_alerts', must be one of '%s'",
                    $vulnerability_alerts,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vulnerability_alerts'] = $vulnerability_alerts;

        return $this;
    }

    /**
     * Gets workflows
     *
     * @return string|null
     */
    public function getWorkflows()
    {
        return $this->container['workflows'];
    }

    /**
     * Sets workflows
     *
     * @param string|null $workflows workflows
     *
     * @return self
     */
    public function setWorkflows($workflows)
    {
        if (is_null($workflows)) {
            throw new \InvalidArgumentException('non-nullable workflows cannot be null');
        }
        $allowedValues = $this->getWorkflowsAllowableValues();
        if (!in_array($workflows, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'workflows', must be one of '%s'",
                    $workflows,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['workflows'] = $workflows;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


