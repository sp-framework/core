<?php
/**
 * AuditLogEvent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * AuditLogEvent Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuditLogEvent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'audit-log-event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'at_timestamp' => 'int',
        'action' => 'string',
        'active' => 'bool',
        'active_was' => 'bool',
        'actor' => 'string',
        'actor_id' => 'int',
        'actor_location' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\AuditLogEventActorLocation',
        'data' => 'array<string,mixed>',
        'org_id' => 'int',
        'user_id' => 'int',
        'business_id' => 'int',
        'blocked_user' => 'string',
        'business' => 'string',
        'config' => 'object[]',
        'config_was' => 'object[]',
        'content_type' => 'string',
        'operation_type' => 'string',
        'created_at' => 'int',
        'deploy_key_fingerprint' => 'string',
        '_document_id' => 'string',
        'emoji' => 'string',
        'events' => 'object[]',
        'events_were' => 'object[]',
        'explanation' => 'string',
        'fingerprint' => 'string',
        'hook_id' => 'int',
        'limited_availability' => 'bool',
        'message' => 'string',
        'name' => 'string',
        'old_user' => 'string',
        'openssh_public_key' => 'string',
        'org' => 'string',
        'previous_visibility' => 'string',
        'read_only' => 'bool',
        'repo' => 'string',
        'repository' => 'string',
        'repository_public' => 'bool',
        'target_login' => 'string',
        'team' => 'string',
        'transport_protocol' => 'int',
        'transport_protocol_name' => 'string',
        'user' => 'string',
        'visibility' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'at_timestamp' => null,
        'action' => null,
        'active' => null,
        'active_was' => null,
        'actor' => null,
        'actor_id' => null,
        'actor_location' => null,
        'data' => null,
        'org_id' => null,
        'user_id' => null,
        'business_id' => null,
        'blocked_user' => null,
        'business' => null,
        'config' => null,
        'config_was' => null,
        'content_type' => null,
        'operation_type' => null,
        'created_at' => null,
        'deploy_key_fingerprint' => null,
        '_document_id' => null,
        'emoji' => null,
        'events' => null,
        'events_were' => null,
        'explanation' => null,
        'fingerprint' => null,
        'hook_id' => null,
        'limited_availability' => null,
        'message' => null,
        'name' => null,
        'old_user' => null,
        'openssh_public_key' => null,
        'org' => null,
        'previous_visibility' => null,
        'read_only' => null,
        'repo' => null,
        'repository' => null,
        'repository_public' => null,
        'target_login' => null,
        'team' => null,
        'transport_protocol' => null,
        'transport_protocol_name' => null,
        'user' => null,
        'visibility' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'at_timestamp' => false,
        'action' => false,
        'active' => false,
        'active_was' => false,
        'actor' => false,
        'actor_id' => false,
        'actor_location' => false,
        'data' => false,
        'org_id' => false,
        'user_id' => false,
        'business_id' => false,
        'blocked_user' => false,
        'business' => false,
        'config' => false,
        'config_was' => false,
        'content_type' => false,
        'operation_type' => false,
        'created_at' => false,
        'deploy_key_fingerprint' => false,
        '_document_id' => false,
        'emoji' => false,
        'events' => false,
        'events_were' => false,
        'explanation' => false,
        'fingerprint' => false,
        'hook_id' => false,
        'limited_availability' => false,
        'message' => false,
        'name' => false,
        'old_user' => false,
        'openssh_public_key' => false,
        'org' => false,
        'previous_visibility' => false,
        'read_only' => false,
        'repo' => false,
        'repository' => false,
        'repository_public' => false,
        'target_login' => false,
        'team' => false,
        'transport_protocol' => false,
        'transport_protocol_name' => false,
        'user' => false,
        'visibility' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'at_timestamp' => '@timestamp',
        'action' => 'action',
        'active' => 'active',
        'active_was' => 'active_was',
        'actor' => 'actor',
        'actor_id' => 'actor_id',
        'actor_location' => 'actor_location',
        'data' => 'data',
        'org_id' => 'org_id',
        'user_id' => 'user_id',
        'business_id' => 'business_id',
        'blocked_user' => 'blocked_user',
        'business' => 'business',
        'config' => 'config',
        'config_was' => 'config_was',
        'content_type' => 'content_type',
        'operation_type' => 'operation_type',
        'created_at' => 'created_at',
        'deploy_key_fingerprint' => 'deploy_key_fingerprint',
        '_document_id' => '_document_id',
        'emoji' => 'emoji',
        'events' => 'events',
        'events_were' => 'events_were',
        'explanation' => 'explanation',
        'fingerprint' => 'fingerprint',
        'hook_id' => 'hook_id',
        'limited_availability' => 'limited_availability',
        'message' => 'message',
        'name' => 'name',
        'old_user' => 'old_user',
        'openssh_public_key' => 'openssh_public_key',
        'org' => 'org',
        'previous_visibility' => 'previous_visibility',
        'read_only' => 'read_only',
        'repo' => 'repo',
        'repository' => 'repository',
        'repository_public' => 'repository_public',
        'target_login' => 'target_login',
        'team' => 'team',
        'transport_protocol' => 'transport_protocol',
        'transport_protocol_name' => 'transport_protocol_name',
        'user' => 'user',
        'visibility' => 'visibility'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'at_timestamp' => 'setAtTimestamp',
        'action' => 'setAction',
        'active' => 'setActive',
        'active_was' => 'setActiveWas',
        'actor' => 'setActor',
        'actor_id' => 'setActorId',
        'actor_location' => 'setActorLocation',
        'data' => 'setData',
        'org_id' => 'setOrgId',
        'user_id' => 'setUserId',
        'business_id' => 'setBusinessId',
        'blocked_user' => 'setBlockedUser',
        'business' => 'setBusiness',
        'config' => 'setConfig',
        'config_was' => 'setConfigWas',
        'content_type' => 'setContentType',
        'operation_type' => 'setOperationType',
        'created_at' => 'setCreatedAt',
        'deploy_key_fingerprint' => 'setDeployKeyFingerprint',
        '_document_id' => 'setDocumentId',
        'emoji' => 'setEmoji',
        'events' => 'setEvents',
        'events_were' => 'setEventsWere',
        'explanation' => 'setExplanation',
        'fingerprint' => 'setFingerprint',
        'hook_id' => 'setHookId',
        'limited_availability' => 'setLimitedAvailability',
        'message' => 'setMessage',
        'name' => 'setName',
        'old_user' => 'setOldUser',
        'openssh_public_key' => 'setOpensshPublicKey',
        'org' => 'setOrg',
        'previous_visibility' => 'setPreviousVisibility',
        'read_only' => 'setReadOnly',
        'repo' => 'setRepo',
        'repository' => 'setRepository',
        'repository_public' => 'setRepositoryPublic',
        'target_login' => 'setTargetLogin',
        'team' => 'setTeam',
        'transport_protocol' => 'setTransportProtocol',
        'transport_protocol_name' => 'setTransportProtocolName',
        'user' => 'setUser',
        'visibility' => 'setVisibility'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'at_timestamp' => 'getAtTimestamp',
        'action' => 'getAction',
        'active' => 'getActive',
        'active_was' => 'getActiveWas',
        'actor' => 'getActor',
        'actor_id' => 'getActorId',
        'actor_location' => 'getActorLocation',
        'data' => 'getData',
        'org_id' => 'getOrgId',
        'user_id' => 'getUserId',
        'business_id' => 'getBusinessId',
        'blocked_user' => 'getBlockedUser',
        'business' => 'getBusiness',
        'config' => 'getConfig',
        'config_was' => 'getConfigWas',
        'content_type' => 'getContentType',
        'operation_type' => 'getOperationType',
        'created_at' => 'getCreatedAt',
        'deploy_key_fingerprint' => 'getDeployKeyFingerprint',
        '_document_id' => 'getDocumentId',
        'emoji' => 'getEmoji',
        'events' => 'getEvents',
        'events_were' => 'getEventsWere',
        'explanation' => 'getExplanation',
        'fingerprint' => 'getFingerprint',
        'hook_id' => 'getHookId',
        'limited_availability' => 'getLimitedAvailability',
        'message' => 'getMessage',
        'name' => 'getName',
        'old_user' => 'getOldUser',
        'openssh_public_key' => 'getOpensshPublicKey',
        'org' => 'getOrg',
        'previous_visibility' => 'getPreviousVisibility',
        'read_only' => 'getReadOnly',
        'repo' => 'getRepo',
        'repository' => 'getRepository',
        'repository_public' => 'getRepositoryPublic',
        'target_login' => 'getTargetLogin',
        'team' => 'getTeam',
        'transport_protocol' => 'getTransportProtocol',
        'transport_protocol_name' => 'getTransportProtocolName',
        'user' => 'getUser',
        'visibility' => 'getVisibility'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('at_timestamp', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('active_was', $data ?? [], null);
        $this->setIfExists('actor', $data ?? [], null);
        $this->setIfExists('actor_id', $data ?? [], null);
        $this->setIfExists('actor_location', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('org_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('business_id', $data ?? [], null);
        $this->setIfExists('blocked_user', $data ?? [], null);
        $this->setIfExists('business', $data ?? [], null);
        $this->setIfExists('config', $data ?? [], null);
        $this->setIfExists('config_was', $data ?? [], null);
        $this->setIfExists('content_type', $data ?? [], null);
        $this->setIfExists('operation_type', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('deploy_key_fingerprint', $data ?? [], null);
        $this->setIfExists('_document_id', $data ?? [], null);
        $this->setIfExists('emoji', $data ?? [], null);
        $this->setIfExists('events', $data ?? [], null);
        $this->setIfExists('events_were', $data ?? [], null);
        $this->setIfExists('explanation', $data ?? [], null);
        $this->setIfExists('fingerprint', $data ?? [], null);
        $this->setIfExists('hook_id', $data ?? [], null);
        $this->setIfExists('limited_availability', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('old_user', $data ?? [], null);
        $this->setIfExists('openssh_public_key', $data ?? [], null);
        $this->setIfExists('org', $data ?? [], null);
        $this->setIfExists('previous_visibility', $data ?? [], null);
        $this->setIfExists('read_only', $data ?? [], null);
        $this->setIfExists('repo', $data ?? [], null);
        $this->setIfExists('repository', $data ?? [], null);
        $this->setIfExists('repository_public', $data ?? [], null);
        $this->setIfExists('target_login', $data ?? [], null);
        $this->setIfExists('team', $data ?? [], null);
        $this->setIfExists('transport_protocol', $data ?? [], null);
        $this->setIfExists('transport_protocol_name', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('visibility', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets at_timestamp
     *
     * @return int|null
     */
    public function getAtTimestamp()
    {
        return $this->container['at_timestamp'];
    }

    /**
     * Sets at_timestamp
     *
     * @param int|null $at_timestamp The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
     *
     * @return self
     */
    public function setAtTimestamp($at_timestamp)
    {
        if (is_null($at_timestamp)) {
            throw new \InvalidArgumentException('non-nullable at_timestamp cannot be null');
        }
        $this->container['at_timestamp'] = $at_timestamp;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action The name of the action that was performed, for example `user.login` or `repo.create`.
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets active_was
     *
     * @return bool|null
     */
    public function getActiveWas()
    {
        return $this->container['active_was'];
    }

    /**
     * Sets active_was
     *
     * @param bool|null $active_was active_was
     *
     * @return self
     */
    public function setActiveWas($active_was)
    {
        if (is_null($active_was)) {
            throw new \InvalidArgumentException('non-nullable active_was cannot be null');
        }
        $this->container['active_was'] = $active_was;

        return $this;
    }

    /**
     * Gets actor
     *
     * @return string|null
     */
    public function getActor()
    {
        return $this->container['actor'];
    }

    /**
     * Sets actor
     *
     * @param string|null $actor The actor who performed the action.
     *
     * @return self
     */
    public function setActor($actor)
    {
        if (is_null($actor)) {
            throw new \InvalidArgumentException('non-nullable actor cannot be null');
        }
        $this->container['actor'] = $actor;

        return $this;
    }

    /**
     * Gets actor_id
     *
     * @return int|null
     */
    public function getActorId()
    {
        return $this->container['actor_id'];
    }

    /**
     * Sets actor_id
     *
     * @param int|null $actor_id The id of the actor who performed the action.
     *
     * @return self
     */
    public function setActorId($actor_id)
    {
        if (is_null($actor_id)) {
            throw new \InvalidArgumentException('non-nullable actor_id cannot be null');
        }
        $this->container['actor_id'] = $actor_id;

        return $this;
    }

    /**
     * Gets actor_location
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\AuditLogEventActorLocation|null
     */
    public function getActorLocation()
    {
        return $this->container['actor_location'];
    }

    /**
     * Sets actor_location
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\AuditLogEventActorLocation|null $actor_location actor_location
     *
     * @return self
     */
    public function setActorLocation($actor_location)
    {
        if (is_null($actor_location)) {
            throw new \InvalidArgumentException('non-nullable actor_location cannot be null');
        }
        $this->container['actor_location'] = $actor_location;

        return $this;
    }

    /**
     * Gets data
     *
     * @return array<string,mixed>|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param array<string,mixed>|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            throw new \InvalidArgumentException('non-nullable data cannot be null');
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets org_id
     *
     * @return int|null
     */
    public function getOrgId()
    {
        return $this->container['org_id'];
    }

    /**
     * Sets org_id
     *
     * @param int|null $org_id org_id
     *
     * @return self
     */
    public function setOrgId($org_id)
    {
        if (is_null($org_id)) {
            throw new \InvalidArgumentException('non-nullable org_id cannot be null');
        }
        $this->container['org_id'] = $org_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets business_id
     *
     * @return int|null
     */
    public function getBusinessId()
    {
        return $this->container['business_id'];
    }

    /**
     * Sets business_id
     *
     * @param int|null $business_id business_id
     *
     * @return self
     */
    public function setBusinessId($business_id)
    {
        if (is_null($business_id)) {
            throw new \InvalidArgumentException('non-nullable business_id cannot be null');
        }
        $this->container['business_id'] = $business_id;

        return $this;
    }

    /**
     * Gets blocked_user
     *
     * @return string|null
     */
    public function getBlockedUser()
    {
        return $this->container['blocked_user'];
    }

    /**
     * Sets blocked_user
     *
     * @param string|null $blocked_user The username of the account being blocked.
     *
     * @return self
     */
    public function setBlockedUser($blocked_user)
    {
        if (is_null($blocked_user)) {
            throw new \InvalidArgumentException('non-nullable blocked_user cannot be null');
        }
        $this->container['blocked_user'] = $blocked_user;

        return $this;
    }

    /**
     * Gets business
     *
     * @return string|null
     */
    public function getBusiness()
    {
        return $this->container['business'];
    }

    /**
     * Sets business
     *
     * @param string|null $business business
     *
     * @return self
     */
    public function setBusiness($business)
    {
        if (is_null($business)) {
            throw new \InvalidArgumentException('non-nullable business cannot be null');
        }
        $this->container['business'] = $business;

        return $this;
    }

    /**
     * Gets config
     *
     * @return object[]|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object[]|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        if (is_null($config)) {
            throw new \InvalidArgumentException('non-nullable config cannot be null');
        }
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets config_was
     *
     * @return object[]|null
     */
    public function getConfigWas()
    {
        return $this->container['config_was'];
    }

    /**
     * Sets config_was
     *
     * @param object[]|null $config_was config_was
     *
     * @return self
     */
    public function setConfigWas($config_was)
    {
        if (is_null($config_was)) {
            throw new \InvalidArgumentException('non-nullable config_was cannot be null');
        }
        $this->container['config_was'] = $config_was;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string|null
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string|null $content_type content_type
     *
     * @return self
     */
    public function setContentType($content_type)
    {
        if (is_null($content_type)) {
            throw new \InvalidArgumentException('non-nullable content_type cannot be null');
        }
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets operation_type
     *
     * @return string|null
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     *
     * @param string|null $operation_type operation_type
     *
     * @return self
     */
    public function setOperationType($operation_type)
    {
        if (is_null($operation_type)) {
            throw new \InvalidArgumentException('non-nullable operation_type cannot be null');
        }
        $this->container['operation_type'] = $operation_type;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int|null $created_at The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets deploy_key_fingerprint
     *
     * @return string|null
     */
    public function getDeployKeyFingerprint()
    {
        return $this->container['deploy_key_fingerprint'];
    }

    /**
     * Sets deploy_key_fingerprint
     *
     * @param string|null $deploy_key_fingerprint deploy_key_fingerprint
     *
     * @return self
     */
    public function setDeployKeyFingerprint($deploy_key_fingerprint)
    {
        if (is_null($deploy_key_fingerprint)) {
            throw new \InvalidArgumentException('non-nullable deploy_key_fingerprint cannot be null');
        }
        $this->container['deploy_key_fingerprint'] = $deploy_key_fingerprint;

        return $this;
    }

    /**
     * Gets _document_id
     *
     * @return string|null
     */
    public function getDocumentId()
    {
        return $this->container['_document_id'];
    }

    /**
     * Sets _document_id
     *
     * @param string|null $_document_id A unique identifier for an audit event.
     *
     * @return self
     */
    public function setDocumentId($_document_id)
    {
        if (is_null($_document_id)) {
            throw new \InvalidArgumentException('non-nullable _document_id cannot be null');
        }
        $this->container['_document_id'] = $_document_id;

        return $this;
    }

    /**
     * Gets emoji
     *
     * @return string|null
     */
    public function getEmoji()
    {
        return $this->container['emoji'];
    }

    /**
     * Sets emoji
     *
     * @param string|null $emoji emoji
     *
     * @return self
     */
    public function setEmoji($emoji)
    {
        if (is_null($emoji)) {
            throw new \InvalidArgumentException('non-nullable emoji cannot be null');
        }
        $this->container['emoji'] = $emoji;

        return $this;
    }

    /**
     * Gets events
     *
     * @return object[]|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param object[]|null $events events
     *
     * @return self
     */
    public function setEvents($events)
    {
        if (is_null($events)) {
            throw new \InvalidArgumentException('non-nullable events cannot be null');
        }
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets events_were
     *
     * @return object[]|null
     */
    public function getEventsWere()
    {
        return $this->container['events_were'];
    }

    /**
     * Sets events_were
     *
     * @param object[]|null $events_were events_were
     *
     * @return self
     */
    public function setEventsWere($events_were)
    {
        if (is_null($events_were)) {
            throw new \InvalidArgumentException('non-nullable events_were cannot be null');
        }
        $this->container['events_were'] = $events_were;

        return $this;
    }

    /**
     * Gets explanation
     *
     * @return string|null
     */
    public function getExplanation()
    {
        return $this->container['explanation'];
    }

    /**
     * Sets explanation
     *
     * @param string|null $explanation explanation
     *
     * @return self
     */
    public function setExplanation($explanation)
    {
        if (is_null($explanation)) {
            throw new \InvalidArgumentException('non-nullable explanation cannot be null');
        }
        $this->container['explanation'] = $explanation;

        return $this;
    }

    /**
     * Gets fingerprint
     *
     * @return string|null
     */
    public function getFingerprint()
    {
        return $this->container['fingerprint'];
    }

    /**
     * Sets fingerprint
     *
     * @param string|null $fingerprint fingerprint
     *
     * @return self
     */
    public function setFingerprint($fingerprint)
    {
        if (is_null($fingerprint)) {
            throw new \InvalidArgumentException('non-nullable fingerprint cannot be null');
        }
        $this->container['fingerprint'] = $fingerprint;

        return $this;
    }

    /**
     * Gets hook_id
     *
     * @return int|null
     */
    public function getHookId()
    {
        return $this->container['hook_id'];
    }

    /**
     * Sets hook_id
     *
     * @param int|null $hook_id hook_id
     *
     * @return self
     */
    public function setHookId($hook_id)
    {
        if (is_null($hook_id)) {
            throw new \InvalidArgumentException('non-nullable hook_id cannot be null');
        }
        $this->container['hook_id'] = $hook_id;

        return $this;
    }

    /**
     * Gets limited_availability
     *
     * @return bool|null
     */
    public function getLimitedAvailability()
    {
        return $this->container['limited_availability'];
    }

    /**
     * Sets limited_availability
     *
     * @param bool|null $limited_availability limited_availability
     *
     * @return self
     */
    public function setLimitedAvailability($limited_availability)
    {
        if (is_null($limited_availability)) {
            throw new \InvalidArgumentException('non-nullable limited_availability cannot be null');
        }
        $this->container['limited_availability'] = $limited_availability;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets old_user
     *
     * @return string|null
     */
    public function getOldUser()
    {
        return $this->container['old_user'];
    }

    /**
     * Sets old_user
     *
     * @param string|null $old_user old_user
     *
     * @return self
     */
    public function setOldUser($old_user)
    {
        if (is_null($old_user)) {
            throw new \InvalidArgumentException('non-nullable old_user cannot be null');
        }
        $this->container['old_user'] = $old_user;

        return $this;
    }

    /**
     * Gets openssh_public_key
     *
     * @return string|null
     */
    public function getOpensshPublicKey()
    {
        return $this->container['openssh_public_key'];
    }

    /**
     * Sets openssh_public_key
     *
     * @param string|null $openssh_public_key openssh_public_key
     *
     * @return self
     */
    public function setOpensshPublicKey($openssh_public_key)
    {
        if (is_null($openssh_public_key)) {
            throw new \InvalidArgumentException('non-nullable openssh_public_key cannot be null');
        }
        $this->container['openssh_public_key'] = $openssh_public_key;

        return $this;
    }

    /**
     * Gets org
     *
     * @return string|null
     */
    public function getOrg()
    {
        return $this->container['org'];
    }

    /**
     * Sets org
     *
     * @param string|null $org org
     *
     * @return self
     */
    public function setOrg($org)
    {
        if (is_null($org)) {
            throw new \InvalidArgumentException('non-nullable org cannot be null');
        }
        $this->container['org'] = $org;

        return $this;
    }

    /**
     * Gets previous_visibility
     *
     * @return string|null
     */
    public function getPreviousVisibility()
    {
        return $this->container['previous_visibility'];
    }

    /**
     * Sets previous_visibility
     *
     * @param string|null $previous_visibility previous_visibility
     *
     * @return self
     */
    public function setPreviousVisibility($previous_visibility)
    {
        if (is_null($previous_visibility)) {
            throw new \InvalidArgumentException('non-nullable previous_visibility cannot be null');
        }
        $this->container['previous_visibility'] = $previous_visibility;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool|null
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool|null $read_only read_only
     *
     * @return self
     */
    public function setReadOnly($read_only)
    {
        if (is_null($read_only)) {
            throw new \InvalidArgumentException('non-nullable read_only cannot be null');
        }
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets repo
     *
     * @return string|null
     */
    public function getRepo()
    {
        return $this->container['repo'];
    }

    /**
     * Sets repo
     *
     * @param string|null $repo The name of the repository.
     *
     * @return self
     */
    public function setRepo($repo)
    {
        if (is_null($repo)) {
            throw new \InvalidArgumentException('non-nullable repo cannot be null');
        }
        $this->container['repo'] = $repo;

        return $this;
    }

    /**
     * Gets repository
     *
     * @return string|null
     */
    public function getRepository()
    {
        return $this->container['repository'];
    }

    /**
     * Sets repository
     *
     * @param string|null $repository The name of the repository.
     *
     * @return self
     */
    public function setRepository($repository)
    {
        if (is_null($repository)) {
            throw new \InvalidArgumentException('non-nullable repository cannot be null');
        }
        $this->container['repository'] = $repository;

        return $this;
    }

    /**
     * Gets repository_public
     *
     * @return bool|null
     */
    public function getRepositoryPublic()
    {
        return $this->container['repository_public'];
    }

    /**
     * Sets repository_public
     *
     * @param bool|null $repository_public repository_public
     *
     * @return self
     */
    public function setRepositoryPublic($repository_public)
    {
        if (is_null($repository_public)) {
            throw new \InvalidArgumentException('non-nullable repository_public cannot be null');
        }
        $this->container['repository_public'] = $repository_public;

        return $this;
    }

    /**
     * Gets target_login
     *
     * @return string|null
     */
    public function getTargetLogin()
    {
        return $this->container['target_login'];
    }

    /**
     * Sets target_login
     *
     * @param string|null $target_login target_login
     *
     * @return self
     */
    public function setTargetLogin($target_login)
    {
        if (is_null($target_login)) {
            throw new \InvalidArgumentException('non-nullable target_login cannot be null');
        }
        $this->container['target_login'] = $target_login;

        return $this;
    }

    /**
     * Gets team
     *
     * @return string|null
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param string|null $team team
     *
     * @return self
     */
    public function setTeam($team)
    {
        if (is_null($team)) {
            throw new \InvalidArgumentException('non-nullable team cannot be null');
        }
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets transport_protocol
     *
     * @return int|null
     */
    public function getTransportProtocol()
    {
        return $this->container['transport_protocol'];
    }

    /**
     * Sets transport_protocol
     *
     * @param int|null $transport_protocol The type of protocol (for example, HTTP or SSH) used to transfer Git data.
     *
     * @return self
     */
    public function setTransportProtocol($transport_protocol)
    {
        if (is_null($transport_protocol)) {
            throw new \InvalidArgumentException('non-nullable transport_protocol cannot be null');
        }
        $this->container['transport_protocol'] = $transport_protocol;

        return $this;
    }

    /**
     * Gets transport_protocol_name
     *
     * @return string|null
     */
    public function getTransportProtocolName()
    {
        return $this->container['transport_protocol_name'];
    }

    /**
     * Sets transport_protocol_name
     *
     * @param string|null $transport_protocol_name A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
     *
     * @return self
     */
    public function setTransportProtocolName($transport_protocol_name)
    {
        if (is_null($transport_protocol_name)) {
            throw new \InvalidArgumentException('non-nullable transport_protocol_name cannot be null');
        }
        $this->container['transport_protocol_name'] = $transport_protocol_name;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user The user that was affected by the action performed (if available).
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility The repository visibility, for example `public` or `private`.
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        if (is_null($visibility)) {
            throw new \InvalidArgumentException('non-nullable visibility cannot be null');
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


