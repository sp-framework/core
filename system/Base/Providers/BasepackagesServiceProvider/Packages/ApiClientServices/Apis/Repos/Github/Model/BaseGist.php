<?php
/**
 * BaseGist
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * BaseGist Class Doc Comment
 *
 * @category Class
 * @description Base Gist
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BaseGist implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'base-gist';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'url' => 'string',
        'forks_url' => 'string',
        'commits_url' => 'string',
        'id' => 'string',
        'node_id' => 'string',
        'git_pull_url' => 'string',
        'git_push_url' => 'string',
        'html_url' => 'string',
        'files' => 'array<string,\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BaseGistFilesValue>',
        'public' => 'bool',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'description' => 'string',
        'comments' => 'int',
        'user' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableSimpleUser',
        'comments_url' => 'string',
        'owner' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser',
        'truncated' => 'bool',
        'forks' => 'mixed[]',
        'history' => 'mixed[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'url' => 'uri',
        'forks_url' => 'uri',
        'commits_url' => 'uri',
        'id' => null,
        'node_id' => null,
        'git_pull_url' => 'uri',
        'git_push_url' => 'uri',
        'html_url' => 'uri',
        'files' => null,
        'public' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'description' => null,
        'comments' => null,
        'user' => null,
        'comments_url' => 'uri',
        'owner' => null,
        'truncated' => null,
        'forks' => null,
        'history' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'url' => false,
        'forks_url' => false,
        'commits_url' => false,
        'id' => false,
        'node_id' => false,
        'git_pull_url' => false,
        'git_push_url' => false,
        'html_url' => false,
        'files' => false,
        'public' => false,
        'created_at' => false,
        'updated_at' => false,
        'description' => true,
        'comments' => false,
        'user' => true,
        'comments_url' => false,
        'owner' => false,
        'truncated' => false,
        'forks' => false,
        'history' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'forks_url' => 'forks_url',
        'commits_url' => 'commits_url',
        'id' => 'id',
        'node_id' => 'node_id',
        'git_pull_url' => 'git_pull_url',
        'git_push_url' => 'git_push_url',
        'html_url' => 'html_url',
        'files' => 'files',
        'public' => 'public',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'description' => 'description',
        'comments' => 'comments',
        'user' => 'user',
        'comments_url' => 'comments_url',
        'owner' => 'owner',
        'truncated' => 'truncated',
        'forks' => 'forks',
        'history' => 'history'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'forks_url' => 'setForksUrl',
        'commits_url' => 'setCommitsUrl',
        'id' => 'setId',
        'node_id' => 'setNodeId',
        'git_pull_url' => 'setGitPullUrl',
        'git_push_url' => 'setGitPushUrl',
        'html_url' => 'setHtmlUrl',
        'files' => 'setFiles',
        'public' => 'setPublic',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'description' => 'setDescription',
        'comments' => 'setComments',
        'user' => 'setUser',
        'comments_url' => 'setCommentsUrl',
        'owner' => 'setOwner',
        'truncated' => 'setTruncated',
        'forks' => 'setForks',
        'history' => 'setHistory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'forks_url' => 'getForksUrl',
        'commits_url' => 'getCommitsUrl',
        'id' => 'getId',
        'node_id' => 'getNodeId',
        'git_pull_url' => 'getGitPullUrl',
        'git_push_url' => 'getGitPushUrl',
        'html_url' => 'getHtmlUrl',
        'files' => 'getFiles',
        'public' => 'getPublic',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'description' => 'getDescription',
        'comments' => 'getComments',
        'user' => 'getUser',
        'comments_url' => 'getCommentsUrl',
        'owner' => 'getOwner',
        'truncated' => 'getTruncated',
        'forks' => 'getForks',
        'history' => 'getHistory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('forks_url', $data ?? [], null);
        $this->setIfExists('commits_url', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('git_pull_url', $data ?? [], null);
        $this->setIfExists('git_push_url', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('public', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('comments_url', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('truncated', $data ?? [], null);
        $this->setIfExists('forks', $data ?? [], null);
        $this->setIfExists('history', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['forks_url'] === null) {
            $invalidProperties[] = "'forks_url' can't be null";
        }
        if ($this->container['commits_url'] === null) {
            $invalidProperties[] = "'commits_url' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['node_id'] === null) {
            $invalidProperties[] = "'node_id' can't be null";
        }
        if ($this->container['git_pull_url'] === null) {
            $invalidProperties[] = "'git_pull_url' can't be null";
        }
        if ($this->container['git_push_url'] === null) {
            $invalidProperties[] = "'git_push_url' can't be null";
        }
        if ($this->container['html_url'] === null) {
            $invalidProperties[] = "'html_url' can't be null";
        }
        if ($this->container['files'] === null) {
            $invalidProperties[] = "'files' can't be null";
        }
        if ($this->container['public'] === null) {
            $invalidProperties[] = "'public' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['comments'] === null) {
            $invalidProperties[] = "'comments' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['comments_url'] === null) {
            $invalidProperties[] = "'comments_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets forks_url
     *
     * @return string
     */
    public function getForksUrl()
    {
        return $this->container['forks_url'];
    }

    /**
     * Sets forks_url
     *
     * @param string $forks_url forks_url
     *
     * @return self
     */
    public function setForksUrl($forks_url)
    {
        if (is_null($forks_url)) {
            throw new \InvalidArgumentException('non-nullable forks_url cannot be null');
        }
        $this->container['forks_url'] = $forks_url;

        return $this;
    }

    /**
     * Gets commits_url
     *
     * @return string
     */
    public function getCommitsUrl()
    {
        return $this->container['commits_url'];
    }

    /**
     * Sets commits_url
     *
     * @param string $commits_url commits_url
     *
     * @return self
     */
    public function setCommitsUrl($commits_url)
    {
        if (is_null($commits_url)) {
            throw new \InvalidArgumentException('non-nullable commits_url cannot be null');
        }
        $this->container['commits_url'] = $commits_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets git_pull_url
     *
     * @return string
     */
    public function getGitPullUrl()
    {
        return $this->container['git_pull_url'];
    }

    /**
     * Sets git_pull_url
     *
     * @param string $git_pull_url git_pull_url
     *
     * @return self
     */
    public function setGitPullUrl($git_pull_url)
    {
        if (is_null($git_pull_url)) {
            throw new \InvalidArgumentException('non-nullable git_pull_url cannot be null');
        }
        $this->container['git_pull_url'] = $git_pull_url;

        return $this;
    }

    /**
     * Gets git_push_url
     *
     * @return string
     */
    public function getGitPushUrl()
    {
        return $this->container['git_push_url'];
    }

    /**
     * Sets git_push_url
     *
     * @param string $git_push_url git_push_url
     *
     * @return self
     */
    public function setGitPushUrl($git_push_url)
    {
        if (is_null($git_push_url)) {
            throw new \InvalidArgumentException('non-nullable git_push_url cannot be null');
        }
        $this->container['git_push_url'] = $git_push_url;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets files
     *
     * @return array<string,\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BaseGistFilesValue>
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param array<string,\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\BaseGistFilesValue> $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets public
     *
     * @return bool
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool $public public
     *
     * @return self
     */
    public function setPublic($public)
    {
        if (is_null($public)) {
            throw new \InvalidArgumentException('non-nullable public cannot be null');
        }
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return int
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param int $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableSimpleUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableSimpleUser $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets comments_url
     *
     * @return string
     */
    public function getCommentsUrl()
    {
        return $this->container['comments_url'];
    }

    /**
     * Sets comments_url
     *
     * @param string $comments_url comments_url
     *
     * @return self
     */
    public function setCommentsUrl($comments_url)
    {
        if (is_null($comments_url)) {
            throw new \InvalidArgumentException('non-nullable comments_url cannot be null');
        }
        $this->container['comments_url'] = $comments_url;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets truncated
     *
     * @return bool|null
     */
    public function getTruncated()
    {
        return $this->container['truncated'];
    }

    /**
     * Sets truncated
     *
     * @param bool|null $truncated truncated
     *
     * @return self
     */
    public function setTruncated($truncated)
    {
        if (is_null($truncated)) {
            throw new \InvalidArgumentException('non-nullable truncated cannot be null');
        }
        $this->container['truncated'] = $truncated;

        return $this;
    }

    /**
     * Gets forks
     *
     * @return mixed[]|null
     */
    public function getForks()
    {
        return $this->container['forks'];
    }

    /**
     * Sets forks
     *
     * @param mixed[]|null $forks forks
     *
     * @return self
     */
    public function setForks($forks)
    {
        if (is_null($forks)) {
            throw new \InvalidArgumentException('non-nullable forks cannot be null');
        }
        $this->container['forks'] = $forks;

        return $this;
    }

    /**
     * Gets history
     *
     * @return mixed[]|null
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param mixed[]|null $history history
     *
     * @return self
     */
    public function setHistory($history)
    {
        if (is_null($history)) {
            throw new \InvalidArgumentException('non-nullable history cannot be null');
        }
        $this->container['history'] = $history;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


