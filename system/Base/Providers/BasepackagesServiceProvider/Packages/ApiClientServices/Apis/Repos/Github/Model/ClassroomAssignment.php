<?php
/**
 * ClassroomAssignment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * ClassroomAssignment Class Doc Comment
 *
 * @category Class
 * @description A GitHub Classroom assignment
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClassroomAssignment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'classroom-assignment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'public_repo' => 'bool',
        'title' => 'string',
        'type' => 'string',
        'invite_link' => 'string',
        'invitations_enabled' => 'bool',
        'slug' => 'string',
        'students_are_repo_admins' => 'bool',
        'feedback_pull_requests_enabled' => 'bool',
        'max_teams' => 'int',
        'max_members' => 'int',
        'editor' => 'string',
        'accepted' => 'int',
        'submitted' => 'int',
        'passing' => 'int',
        'language' => 'string',
        'deadline' => '\DateTime',
        'starter_code_repository' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleClassroomRepository',
        'classroom' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Classroom'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'public_repo' => null,
        'title' => null,
        'type' => null,
        'invite_link' => null,
        'invitations_enabled' => null,
        'slug' => null,
        'students_are_repo_admins' => null,
        'feedback_pull_requests_enabled' => null,
        'max_teams' => null,
        'max_members' => null,
        'editor' => null,
        'accepted' => null,
        'submitted' => null,
        'passing' => null,
        'language' => null,
        'deadline' => 'date-time',
        'starter_code_repository' => null,
        'classroom' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'public_repo' => false,
        'title' => false,
        'type' => false,
        'invite_link' => false,
        'invitations_enabled' => false,
        'slug' => false,
        'students_are_repo_admins' => false,
        'feedback_pull_requests_enabled' => false,
        'max_teams' => true,
        'max_members' => true,
        'editor' => false,
        'accepted' => false,
        'submitted' => false,
        'passing' => false,
        'language' => false,
        'deadline' => true,
        'starter_code_repository' => false,
        'classroom' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'public_repo' => 'public_repo',
        'title' => 'title',
        'type' => 'type',
        'invite_link' => 'invite_link',
        'invitations_enabled' => 'invitations_enabled',
        'slug' => 'slug',
        'students_are_repo_admins' => 'students_are_repo_admins',
        'feedback_pull_requests_enabled' => 'feedback_pull_requests_enabled',
        'max_teams' => 'max_teams',
        'max_members' => 'max_members',
        'editor' => 'editor',
        'accepted' => 'accepted',
        'submitted' => 'submitted',
        'passing' => 'passing',
        'language' => 'language',
        'deadline' => 'deadline',
        'starter_code_repository' => 'starter_code_repository',
        'classroom' => 'classroom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'public_repo' => 'setPublicRepo',
        'title' => 'setTitle',
        'type' => 'setType',
        'invite_link' => 'setInviteLink',
        'invitations_enabled' => 'setInvitationsEnabled',
        'slug' => 'setSlug',
        'students_are_repo_admins' => 'setStudentsAreRepoAdmins',
        'feedback_pull_requests_enabled' => 'setFeedbackPullRequestsEnabled',
        'max_teams' => 'setMaxTeams',
        'max_members' => 'setMaxMembers',
        'editor' => 'setEditor',
        'accepted' => 'setAccepted',
        'submitted' => 'setSubmitted',
        'passing' => 'setPassing',
        'language' => 'setLanguage',
        'deadline' => 'setDeadline',
        'starter_code_repository' => 'setStarterCodeRepository',
        'classroom' => 'setClassroom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'public_repo' => 'getPublicRepo',
        'title' => 'getTitle',
        'type' => 'getType',
        'invite_link' => 'getInviteLink',
        'invitations_enabled' => 'getInvitationsEnabled',
        'slug' => 'getSlug',
        'students_are_repo_admins' => 'getStudentsAreRepoAdmins',
        'feedback_pull_requests_enabled' => 'getFeedbackPullRequestsEnabled',
        'max_teams' => 'getMaxTeams',
        'max_members' => 'getMaxMembers',
        'editor' => 'getEditor',
        'accepted' => 'getAccepted',
        'submitted' => 'getSubmitted',
        'passing' => 'getPassing',
        'language' => 'getLanguage',
        'deadline' => 'getDeadline',
        'starter_code_repository' => 'getStarterCodeRepository',
        'classroom' => 'getClassroom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_INDIVIDUAL = 'individual';
    public const TYPE_GROUP = 'group';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_INDIVIDUAL,
            self::TYPE_GROUP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('public_repo', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('invite_link', $data ?? [], null);
        $this->setIfExists('invitations_enabled', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('students_are_repo_admins', $data ?? [], null);
        $this->setIfExists('feedback_pull_requests_enabled', $data ?? [], null);
        $this->setIfExists('max_teams', $data ?? [], null);
        $this->setIfExists('max_members', $data ?? [], null);
        $this->setIfExists('editor', $data ?? [], null);
        $this->setIfExists('accepted', $data ?? [], null);
        $this->setIfExists('submitted', $data ?? [], null);
        $this->setIfExists('passing', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
        $this->setIfExists('starter_code_repository', $data ?? [], null);
        $this->setIfExists('classroom', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['public_repo'] === null) {
            $invalidProperties[] = "'public_repo' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['invite_link'] === null) {
            $invalidProperties[] = "'invite_link' can't be null";
        }
        if ($this->container['invitations_enabled'] === null) {
            $invalidProperties[] = "'invitations_enabled' can't be null";
        }
        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ($this->container['students_are_repo_admins'] === null) {
            $invalidProperties[] = "'students_are_repo_admins' can't be null";
        }
        if ($this->container['feedback_pull_requests_enabled'] === null) {
            $invalidProperties[] = "'feedback_pull_requests_enabled' can't be null";
        }
        if ($this->container['max_teams'] === null) {
            $invalidProperties[] = "'max_teams' can't be null";
        }
        if ($this->container['max_members'] === null) {
            $invalidProperties[] = "'max_members' can't be null";
        }
        if ($this->container['editor'] === null) {
            $invalidProperties[] = "'editor' can't be null";
        }
        if ($this->container['accepted'] === null) {
            $invalidProperties[] = "'accepted' can't be null";
        }
        if ($this->container['submitted'] === null) {
            $invalidProperties[] = "'submitted' can't be null";
        }
        if ($this->container['passing'] === null) {
            $invalidProperties[] = "'passing' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ($this->container['deadline'] === null) {
            $invalidProperties[] = "'deadline' can't be null";
        }
        if ($this->container['starter_code_repository'] === null) {
            $invalidProperties[] = "'starter_code_repository' can't be null";
        }
        if ($this->container['classroom'] === null) {
            $invalidProperties[] = "'classroom' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier of the repository.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets public_repo
     *
     * @return bool
     */
    public function getPublicRepo()
    {
        return $this->container['public_repo'];
    }

    /**
     * Sets public_repo
     *
     * @param bool $public_repo Whether an accepted assignment creates a public repository.
     *
     * @return self
     */
    public function setPublicRepo($public_repo)
    {
        if (is_null($public_repo)) {
            throw new \InvalidArgumentException('non-nullable public_repo cannot be null');
        }
        $this->container['public_repo'] = $public_repo;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Assignment title.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Whether it's a group assignment or individual assignment.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets invite_link
     *
     * @return string
     */
    public function getInviteLink()
    {
        return $this->container['invite_link'];
    }

    /**
     * Sets invite_link
     *
     * @param string $invite_link The link that a student can use to accept the assignment.
     *
     * @return self
     */
    public function setInviteLink($invite_link)
    {
        if (is_null($invite_link)) {
            throw new \InvalidArgumentException('non-nullable invite_link cannot be null');
        }
        $this->container['invite_link'] = $invite_link;

        return $this;
    }

    /**
     * Gets invitations_enabled
     *
     * @return bool
     */
    public function getInvitationsEnabled()
    {
        return $this->container['invitations_enabled'];
    }

    /**
     * Sets invitations_enabled
     *
     * @param bool $invitations_enabled Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
     *
     * @return self
     */
    public function setInvitationsEnabled($invitations_enabled)
    {
        if (is_null($invitations_enabled)) {
            throw new \InvalidArgumentException('non-nullable invitations_enabled cannot be null');
        }
        $this->container['invitations_enabled'] = $invitations_enabled;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug Sluggified name of the assignment.
     *
     * @return self
     */
    public function setSlug($slug)
    {
        if (is_null($slug)) {
            throw new \InvalidArgumentException('non-nullable slug cannot be null');
        }
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets students_are_repo_admins
     *
     * @return bool
     */
    public function getStudentsAreRepoAdmins()
    {
        return $this->container['students_are_repo_admins'];
    }

    /**
     * Sets students_are_repo_admins
     *
     * @param bool $students_are_repo_admins Whether students are admins on created repository when a student accepts the assignment.
     *
     * @return self
     */
    public function setStudentsAreRepoAdmins($students_are_repo_admins)
    {
        if (is_null($students_are_repo_admins)) {
            throw new \InvalidArgumentException('non-nullable students_are_repo_admins cannot be null');
        }
        $this->container['students_are_repo_admins'] = $students_are_repo_admins;

        return $this;
    }

    /**
     * Gets feedback_pull_requests_enabled
     *
     * @return bool
     */
    public function getFeedbackPullRequestsEnabled()
    {
        return $this->container['feedback_pull_requests_enabled'];
    }

    /**
     * Sets feedback_pull_requests_enabled
     *
     * @param bool $feedback_pull_requests_enabled Whether feedback pull request will be created when a student accepts the assignment.
     *
     * @return self
     */
    public function setFeedbackPullRequestsEnabled($feedback_pull_requests_enabled)
    {
        if (is_null($feedback_pull_requests_enabled)) {
            throw new \InvalidArgumentException('non-nullable feedback_pull_requests_enabled cannot be null');
        }
        $this->container['feedback_pull_requests_enabled'] = $feedback_pull_requests_enabled;

        return $this;
    }

    /**
     * Gets max_teams
     *
     * @return int
     */
    public function getMaxTeams()
    {
        return $this->container['max_teams'];
    }

    /**
     * Sets max_teams
     *
     * @param int $max_teams The maximum allowable teams for the assignment.
     *
     * @return self
     */
    public function setMaxTeams($max_teams)
    {
        if (is_null($max_teams)) {
            array_push($this->openAPINullablesSetToNull, 'max_teams');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_teams', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_teams'] = $max_teams;

        return $this;
    }

    /**
     * Gets max_members
     *
     * @return int
     */
    public function getMaxMembers()
    {
        return $this->container['max_members'];
    }

    /**
     * Sets max_members
     *
     * @param int $max_members The maximum allowable members per team.
     *
     * @return self
     */
    public function setMaxMembers($max_members)
    {
        if (is_null($max_members)) {
            array_push($this->openAPINullablesSetToNull, 'max_members');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_members', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_members'] = $max_members;

        return $this;
    }

    /**
     * Gets editor
     *
     * @return string
     */
    public function getEditor()
    {
        return $this->container['editor'];
    }

    /**
     * Sets editor
     *
     * @param string $editor The selected editor for the assignment.
     *
     * @return self
     */
    public function setEditor($editor)
    {
        if (is_null($editor)) {
            throw new \InvalidArgumentException('non-nullable editor cannot be null');
        }
        $this->container['editor'] = $editor;

        return $this;
    }

    /**
     * Gets accepted
     *
     * @return int
     */
    public function getAccepted()
    {
        return $this->container['accepted'];
    }

    /**
     * Sets accepted
     *
     * @param int $accepted The number of students that have accepted the assignment.
     *
     * @return self
     */
    public function setAccepted($accepted)
    {
        if (is_null($accepted)) {
            throw new \InvalidArgumentException('non-nullable accepted cannot be null');
        }
        $this->container['accepted'] = $accepted;

        return $this;
    }

    /**
     * Gets submitted
     *
     * @return int
     */
    public function getSubmitted()
    {
        return $this->container['submitted'];
    }

    /**
     * Sets submitted
     *
     * @param int $submitted The number of students that have submitted the assignment.
     *
     * @return self
     */
    public function setSubmitted($submitted)
    {
        if (is_null($submitted)) {
            throw new \InvalidArgumentException('non-nullable submitted cannot be null');
        }
        $this->container['submitted'] = $submitted;

        return $this;
    }

    /**
     * Gets passing
     *
     * @return int
     */
    public function getPassing()
    {
        return $this->container['passing'];
    }

    /**
     * Sets passing
     *
     * @param int $passing The number of students that have passed the assignment.
     *
     * @return self
     */
    public function setPassing($passing)
    {
        if (is_null($passing)) {
            throw new \InvalidArgumentException('non-nullable passing cannot be null');
        }
        $this->container['passing'] = $passing;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The programming language used in the assignment.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime $deadline The time at which the assignment is due.
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            array_push($this->openAPINullablesSetToNull, 'deadline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deadline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets starter_code_repository
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleClassroomRepository
     */
    public function getStarterCodeRepository()
    {
        return $this->container['starter_code_repository'];
    }

    /**
     * Sets starter_code_repository
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleClassroomRepository $starter_code_repository starter_code_repository
     *
     * @return self
     */
    public function setStarterCodeRepository($starter_code_repository)
    {
        if (is_null($starter_code_repository)) {
            throw new \InvalidArgumentException('non-nullable starter_code_repository cannot be null');
        }
        $this->container['starter_code_repository'] = $starter_code_repository;

        return $this;
    }

    /**
     * Gets classroom
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Classroom
     */
    public function getClassroom()
    {
        return $this->container['classroom'];
    }

    /**
     * Sets classroom
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Classroom $classroom classroom
     *
     * @return self
     */
    public function setClassroom($classroom)
    {
        if (is_null($classroom)) {
            throw new \InvalidArgumentException('non-nullable classroom cannot be null');
        }
        $this->container['classroom'] = $classroom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


