<?php
/**
 * ClassroomAssignmentGrade
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * ClassroomAssignmentGrade Class Doc Comment
 *
 * @category Class
 * @description Grade for a student or groups GitHub Classroom assignment
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClassroomAssignmentGrade implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'classroom-assignment-grade';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assignment_name' => 'string',
        'assignment_url' => 'string',
        'starter_code_url' => 'string',
        'github_username' => 'string',
        'roster_identifier' => 'string',
        'student_repository_name' => 'string',
        'student_repository_url' => 'string',
        'submission_timestamp' => 'string',
        'points_awarded' => 'int',
        'points_available' => 'int',
        'group_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assignment_name' => null,
        'assignment_url' => null,
        'starter_code_url' => null,
        'github_username' => null,
        'roster_identifier' => null,
        'student_repository_name' => null,
        'student_repository_url' => null,
        'submission_timestamp' => null,
        'points_awarded' => null,
        'points_available' => null,
        'group_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'assignment_name' => false,
        'assignment_url' => false,
        'starter_code_url' => false,
        'github_username' => false,
        'roster_identifier' => false,
        'student_repository_name' => false,
        'student_repository_url' => false,
        'submission_timestamp' => false,
        'points_awarded' => false,
        'points_available' => false,
        'group_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assignment_name' => 'assignment_name',
        'assignment_url' => 'assignment_url',
        'starter_code_url' => 'starter_code_url',
        'github_username' => 'github_username',
        'roster_identifier' => 'roster_identifier',
        'student_repository_name' => 'student_repository_name',
        'student_repository_url' => 'student_repository_url',
        'submission_timestamp' => 'submission_timestamp',
        'points_awarded' => 'points_awarded',
        'points_available' => 'points_available',
        'group_name' => 'group_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assignment_name' => 'setAssignmentName',
        'assignment_url' => 'setAssignmentUrl',
        'starter_code_url' => 'setStarterCodeUrl',
        'github_username' => 'setGithubUsername',
        'roster_identifier' => 'setRosterIdentifier',
        'student_repository_name' => 'setStudentRepositoryName',
        'student_repository_url' => 'setStudentRepositoryUrl',
        'submission_timestamp' => 'setSubmissionTimestamp',
        'points_awarded' => 'setPointsAwarded',
        'points_available' => 'setPointsAvailable',
        'group_name' => 'setGroupName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assignment_name' => 'getAssignmentName',
        'assignment_url' => 'getAssignmentUrl',
        'starter_code_url' => 'getStarterCodeUrl',
        'github_username' => 'getGithubUsername',
        'roster_identifier' => 'getRosterIdentifier',
        'student_repository_name' => 'getStudentRepositoryName',
        'student_repository_url' => 'getStudentRepositoryUrl',
        'submission_timestamp' => 'getSubmissionTimestamp',
        'points_awarded' => 'getPointsAwarded',
        'points_available' => 'getPointsAvailable',
        'group_name' => 'getGroupName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('assignment_name', $data ?? [], null);
        $this->setIfExists('assignment_url', $data ?? [], null);
        $this->setIfExists('starter_code_url', $data ?? [], null);
        $this->setIfExists('github_username', $data ?? [], null);
        $this->setIfExists('roster_identifier', $data ?? [], null);
        $this->setIfExists('student_repository_name', $data ?? [], null);
        $this->setIfExists('student_repository_url', $data ?? [], null);
        $this->setIfExists('submission_timestamp', $data ?? [], null);
        $this->setIfExists('points_awarded', $data ?? [], null);
        $this->setIfExists('points_available', $data ?? [], null);
        $this->setIfExists('group_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['assignment_name'] === null) {
            $invalidProperties[] = "'assignment_name' can't be null";
        }
        if ($this->container['assignment_url'] === null) {
            $invalidProperties[] = "'assignment_url' can't be null";
        }
        if ($this->container['starter_code_url'] === null) {
            $invalidProperties[] = "'starter_code_url' can't be null";
        }
        if ($this->container['github_username'] === null) {
            $invalidProperties[] = "'github_username' can't be null";
        }
        if ($this->container['roster_identifier'] === null) {
            $invalidProperties[] = "'roster_identifier' can't be null";
        }
        if ($this->container['student_repository_name'] === null) {
            $invalidProperties[] = "'student_repository_name' can't be null";
        }
        if ($this->container['student_repository_url'] === null) {
            $invalidProperties[] = "'student_repository_url' can't be null";
        }
        if ($this->container['submission_timestamp'] === null) {
            $invalidProperties[] = "'submission_timestamp' can't be null";
        }
        if ($this->container['points_awarded'] === null) {
            $invalidProperties[] = "'points_awarded' can't be null";
        }
        if ($this->container['points_available'] === null) {
            $invalidProperties[] = "'points_available' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assignment_name
     *
     * @return string
     */
    public function getAssignmentName()
    {
        return $this->container['assignment_name'];
    }

    /**
     * Sets assignment_name
     *
     * @param string $assignment_name Name of the assignment
     *
     * @return self
     */
    public function setAssignmentName($assignment_name)
    {
        if (is_null($assignment_name)) {
            throw new \InvalidArgumentException('non-nullable assignment_name cannot be null');
        }
        $this->container['assignment_name'] = $assignment_name;

        return $this;
    }

    /**
     * Gets assignment_url
     *
     * @return string
     */
    public function getAssignmentUrl()
    {
        return $this->container['assignment_url'];
    }

    /**
     * Sets assignment_url
     *
     * @param string $assignment_url URL of the assignment
     *
     * @return self
     */
    public function setAssignmentUrl($assignment_url)
    {
        if (is_null($assignment_url)) {
            throw new \InvalidArgumentException('non-nullable assignment_url cannot be null');
        }
        $this->container['assignment_url'] = $assignment_url;

        return $this;
    }

    /**
     * Gets starter_code_url
     *
     * @return string
     */
    public function getStarterCodeUrl()
    {
        return $this->container['starter_code_url'];
    }

    /**
     * Sets starter_code_url
     *
     * @param string $starter_code_url URL of the starter code for the assignment
     *
     * @return self
     */
    public function setStarterCodeUrl($starter_code_url)
    {
        if (is_null($starter_code_url)) {
            throw new \InvalidArgumentException('non-nullable starter_code_url cannot be null');
        }
        $this->container['starter_code_url'] = $starter_code_url;

        return $this;
    }

    /**
     * Gets github_username
     *
     * @return string
     */
    public function getGithubUsername()
    {
        return $this->container['github_username'];
    }

    /**
     * Sets github_username
     *
     * @param string $github_username GitHub username of the student
     *
     * @return self
     */
    public function setGithubUsername($github_username)
    {
        if (is_null($github_username)) {
            throw new \InvalidArgumentException('non-nullable github_username cannot be null');
        }
        $this->container['github_username'] = $github_username;

        return $this;
    }

    /**
     * Gets roster_identifier
     *
     * @return string
     */
    public function getRosterIdentifier()
    {
        return $this->container['roster_identifier'];
    }

    /**
     * Sets roster_identifier
     *
     * @param string $roster_identifier Roster identifier of the student
     *
     * @return self
     */
    public function setRosterIdentifier($roster_identifier)
    {
        if (is_null($roster_identifier)) {
            throw new \InvalidArgumentException('non-nullable roster_identifier cannot be null');
        }
        $this->container['roster_identifier'] = $roster_identifier;

        return $this;
    }

    /**
     * Gets student_repository_name
     *
     * @return string
     */
    public function getStudentRepositoryName()
    {
        return $this->container['student_repository_name'];
    }

    /**
     * Sets student_repository_name
     *
     * @param string $student_repository_name Name of the student's assignment repository
     *
     * @return self
     */
    public function setStudentRepositoryName($student_repository_name)
    {
        if (is_null($student_repository_name)) {
            throw new \InvalidArgumentException('non-nullable student_repository_name cannot be null');
        }
        $this->container['student_repository_name'] = $student_repository_name;

        return $this;
    }

    /**
     * Gets student_repository_url
     *
     * @return string
     */
    public function getStudentRepositoryUrl()
    {
        return $this->container['student_repository_url'];
    }

    /**
     * Sets student_repository_url
     *
     * @param string $student_repository_url URL of the student's assignment repository
     *
     * @return self
     */
    public function setStudentRepositoryUrl($student_repository_url)
    {
        if (is_null($student_repository_url)) {
            throw new \InvalidArgumentException('non-nullable student_repository_url cannot be null');
        }
        $this->container['student_repository_url'] = $student_repository_url;

        return $this;
    }

    /**
     * Gets submission_timestamp
     *
     * @return string
     */
    public function getSubmissionTimestamp()
    {
        return $this->container['submission_timestamp'];
    }

    /**
     * Sets submission_timestamp
     *
     * @param string $submission_timestamp Timestamp of the student's assignment submission
     *
     * @return self
     */
    public function setSubmissionTimestamp($submission_timestamp)
    {
        if (is_null($submission_timestamp)) {
            throw new \InvalidArgumentException('non-nullable submission_timestamp cannot be null');
        }
        $this->container['submission_timestamp'] = $submission_timestamp;

        return $this;
    }

    /**
     * Gets points_awarded
     *
     * @return int
     */
    public function getPointsAwarded()
    {
        return $this->container['points_awarded'];
    }

    /**
     * Sets points_awarded
     *
     * @param int $points_awarded Number of points awarded to the student
     *
     * @return self
     */
    public function setPointsAwarded($points_awarded)
    {
        if (is_null($points_awarded)) {
            throw new \InvalidArgumentException('non-nullable points_awarded cannot be null');
        }
        $this->container['points_awarded'] = $points_awarded;

        return $this;
    }

    /**
     * Gets points_available
     *
     * @return int
     */
    public function getPointsAvailable()
    {
        return $this->container['points_available'];
    }

    /**
     * Sets points_available
     *
     * @param int $points_available Number of points available for the assignment
     *
     * @return self
     */
    public function setPointsAvailable($points_available)
    {
        if (is_null($points_available)) {
            throw new \InvalidArgumentException('non-nullable points_available cannot be null');
        }
        $this->container['points_available'] = $points_available;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string|null $group_name If a group assignment, name of the group the student is in
     *
     * @return self
     */
    public function setGroupName($group_name)
    {
        if (is_null($group_name)) {
            throw new \InvalidArgumentException('non-nullable group_name cannot be null');
        }
        $this->container['group_name'] = $group_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


