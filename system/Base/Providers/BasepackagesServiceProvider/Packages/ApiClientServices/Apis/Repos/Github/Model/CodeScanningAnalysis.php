<?php
/**
 * CodeScanningAnalysis
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * CodeScanningAnalysis Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CodeScanningAnalysis implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'code-scanning-analysis';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ref' => 'string',
        'commit_sha' => 'string',
        'analysis_key' => 'string',
        'environment' => 'string',
        'category' => 'string',
        'error' => 'string',
        'created_at' => '\DateTime',
        'results_count' => 'int',
        'rules_count' => 'int',
        'id' => 'int',
        'url' => 'string',
        'sarif_id' => 'string',
        'tool' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningAnalysisTool',
        'deletable' => 'bool',
        'warning' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ref' => null,
        'commit_sha' => null,
        'analysis_key' => null,
        'environment' => null,
        'category' => null,
        'error' => null,
        'created_at' => 'date-time',
        'results_count' => null,
        'rules_count' => null,
        'id' => null,
        'url' => 'uri',
        'sarif_id' => null,
        'tool' => null,
        'deletable' => null,
        'warning' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ref' => false,
        'commit_sha' => false,
        'analysis_key' => false,
        'environment' => false,
        'category' => false,
        'error' => false,
        'created_at' => false,
        'results_count' => false,
        'rules_count' => false,
        'id' => false,
        'url' => false,
        'sarif_id' => false,
        'tool' => false,
        'deletable' => false,
        'warning' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ref' => 'ref',
        'commit_sha' => 'commit_sha',
        'analysis_key' => 'analysis_key',
        'environment' => 'environment',
        'category' => 'category',
        'error' => 'error',
        'created_at' => 'created_at',
        'results_count' => 'results_count',
        'rules_count' => 'rules_count',
        'id' => 'id',
        'url' => 'url',
        'sarif_id' => 'sarif_id',
        'tool' => 'tool',
        'deletable' => 'deletable',
        'warning' => 'warning'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ref' => 'setRef',
        'commit_sha' => 'setCommitSha',
        'analysis_key' => 'setAnalysisKey',
        'environment' => 'setEnvironment',
        'category' => 'setCategory',
        'error' => 'setError',
        'created_at' => 'setCreatedAt',
        'results_count' => 'setResultsCount',
        'rules_count' => 'setRulesCount',
        'id' => 'setId',
        'url' => 'setUrl',
        'sarif_id' => 'setSarifId',
        'tool' => 'setTool',
        'deletable' => 'setDeletable',
        'warning' => 'setWarning'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ref' => 'getRef',
        'commit_sha' => 'getCommitSha',
        'analysis_key' => 'getAnalysisKey',
        'environment' => 'getEnvironment',
        'category' => 'getCategory',
        'error' => 'getError',
        'created_at' => 'getCreatedAt',
        'results_count' => 'getResultsCount',
        'rules_count' => 'getRulesCount',
        'id' => 'getId',
        'url' => 'getUrl',
        'sarif_id' => 'getSarifId',
        'tool' => 'getTool',
        'deletable' => 'getDeletable',
        'warning' => 'getWarning'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ref', $data ?? [], null);
        $this->setIfExists('commit_sha', $data ?? [], null);
        $this->setIfExists('analysis_key', $data ?? [], null);
        $this->setIfExists('environment', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('results_count', $data ?? [], null);
        $this->setIfExists('rules_count', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('sarif_id', $data ?? [], null);
        $this->setIfExists('tool', $data ?? [], null);
        $this->setIfExists('deletable', $data ?? [], null);
        $this->setIfExists('warning', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ref'] === null) {
            $invalidProperties[] = "'ref' can't be null";
        }
        if ($this->container['commit_sha'] === null) {
            $invalidProperties[] = "'commit_sha' can't be null";
        }
        if ((mb_strlen($this->container['commit_sha']) > 40)) {
            $invalidProperties[] = "invalid value for 'commit_sha', the character length must be smaller than or equal to 40.";
        }

        if ((mb_strlen($this->container['commit_sha']) < 40)) {
            $invalidProperties[] = "invalid value for 'commit_sha', the character length must be bigger than or equal to 40.";
        }

        if (!preg_match("/^[0-9a-fA-F]+$/", $this->container['commit_sha'])) {
            $invalidProperties[] = "invalid value for 'commit_sha', must be conform to the pattern /^[0-9a-fA-F]+$/.";
        }

        if ($this->container['analysis_key'] === null) {
            $invalidProperties[] = "'analysis_key' can't be null";
        }
        if ($this->container['environment'] === null) {
            $invalidProperties[] = "'environment' can't be null";
        }
        if ($this->container['error'] === null) {
            $invalidProperties[] = "'error' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['results_count'] === null) {
            $invalidProperties[] = "'results_count' can't be null";
        }
        if ($this->container['rules_count'] === null) {
            $invalidProperties[] = "'rules_count' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['sarif_id'] === null) {
            $invalidProperties[] = "'sarif_id' can't be null";
        }
        if ($this->container['tool'] === null) {
            $invalidProperties[] = "'tool' can't be null";
        }
        if ($this->container['deletable'] === null) {
            $invalidProperties[] = "'deletable' can't be null";
        }
        if ($this->container['warning'] === null) {
            $invalidProperties[] = "'warning' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ref
     *
     * @return string
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string $ref The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`, `refs/heads/<branch name>` or simply `<branch name>`.
     *
     * @return self
     */
    public function setRef($ref)
    {
        if (is_null($ref)) {
            throw new \InvalidArgumentException('non-nullable ref cannot be null');
        }
        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets commit_sha
     *
     * @return string
     */
    public function getCommitSha()
    {
        return $this->container['commit_sha'];
    }

    /**
     * Sets commit_sha
     *
     * @param string $commit_sha The SHA of the commit to which the analysis you are uploading relates.
     *
     * @return self
     */
    public function setCommitSha($commit_sha)
    {
        if (is_null($commit_sha)) {
            throw new \InvalidArgumentException('non-nullable commit_sha cannot be null');
        }
        if ((mb_strlen($commit_sha) > 40)) {
            throw new \InvalidArgumentException('invalid length for $commit_sha when calling CodeScanningAnalysis., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($commit_sha) < 40)) {
            throw new \InvalidArgumentException('invalid length for $commit_sha when calling CodeScanningAnalysis., must be bigger than or equal to 40.');
        }
        if ((!preg_match("/^[0-9a-fA-F]+$/", ObjectSerializer::toString($commit_sha)))) {
            throw new \InvalidArgumentException("invalid value for \$commit_sha when calling CodeScanningAnalysis., must conform to the pattern /^[0-9a-fA-F]+$/.");
        }

        $this->container['commit_sha'] = $commit_sha;

        return $this;
    }

    /**
     * Gets analysis_key
     *
     * @return string
     */
    public function getAnalysisKey()
    {
        return $this->container['analysis_key'];
    }

    /**
     * Sets analysis_key
     *
     * @param string $analysis_key Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
     *
     * @return self
     */
    public function setAnalysisKey($analysis_key)
    {
        if (is_null($analysis_key)) {
            throw new \InvalidArgumentException('non-nullable analysis_key cannot be null');
        }
        $this->container['analysis_key'] = $analysis_key;

        return $this;
    }

    /**
     * Gets environment
     *
     * @return string
     */
    public function getEnvironment()
    {
        return $this->container['environment'];
    }

    /**
     * Sets environment
     *
     * @param string $environment Identifies the variable values associated with the environment in which this analysis was performed.
     *
     * @return self
     */
    public function setEnvironment($environment)
    {
        if (is_null($environment)) {
            throw new \InvalidArgumentException('non-nullable environment cannot be null');
        }
        $this->container['environment'] = $environment;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets results_count
     *
     * @return int
     */
    public function getResultsCount()
    {
        return $this->container['results_count'];
    }

    /**
     * Sets results_count
     *
     * @param int $results_count The total number of results in the analysis.
     *
     * @return self
     */
    public function setResultsCount($results_count)
    {
        if (is_null($results_count)) {
            throw new \InvalidArgumentException('non-nullable results_count cannot be null');
        }
        $this->container['results_count'] = $results_count;

        return $this;
    }

    /**
     * Gets rules_count
     *
     * @return int
     */
    public function getRulesCount()
    {
        return $this->container['rules_count'];
    }

    /**
     * Sets rules_count
     *
     * @param int $rules_count The total number of rules used in the analysis.
     *
     * @return self
     */
    public function setRulesCount($rules_count)
    {
        if (is_null($rules_count)) {
            throw new \InvalidArgumentException('non-nullable rules_count cannot be null');
        }
        $this->container['rules_count'] = $rules_count;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier for this analysis.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The REST API URL of the analysis resource.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets sarif_id
     *
     * @return string
     */
    public function getSarifId()
    {
        return $this->container['sarif_id'];
    }

    /**
     * Sets sarif_id
     *
     * @param string $sarif_id An identifier for the upload.
     *
     * @return self
     */
    public function setSarifId($sarif_id)
    {
        if (is_null($sarif_id)) {
            throw new \InvalidArgumentException('non-nullable sarif_id cannot be null');
        }
        $this->container['sarif_id'] = $sarif_id;

        return $this;
    }

    /**
     * Gets tool
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningAnalysisTool
     */
    public function getTool()
    {
        return $this->container['tool'];
    }

    /**
     * Sets tool
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningAnalysisTool $tool tool
     *
     * @return self
     */
    public function setTool($tool)
    {
        if (is_null($tool)) {
            throw new \InvalidArgumentException('non-nullable tool cannot be null');
        }
        $this->container['tool'] = $tool;

        return $this;
    }

    /**
     * Gets deletable
     *
     * @return bool
     */
    public function getDeletable()
    {
        return $this->container['deletable'];
    }

    /**
     * Sets deletable
     *
     * @param bool $deletable deletable
     *
     * @return self
     */
    public function setDeletable($deletable)
    {
        if (is_null($deletable)) {
            throw new \InvalidArgumentException('non-nullable deletable cannot be null');
        }
        $this->container['deletable'] = $deletable;

        return $this;
    }

    /**
     * Gets warning
     *
     * @return string
     */
    public function getWarning()
    {
        return $this->container['warning'];
    }

    /**
     * Sets warning
     *
     * @param string $warning Warning generated when processing the analysis
     *
     * @return self
     */
    public function setWarning($warning)
    {
        if (is_null($warning)) {
            throw new \InvalidArgumentException('non-nullable warning cannot be null');
        }
        $this->container['warning'] = $warning;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


