<?php
/**
 * CodeScanningCreateVariantAnalysisRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * CodeScanningCreateVariantAnalysisRequest Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CodeScanningCreateVariantAnalysisRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'code_scanning_create_variant_analysis_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'language' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningVariantAnalysisLanguage',
        'query_pack' => 'string',
        'repositories' => 'string[]',
        'repository_lists' => 'string[]',
        'repository_owners' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'language' => null,
        'query_pack' => null,
        'repositories' => null,
        'repository_lists' => null,
        'repository_owners' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'language' => false,
        'query_pack' => false,
        'repositories' => false,
        'repository_lists' => false,
        'repository_owners' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'language' => 'language',
        'query_pack' => 'query_pack',
        'repositories' => 'repositories',
        'repository_lists' => 'repository_lists',
        'repository_owners' => 'repository_owners'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'language' => 'setLanguage',
        'query_pack' => 'setQueryPack',
        'repositories' => 'setRepositories',
        'repository_lists' => 'setRepositoryLists',
        'repository_owners' => 'setRepositoryOwners'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'language' => 'getLanguage',
        'query_pack' => 'getQueryPack',
        'repositories' => 'getRepositories',
        'repository_lists' => 'getRepositoryLists',
        'repository_owners' => 'getRepositoryOwners'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('query_pack', $data ?? [], null);
        $this->setIfExists('repositories', $data ?? [], null);
        $this->setIfExists('repository_lists', $data ?? [], null);
        $this->setIfExists('repository_owners', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ($this->container['query_pack'] === null) {
            $invalidProperties[] = "'query_pack' can't be null";
        }
        if (!is_null($this->container['repository_lists']) && (count($this->container['repository_lists']) > 1)) {
            $invalidProperties[] = "invalid value for 'repository_lists', number of items must be less than or equal to 1.";
        }

        if (!is_null($this->container['repository_owners']) && (count($this->container['repository_owners']) > 1)) {
            $invalidProperties[] = "invalid value for 'repository_owners', number of items must be less than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets language
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningVariantAnalysisLanguage
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningVariantAnalysisLanguage $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets query_pack
     *
     * @return string
     */
    public function getQueryPack()
    {
        return $this->container['query_pack'];
    }

    /**
     * Sets query_pack
     *
     * @param string $query_pack A Base64-encoded tarball containing a CodeQL query and all its dependencies
     *
     * @return self
     */
    public function setQueryPack($query_pack)
    {
        if (is_null($query_pack)) {
            throw new \InvalidArgumentException('non-nullable query_pack cannot be null');
        }
        $this->container['query_pack'] = $query_pack;

        return $this;
    }

    /**
     * Gets repositories
     *
     * @return string[]|null
     */
    public function getRepositories()
    {
        return $this->container['repositories'];
    }

    /**
     * Sets repositories
     *
     * @param string[]|null $repositories List of repository names (in the form `owner/repo-name`) to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
     *
     * @return self
     */
    public function setRepositories($repositories)
    {
        if (is_null($repositories)) {
            throw new \InvalidArgumentException('non-nullable repositories cannot be null');
        }
        $this->container['repositories'] = $repositories;

        return $this;
    }

    /**
     * Gets repository_lists
     *
     * @return string[]|null
     */
    public function getRepositoryLists()
    {
        return $this->container['repository_lists'];
    }

    /**
     * Sets repository_lists
     *
     * @param string[]|null $repository_lists List of repository lists to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
     *
     * @return self
     */
    public function setRepositoryLists($repository_lists)
    {
        if (is_null($repository_lists)) {
            throw new \InvalidArgumentException('non-nullable repository_lists cannot be null');
        }

        if ((count($repository_lists) > 1)) {
            throw new \InvalidArgumentException('invalid value for $repository_lists when calling CodeScanningCreateVariantAnalysisRequest., number of items must be less than or equal to 1.');
        }
        $this->container['repository_lists'] = $repository_lists;

        return $this;
    }

    /**
     * Gets repository_owners
     *
     * @return string[]|null
     */
    public function getRepositoryOwners()
    {
        return $this->container['repository_owners'];
    }

    /**
     * Sets repository_owners
     *
     * @param string[]|null $repository_owners List of organization or user names whose repositories the query should be run against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
     *
     * @return self
     */
    public function setRepositoryOwners($repository_owners)
    {
        if (is_null($repository_owners)) {
            throw new \InvalidArgumentException('non-nullable repository_owners cannot be null');
        }

        if ((count($repository_owners) > 1)) {
            throw new \InvalidArgumentException('invalid value for $repository_owners when calling CodeScanningCreateVariantAnalysisRequest., number of items must be less than or equal to 1.');
        }
        $this->container['repository_owners'] = $repository_owners;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


