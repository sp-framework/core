<?php
/**
 * CodeScanningVariantAnalysis
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * CodeScanningVariantAnalysis Class Doc Comment
 *
 * @category Class
 * @description A run of a CodeQL query against one or more repositories.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CodeScanningVariantAnalysis implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'code-scanning-variant-analysis';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'controller_repo' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleRepository',
        'actor' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser',
        'query_language' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningVariantAnalysisLanguage',
        'query_pack_url' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'completed_at' => '\DateTime',
        'status' => 'string',
        'actions_workflow_run_id' => 'int',
        'failure_reason' => 'string',
        'scanned_repositories' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningVariantAnalysisScannedRepositoriesInner[]',
        'skipped_repositories' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningVariantAnalysisSkippedRepositories'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'controller_repo' => null,
        'actor' => null,
        'query_language' => null,
        'query_pack_url' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'completed_at' => 'date-time',
        'status' => null,
        'actions_workflow_run_id' => null,
        'failure_reason' => null,
        'scanned_repositories' => null,
        'skipped_repositories' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'controller_repo' => false,
        'actor' => false,
        'query_language' => false,
        'query_pack_url' => false,
        'created_at' => false,
        'updated_at' => false,
        'completed_at' => true,
        'status' => false,
        'actions_workflow_run_id' => false,
        'failure_reason' => false,
        'scanned_repositories' => false,
        'skipped_repositories' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'controller_repo' => 'controller_repo',
        'actor' => 'actor',
        'query_language' => 'query_language',
        'query_pack_url' => 'query_pack_url',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'completed_at' => 'completed_at',
        'status' => 'status',
        'actions_workflow_run_id' => 'actions_workflow_run_id',
        'failure_reason' => 'failure_reason',
        'scanned_repositories' => 'scanned_repositories',
        'skipped_repositories' => 'skipped_repositories'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'controller_repo' => 'setControllerRepo',
        'actor' => 'setActor',
        'query_language' => 'setQueryLanguage',
        'query_pack_url' => 'setQueryPackUrl',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'completed_at' => 'setCompletedAt',
        'status' => 'setStatus',
        'actions_workflow_run_id' => 'setActionsWorkflowRunId',
        'failure_reason' => 'setFailureReason',
        'scanned_repositories' => 'setScannedRepositories',
        'skipped_repositories' => 'setSkippedRepositories'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'controller_repo' => 'getControllerRepo',
        'actor' => 'getActor',
        'query_language' => 'getQueryLanguage',
        'query_pack_url' => 'getQueryPackUrl',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'completed_at' => 'getCompletedAt',
        'status' => 'getStatus',
        'actions_workflow_run_id' => 'getActionsWorkflowRunId',
        'failure_reason' => 'getFailureReason',
        'scanned_repositories' => 'getScannedRepositories',
        'skipped_repositories' => 'getSkippedRepositories'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_IN_PROGRESS = 'in_progress';
    public const STATUS_SUCCEEDED = 'succeeded';
    public const STATUS_FAILED = 'failed';
    public const STATUS_CANCELLED = 'cancelled';
    public const FAILURE_REASON_NO_REPOS_QUERIED = 'no_repos_queried';
    public const FAILURE_REASON_ACTIONS_WORKFLOW_RUN_FAILED = 'actions_workflow_run_failed';
    public const FAILURE_REASON_INTERNAL_ERROR = 'internal_error';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_IN_PROGRESS,
            self::STATUS_SUCCEEDED,
            self::STATUS_FAILED,
            self::STATUS_CANCELLED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFailureReasonAllowableValues()
    {
        return [
            self::FAILURE_REASON_NO_REPOS_QUERIED,
            self::FAILURE_REASON_ACTIONS_WORKFLOW_RUN_FAILED,
            self::FAILURE_REASON_INTERNAL_ERROR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('controller_repo', $data ?? [], null);
        $this->setIfExists('actor', $data ?? [], null);
        $this->setIfExists('query_language', $data ?? [], null);
        $this->setIfExists('query_pack_url', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('completed_at', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('actions_workflow_run_id', $data ?? [], null);
        $this->setIfExists('failure_reason', $data ?? [], null);
        $this->setIfExists('scanned_repositories', $data ?? [], null);
        $this->setIfExists('skipped_repositories', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['controller_repo'] === null) {
            $invalidProperties[] = "'controller_repo' can't be null";
        }
        if ($this->container['actor'] === null) {
            $invalidProperties[] = "'actor' can't be null";
        }
        if ($this->container['query_language'] === null) {
            $invalidProperties[] = "'query_language' can't be null";
        }
        if ($this->container['query_pack_url'] === null) {
            $invalidProperties[] = "'query_pack_url' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFailureReasonAllowableValues();
        if (!is_null($this->container['failure_reason']) && !in_array($this->container['failure_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'failure_reason', must be one of '%s'",
                $this->container['failure_reason'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the variant analysis.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets controller_repo
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleRepository
     */
    public function getControllerRepo()
    {
        return $this->container['controller_repo'];
    }

    /**
     * Sets controller_repo
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleRepository $controller_repo controller_repo
     *
     * @return self
     */
    public function setControllerRepo($controller_repo)
    {
        if (is_null($controller_repo)) {
            throw new \InvalidArgumentException('non-nullable controller_repo cannot be null');
        }
        $this->container['controller_repo'] = $controller_repo;

        return $this;
    }

    /**
     * Gets actor
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser
     */
    public function getActor()
    {
        return $this->container['actor'];
    }

    /**
     * Sets actor
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser $actor actor
     *
     * @return self
     */
    public function setActor($actor)
    {
        if (is_null($actor)) {
            throw new \InvalidArgumentException('non-nullable actor cannot be null');
        }
        $this->container['actor'] = $actor;

        return $this;
    }

    /**
     * Gets query_language
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningVariantAnalysisLanguage
     */
    public function getQueryLanguage()
    {
        return $this->container['query_language'];
    }

    /**
     * Sets query_language
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningVariantAnalysisLanguage $query_language query_language
     *
     * @return self
     */
    public function setQueryLanguage($query_language)
    {
        if (is_null($query_language)) {
            throw new \InvalidArgumentException('non-nullable query_language cannot be null');
        }
        $this->container['query_language'] = $query_language;

        return $this;
    }

    /**
     * Gets query_pack_url
     *
     * @return string
     */
    public function getQueryPackUrl()
    {
        return $this->container['query_pack_url'];
    }

    /**
     * Sets query_pack_url
     *
     * @param string $query_pack_url The download url for the query pack.
     *
     * @return self
     */
    public function setQueryPackUrl($query_pack_url)
    {
        if (is_null($query_pack_url)) {
            throw new \InvalidArgumentException('non-nullable query_pack_url cannot be null');
        }
        $this->container['query_pack_url'] = $query_pack_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The date and time at which the variant analysis was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at The date and time at which the variant analysis was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets completed_at
     *
     * @return \DateTime|null
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     *
     * @param \DateTime|null $completed_at The date and time at which the variant analysis was completed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the variant analysis has not yet completed or this information is not available.
     *
     * @return self
     */
    public function setCompletedAt($completed_at)
    {
        if (is_null($completed_at)) {
            array_push($this->openAPINullablesSetToNull, 'completed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completed_at'] = $completed_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets actions_workflow_run_id
     *
     * @return int|null
     */
    public function getActionsWorkflowRunId()
    {
        return $this->container['actions_workflow_run_id'];
    }

    /**
     * Sets actions_workflow_run_id
     *
     * @param int|null $actions_workflow_run_id The GitHub Actions workflow run used to execute this variant analysis. This is only available if the workflow run has started.
     *
     * @return self
     */
    public function setActionsWorkflowRunId($actions_workflow_run_id)
    {
        if (is_null($actions_workflow_run_id)) {
            throw new \InvalidArgumentException('non-nullable actions_workflow_run_id cannot be null');
        }
        $this->container['actions_workflow_run_id'] = $actions_workflow_run_id;

        return $this;
    }

    /**
     * Gets failure_reason
     *
     * @return string|null
     */
    public function getFailureReason()
    {
        return $this->container['failure_reason'];
    }

    /**
     * Sets failure_reason
     *
     * @param string|null $failure_reason The reason for a failure of the variant analysis. This is only available if the variant analysis has failed.
     *
     * @return self
     */
    public function setFailureReason($failure_reason)
    {
        if (is_null($failure_reason)) {
            throw new \InvalidArgumentException('non-nullable failure_reason cannot be null');
        }
        $allowedValues = $this->getFailureReasonAllowableValues();
        if (!in_array($failure_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'failure_reason', must be one of '%s'",
                    $failure_reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['failure_reason'] = $failure_reason;

        return $this;
    }

    /**
     * Gets scanned_repositories
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningVariantAnalysisScannedRepositoriesInner[]|null
     */
    public function getScannedRepositories()
    {
        return $this->container['scanned_repositories'];
    }

    /**
     * Sets scanned_repositories
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningVariantAnalysisScannedRepositoriesInner[]|null $scanned_repositories scanned_repositories
     *
     * @return self
     */
    public function setScannedRepositories($scanned_repositories)
    {
        if (is_null($scanned_repositories)) {
            throw new \InvalidArgumentException('non-nullable scanned_repositories cannot be null');
        }
        $this->container['scanned_repositories'] = $scanned_repositories;

        return $this;
    }

    /**
     * Gets skipped_repositories
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningVariantAnalysisSkippedRepositories|null
     */
    public function getSkippedRepositories()
    {
        return $this->container['skipped_repositories'];
    }

    /**
     * Sets skipped_repositories
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeScanningVariantAnalysisSkippedRepositories|null $skipped_repositories skipped_repositories
     *
     * @return self
     */
    public function setSkippedRepositories($skipped_repositories)
    {
        if (is_null($skipped_repositories)) {
            throw new \InvalidArgumentException('non-nullable skipped_repositories cannot be null');
        }
        $this->container['skipped_repositories'] = $skipped_repositories;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


