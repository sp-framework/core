<?php
/**
 * CodespaceMachine
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * CodespaceMachine Class Doc Comment
 *
 * @category Class
 * @description A description of the machine powering a codespace.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CodespaceMachine implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'codespace-machine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'display_name' => 'string',
        'operating_system' => 'string',
        'storage_in_bytes' => 'int',
        'memory_in_bytes' => 'int',
        'cpus' => 'int',
        'prebuild_availability' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'display_name' => null,
        'operating_system' => null,
        'storage_in_bytes' => null,
        'memory_in_bytes' => null,
        'cpus' => null,
        'prebuild_availability' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'display_name' => false,
        'operating_system' => false,
        'storage_in_bytes' => false,
        'memory_in_bytes' => false,
        'cpus' => false,
        'prebuild_availability' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'display_name' => 'display_name',
        'operating_system' => 'operating_system',
        'storage_in_bytes' => 'storage_in_bytes',
        'memory_in_bytes' => 'memory_in_bytes',
        'cpus' => 'cpus',
        'prebuild_availability' => 'prebuild_availability'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'display_name' => 'setDisplayName',
        'operating_system' => 'setOperatingSystem',
        'storage_in_bytes' => 'setStorageInBytes',
        'memory_in_bytes' => 'setMemoryInBytes',
        'cpus' => 'setCpus',
        'prebuild_availability' => 'setPrebuildAvailability'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'display_name' => 'getDisplayName',
        'operating_system' => 'getOperatingSystem',
        'storage_in_bytes' => 'getStorageInBytes',
        'memory_in_bytes' => 'getMemoryInBytes',
        'cpus' => 'getCpus',
        'prebuild_availability' => 'getPrebuildAvailability'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PREBUILD_AVAILABILITY_NONE = 'none';
    public const PREBUILD_AVAILABILITY_READY = 'ready';
    public const PREBUILD_AVAILABILITY_IN_PROGRESS = 'in_progress';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrebuildAvailabilityAllowableValues()
    {
        return [
            self::PREBUILD_AVAILABILITY_NONE,
            self::PREBUILD_AVAILABILITY_READY,
            self::PREBUILD_AVAILABILITY_IN_PROGRESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('operating_system', $data ?? [], null);
        $this->setIfExists('storage_in_bytes', $data ?? [], null);
        $this->setIfExists('memory_in_bytes', $data ?? [], null);
        $this->setIfExists('cpus', $data ?? [], null);
        $this->setIfExists('prebuild_availability', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ($this->container['operating_system'] === null) {
            $invalidProperties[] = "'operating_system' can't be null";
        }
        if ($this->container['storage_in_bytes'] === null) {
            $invalidProperties[] = "'storage_in_bytes' can't be null";
        }
        if ($this->container['memory_in_bytes'] === null) {
            $invalidProperties[] = "'memory_in_bytes' can't be null";
        }
        if ($this->container['cpus'] === null) {
            $invalidProperties[] = "'cpus' can't be null";
        }
        if ($this->container['prebuild_availability'] === null) {
            $invalidProperties[] = "'prebuild_availability' can't be null";
        }
        $allowedValues = $this->getPrebuildAvailabilityAllowableValues();
        if (!is_null($this->container['prebuild_availability']) && !in_array($this->container['prebuild_availability'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'prebuild_availability', must be one of '%s'",
                $this->container['prebuild_availability'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the machine.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name The display name of the machine includes cores, memory, and storage.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets operating_system
     *
     * @return string
     */
    public function getOperatingSystem()
    {
        return $this->container['operating_system'];
    }

    /**
     * Sets operating_system
     *
     * @param string $operating_system The operating system of the machine.
     *
     * @return self
     */
    public function setOperatingSystem($operating_system)
    {
        if (is_null($operating_system)) {
            throw new \InvalidArgumentException('non-nullable operating_system cannot be null');
        }
        $this->container['operating_system'] = $operating_system;

        return $this;
    }

    /**
     * Gets storage_in_bytes
     *
     * @return int
     */
    public function getStorageInBytes()
    {
        return $this->container['storage_in_bytes'];
    }

    /**
     * Sets storage_in_bytes
     *
     * @param int $storage_in_bytes How much storage is available to the codespace.
     *
     * @return self
     */
    public function setStorageInBytes($storage_in_bytes)
    {
        if (is_null($storage_in_bytes)) {
            throw new \InvalidArgumentException('non-nullable storage_in_bytes cannot be null');
        }
        $this->container['storage_in_bytes'] = $storage_in_bytes;

        return $this;
    }

    /**
     * Gets memory_in_bytes
     *
     * @return int
     */
    public function getMemoryInBytes()
    {
        return $this->container['memory_in_bytes'];
    }

    /**
     * Sets memory_in_bytes
     *
     * @param int $memory_in_bytes How much memory is available to the codespace.
     *
     * @return self
     */
    public function setMemoryInBytes($memory_in_bytes)
    {
        if (is_null($memory_in_bytes)) {
            throw new \InvalidArgumentException('non-nullable memory_in_bytes cannot be null');
        }
        $this->container['memory_in_bytes'] = $memory_in_bytes;

        return $this;
    }

    /**
     * Gets cpus
     *
     * @return int
     */
    public function getCpus()
    {
        return $this->container['cpus'];
    }

    /**
     * Sets cpus
     *
     * @param int $cpus How many cores are available to the codespace.
     *
     * @return self
     */
    public function setCpus($cpus)
    {
        if (is_null($cpus)) {
            throw new \InvalidArgumentException('non-nullable cpus cannot be null');
        }
        $this->container['cpus'] = $cpus;

        return $this;
    }

    /**
     * Gets prebuild_availability
     *
     * @return string
     */
    public function getPrebuildAvailability()
    {
        return $this->container['prebuild_availability'];
    }

    /**
     * Sets prebuild_availability
     *
     * @param string $prebuild_availability Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be \"null\" if prebuilds are not supported or prebuild availability could not be determined. Value will be \"none\" if no prebuild is available. Latest values \"ready\" and \"in_progress\" indicate the prebuild availability status.
     *
     * @return self
     */
    public function setPrebuildAvailability($prebuild_availability)
    {
        if (is_null($prebuild_availability)) {
            array_push($this->openAPINullablesSetToNull, 'prebuild_availability');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prebuild_availability', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPrebuildAvailabilityAllowableValues();
        if (!is_null($prebuild_availability) && !in_array($prebuild_availability, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'prebuild_availability', must be one of '%s'",
                    $prebuild_availability,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['prebuild_availability'] = $prebuild_availability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


