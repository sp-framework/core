<?php
/**
 * CodespaceWithFullRepository
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * CodespaceWithFullRepository Class Doc Comment
 *
 * @category Class
 * @description A codespace.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CodespaceWithFullRepository implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'codespace-with-full-repository';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'display_name' => 'string',
        'environment_id' => 'string',
        'owner' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser',
        'billable_owner' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser',
        'repository' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\FullRepository',
        'machine' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableCodespaceMachine',
        'devcontainer_path' => 'string',
        'prebuild' => 'bool',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'last_used_at' => '\DateTime',
        'state' => 'string',
        'url' => 'string',
        'git_status' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodespaceGitStatus',
        'location' => 'string',
        'idle_timeout_minutes' => 'int',
        'web_url' => 'string',
        'machines_url' => 'string',
        'start_url' => 'string',
        'stop_url' => 'string',
        'publish_url' => 'string',
        'pulls_url' => 'string',
        'recent_folders' => 'string[]',
        'runtime_constraints' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodespaceRuntimeConstraints',
        'pending_operation' => 'bool',
        'pending_operation_disabled_reason' => 'string',
        'idle_timeout_notice' => 'string',
        'retention_period_minutes' => 'int',
        'retention_expires_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'display_name' => null,
        'environment_id' => null,
        'owner' => null,
        'billable_owner' => null,
        'repository' => null,
        'machine' => null,
        'devcontainer_path' => null,
        'prebuild' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'last_used_at' => 'date-time',
        'state' => null,
        'url' => 'uri',
        'git_status' => null,
        'location' => null,
        'idle_timeout_minutes' => null,
        'web_url' => 'uri',
        'machines_url' => 'uri',
        'start_url' => 'uri',
        'stop_url' => 'uri',
        'publish_url' => 'uri',
        'pulls_url' => 'uri',
        'recent_folders' => null,
        'runtime_constraints' => null,
        'pending_operation' => null,
        'pending_operation_disabled_reason' => null,
        'idle_timeout_notice' => null,
        'retention_period_minutes' => null,
        'retention_expires_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'display_name' => true,
        'environment_id' => true,
        'owner' => false,
        'billable_owner' => false,
        'repository' => false,
        'machine' => true,
        'devcontainer_path' => true,
        'prebuild' => true,
        'created_at' => false,
        'updated_at' => false,
        'last_used_at' => false,
        'state' => false,
        'url' => false,
        'git_status' => false,
        'location' => false,
        'idle_timeout_minutes' => true,
        'web_url' => false,
        'machines_url' => false,
        'start_url' => false,
        'stop_url' => false,
        'publish_url' => true,
        'pulls_url' => true,
        'recent_folders' => false,
        'runtime_constraints' => false,
        'pending_operation' => true,
        'pending_operation_disabled_reason' => true,
        'idle_timeout_notice' => true,
        'retention_period_minutes' => true,
        'retention_expires_at' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'display_name' => 'display_name',
        'environment_id' => 'environment_id',
        'owner' => 'owner',
        'billable_owner' => 'billable_owner',
        'repository' => 'repository',
        'machine' => 'machine',
        'devcontainer_path' => 'devcontainer_path',
        'prebuild' => 'prebuild',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'last_used_at' => 'last_used_at',
        'state' => 'state',
        'url' => 'url',
        'git_status' => 'git_status',
        'location' => 'location',
        'idle_timeout_minutes' => 'idle_timeout_minutes',
        'web_url' => 'web_url',
        'machines_url' => 'machines_url',
        'start_url' => 'start_url',
        'stop_url' => 'stop_url',
        'publish_url' => 'publish_url',
        'pulls_url' => 'pulls_url',
        'recent_folders' => 'recent_folders',
        'runtime_constraints' => 'runtime_constraints',
        'pending_operation' => 'pending_operation',
        'pending_operation_disabled_reason' => 'pending_operation_disabled_reason',
        'idle_timeout_notice' => 'idle_timeout_notice',
        'retention_period_minutes' => 'retention_period_minutes',
        'retention_expires_at' => 'retention_expires_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'display_name' => 'setDisplayName',
        'environment_id' => 'setEnvironmentId',
        'owner' => 'setOwner',
        'billable_owner' => 'setBillableOwner',
        'repository' => 'setRepository',
        'machine' => 'setMachine',
        'devcontainer_path' => 'setDevcontainerPath',
        'prebuild' => 'setPrebuild',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'last_used_at' => 'setLastUsedAt',
        'state' => 'setState',
        'url' => 'setUrl',
        'git_status' => 'setGitStatus',
        'location' => 'setLocation',
        'idle_timeout_minutes' => 'setIdleTimeoutMinutes',
        'web_url' => 'setWebUrl',
        'machines_url' => 'setMachinesUrl',
        'start_url' => 'setStartUrl',
        'stop_url' => 'setStopUrl',
        'publish_url' => 'setPublishUrl',
        'pulls_url' => 'setPullsUrl',
        'recent_folders' => 'setRecentFolders',
        'runtime_constraints' => 'setRuntimeConstraints',
        'pending_operation' => 'setPendingOperation',
        'pending_operation_disabled_reason' => 'setPendingOperationDisabledReason',
        'idle_timeout_notice' => 'setIdleTimeoutNotice',
        'retention_period_minutes' => 'setRetentionPeriodMinutes',
        'retention_expires_at' => 'setRetentionExpiresAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'display_name' => 'getDisplayName',
        'environment_id' => 'getEnvironmentId',
        'owner' => 'getOwner',
        'billable_owner' => 'getBillableOwner',
        'repository' => 'getRepository',
        'machine' => 'getMachine',
        'devcontainer_path' => 'getDevcontainerPath',
        'prebuild' => 'getPrebuild',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'last_used_at' => 'getLastUsedAt',
        'state' => 'getState',
        'url' => 'getUrl',
        'git_status' => 'getGitStatus',
        'location' => 'getLocation',
        'idle_timeout_minutes' => 'getIdleTimeoutMinutes',
        'web_url' => 'getWebUrl',
        'machines_url' => 'getMachinesUrl',
        'start_url' => 'getStartUrl',
        'stop_url' => 'getStopUrl',
        'publish_url' => 'getPublishUrl',
        'pulls_url' => 'getPullsUrl',
        'recent_folders' => 'getRecentFolders',
        'runtime_constraints' => 'getRuntimeConstraints',
        'pending_operation' => 'getPendingOperation',
        'pending_operation_disabled_reason' => 'getPendingOperationDisabledReason',
        'idle_timeout_notice' => 'getIdleTimeoutNotice',
        'retention_period_minutes' => 'getRetentionPeriodMinutes',
        'retention_expires_at' => 'getRetentionExpiresAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_UNKNOWN = 'Unknown';
    public const STATE_CREATED = 'Created';
    public const STATE_QUEUED = 'Queued';
    public const STATE_PROVISIONING = 'Provisioning';
    public const STATE_AVAILABLE = 'Available';
    public const STATE_AWAITING = 'Awaiting';
    public const STATE_UNAVAILABLE = 'Unavailable';
    public const STATE_DELETED = 'Deleted';
    public const STATE_MOVED = 'Moved';
    public const STATE_SHUTDOWN = 'Shutdown';
    public const STATE_ARCHIVED = 'Archived';
    public const STATE_STARTING = 'Starting';
    public const STATE_SHUTTING_DOWN = 'ShuttingDown';
    public const STATE_FAILED = 'Failed';
    public const STATE_EXPORTING = 'Exporting';
    public const STATE_UPDATING = 'Updating';
    public const STATE_REBUILDING = 'Rebuilding';
    public const LOCATION_EAST_US = 'EastUs';
    public const LOCATION_SOUTH_EAST_ASIA = 'SouthEastAsia';
    public const LOCATION_WEST_EUROPE = 'WestEurope';
    public const LOCATION_WEST_US2 = 'WestUs2';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_UNKNOWN,
            self::STATE_CREATED,
            self::STATE_QUEUED,
            self::STATE_PROVISIONING,
            self::STATE_AVAILABLE,
            self::STATE_AWAITING,
            self::STATE_UNAVAILABLE,
            self::STATE_DELETED,
            self::STATE_MOVED,
            self::STATE_SHUTDOWN,
            self::STATE_ARCHIVED,
            self::STATE_STARTING,
            self::STATE_SHUTTING_DOWN,
            self::STATE_FAILED,
            self::STATE_EXPORTING,
            self::STATE_UPDATING,
            self::STATE_REBUILDING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocationAllowableValues()
    {
        return [
            self::LOCATION_EAST_US,
            self::LOCATION_SOUTH_EAST_ASIA,
            self::LOCATION_WEST_EUROPE,
            self::LOCATION_WEST_US2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('environment_id', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('billable_owner', $data ?? [], null);
        $this->setIfExists('repository', $data ?? [], null);
        $this->setIfExists('machine', $data ?? [], null);
        $this->setIfExists('devcontainer_path', $data ?? [], null);
        $this->setIfExists('prebuild', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('last_used_at', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('git_status', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('idle_timeout_minutes', $data ?? [], null);
        $this->setIfExists('web_url', $data ?? [], null);
        $this->setIfExists('machines_url', $data ?? [], null);
        $this->setIfExists('start_url', $data ?? [], null);
        $this->setIfExists('stop_url', $data ?? [], null);
        $this->setIfExists('publish_url', $data ?? [], null);
        $this->setIfExists('pulls_url', $data ?? [], null);
        $this->setIfExists('recent_folders', $data ?? [], null);
        $this->setIfExists('runtime_constraints', $data ?? [], null);
        $this->setIfExists('pending_operation', $data ?? [], null);
        $this->setIfExists('pending_operation_disabled_reason', $data ?? [], null);
        $this->setIfExists('idle_timeout_notice', $data ?? [], null);
        $this->setIfExists('retention_period_minutes', $data ?? [], null);
        $this->setIfExists('retention_expires_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['environment_id'] === null) {
            $invalidProperties[] = "'environment_id' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalidProperties[] = "'owner' can't be null";
        }
        if ($this->container['billable_owner'] === null) {
            $invalidProperties[] = "'billable_owner' can't be null";
        }
        if ($this->container['repository'] === null) {
            $invalidProperties[] = "'repository' can't be null";
        }
        if ($this->container['machine'] === null) {
            $invalidProperties[] = "'machine' can't be null";
        }
        if ($this->container['prebuild'] === null) {
            $invalidProperties[] = "'prebuild' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['last_used_at'] === null) {
            $invalidProperties[] = "'last_used_at' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['git_status'] === null) {
            $invalidProperties[] = "'git_status' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        $allowedValues = $this->getLocationAllowableValues();
        if (!is_null($this->container['location']) && !in_array($this->container['location'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'location', must be one of '%s'",
                $this->container['location'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['idle_timeout_minutes'] === null) {
            $invalidProperties[] = "'idle_timeout_minutes' can't be null";
        }
        if ($this->container['web_url'] === null) {
            $invalidProperties[] = "'web_url' can't be null";
        }
        if ($this->container['machines_url'] === null) {
            $invalidProperties[] = "'machines_url' can't be null";
        }
        if ($this->container['start_url'] === null) {
            $invalidProperties[] = "'start_url' can't be null";
        }
        if ($this->container['stop_url'] === null) {
            $invalidProperties[] = "'stop_url' can't be null";
        }
        if ($this->container['pulls_url'] === null) {
            $invalidProperties[] = "'pulls_url' can't be null";
        }
        if ($this->container['recent_folders'] === null) {
            $invalidProperties[] = "'recent_folders' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Automatically generated name of this codespace.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name Display name for this codespace.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            array_push($this->openAPINullablesSetToNull, 'display_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets environment_id
     *
     * @return string
     */
    public function getEnvironmentId()
    {
        return $this->container['environment_id'];
    }

    /**
     * Sets environment_id
     *
     * @param string $environment_id UUID identifying this codespace's environment.
     *
     * @return self
     */
    public function setEnvironmentId($environment_id)
    {
        if (is_null($environment_id)) {
            array_push($this->openAPINullablesSetToNull, 'environment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('environment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['environment_id'] = $environment_id;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets billable_owner
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser
     */
    public function getBillableOwner()
    {
        return $this->container['billable_owner'];
    }

    /**
     * Sets billable_owner
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser $billable_owner billable_owner
     *
     * @return self
     */
    public function setBillableOwner($billable_owner)
    {
        if (is_null($billable_owner)) {
            throw new \InvalidArgumentException('non-nullable billable_owner cannot be null');
        }
        $this->container['billable_owner'] = $billable_owner;

        return $this;
    }

    /**
     * Gets repository
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\FullRepository
     */
    public function getRepository()
    {
        return $this->container['repository'];
    }

    /**
     * Sets repository
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\FullRepository $repository repository
     *
     * @return self
     */
    public function setRepository($repository)
    {
        if (is_null($repository)) {
            throw new \InvalidArgumentException('non-nullable repository cannot be null');
        }
        $this->container['repository'] = $repository;

        return $this;
    }

    /**
     * Gets machine
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableCodespaceMachine
     */
    public function getMachine()
    {
        return $this->container['machine'];
    }

    /**
     * Sets machine
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableCodespaceMachine $machine machine
     *
     * @return self
     */
    public function setMachine($machine)
    {
        if (is_null($machine)) {
            array_push($this->openAPINullablesSetToNull, 'machine');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('machine', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['machine'] = $machine;

        return $this;
    }

    /**
     * Gets devcontainer_path
     *
     * @return string|null
     */
    public function getDevcontainerPath()
    {
        return $this->container['devcontainer_path'];
    }

    /**
     * Sets devcontainer_path
     *
     * @param string|null $devcontainer_path Path to devcontainer.json from repo root used to create Codespace.
     *
     * @return self
     */
    public function setDevcontainerPath($devcontainer_path)
    {
        if (is_null($devcontainer_path)) {
            array_push($this->openAPINullablesSetToNull, 'devcontainer_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('devcontainer_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['devcontainer_path'] = $devcontainer_path;

        return $this;
    }

    /**
     * Gets prebuild
     *
     * @return bool
     */
    public function getPrebuild()
    {
        return $this->container['prebuild'];
    }

    /**
     * Sets prebuild
     *
     * @param bool $prebuild Whether the codespace was created from a prebuild.
     *
     * @return self
     */
    public function setPrebuild($prebuild)
    {
        if (is_null($prebuild)) {
            array_push($this->openAPINullablesSetToNull, 'prebuild');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prebuild', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prebuild'] = $prebuild;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets last_used_at
     *
     * @return \DateTime
     */
    public function getLastUsedAt()
    {
        return $this->container['last_used_at'];
    }

    /**
     * Sets last_used_at
     *
     * @param \DateTime $last_used_at Last known time this codespace was started.
     *
     * @return self
     */
    public function setLastUsedAt($last_used_at)
    {
        if (is_null($last_used_at)) {
            throw new \InvalidArgumentException('non-nullable last_used_at cannot be null');
        }
        $this->container['last_used_at'] = $last_used_at;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of this codespace.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url API URL for this codespace.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets git_status
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodespaceGitStatus
     */
    public function getGitStatus()
    {
        return $this->container['git_status'];
    }

    /**
     * Sets git_status
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodespaceGitStatus $git_status git_status
     *
     * @return self
     */
    public function setGitStatus($git_status)
    {
        if (is_null($git_status)) {
            throw new \InvalidArgumentException('non-nullable git_status cannot be null');
        }
        $this->container['git_status'] = $git_status;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location The initally assigned location of a new codespace.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $allowedValues = $this->getLocationAllowableValues();
        if (!in_array($location, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'location', must be one of '%s'",
                    $location,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets idle_timeout_minutes
     *
     * @return int
     */
    public function getIdleTimeoutMinutes()
    {
        return $this->container['idle_timeout_minutes'];
    }

    /**
     * Sets idle_timeout_minutes
     *
     * @param int $idle_timeout_minutes The number of minutes of inactivity after which this codespace will be automatically stopped.
     *
     * @return self
     */
    public function setIdleTimeoutMinutes($idle_timeout_minutes)
    {
        if (is_null($idle_timeout_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'idle_timeout_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idle_timeout_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idle_timeout_minutes'] = $idle_timeout_minutes;

        return $this;
    }

    /**
     * Gets web_url
     *
     * @return string
     */
    public function getWebUrl()
    {
        return $this->container['web_url'];
    }

    /**
     * Sets web_url
     *
     * @param string $web_url URL to access this codespace on the web.
     *
     * @return self
     */
    public function setWebUrl($web_url)
    {
        if (is_null($web_url)) {
            throw new \InvalidArgumentException('non-nullable web_url cannot be null');
        }
        $this->container['web_url'] = $web_url;

        return $this;
    }

    /**
     * Gets machines_url
     *
     * @return string
     */
    public function getMachinesUrl()
    {
        return $this->container['machines_url'];
    }

    /**
     * Sets machines_url
     *
     * @param string $machines_url API URL to access available alternate machine types for this codespace.
     *
     * @return self
     */
    public function setMachinesUrl($machines_url)
    {
        if (is_null($machines_url)) {
            throw new \InvalidArgumentException('non-nullable machines_url cannot be null');
        }
        $this->container['machines_url'] = $machines_url;

        return $this;
    }

    /**
     * Gets start_url
     *
     * @return string
     */
    public function getStartUrl()
    {
        return $this->container['start_url'];
    }

    /**
     * Sets start_url
     *
     * @param string $start_url API URL to start this codespace.
     *
     * @return self
     */
    public function setStartUrl($start_url)
    {
        if (is_null($start_url)) {
            throw new \InvalidArgumentException('non-nullable start_url cannot be null');
        }
        $this->container['start_url'] = $start_url;

        return $this;
    }

    /**
     * Gets stop_url
     *
     * @return string
     */
    public function getStopUrl()
    {
        return $this->container['stop_url'];
    }

    /**
     * Sets stop_url
     *
     * @param string $stop_url API URL to stop this codespace.
     *
     * @return self
     */
    public function setStopUrl($stop_url)
    {
        if (is_null($stop_url)) {
            throw new \InvalidArgumentException('non-nullable stop_url cannot be null');
        }
        $this->container['stop_url'] = $stop_url;

        return $this;
    }

    /**
     * Gets publish_url
     *
     * @return string|null
     */
    public function getPublishUrl()
    {
        return $this->container['publish_url'];
    }

    /**
     * Sets publish_url
     *
     * @param string|null $publish_url API URL to publish this codespace to a new repository.
     *
     * @return self
     */
    public function setPublishUrl($publish_url)
    {
        if (is_null($publish_url)) {
            array_push($this->openAPINullablesSetToNull, 'publish_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publish_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['publish_url'] = $publish_url;

        return $this;
    }

    /**
     * Gets pulls_url
     *
     * @return string
     */
    public function getPullsUrl()
    {
        return $this->container['pulls_url'];
    }

    /**
     * Sets pulls_url
     *
     * @param string $pulls_url API URL for the Pull Request associated with this codespace, if any.
     *
     * @return self
     */
    public function setPullsUrl($pulls_url)
    {
        if (is_null($pulls_url)) {
            array_push($this->openAPINullablesSetToNull, 'pulls_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pulls_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pulls_url'] = $pulls_url;

        return $this;
    }

    /**
     * Gets recent_folders
     *
     * @return string[]
     */
    public function getRecentFolders()
    {
        return $this->container['recent_folders'];
    }

    /**
     * Sets recent_folders
     *
     * @param string[] $recent_folders recent_folders
     *
     * @return self
     */
    public function setRecentFolders($recent_folders)
    {
        if (is_null($recent_folders)) {
            throw new \InvalidArgumentException('non-nullable recent_folders cannot be null');
        }
        $this->container['recent_folders'] = $recent_folders;

        return $this;
    }

    /**
     * Gets runtime_constraints
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodespaceRuntimeConstraints|null
     */
    public function getRuntimeConstraints()
    {
        return $this->container['runtime_constraints'];
    }

    /**
     * Sets runtime_constraints
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodespaceRuntimeConstraints|null $runtime_constraints runtime_constraints
     *
     * @return self
     */
    public function setRuntimeConstraints($runtime_constraints)
    {
        if (is_null($runtime_constraints)) {
            throw new \InvalidArgumentException('non-nullable runtime_constraints cannot be null');
        }
        $this->container['runtime_constraints'] = $runtime_constraints;

        return $this;
    }

    /**
     * Gets pending_operation
     *
     * @return bool|null
     */
    public function getPendingOperation()
    {
        return $this->container['pending_operation'];
    }

    /**
     * Sets pending_operation
     *
     * @param bool|null $pending_operation Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
     *
     * @return self
     */
    public function setPendingOperation($pending_operation)
    {
        if (is_null($pending_operation)) {
            array_push($this->openAPINullablesSetToNull, 'pending_operation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pending_operation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pending_operation'] = $pending_operation;

        return $this;
    }

    /**
     * Gets pending_operation_disabled_reason
     *
     * @return string|null
     */
    public function getPendingOperationDisabledReason()
    {
        return $this->container['pending_operation_disabled_reason'];
    }

    /**
     * Sets pending_operation_disabled_reason
     *
     * @param string|null $pending_operation_disabled_reason Text to show user when codespace is disabled by a pending operation
     *
     * @return self
     */
    public function setPendingOperationDisabledReason($pending_operation_disabled_reason)
    {
        if (is_null($pending_operation_disabled_reason)) {
            array_push($this->openAPINullablesSetToNull, 'pending_operation_disabled_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pending_operation_disabled_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pending_operation_disabled_reason'] = $pending_operation_disabled_reason;

        return $this;
    }

    /**
     * Gets idle_timeout_notice
     *
     * @return string|null
     */
    public function getIdleTimeoutNotice()
    {
        return $this->container['idle_timeout_notice'];
    }

    /**
     * Sets idle_timeout_notice
     *
     * @param string|null $idle_timeout_notice Text to show user when codespace idle timeout minutes has been overriden by an organization policy
     *
     * @return self
     */
    public function setIdleTimeoutNotice($idle_timeout_notice)
    {
        if (is_null($idle_timeout_notice)) {
            array_push($this->openAPINullablesSetToNull, 'idle_timeout_notice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idle_timeout_notice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idle_timeout_notice'] = $idle_timeout_notice;

        return $this;
    }

    /**
     * Gets retention_period_minutes
     *
     * @return int|null
     */
    public function getRetentionPeriodMinutes()
    {
        return $this->container['retention_period_minutes'];
    }

    /**
     * Sets retention_period_minutes
     *
     * @param int|null $retention_period_minutes Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
     *
     * @return self
     */
    public function setRetentionPeriodMinutes($retention_period_minutes)
    {
        if (is_null($retention_period_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'retention_period_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('retention_period_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['retention_period_minutes'] = $retention_period_minutes;

        return $this;
    }

    /**
     * Gets retention_expires_at
     *
     * @return \DateTime|null
     */
    public function getRetentionExpiresAt()
    {
        return $this->container['retention_expires_at'];
    }

    /**
     * Sets retention_expires_at
     *
     * @param \DateTime|null $retention_expires_at When a codespace will be auto-deleted based on the \"retention_period_minutes\" and \"last_used_at\"
     *
     * @return self
     */
    public function setRetentionExpiresAt($retention_expires_at)
    {
        if (is_null($retention_expires_at)) {
            array_push($this->openAPINullablesSetToNull, 'retention_expires_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('retention_expires_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['retention_expires_at'] = $retention_expires_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


