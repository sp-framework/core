<?php
/**
 * CodespacesCreateForAuthenticatedUserRequestOneOf
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * CodespacesCreateForAuthenticatedUserRequestOneOf Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CodespacesCreateForAuthenticatedUserRequestOneOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'codespaces_create_for_authenticated_user_request_oneOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'repository_id' => 'int',
        'ref' => 'string',
        'location' => 'string',
        'geo' => 'string',
        'client_ip' => 'string',
        'machine' => 'string',
        'devcontainer_path' => 'string',
        'multi_repo_permissions_opt_out' => 'bool',
        'working_directory' => 'string',
        'idle_timeout_minutes' => 'int',
        'display_name' => 'string',
        'retention_period_minutes' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'repository_id' => null,
        'ref' => null,
        'location' => null,
        'geo' => null,
        'client_ip' => null,
        'machine' => null,
        'devcontainer_path' => null,
        'multi_repo_permissions_opt_out' => null,
        'working_directory' => null,
        'idle_timeout_minutes' => null,
        'display_name' => null,
        'retention_period_minutes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'repository_id' => false,
        'ref' => false,
        'location' => false,
        'geo' => false,
        'client_ip' => false,
        'machine' => false,
        'devcontainer_path' => false,
        'multi_repo_permissions_opt_out' => false,
        'working_directory' => false,
        'idle_timeout_minutes' => false,
        'display_name' => false,
        'retention_period_minutes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'repository_id' => 'repository_id',
        'ref' => 'ref',
        'location' => 'location',
        'geo' => 'geo',
        'client_ip' => 'client_ip',
        'machine' => 'machine',
        'devcontainer_path' => 'devcontainer_path',
        'multi_repo_permissions_opt_out' => 'multi_repo_permissions_opt_out',
        'working_directory' => 'working_directory',
        'idle_timeout_minutes' => 'idle_timeout_minutes',
        'display_name' => 'display_name',
        'retention_period_minutes' => 'retention_period_minutes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'repository_id' => 'setRepositoryId',
        'ref' => 'setRef',
        'location' => 'setLocation',
        'geo' => 'setGeo',
        'client_ip' => 'setClientIp',
        'machine' => 'setMachine',
        'devcontainer_path' => 'setDevcontainerPath',
        'multi_repo_permissions_opt_out' => 'setMultiRepoPermissionsOptOut',
        'working_directory' => 'setWorkingDirectory',
        'idle_timeout_minutes' => 'setIdleTimeoutMinutes',
        'display_name' => 'setDisplayName',
        'retention_period_minutes' => 'setRetentionPeriodMinutes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'repository_id' => 'getRepositoryId',
        'ref' => 'getRef',
        'location' => 'getLocation',
        'geo' => 'getGeo',
        'client_ip' => 'getClientIp',
        'machine' => 'getMachine',
        'devcontainer_path' => 'getDevcontainerPath',
        'multi_repo_permissions_opt_out' => 'getMultiRepoPermissionsOptOut',
        'working_directory' => 'getWorkingDirectory',
        'idle_timeout_minutes' => 'getIdleTimeoutMinutes',
        'display_name' => 'getDisplayName',
        'retention_period_minutes' => 'getRetentionPeriodMinutes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const GEO_EUROPE_WEST = 'EuropeWest';
    public const GEO_SOUTHEAST_ASIA = 'SoutheastAsia';
    public const GEO_US_EAST = 'UsEast';
    public const GEO_US_WEST = 'UsWest';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGeoAllowableValues()
    {
        return [
            self::GEO_EUROPE_WEST,
            self::GEO_SOUTHEAST_ASIA,
            self::GEO_US_EAST,
            self::GEO_US_WEST,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('repository_id', $data ?? [], null);
        $this->setIfExists('ref', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('geo', $data ?? [], null);
        $this->setIfExists('client_ip', $data ?? [], null);
        $this->setIfExists('machine', $data ?? [], null);
        $this->setIfExists('devcontainer_path', $data ?? [], null);
        $this->setIfExists('multi_repo_permissions_opt_out', $data ?? [], null);
        $this->setIfExists('working_directory', $data ?? [], null);
        $this->setIfExists('idle_timeout_minutes', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('retention_period_minutes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['repository_id'] === null) {
            $invalidProperties[] = "'repository_id' can't be null";
        }
        $allowedValues = $this->getGeoAllowableValues();
        if (!is_null($this->container['geo']) && !in_array($this->container['geo'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'geo', must be one of '%s'",
                $this->container['geo'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets repository_id
     *
     * @return int
     */
    public function getRepositoryId()
    {
        return $this->container['repository_id'];
    }

    /**
     * Sets repository_id
     *
     * @param int $repository_id Repository id for this codespace
     *
     * @return self
     */
    public function setRepositoryId($repository_id)
    {
        if (is_null($repository_id)) {
            throw new \InvalidArgumentException('non-nullable repository_id cannot be null');
        }
        $this->container['repository_id'] = $repository_id;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return string|null
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string|null $ref Git ref (typically a branch name) for this codespace
     *
     * @return self
     */
    public function setRef($ref)
    {
        if (is_null($ref)) {
            throw new \InvalidArgumentException('non-nullable ref cannot be null');
        }
        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets geo
     *
     * @return string|null
     */
    public function getGeo()
    {
        return $this->container['geo'];
    }

    /**
     * Sets geo
     *
     * @param string|null $geo The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
     *
     * @return self
     */
    public function setGeo($geo)
    {
        if (is_null($geo)) {
            throw new \InvalidArgumentException('non-nullable geo cannot be null');
        }
        $allowedValues = $this->getGeoAllowableValues();
        if (!in_array($geo, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'geo', must be one of '%s'",
                    $geo,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['geo'] = $geo;

        return $this;
    }

    /**
     * Gets client_ip
     *
     * @return string|null
     */
    public function getClientIp()
    {
        return $this->container['client_ip'];
    }

    /**
     * Sets client_ip
     *
     * @param string|null $client_ip IP for location auto-detection when proxying a request
     *
     * @return self
     */
    public function setClientIp($client_ip)
    {
        if (is_null($client_ip)) {
            throw new \InvalidArgumentException('non-nullable client_ip cannot be null');
        }
        $this->container['client_ip'] = $client_ip;

        return $this;
    }

    /**
     * Gets machine
     *
     * @return string|null
     */
    public function getMachine()
    {
        return $this->container['machine'];
    }

    /**
     * Sets machine
     *
     * @param string|null $machine Machine type to use for this codespace
     *
     * @return self
     */
    public function setMachine($machine)
    {
        if (is_null($machine)) {
            throw new \InvalidArgumentException('non-nullable machine cannot be null');
        }
        $this->container['machine'] = $machine;

        return $this;
    }

    /**
     * Gets devcontainer_path
     *
     * @return string|null
     */
    public function getDevcontainerPath()
    {
        return $this->container['devcontainer_path'];
    }

    /**
     * Sets devcontainer_path
     *
     * @param string|null $devcontainer_path Path to devcontainer.json config to use for this codespace
     *
     * @return self
     */
    public function setDevcontainerPath($devcontainer_path)
    {
        if (is_null($devcontainer_path)) {
            throw new \InvalidArgumentException('non-nullable devcontainer_path cannot be null');
        }
        $this->container['devcontainer_path'] = $devcontainer_path;

        return $this;
    }

    /**
     * Gets multi_repo_permissions_opt_out
     *
     * @return bool|null
     */
    public function getMultiRepoPermissionsOptOut()
    {
        return $this->container['multi_repo_permissions_opt_out'];
    }

    /**
     * Sets multi_repo_permissions_opt_out
     *
     * @param bool|null $multi_repo_permissions_opt_out Whether to authorize requested permissions from devcontainer.json
     *
     * @return self
     */
    public function setMultiRepoPermissionsOptOut($multi_repo_permissions_opt_out)
    {
        if (is_null($multi_repo_permissions_opt_out)) {
            throw new \InvalidArgumentException('non-nullable multi_repo_permissions_opt_out cannot be null');
        }
        $this->container['multi_repo_permissions_opt_out'] = $multi_repo_permissions_opt_out;

        return $this;
    }

    /**
     * Gets working_directory
     *
     * @return string|null
     */
    public function getWorkingDirectory()
    {
        return $this->container['working_directory'];
    }

    /**
     * Sets working_directory
     *
     * @param string|null $working_directory Working directory for this codespace
     *
     * @return self
     */
    public function setWorkingDirectory($working_directory)
    {
        if (is_null($working_directory)) {
            throw new \InvalidArgumentException('non-nullable working_directory cannot be null');
        }
        $this->container['working_directory'] = $working_directory;

        return $this;
    }

    /**
     * Gets idle_timeout_minutes
     *
     * @return int|null
     */
    public function getIdleTimeoutMinutes()
    {
        return $this->container['idle_timeout_minutes'];
    }

    /**
     * Sets idle_timeout_minutes
     *
     * @param int|null $idle_timeout_minutes Time in minutes before codespace stops from inactivity
     *
     * @return self
     */
    public function setIdleTimeoutMinutes($idle_timeout_minutes)
    {
        if (is_null($idle_timeout_minutes)) {
            throw new \InvalidArgumentException('non-nullable idle_timeout_minutes cannot be null');
        }
        $this->container['idle_timeout_minutes'] = $idle_timeout_minutes;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name Display name for this codespace
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets retention_period_minutes
     *
     * @return int|null
     */
    public function getRetentionPeriodMinutes()
    {
        return $this->container['retention_period_minutes'];
    }

    /**
     * Sets retention_period_minutes
     *
     * @param int|null $retention_period_minutes Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
     *
     * @return self
     */
    public function setRetentionPeriodMinutes($retention_period_minutes)
    {
        if (is_null($retention_period_minutes)) {
            throw new \InvalidArgumentException('non-nullable retention_period_minutes cannot be null');
        }
        $this->container['retention_period_minutes'] = $retention_period_minutes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


