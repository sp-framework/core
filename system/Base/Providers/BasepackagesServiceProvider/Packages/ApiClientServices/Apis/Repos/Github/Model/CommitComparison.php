<?php
/**
 * CommitComparison
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * CommitComparison Class Doc Comment
 *
 * @category Class
 * @description Commit Comparison
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CommitComparison implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'commit-comparison';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'url' => 'string',
        'html_url' => 'string',
        'permalink_url' => 'string',
        'diff_url' => 'string',
        'patch_url' => 'string',
        'base_commit' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Commit',
        'merge_base_commit' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Commit',
        'status' => 'string',
        'ahead_by' => 'int',
        'behind_by' => 'int',
        'total_commits' => 'int',
        'commits' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Commit[]',
        'files' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DiffEntry[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'url' => 'uri',
        'html_url' => 'uri',
        'permalink_url' => 'uri',
        'diff_url' => 'uri',
        'patch_url' => 'uri',
        'base_commit' => null,
        'merge_base_commit' => null,
        'status' => null,
        'ahead_by' => null,
        'behind_by' => null,
        'total_commits' => null,
        'commits' => null,
        'files' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'url' => false,
        'html_url' => false,
        'permalink_url' => false,
        'diff_url' => false,
        'patch_url' => false,
        'base_commit' => false,
        'merge_base_commit' => false,
        'status' => false,
        'ahead_by' => false,
        'behind_by' => false,
        'total_commits' => false,
        'commits' => false,
        'files' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'html_url' => 'html_url',
        'permalink_url' => 'permalink_url',
        'diff_url' => 'diff_url',
        'patch_url' => 'patch_url',
        'base_commit' => 'base_commit',
        'merge_base_commit' => 'merge_base_commit',
        'status' => 'status',
        'ahead_by' => 'ahead_by',
        'behind_by' => 'behind_by',
        'total_commits' => 'total_commits',
        'commits' => 'commits',
        'files' => 'files'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'html_url' => 'setHtmlUrl',
        'permalink_url' => 'setPermalinkUrl',
        'diff_url' => 'setDiffUrl',
        'patch_url' => 'setPatchUrl',
        'base_commit' => 'setBaseCommit',
        'merge_base_commit' => 'setMergeBaseCommit',
        'status' => 'setStatus',
        'ahead_by' => 'setAheadBy',
        'behind_by' => 'setBehindBy',
        'total_commits' => 'setTotalCommits',
        'commits' => 'setCommits',
        'files' => 'setFiles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'html_url' => 'getHtmlUrl',
        'permalink_url' => 'getPermalinkUrl',
        'diff_url' => 'getDiffUrl',
        'patch_url' => 'getPatchUrl',
        'base_commit' => 'getBaseCommit',
        'merge_base_commit' => 'getMergeBaseCommit',
        'status' => 'getStatus',
        'ahead_by' => 'getAheadBy',
        'behind_by' => 'getBehindBy',
        'total_commits' => 'getTotalCommits',
        'commits' => 'getCommits',
        'files' => 'getFiles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_DIVERGED = 'diverged';
    public const STATUS_AHEAD = 'ahead';
    public const STATUS_BEHIND = 'behind';
    public const STATUS_IDENTICAL = 'identical';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DIVERGED,
            self::STATUS_AHEAD,
            self::STATUS_BEHIND,
            self::STATUS_IDENTICAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('permalink_url', $data ?? [], null);
        $this->setIfExists('diff_url', $data ?? [], null);
        $this->setIfExists('patch_url', $data ?? [], null);
        $this->setIfExists('base_commit', $data ?? [], null);
        $this->setIfExists('merge_base_commit', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('ahead_by', $data ?? [], null);
        $this->setIfExists('behind_by', $data ?? [], null);
        $this->setIfExists('total_commits', $data ?? [], null);
        $this->setIfExists('commits', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['html_url'] === null) {
            $invalidProperties[] = "'html_url' can't be null";
        }
        if ($this->container['permalink_url'] === null) {
            $invalidProperties[] = "'permalink_url' can't be null";
        }
        if ($this->container['diff_url'] === null) {
            $invalidProperties[] = "'diff_url' can't be null";
        }
        if ($this->container['patch_url'] === null) {
            $invalidProperties[] = "'patch_url' can't be null";
        }
        if ($this->container['base_commit'] === null) {
            $invalidProperties[] = "'base_commit' can't be null";
        }
        if ($this->container['merge_base_commit'] === null) {
            $invalidProperties[] = "'merge_base_commit' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['ahead_by'] === null) {
            $invalidProperties[] = "'ahead_by' can't be null";
        }
        if ($this->container['behind_by'] === null) {
            $invalidProperties[] = "'behind_by' can't be null";
        }
        if ($this->container['total_commits'] === null) {
            $invalidProperties[] = "'total_commits' can't be null";
        }
        if ($this->container['commits'] === null) {
            $invalidProperties[] = "'commits' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets permalink_url
     *
     * @return string
     */
    public function getPermalinkUrl()
    {
        return $this->container['permalink_url'];
    }

    /**
     * Sets permalink_url
     *
     * @param string $permalink_url permalink_url
     *
     * @return self
     */
    public function setPermalinkUrl($permalink_url)
    {
        if (is_null($permalink_url)) {
            throw new \InvalidArgumentException('non-nullable permalink_url cannot be null');
        }
        $this->container['permalink_url'] = $permalink_url;

        return $this;
    }

    /**
     * Gets diff_url
     *
     * @return string
     */
    public function getDiffUrl()
    {
        return $this->container['diff_url'];
    }

    /**
     * Sets diff_url
     *
     * @param string $diff_url diff_url
     *
     * @return self
     */
    public function setDiffUrl($diff_url)
    {
        if (is_null($diff_url)) {
            throw new \InvalidArgumentException('non-nullable diff_url cannot be null');
        }
        $this->container['diff_url'] = $diff_url;

        return $this;
    }

    /**
     * Gets patch_url
     *
     * @return string
     */
    public function getPatchUrl()
    {
        return $this->container['patch_url'];
    }

    /**
     * Sets patch_url
     *
     * @param string $patch_url patch_url
     *
     * @return self
     */
    public function setPatchUrl($patch_url)
    {
        if (is_null($patch_url)) {
            throw new \InvalidArgumentException('non-nullable patch_url cannot be null');
        }
        $this->container['patch_url'] = $patch_url;

        return $this;
    }

    /**
     * Gets base_commit
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Commit
     */
    public function getBaseCommit()
    {
        return $this->container['base_commit'];
    }

    /**
     * Sets base_commit
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Commit $base_commit base_commit
     *
     * @return self
     */
    public function setBaseCommit($base_commit)
    {
        if (is_null($base_commit)) {
            throw new \InvalidArgumentException('non-nullable base_commit cannot be null');
        }
        $this->container['base_commit'] = $base_commit;

        return $this;
    }

    /**
     * Gets merge_base_commit
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Commit
     */
    public function getMergeBaseCommit()
    {
        return $this->container['merge_base_commit'];
    }

    /**
     * Sets merge_base_commit
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Commit $merge_base_commit merge_base_commit
     *
     * @return self
     */
    public function setMergeBaseCommit($merge_base_commit)
    {
        if (is_null($merge_base_commit)) {
            throw new \InvalidArgumentException('non-nullable merge_base_commit cannot be null');
        }
        $this->container['merge_base_commit'] = $merge_base_commit;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets ahead_by
     *
     * @return int
     */
    public function getAheadBy()
    {
        return $this->container['ahead_by'];
    }

    /**
     * Sets ahead_by
     *
     * @param int $ahead_by ahead_by
     *
     * @return self
     */
    public function setAheadBy($ahead_by)
    {
        if (is_null($ahead_by)) {
            throw new \InvalidArgumentException('non-nullable ahead_by cannot be null');
        }
        $this->container['ahead_by'] = $ahead_by;

        return $this;
    }

    /**
     * Gets behind_by
     *
     * @return int
     */
    public function getBehindBy()
    {
        return $this->container['behind_by'];
    }

    /**
     * Sets behind_by
     *
     * @param int $behind_by behind_by
     *
     * @return self
     */
    public function setBehindBy($behind_by)
    {
        if (is_null($behind_by)) {
            throw new \InvalidArgumentException('non-nullable behind_by cannot be null');
        }
        $this->container['behind_by'] = $behind_by;

        return $this;
    }

    /**
     * Gets total_commits
     *
     * @return int
     */
    public function getTotalCommits()
    {
        return $this->container['total_commits'];
    }

    /**
     * Sets total_commits
     *
     * @param int $total_commits total_commits
     *
     * @return self
     */
    public function setTotalCommits($total_commits)
    {
        if (is_null($total_commits)) {
            throw new \InvalidArgumentException('non-nullable total_commits cannot be null');
        }
        $this->container['total_commits'] = $total_commits;

        return $this;
    }

    /**
     * Gets commits
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Commit[]
     */
    public function getCommits()
    {
        return $this->container['commits'];
    }

    /**
     * Sets commits
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Commit[] $commits commits
     *
     * @return self
     */
    public function setCommits($commits)
    {
        if (is_null($commits)) {
            throw new \InvalidArgumentException('non-nullable commits cannot be null');
        }
        $this->container['commits'] = $commits;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DiffEntry[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DiffEntry[]|null $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


