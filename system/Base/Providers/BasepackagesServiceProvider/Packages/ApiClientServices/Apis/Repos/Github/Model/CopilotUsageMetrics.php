<?php
/**
 * CopilotUsageMetrics
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * CopilotUsageMetrics Class Doc Comment
 *
 * @category Class
 * @description Summary of Copilot usage.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CopilotUsageMetrics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'copilot-usage-metrics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'day' => '\DateTime',
        'total_suggestions_count' => 'int',
        'total_acceptances_count' => 'int',
        'total_lines_suggested' => 'int',
        'total_lines_accepted' => 'int',
        'total_active_users' => 'int',
        'total_chat_acceptances' => 'int',
        'total_chat_turns' => 'int',
        'total_active_chat_users' => 'int',
        'breakdown' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CopilotUsageMetricsBreakdownInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'day' => 'date',
        'total_suggestions_count' => null,
        'total_acceptances_count' => null,
        'total_lines_suggested' => null,
        'total_lines_accepted' => null,
        'total_active_users' => null,
        'total_chat_acceptances' => null,
        'total_chat_turns' => null,
        'total_active_chat_users' => null,
        'breakdown' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'day' => false,
        'total_suggestions_count' => false,
        'total_acceptances_count' => false,
        'total_lines_suggested' => false,
        'total_lines_accepted' => false,
        'total_active_users' => false,
        'total_chat_acceptances' => false,
        'total_chat_turns' => false,
        'total_active_chat_users' => false,
        'breakdown' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'day' => 'day',
        'total_suggestions_count' => 'total_suggestions_count',
        'total_acceptances_count' => 'total_acceptances_count',
        'total_lines_suggested' => 'total_lines_suggested',
        'total_lines_accepted' => 'total_lines_accepted',
        'total_active_users' => 'total_active_users',
        'total_chat_acceptances' => 'total_chat_acceptances',
        'total_chat_turns' => 'total_chat_turns',
        'total_active_chat_users' => 'total_active_chat_users',
        'breakdown' => 'breakdown'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'day' => 'setDay',
        'total_suggestions_count' => 'setTotalSuggestionsCount',
        'total_acceptances_count' => 'setTotalAcceptancesCount',
        'total_lines_suggested' => 'setTotalLinesSuggested',
        'total_lines_accepted' => 'setTotalLinesAccepted',
        'total_active_users' => 'setTotalActiveUsers',
        'total_chat_acceptances' => 'setTotalChatAcceptances',
        'total_chat_turns' => 'setTotalChatTurns',
        'total_active_chat_users' => 'setTotalActiveChatUsers',
        'breakdown' => 'setBreakdown'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'day' => 'getDay',
        'total_suggestions_count' => 'getTotalSuggestionsCount',
        'total_acceptances_count' => 'getTotalAcceptancesCount',
        'total_lines_suggested' => 'getTotalLinesSuggested',
        'total_lines_accepted' => 'getTotalLinesAccepted',
        'total_active_users' => 'getTotalActiveUsers',
        'total_chat_acceptances' => 'getTotalChatAcceptances',
        'total_chat_turns' => 'getTotalChatTurns',
        'total_active_chat_users' => 'getTotalActiveChatUsers',
        'breakdown' => 'getBreakdown'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('day', $data ?? [], null);
        $this->setIfExists('total_suggestions_count', $data ?? [], null);
        $this->setIfExists('total_acceptances_count', $data ?? [], null);
        $this->setIfExists('total_lines_suggested', $data ?? [], null);
        $this->setIfExists('total_lines_accepted', $data ?? [], null);
        $this->setIfExists('total_active_users', $data ?? [], null);
        $this->setIfExists('total_chat_acceptances', $data ?? [], null);
        $this->setIfExists('total_chat_turns', $data ?? [], null);
        $this->setIfExists('total_active_chat_users', $data ?? [], null);
        $this->setIfExists('breakdown', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['day'] === null) {
            $invalidProperties[] = "'day' can't be null";
        }
        if ($this->container['breakdown'] === null) {
            $invalidProperties[] = "'breakdown' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets day
     *
     * @return \DateTime
     */
    public function getDay()
    {
        return $this->container['day'];
    }

    /**
     * Sets day
     *
     * @param \DateTime $day The date for which the usage metrics are reported, in `YYYY-MM-DD` format.
     *
     * @return self
     */
    public function setDay($day)
    {
        if (is_null($day)) {
            throw new \InvalidArgumentException('non-nullable day cannot be null');
        }
        $this->container['day'] = $day;

        return $this;
    }

    /**
     * Gets total_suggestions_count
     *
     * @return int|null
     */
    public function getTotalSuggestionsCount()
    {
        return $this->container['total_suggestions_count'];
    }

    /**
     * Sets total_suggestions_count
     *
     * @param int|null $total_suggestions_count The total number of Copilot code completion suggestions shown to users.
     *
     * @return self
     */
    public function setTotalSuggestionsCount($total_suggestions_count)
    {
        if (is_null($total_suggestions_count)) {
            throw new \InvalidArgumentException('non-nullable total_suggestions_count cannot be null');
        }
        $this->container['total_suggestions_count'] = $total_suggestions_count;

        return $this;
    }

    /**
     * Gets total_acceptances_count
     *
     * @return int|null
     */
    public function getTotalAcceptancesCount()
    {
        return $this->container['total_acceptances_count'];
    }

    /**
     * Sets total_acceptances_count
     *
     * @param int|null $total_acceptances_count The total number of Copilot code completion suggestions accepted by users.
     *
     * @return self
     */
    public function setTotalAcceptancesCount($total_acceptances_count)
    {
        if (is_null($total_acceptances_count)) {
            throw new \InvalidArgumentException('non-nullable total_acceptances_count cannot be null');
        }
        $this->container['total_acceptances_count'] = $total_acceptances_count;

        return $this;
    }

    /**
     * Gets total_lines_suggested
     *
     * @return int|null
     */
    public function getTotalLinesSuggested()
    {
        return $this->container['total_lines_suggested'];
    }

    /**
     * Sets total_lines_suggested
     *
     * @param int|null $total_lines_suggested The total number of lines of code completions suggested by Copilot.
     *
     * @return self
     */
    public function setTotalLinesSuggested($total_lines_suggested)
    {
        if (is_null($total_lines_suggested)) {
            throw new \InvalidArgumentException('non-nullable total_lines_suggested cannot be null');
        }
        $this->container['total_lines_suggested'] = $total_lines_suggested;

        return $this;
    }

    /**
     * Gets total_lines_accepted
     *
     * @return int|null
     */
    public function getTotalLinesAccepted()
    {
        return $this->container['total_lines_accepted'];
    }

    /**
     * Sets total_lines_accepted
     *
     * @param int|null $total_lines_accepted The total number of lines of code completions accepted by users.
     *
     * @return self
     */
    public function setTotalLinesAccepted($total_lines_accepted)
    {
        if (is_null($total_lines_accepted)) {
            throw new \InvalidArgumentException('non-nullable total_lines_accepted cannot be null');
        }
        $this->container['total_lines_accepted'] = $total_lines_accepted;

        return $this;
    }

    /**
     * Gets total_active_users
     *
     * @return int|null
     */
    public function getTotalActiveUsers()
    {
        return $this->container['total_active_users'];
    }

    /**
     * Sets total_active_users
     *
     * @param int|null $total_active_users The total number of users who were shown Copilot code completion suggestions during the day specified.
     *
     * @return self
     */
    public function setTotalActiveUsers($total_active_users)
    {
        if (is_null($total_active_users)) {
            throw new \InvalidArgumentException('non-nullable total_active_users cannot be null');
        }
        $this->container['total_active_users'] = $total_active_users;

        return $this;
    }

    /**
     * Gets total_chat_acceptances
     *
     * @return int|null
     */
    public function getTotalChatAcceptances()
    {
        return $this->container['total_chat_acceptances'];
    }

    /**
     * Sets total_chat_acceptances
     *
     * @param int|null $total_chat_acceptances The total instances of users who accepted code suggested by Copilot Chat in the IDE (panel and inline).
     *
     * @return self
     */
    public function setTotalChatAcceptances($total_chat_acceptances)
    {
        if (is_null($total_chat_acceptances)) {
            throw new \InvalidArgumentException('non-nullable total_chat_acceptances cannot be null');
        }
        $this->container['total_chat_acceptances'] = $total_chat_acceptances;

        return $this;
    }

    /**
     * Gets total_chat_turns
     *
     * @return int|null
     */
    public function getTotalChatTurns()
    {
        return $this->container['total_chat_turns'];
    }

    /**
     * Sets total_chat_turns
     *
     * @param int|null $total_chat_turns The total number of chat turns (prompt and response pairs) sent between users and Copilot Chat in the IDE.
     *
     * @return self
     */
    public function setTotalChatTurns($total_chat_turns)
    {
        if (is_null($total_chat_turns)) {
            throw new \InvalidArgumentException('non-nullable total_chat_turns cannot be null');
        }
        $this->container['total_chat_turns'] = $total_chat_turns;

        return $this;
    }

    /**
     * Gets total_active_chat_users
     *
     * @return int|null
     */
    public function getTotalActiveChatUsers()
    {
        return $this->container['total_active_chat_users'];
    }

    /**
     * Sets total_active_chat_users
     *
     * @param int|null $total_active_chat_users The total number of users who interacted with Copilot Chat in the IDE during the day specified.
     *
     * @return self
     */
    public function setTotalActiveChatUsers($total_active_chat_users)
    {
        if (is_null($total_active_chat_users)) {
            throw new \InvalidArgumentException('non-nullable total_active_chat_users cannot be null');
        }
        $this->container['total_active_chat_users'] = $total_active_chat_users;

        return $this;
    }

    /**
     * Gets breakdown
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CopilotUsageMetricsBreakdownInner[]
     */
    public function getBreakdown()
    {
        return $this->container['breakdown'];
    }

    /**
     * Sets breakdown
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CopilotUsageMetricsBreakdownInner[] $breakdown Breakdown of Copilot code completions usage by language and editor
     *
     * @return self
     */
    public function setBreakdown($breakdown)
    {
        if (is_null($breakdown)) {
            array_push($this->openAPINullablesSetToNull, 'breakdown');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('breakdown', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['breakdown'] = $breakdown;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


