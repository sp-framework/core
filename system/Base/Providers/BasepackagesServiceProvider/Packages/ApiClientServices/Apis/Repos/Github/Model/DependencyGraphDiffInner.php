<?php
/**
 * DependencyGraphDiffInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * DependencyGraphDiffInner Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DependencyGraphDiffInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'dependency_graph_diff_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'change_type' => 'string',
        'manifest' => 'string',
        'ecosystem' => 'string',
        'name' => 'string',
        'version' => 'string',
        'package_url' => 'string',
        'license' => 'string',
        'source_repository_url' => 'string',
        'vulnerabilities' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependencyGraphDiffInnerVulnerabilitiesInner[]',
        'scope' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'change_type' => null,
        'manifest' => null,
        'ecosystem' => null,
        'name' => null,
        'version' => null,
        'package_url' => null,
        'license' => null,
        'source_repository_url' => null,
        'vulnerabilities' => null,
        'scope' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'change_type' => false,
        'manifest' => false,
        'ecosystem' => false,
        'name' => false,
        'version' => false,
        'package_url' => true,
        'license' => true,
        'source_repository_url' => true,
        'vulnerabilities' => false,
        'scope' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'change_type' => 'change_type',
        'manifest' => 'manifest',
        'ecosystem' => 'ecosystem',
        'name' => 'name',
        'version' => 'version',
        'package_url' => 'package_url',
        'license' => 'license',
        'source_repository_url' => 'source_repository_url',
        'vulnerabilities' => 'vulnerabilities',
        'scope' => 'scope'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'change_type' => 'setChangeType',
        'manifest' => 'setManifest',
        'ecosystem' => 'setEcosystem',
        'name' => 'setName',
        'version' => 'setVersion',
        'package_url' => 'setPackageUrl',
        'license' => 'setLicense',
        'source_repository_url' => 'setSourceRepositoryUrl',
        'vulnerabilities' => 'setVulnerabilities',
        'scope' => 'setScope'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'change_type' => 'getChangeType',
        'manifest' => 'getManifest',
        'ecosystem' => 'getEcosystem',
        'name' => 'getName',
        'version' => 'getVersion',
        'package_url' => 'getPackageUrl',
        'license' => 'getLicense',
        'source_repository_url' => 'getSourceRepositoryUrl',
        'vulnerabilities' => 'getVulnerabilities',
        'scope' => 'getScope'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CHANGE_TYPE_ADDED = 'added';
    public const CHANGE_TYPE_REMOVED = 'removed';
    public const SCOPE_UNKNOWN = 'unknown';
    public const SCOPE_RUNTIME = 'runtime';
    public const SCOPE_DEVELOPMENT = 'development';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChangeTypeAllowableValues()
    {
        return [
            self::CHANGE_TYPE_ADDED,
            self::CHANGE_TYPE_REMOVED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScopeAllowableValues()
    {
        return [
            self::SCOPE_UNKNOWN,
            self::SCOPE_RUNTIME,
            self::SCOPE_DEVELOPMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('change_type', $data ?? [], null);
        $this->setIfExists('manifest', $data ?? [], null);
        $this->setIfExists('ecosystem', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('package_url', $data ?? [], null);
        $this->setIfExists('license', $data ?? [], null);
        $this->setIfExists('source_repository_url', $data ?? [], null);
        $this->setIfExists('vulnerabilities', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['change_type'] === null) {
            $invalidProperties[] = "'change_type' can't be null";
        }
        $allowedValues = $this->getChangeTypeAllowableValues();
        if (!is_null($this->container['change_type']) && !in_array($this->container['change_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'change_type', must be one of '%s'",
                $this->container['change_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['manifest'] === null) {
            $invalidProperties[] = "'manifest' can't be null";
        }
        if ($this->container['ecosystem'] === null) {
            $invalidProperties[] = "'ecosystem' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['package_url'] === null) {
            $invalidProperties[] = "'package_url' can't be null";
        }
        if ($this->container['license'] === null) {
            $invalidProperties[] = "'license' can't be null";
        }
        if ($this->container['source_repository_url'] === null) {
            $invalidProperties[] = "'source_repository_url' can't be null";
        }
        if ($this->container['vulnerabilities'] === null) {
            $invalidProperties[] = "'vulnerabilities' can't be null";
        }
        if ($this->container['scope'] === null) {
            $invalidProperties[] = "'scope' can't be null";
        }
        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($this->container['scope']) && !in_array($this->container['scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scope', must be one of '%s'",
                $this->container['scope'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets change_type
     *
     * @return string
     */
    public function getChangeType()
    {
        return $this->container['change_type'];
    }

    /**
     * Sets change_type
     *
     * @param string $change_type change_type
     *
     * @return self
     */
    public function setChangeType($change_type)
    {
        if (is_null($change_type)) {
            throw new \InvalidArgumentException('non-nullable change_type cannot be null');
        }
        $allowedValues = $this->getChangeTypeAllowableValues();
        if (!in_array($change_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'change_type', must be one of '%s'",
                    $change_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['change_type'] = $change_type;

        return $this;
    }

    /**
     * Gets manifest
     *
     * @return string
     */
    public function getManifest()
    {
        return $this->container['manifest'];
    }

    /**
     * Sets manifest
     *
     * @param string $manifest manifest
     *
     * @return self
     */
    public function setManifest($manifest)
    {
        if (is_null($manifest)) {
            throw new \InvalidArgumentException('non-nullable manifest cannot be null');
        }
        $this->container['manifest'] = $manifest;

        return $this;
    }

    /**
     * Gets ecosystem
     *
     * @return string
     */
    public function getEcosystem()
    {
        return $this->container['ecosystem'];
    }

    /**
     * Sets ecosystem
     *
     * @param string $ecosystem ecosystem
     *
     * @return self
     */
    public function setEcosystem($ecosystem)
    {
        if (is_null($ecosystem)) {
            throw new \InvalidArgumentException('non-nullable ecosystem cannot be null');
        }
        $this->container['ecosystem'] = $ecosystem;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets package_url
     *
     * @return string
     */
    public function getPackageUrl()
    {
        return $this->container['package_url'];
    }

    /**
     * Sets package_url
     *
     * @param string $package_url package_url
     *
     * @return self
     */
    public function setPackageUrl($package_url)
    {
        if (is_null($package_url)) {
            array_push($this->openAPINullablesSetToNull, 'package_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('package_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['package_url'] = $package_url;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string $license license
     *
     * @return self
     */
    public function setLicense($license)
    {
        if (is_null($license)) {
            array_push($this->openAPINullablesSetToNull, 'license');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('license', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets source_repository_url
     *
     * @return string
     */
    public function getSourceRepositoryUrl()
    {
        return $this->container['source_repository_url'];
    }

    /**
     * Sets source_repository_url
     *
     * @param string $source_repository_url source_repository_url
     *
     * @return self
     */
    public function setSourceRepositoryUrl($source_repository_url)
    {
        if (is_null($source_repository_url)) {
            array_push($this->openAPINullablesSetToNull, 'source_repository_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_repository_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_repository_url'] = $source_repository_url;

        return $this;
    }

    /**
     * Gets vulnerabilities
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependencyGraphDiffInnerVulnerabilitiesInner[]
     */
    public function getVulnerabilities()
    {
        return $this->container['vulnerabilities'];
    }

    /**
     * Sets vulnerabilities
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependencyGraphDiffInnerVulnerabilitiesInner[] $vulnerabilities vulnerabilities
     *
     * @return self
     */
    public function setVulnerabilities($vulnerabilities)
    {
        if (is_null($vulnerabilities)) {
            throw new \InvalidArgumentException('non-nullable vulnerabilities cannot be null');
        }
        $this->container['vulnerabilities'] = $vulnerabilities;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
     *
     * @return self
     */
    public function setScope($scope)
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }
        $allowedValues = $this->getScopeAllowableValues();
        if (!in_array($scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scope', must be one of '%s'",
                    $scope,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scope'] = $scope;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


