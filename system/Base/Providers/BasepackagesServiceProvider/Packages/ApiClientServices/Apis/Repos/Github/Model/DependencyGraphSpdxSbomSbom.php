<?php
/**
 * DependencyGraphSpdxSbomSbom
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * DependencyGraphSpdxSbomSbom Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DependencyGraphSpdxSbomSbom implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'dependency_graph_spdx_sbom_sbom';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'spdxid' => 'string',
        'spdx_version' => 'string',
        'creation_info' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependencyGraphSpdxSbomSbomCreationInfo',
        'name' => 'string',
        'data_license' => 'string',
        'document_describes' => 'string[]',
        'document_namespace' => 'string',
        'packages' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependencyGraphSpdxSbomSbomPackagesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'spdxid' => null,
        'spdx_version' => null,
        'creation_info' => null,
        'name' => null,
        'data_license' => null,
        'document_describes' => null,
        'document_namespace' => null,
        'packages' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'spdxid' => false,
        'spdx_version' => false,
        'creation_info' => false,
        'name' => false,
        'data_license' => false,
        'document_describes' => false,
        'document_namespace' => false,
        'packages' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'spdxid' => 'SPDXID',
        'spdx_version' => 'spdxVersion',
        'creation_info' => 'creationInfo',
        'name' => 'name',
        'data_license' => 'dataLicense',
        'document_describes' => 'documentDescribes',
        'document_namespace' => 'documentNamespace',
        'packages' => 'packages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'spdxid' => 'setSpdxid',
        'spdx_version' => 'setSpdxVersion',
        'creation_info' => 'setCreationInfo',
        'name' => 'setName',
        'data_license' => 'setDataLicense',
        'document_describes' => 'setDocumentDescribes',
        'document_namespace' => 'setDocumentNamespace',
        'packages' => 'setPackages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'spdxid' => 'getSpdxid',
        'spdx_version' => 'getSpdxVersion',
        'creation_info' => 'getCreationInfo',
        'name' => 'getName',
        'data_license' => 'getDataLicense',
        'document_describes' => 'getDocumentDescribes',
        'document_namespace' => 'getDocumentNamespace',
        'packages' => 'getPackages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('spdxid', $data ?? [], null);
        $this->setIfExists('spdx_version', $data ?? [], null);
        $this->setIfExists('creation_info', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('data_license', $data ?? [], null);
        $this->setIfExists('document_describes', $data ?? [], null);
        $this->setIfExists('document_namespace', $data ?? [], null);
        $this->setIfExists('packages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['spdxid'] === null) {
            $invalidProperties[] = "'spdxid' can't be null";
        }
        if ($this->container['spdx_version'] === null) {
            $invalidProperties[] = "'spdx_version' can't be null";
        }
        if ($this->container['creation_info'] === null) {
            $invalidProperties[] = "'creation_info' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['data_license'] === null) {
            $invalidProperties[] = "'data_license' can't be null";
        }
        if ($this->container['document_describes'] === null) {
            $invalidProperties[] = "'document_describes' can't be null";
        }
        if ($this->container['document_namespace'] === null) {
            $invalidProperties[] = "'document_namespace' can't be null";
        }
        if ($this->container['packages'] === null) {
            $invalidProperties[] = "'packages' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets spdxid
     *
     * @return string
     */
    public function getSpdxid()
    {
        return $this->container['spdxid'];
    }

    /**
     * Sets spdxid
     *
     * @param string $spdxid The SPDX identifier for the SPDX document.
     *
     * @return self
     */
    public function setSpdxid($spdxid)
    {
        if (is_null($spdxid)) {
            throw new \InvalidArgumentException('non-nullable spdxid cannot be null');
        }
        $this->container['spdxid'] = $spdxid;

        return $this;
    }

    /**
     * Gets spdx_version
     *
     * @return string
     */
    public function getSpdxVersion()
    {
        return $this->container['spdx_version'];
    }

    /**
     * Sets spdx_version
     *
     * @param string $spdx_version The version of the SPDX specification that this document conforms to.
     *
     * @return self
     */
    public function setSpdxVersion($spdx_version)
    {
        if (is_null($spdx_version)) {
            throw new \InvalidArgumentException('non-nullable spdx_version cannot be null');
        }
        $this->container['spdx_version'] = $spdx_version;

        return $this;
    }

    /**
     * Gets creation_info
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependencyGraphSpdxSbomSbomCreationInfo
     */
    public function getCreationInfo()
    {
        return $this->container['creation_info'];
    }

    /**
     * Sets creation_info
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependencyGraphSpdxSbomSbomCreationInfo $creation_info creation_info
     *
     * @return self
     */
    public function setCreationInfo($creation_info)
    {
        if (is_null($creation_info)) {
            throw new \InvalidArgumentException('non-nullable creation_info cannot be null');
        }
        $this->container['creation_info'] = $creation_info;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the SPDX document.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets data_license
     *
     * @return string
     */
    public function getDataLicense()
    {
        return $this->container['data_license'];
    }

    /**
     * Sets data_license
     *
     * @param string $data_license The license under which the SPDX document is licensed.
     *
     * @return self
     */
    public function setDataLicense($data_license)
    {
        if (is_null($data_license)) {
            throw new \InvalidArgumentException('non-nullable data_license cannot be null');
        }
        $this->container['data_license'] = $data_license;

        return $this;
    }

    /**
     * Gets document_describes
     *
     * @return string[]
     */
    public function getDocumentDescribes()
    {
        return $this->container['document_describes'];
    }

    /**
     * Sets document_describes
     *
     * @param string[] $document_describes The name of the repository that the SPDX document describes.
     *
     * @return self
     */
    public function setDocumentDescribes($document_describes)
    {
        if (is_null($document_describes)) {
            throw new \InvalidArgumentException('non-nullable document_describes cannot be null');
        }
        $this->container['document_describes'] = $document_describes;

        return $this;
    }

    /**
     * Gets document_namespace
     *
     * @return string
     */
    public function getDocumentNamespace()
    {
        return $this->container['document_namespace'];
    }

    /**
     * Sets document_namespace
     *
     * @param string $document_namespace The namespace for the SPDX document.
     *
     * @return self
     */
    public function setDocumentNamespace($document_namespace)
    {
        if (is_null($document_namespace)) {
            throw new \InvalidArgumentException('non-nullable document_namespace cannot be null');
        }
        $this->container['document_namespace'] = $document_namespace;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependencyGraphSpdxSbomSbomPackagesInner[]
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependencyGraphSpdxSbomSbomPackagesInner[] $packages packages
     *
     * @return self
     */
    public function setPackages($packages)
    {
        if (is_null($packages)) {
            throw new \InvalidArgumentException('non-nullable packages cannot be null');
        }
        $this->container['packages'] = $packages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


