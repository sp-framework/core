<?php
/**
 * DependencyGraphSpdxSbomSbomPackagesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * DependencyGraphSpdxSbomSbomPackagesInner Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DependencyGraphSpdxSbomSbomPackagesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'dependency_graph_spdx_sbom_sbom_packages_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'spdxid' => 'string',
        'name' => 'string',
        'version_info' => 'string',
        'download_location' => 'string',
        'files_analyzed' => 'bool',
        'license_concluded' => 'string',
        'license_declared' => 'string',
        'supplier' => 'string',
        'external_refs' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependencyGraphSpdxSbomSbomPackagesInnerExternalRefsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'spdxid' => null,
        'name' => null,
        'version_info' => null,
        'download_location' => null,
        'files_analyzed' => null,
        'license_concluded' => null,
        'license_declared' => null,
        'supplier' => null,
        'external_refs' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'spdxid' => false,
        'name' => false,
        'version_info' => false,
        'download_location' => false,
        'files_analyzed' => false,
        'license_concluded' => false,
        'license_declared' => false,
        'supplier' => false,
        'external_refs' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'spdxid' => 'SPDXID',
        'name' => 'name',
        'version_info' => 'versionInfo',
        'download_location' => 'downloadLocation',
        'files_analyzed' => 'filesAnalyzed',
        'license_concluded' => 'licenseConcluded',
        'license_declared' => 'licenseDeclared',
        'supplier' => 'supplier',
        'external_refs' => 'externalRefs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'spdxid' => 'setSpdxid',
        'name' => 'setName',
        'version_info' => 'setVersionInfo',
        'download_location' => 'setDownloadLocation',
        'files_analyzed' => 'setFilesAnalyzed',
        'license_concluded' => 'setLicenseConcluded',
        'license_declared' => 'setLicenseDeclared',
        'supplier' => 'setSupplier',
        'external_refs' => 'setExternalRefs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'spdxid' => 'getSpdxid',
        'name' => 'getName',
        'version_info' => 'getVersionInfo',
        'download_location' => 'getDownloadLocation',
        'files_analyzed' => 'getFilesAnalyzed',
        'license_concluded' => 'getLicenseConcluded',
        'license_declared' => 'getLicenseDeclared',
        'supplier' => 'getSupplier',
        'external_refs' => 'getExternalRefs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('spdxid', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('version_info', $data ?? [], null);
        $this->setIfExists('download_location', $data ?? [], null);
        $this->setIfExists('files_analyzed', $data ?? [], null);
        $this->setIfExists('license_concluded', $data ?? [], null);
        $this->setIfExists('license_declared', $data ?? [], null);
        $this->setIfExists('supplier', $data ?? [], null);
        $this->setIfExists('external_refs', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets spdxid
     *
     * @return string|null
     */
    public function getSpdxid()
    {
        return $this->container['spdxid'];
    }

    /**
     * Sets spdxid
     *
     * @param string|null $spdxid A unique SPDX identifier for the package.
     *
     * @return self
     */
    public function setSpdxid($spdxid)
    {
        if (is_null($spdxid)) {
            throw new \InvalidArgumentException('non-nullable spdxid cannot be null');
        }
        $this->container['spdxid'] = $spdxid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the package.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets version_info
     *
     * @return string|null
     */
    public function getVersionInfo()
    {
        return $this->container['version_info'];
    }

    /**
     * Sets version_info
     *
     * @param string|null $version_info The version of the package. If the package does not have an exact version specified, a version range is given.
     *
     * @return self
     */
    public function setVersionInfo($version_info)
    {
        if (is_null($version_info)) {
            throw new \InvalidArgumentException('non-nullable version_info cannot be null');
        }
        $this->container['version_info'] = $version_info;

        return $this;
    }

    /**
     * Gets download_location
     *
     * @return string|null
     */
    public function getDownloadLocation()
    {
        return $this->container['download_location'];
    }

    /**
     * Sets download_location
     *
     * @param string|null $download_location The location where the package can be downloaded, or NOASSERTION if this has not been determined.
     *
     * @return self
     */
    public function setDownloadLocation($download_location)
    {
        if (is_null($download_location)) {
            throw new \InvalidArgumentException('non-nullable download_location cannot be null');
        }
        $this->container['download_location'] = $download_location;

        return $this;
    }

    /**
     * Gets files_analyzed
     *
     * @return bool|null
     */
    public function getFilesAnalyzed()
    {
        return $this->container['files_analyzed'];
    }

    /**
     * Sets files_analyzed
     *
     * @param bool|null $files_analyzed Whether the package's file content has been subjected to analysis during the creation of the SPDX document.
     *
     * @return self
     */
    public function setFilesAnalyzed($files_analyzed)
    {
        if (is_null($files_analyzed)) {
            throw new \InvalidArgumentException('non-nullable files_analyzed cannot be null');
        }
        $this->container['files_analyzed'] = $files_analyzed;

        return $this;
    }

    /**
     * Gets license_concluded
     *
     * @return string|null
     */
    public function getLicenseConcluded()
    {
        return $this->container['license_concluded'];
    }

    /**
     * Sets license_concluded
     *
     * @param string|null $license_concluded The license of the package as determined while creating the SPDX document.
     *
     * @return self
     */
    public function setLicenseConcluded($license_concluded)
    {
        if (is_null($license_concluded)) {
            throw new \InvalidArgumentException('non-nullable license_concluded cannot be null');
        }
        $this->container['license_concluded'] = $license_concluded;

        return $this;
    }

    /**
     * Gets license_declared
     *
     * @return string|null
     */
    public function getLicenseDeclared()
    {
        return $this->container['license_declared'];
    }

    /**
     * Sets license_declared
     *
     * @param string|null $license_declared The license of the package as declared by its author, or NOASSERTION if this information was not available when the SPDX document was created.
     *
     * @return self
     */
    public function setLicenseDeclared($license_declared)
    {
        if (is_null($license_declared)) {
            throw new \InvalidArgumentException('non-nullable license_declared cannot be null');
        }
        $this->container['license_declared'] = $license_declared;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return string|null
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string|null $supplier The distribution source of this package, or NOASSERTION if this was not determined.
     *
     * @return self
     */
    public function setSupplier($supplier)
    {
        if (is_null($supplier)) {
            throw new \InvalidArgumentException('non-nullable supplier cannot be null');
        }
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets external_refs
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependencyGraphSpdxSbomSbomPackagesInnerExternalRefsInner[]|null
     */
    public function getExternalRefs()
    {
        return $this->container['external_refs'];
    }

    /**
     * Sets external_refs
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DependencyGraphSpdxSbomSbomPackagesInnerExternalRefsInner[]|null $external_refs external_refs
     *
     * @return self
     */
    public function setExternalRefs($external_refs)
    {
        if (is_null($external_refs)) {
            throw new \InvalidArgumentException('non-nullable external_refs cannot be null');
        }
        $this->container['external_refs'] = $external_refs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


