<?php
/**
 * DeploymentWorkflowRun1HeadRepository
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * DeploymentWorkflowRun1HeadRepository Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DeploymentWorkflowRun1HeadRepository implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Deployment_Workflow_Run_1_head_repository';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'archive_url' => 'string',
        'assignees_url' => 'string',
        'blobs_url' => 'string',
        'branches_url' => 'string',
        'collaborators_url' => 'string',
        'comments_url' => 'string',
        'commits_url' => 'string',
        'compare_url' => 'string',
        'contents_url' => 'string',
        'contributors_url' => 'string',
        'deployments_url' => 'string',
        'description' => 'string',
        'downloads_url' => 'string',
        'events_url' => 'string',
        'fork' => 'bool',
        'forks_url' => 'string',
        'full_name' => 'string',
        'git_commits_url' => 'string',
        'git_refs_url' => 'string',
        'git_tags_url' => 'string',
        'hooks_url' => 'string',
        'html_url' => 'string',
        'id' => 'int',
        'issue_comment_url' => 'string',
        'issue_events_url' => 'string',
        'issues_url' => 'string',
        'keys_url' => 'string',
        'labels_url' => 'string',
        'languages_url' => 'string',
        'merges_url' => 'string',
        'milestones_url' => 'string',
        'name' => 'string',
        'node_id' => 'string',
        'notifications_url' => 'string',
        'owner' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksSponsorshipMaintainer',
        'private' => 'bool',
        'pulls_url' => 'string',
        'releases_url' => 'string',
        'stargazers_url' => 'string',
        'statuses_url' => 'string',
        'subscribers_url' => 'string',
        'subscription_url' => 'string',
        'tags_url' => 'string',
        'teams_url' => 'string',
        'trees_url' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'archive_url' => null,
        'assignees_url' => null,
        'blobs_url' => null,
        'branches_url' => null,
        'collaborators_url' => null,
        'comments_url' => null,
        'commits_url' => null,
        'compare_url' => null,
        'contents_url' => null,
        'contributors_url' => null,
        'deployments_url' => null,
        'description' => null,
        'downloads_url' => null,
        'events_url' => null,
        'fork' => null,
        'forks_url' => null,
        'full_name' => null,
        'git_commits_url' => null,
        'git_refs_url' => null,
        'git_tags_url' => null,
        'hooks_url' => null,
        'html_url' => null,
        'id' => null,
        'issue_comment_url' => null,
        'issue_events_url' => null,
        'issues_url' => null,
        'keys_url' => null,
        'labels_url' => null,
        'languages_url' => null,
        'merges_url' => null,
        'milestones_url' => null,
        'name' => null,
        'node_id' => null,
        'notifications_url' => null,
        'owner' => null,
        'private' => null,
        'pulls_url' => null,
        'releases_url' => null,
        'stargazers_url' => null,
        'statuses_url' => null,
        'subscribers_url' => null,
        'subscription_url' => null,
        'tags_url' => null,
        'teams_url' => null,
        'trees_url' => null,
        'url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'archive_url' => false,
        'assignees_url' => false,
        'blobs_url' => false,
        'branches_url' => false,
        'collaborators_url' => false,
        'comments_url' => false,
        'commits_url' => false,
        'compare_url' => false,
        'contents_url' => false,
        'contributors_url' => false,
        'deployments_url' => false,
        'description' => true,
        'downloads_url' => false,
        'events_url' => false,
        'fork' => false,
        'forks_url' => false,
        'full_name' => false,
        'git_commits_url' => false,
        'git_refs_url' => false,
        'git_tags_url' => false,
        'hooks_url' => false,
        'html_url' => false,
        'id' => false,
        'issue_comment_url' => false,
        'issue_events_url' => false,
        'issues_url' => false,
        'keys_url' => false,
        'labels_url' => false,
        'languages_url' => false,
        'merges_url' => false,
        'milestones_url' => false,
        'name' => false,
        'node_id' => false,
        'notifications_url' => false,
        'owner' => false,
        'private' => false,
        'pulls_url' => false,
        'releases_url' => false,
        'stargazers_url' => false,
        'statuses_url' => false,
        'subscribers_url' => false,
        'subscription_url' => false,
        'tags_url' => false,
        'teams_url' => false,
        'trees_url' => false,
        'url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'archive_url' => 'archive_url',
        'assignees_url' => 'assignees_url',
        'blobs_url' => 'blobs_url',
        'branches_url' => 'branches_url',
        'collaborators_url' => 'collaborators_url',
        'comments_url' => 'comments_url',
        'commits_url' => 'commits_url',
        'compare_url' => 'compare_url',
        'contents_url' => 'contents_url',
        'contributors_url' => 'contributors_url',
        'deployments_url' => 'deployments_url',
        'description' => 'description',
        'downloads_url' => 'downloads_url',
        'events_url' => 'events_url',
        'fork' => 'fork',
        'forks_url' => 'forks_url',
        'full_name' => 'full_name',
        'git_commits_url' => 'git_commits_url',
        'git_refs_url' => 'git_refs_url',
        'git_tags_url' => 'git_tags_url',
        'hooks_url' => 'hooks_url',
        'html_url' => 'html_url',
        'id' => 'id',
        'issue_comment_url' => 'issue_comment_url',
        'issue_events_url' => 'issue_events_url',
        'issues_url' => 'issues_url',
        'keys_url' => 'keys_url',
        'labels_url' => 'labels_url',
        'languages_url' => 'languages_url',
        'merges_url' => 'merges_url',
        'milestones_url' => 'milestones_url',
        'name' => 'name',
        'node_id' => 'node_id',
        'notifications_url' => 'notifications_url',
        'owner' => 'owner',
        'private' => 'private',
        'pulls_url' => 'pulls_url',
        'releases_url' => 'releases_url',
        'stargazers_url' => 'stargazers_url',
        'statuses_url' => 'statuses_url',
        'subscribers_url' => 'subscribers_url',
        'subscription_url' => 'subscription_url',
        'tags_url' => 'tags_url',
        'teams_url' => 'teams_url',
        'trees_url' => 'trees_url',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'archive_url' => 'setArchiveUrl',
        'assignees_url' => 'setAssigneesUrl',
        'blobs_url' => 'setBlobsUrl',
        'branches_url' => 'setBranchesUrl',
        'collaborators_url' => 'setCollaboratorsUrl',
        'comments_url' => 'setCommentsUrl',
        'commits_url' => 'setCommitsUrl',
        'compare_url' => 'setCompareUrl',
        'contents_url' => 'setContentsUrl',
        'contributors_url' => 'setContributorsUrl',
        'deployments_url' => 'setDeploymentsUrl',
        'description' => 'setDescription',
        'downloads_url' => 'setDownloadsUrl',
        'events_url' => 'setEventsUrl',
        'fork' => 'setFork',
        'forks_url' => 'setForksUrl',
        'full_name' => 'setFullName',
        'git_commits_url' => 'setGitCommitsUrl',
        'git_refs_url' => 'setGitRefsUrl',
        'git_tags_url' => 'setGitTagsUrl',
        'hooks_url' => 'setHooksUrl',
        'html_url' => 'setHtmlUrl',
        'id' => 'setId',
        'issue_comment_url' => 'setIssueCommentUrl',
        'issue_events_url' => 'setIssueEventsUrl',
        'issues_url' => 'setIssuesUrl',
        'keys_url' => 'setKeysUrl',
        'labels_url' => 'setLabelsUrl',
        'languages_url' => 'setLanguagesUrl',
        'merges_url' => 'setMergesUrl',
        'milestones_url' => 'setMilestonesUrl',
        'name' => 'setName',
        'node_id' => 'setNodeId',
        'notifications_url' => 'setNotificationsUrl',
        'owner' => 'setOwner',
        'private' => 'setPrivate',
        'pulls_url' => 'setPullsUrl',
        'releases_url' => 'setReleasesUrl',
        'stargazers_url' => 'setStargazersUrl',
        'statuses_url' => 'setStatusesUrl',
        'subscribers_url' => 'setSubscribersUrl',
        'subscription_url' => 'setSubscriptionUrl',
        'tags_url' => 'setTagsUrl',
        'teams_url' => 'setTeamsUrl',
        'trees_url' => 'setTreesUrl',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'archive_url' => 'getArchiveUrl',
        'assignees_url' => 'getAssigneesUrl',
        'blobs_url' => 'getBlobsUrl',
        'branches_url' => 'getBranchesUrl',
        'collaborators_url' => 'getCollaboratorsUrl',
        'comments_url' => 'getCommentsUrl',
        'commits_url' => 'getCommitsUrl',
        'compare_url' => 'getCompareUrl',
        'contents_url' => 'getContentsUrl',
        'contributors_url' => 'getContributorsUrl',
        'deployments_url' => 'getDeploymentsUrl',
        'description' => 'getDescription',
        'downloads_url' => 'getDownloadsUrl',
        'events_url' => 'getEventsUrl',
        'fork' => 'getFork',
        'forks_url' => 'getForksUrl',
        'full_name' => 'getFullName',
        'git_commits_url' => 'getGitCommitsUrl',
        'git_refs_url' => 'getGitRefsUrl',
        'git_tags_url' => 'getGitTagsUrl',
        'hooks_url' => 'getHooksUrl',
        'html_url' => 'getHtmlUrl',
        'id' => 'getId',
        'issue_comment_url' => 'getIssueCommentUrl',
        'issue_events_url' => 'getIssueEventsUrl',
        'issues_url' => 'getIssuesUrl',
        'keys_url' => 'getKeysUrl',
        'labels_url' => 'getLabelsUrl',
        'languages_url' => 'getLanguagesUrl',
        'merges_url' => 'getMergesUrl',
        'milestones_url' => 'getMilestonesUrl',
        'name' => 'getName',
        'node_id' => 'getNodeId',
        'notifications_url' => 'getNotificationsUrl',
        'owner' => 'getOwner',
        'private' => 'getPrivate',
        'pulls_url' => 'getPullsUrl',
        'releases_url' => 'getReleasesUrl',
        'stargazers_url' => 'getStargazersUrl',
        'statuses_url' => 'getStatusesUrl',
        'subscribers_url' => 'getSubscribersUrl',
        'subscription_url' => 'getSubscriptionUrl',
        'tags_url' => 'getTagsUrl',
        'teams_url' => 'getTeamsUrl',
        'trees_url' => 'getTreesUrl',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('archive_url', $data ?? [], null);
        $this->setIfExists('assignees_url', $data ?? [], null);
        $this->setIfExists('blobs_url', $data ?? [], null);
        $this->setIfExists('branches_url', $data ?? [], null);
        $this->setIfExists('collaborators_url', $data ?? [], null);
        $this->setIfExists('comments_url', $data ?? [], null);
        $this->setIfExists('commits_url', $data ?? [], null);
        $this->setIfExists('compare_url', $data ?? [], null);
        $this->setIfExists('contents_url', $data ?? [], null);
        $this->setIfExists('contributors_url', $data ?? [], null);
        $this->setIfExists('deployments_url', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('downloads_url', $data ?? [], null);
        $this->setIfExists('events_url', $data ?? [], null);
        $this->setIfExists('fork', $data ?? [], null);
        $this->setIfExists('forks_url', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('git_commits_url', $data ?? [], null);
        $this->setIfExists('git_refs_url', $data ?? [], null);
        $this->setIfExists('git_tags_url', $data ?? [], null);
        $this->setIfExists('hooks_url', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('issue_comment_url', $data ?? [], null);
        $this->setIfExists('issue_events_url', $data ?? [], null);
        $this->setIfExists('issues_url', $data ?? [], null);
        $this->setIfExists('keys_url', $data ?? [], null);
        $this->setIfExists('labels_url', $data ?? [], null);
        $this->setIfExists('languages_url', $data ?? [], null);
        $this->setIfExists('merges_url', $data ?? [], null);
        $this->setIfExists('milestones_url', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('notifications_url', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('private', $data ?? [], null);
        $this->setIfExists('pulls_url', $data ?? [], null);
        $this->setIfExists('releases_url', $data ?? [], null);
        $this->setIfExists('stargazers_url', $data ?? [], null);
        $this->setIfExists('statuses_url', $data ?? [], null);
        $this->setIfExists('subscribers_url', $data ?? [], null);
        $this->setIfExists('subscription_url', $data ?? [], null);
        $this->setIfExists('tags_url', $data ?? [], null);
        $this->setIfExists('teams_url', $data ?? [], null);
        $this->setIfExists('trees_url', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets archive_url
     *
     * @return string|null
     */
    public function getArchiveUrl()
    {
        return $this->container['archive_url'];
    }

    /**
     * Sets archive_url
     *
     * @param string|null $archive_url archive_url
     *
     * @return self
     */
    public function setArchiveUrl($archive_url)
    {
        if (is_null($archive_url)) {
            throw new \InvalidArgumentException('non-nullable archive_url cannot be null');
        }
        $this->container['archive_url'] = $archive_url;

        return $this;
    }

    /**
     * Gets assignees_url
     *
     * @return string|null
     */
    public function getAssigneesUrl()
    {
        return $this->container['assignees_url'];
    }

    /**
     * Sets assignees_url
     *
     * @param string|null $assignees_url assignees_url
     *
     * @return self
     */
    public function setAssigneesUrl($assignees_url)
    {
        if (is_null($assignees_url)) {
            throw new \InvalidArgumentException('non-nullable assignees_url cannot be null');
        }
        $this->container['assignees_url'] = $assignees_url;

        return $this;
    }

    /**
     * Gets blobs_url
     *
     * @return string|null
     */
    public function getBlobsUrl()
    {
        return $this->container['blobs_url'];
    }

    /**
     * Sets blobs_url
     *
     * @param string|null $blobs_url blobs_url
     *
     * @return self
     */
    public function setBlobsUrl($blobs_url)
    {
        if (is_null($blobs_url)) {
            throw new \InvalidArgumentException('non-nullable blobs_url cannot be null');
        }
        $this->container['blobs_url'] = $blobs_url;

        return $this;
    }

    /**
     * Gets branches_url
     *
     * @return string|null
     */
    public function getBranchesUrl()
    {
        return $this->container['branches_url'];
    }

    /**
     * Sets branches_url
     *
     * @param string|null $branches_url branches_url
     *
     * @return self
     */
    public function setBranchesUrl($branches_url)
    {
        if (is_null($branches_url)) {
            throw new \InvalidArgumentException('non-nullable branches_url cannot be null');
        }
        $this->container['branches_url'] = $branches_url;

        return $this;
    }

    /**
     * Gets collaborators_url
     *
     * @return string|null
     */
    public function getCollaboratorsUrl()
    {
        return $this->container['collaborators_url'];
    }

    /**
     * Sets collaborators_url
     *
     * @param string|null $collaborators_url collaborators_url
     *
     * @return self
     */
    public function setCollaboratorsUrl($collaborators_url)
    {
        if (is_null($collaborators_url)) {
            throw new \InvalidArgumentException('non-nullable collaborators_url cannot be null');
        }
        $this->container['collaborators_url'] = $collaborators_url;

        return $this;
    }

    /**
     * Gets comments_url
     *
     * @return string|null
     */
    public function getCommentsUrl()
    {
        return $this->container['comments_url'];
    }

    /**
     * Sets comments_url
     *
     * @param string|null $comments_url comments_url
     *
     * @return self
     */
    public function setCommentsUrl($comments_url)
    {
        if (is_null($comments_url)) {
            throw new \InvalidArgumentException('non-nullable comments_url cannot be null');
        }
        $this->container['comments_url'] = $comments_url;

        return $this;
    }

    /**
     * Gets commits_url
     *
     * @return string|null
     */
    public function getCommitsUrl()
    {
        return $this->container['commits_url'];
    }

    /**
     * Sets commits_url
     *
     * @param string|null $commits_url commits_url
     *
     * @return self
     */
    public function setCommitsUrl($commits_url)
    {
        if (is_null($commits_url)) {
            throw new \InvalidArgumentException('non-nullable commits_url cannot be null');
        }
        $this->container['commits_url'] = $commits_url;

        return $this;
    }

    /**
     * Gets compare_url
     *
     * @return string|null
     */
    public function getCompareUrl()
    {
        return $this->container['compare_url'];
    }

    /**
     * Sets compare_url
     *
     * @param string|null $compare_url compare_url
     *
     * @return self
     */
    public function setCompareUrl($compare_url)
    {
        if (is_null($compare_url)) {
            throw new \InvalidArgumentException('non-nullable compare_url cannot be null');
        }
        $this->container['compare_url'] = $compare_url;

        return $this;
    }

    /**
     * Gets contents_url
     *
     * @return string|null
     */
    public function getContentsUrl()
    {
        return $this->container['contents_url'];
    }

    /**
     * Sets contents_url
     *
     * @param string|null $contents_url contents_url
     *
     * @return self
     */
    public function setContentsUrl($contents_url)
    {
        if (is_null($contents_url)) {
            throw new \InvalidArgumentException('non-nullable contents_url cannot be null');
        }
        $this->container['contents_url'] = $contents_url;

        return $this;
    }

    /**
     * Gets contributors_url
     *
     * @return string|null
     */
    public function getContributorsUrl()
    {
        return $this->container['contributors_url'];
    }

    /**
     * Sets contributors_url
     *
     * @param string|null $contributors_url contributors_url
     *
     * @return self
     */
    public function setContributorsUrl($contributors_url)
    {
        if (is_null($contributors_url)) {
            throw new \InvalidArgumentException('non-nullable contributors_url cannot be null');
        }
        $this->container['contributors_url'] = $contributors_url;

        return $this;
    }

    /**
     * Gets deployments_url
     *
     * @return string|null
     */
    public function getDeploymentsUrl()
    {
        return $this->container['deployments_url'];
    }

    /**
     * Sets deployments_url
     *
     * @param string|null $deployments_url deployments_url
     *
     * @return self
     */
    public function setDeploymentsUrl($deployments_url)
    {
        if (is_null($deployments_url)) {
            throw new \InvalidArgumentException('non-nullable deployments_url cannot be null');
        }
        $this->container['deployments_url'] = $deployments_url;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets downloads_url
     *
     * @return string|null
     */
    public function getDownloadsUrl()
    {
        return $this->container['downloads_url'];
    }

    /**
     * Sets downloads_url
     *
     * @param string|null $downloads_url downloads_url
     *
     * @return self
     */
    public function setDownloadsUrl($downloads_url)
    {
        if (is_null($downloads_url)) {
            throw new \InvalidArgumentException('non-nullable downloads_url cannot be null');
        }
        $this->container['downloads_url'] = $downloads_url;

        return $this;
    }

    /**
     * Gets events_url
     *
     * @return string|null
     */
    public function getEventsUrl()
    {
        return $this->container['events_url'];
    }

    /**
     * Sets events_url
     *
     * @param string|null $events_url events_url
     *
     * @return self
     */
    public function setEventsUrl($events_url)
    {
        if (is_null($events_url)) {
            throw new \InvalidArgumentException('non-nullable events_url cannot be null');
        }
        $this->container['events_url'] = $events_url;

        return $this;
    }

    /**
     * Gets fork
     *
     * @return bool|null
     */
    public function getFork()
    {
        return $this->container['fork'];
    }

    /**
     * Sets fork
     *
     * @param bool|null $fork fork
     *
     * @return self
     */
    public function setFork($fork)
    {
        if (is_null($fork)) {
            throw new \InvalidArgumentException('non-nullable fork cannot be null');
        }
        $this->container['fork'] = $fork;

        return $this;
    }

    /**
     * Gets forks_url
     *
     * @return string|null
     */
    public function getForksUrl()
    {
        return $this->container['forks_url'];
    }

    /**
     * Sets forks_url
     *
     * @param string|null $forks_url forks_url
     *
     * @return self
     */
    public function setForksUrl($forks_url)
    {
        if (is_null($forks_url)) {
            throw new \InvalidArgumentException('non-nullable forks_url cannot be null');
        }
        $this->container['forks_url'] = $forks_url;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name full_name
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            throw new \InvalidArgumentException('non-nullable full_name cannot be null');
        }
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets git_commits_url
     *
     * @return string|null
     */
    public function getGitCommitsUrl()
    {
        return $this->container['git_commits_url'];
    }

    /**
     * Sets git_commits_url
     *
     * @param string|null $git_commits_url git_commits_url
     *
     * @return self
     */
    public function setGitCommitsUrl($git_commits_url)
    {
        if (is_null($git_commits_url)) {
            throw new \InvalidArgumentException('non-nullable git_commits_url cannot be null');
        }
        $this->container['git_commits_url'] = $git_commits_url;

        return $this;
    }

    /**
     * Gets git_refs_url
     *
     * @return string|null
     */
    public function getGitRefsUrl()
    {
        return $this->container['git_refs_url'];
    }

    /**
     * Sets git_refs_url
     *
     * @param string|null $git_refs_url git_refs_url
     *
     * @return self
     */
    public function setGitRefsUrl($git_refs_url)
    {
        if (is_null($git_refs_url)) {
            throw new \InvalidArgumentException('non-nullable git_refs_url cannot be null');
        }
        $this->container['git_refs_url'] = $git_refs_url;

        return $this;
    }

    /**
     * Gets git_tags_url
     *
     * @return string|null
     */
    public function getGitTagsUrl()
    {
        return $this->container['git_tags_url'];
    }

    /**
     * Sets git_tags_url
     *
     * @param string|null $git_tags_url git_tags_url
     *
     * @return self
     */
    public function setGitTagsUrl($git_tags_url)
    {
        if (is_null($git_tags_url)) {
            throw new \InvalidArgumentException('non-nullable git_tags_url cannot be null');
        }
        $this->container['git_tags_url'] = $git_tags_url;

        return $this;
    }

    /**
     * Gets hooks_url
     *
     * @return string|null
     */
    public function getHooksUrl()
    {
        return $this->container['hooks_url'];
    }

    /**
     * Sets hooks_url
     *
     * @param string|null $hooks_url hooks_url
     *
     * @return self
     */
    public function setHooksUrl($hooks_url)
    {
        if (is_null($hooks_url)) {
            throw new \InvalidArgumentException('non-nullable hooks_url cannot be null');
        }
        $this->container['hooks_url'] = $hooks_url;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string|null
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string|null $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets issue_comment_url
     *
     * @return string|null
     */
    public function getIssueCommentUrl()
    {
        return $this->container['issue_comment_url'];
    }

    /**
     * Sets issue_comment_url
     *
     * @param string|null $issue_comment_url issue_comment_url
     *
     * @return self
     */
    public function setIssueCommentUrl($issue_comment_url)
    {
        if (is_null($issue_comment_url)) {
            throw new \InvalidArgumentException('non-nullable issue_comment_url cannot be null');
        }
        $this->container['issue_comment_url'] = $issue_comment_url;

        return $this;
    }

    /**
     * Gets issue_events_url
     *
     * @return string|null
     */
    public function getIssueEventsUrl()
    {
        return $this->container['issue_events_url'];
    }

    /**
     * Sets issue_events_url
     *
     * @param string|null $issue_events_url issue_events_url
     *
     * @return self
     */
    public function setIssueEventsUrl($issue_events_url)
    {
        if (is_null($issue_events_url)) {
            throw new \InvalidArgumentException('non-nullable issue_events_url cannot be null');
        }
        $this->container['issue_events_url'] = $issue_events_url;

        return $this;
    }

    /**
     * Gets issues_url
     *
     * @return string|null
     */
    public function getIssuesUrl()
    {
        return $this->container['issues_url'];
    }

    /**
     * Sets issues_url
     *
     * @param string|null $issues_url issues_url
     *
     * @return self
     */
    public function setIssuesUrl($issues_url)
    {
        if (is_null($issues_url)) {
            throw new \InvalidArgumentException('non-nullable issues_url cannot be null');
        }
        $this->container['issues_url'] = $issues_url;

        return $this;
    }

    /**
     * Gets keys_url
     *
     * @return string|null
     */
    public function getKeysUrl()
    {
        return $this->container['keys_url'];
    }

    /**
     * Sets keys_url
     *
     * @param string|null $keys_url keys_url
     *
     * @return self
     */
    public function setKeysUrl($keys_url)
    {
        if (is_null($keys_url)) {
            throw new \InvalidArgumentException('non-nullable keys_url cannot be null');
        }
        $this->container['keys_url'] = $keys_url;

        return $this;
    }

    /**
     * Gets labels_url
     *
     * @return string|null
     */
    public function getLabelsUrl()
    {
        return $this->container['labels_url'];
    }

    /**
     * Sets labels_url
     *
     * @param string|null $labels_url labels_url
     *
     * @return self
     */
    public function setLabelsUrl($labels_url)
    {
        if (is_null($labels_url)) {
            throw new \InvalidArgumentException('non-nullable labels_url cannot be null');
        }
        $this->container['labels_url'] = $labels_url;

        return $this;
    }

    /**
     * Gets languages_url
     *
     * @return string|null
     */
    public function getLanguagesUrl()
    {
        return $this->container['languages_url'];
    }

    /**
     * Sets languages_url
     *
     * @param string|null $languages_url languages_url
     *
     * @return self
     */
    public function setLanguagesUrl($languages_url)
    {
        if (is_null($languages_url)) {
            throw new \InvalidArgumentException('non-nullable languages_url cannot be null');
        }
        $this->container['languages_url'] = $languages_url;

        return $this;
    }

    /**
     * Gets merges_url
     *
     * @return string|null
     */
    public function getMergesUrl()
    {
        return $this->container['merges_url'];
    }

    /**
     * Sets merges_url
     *
     * @param string|null $merges_url merges_url
     *
     * @return self
     */
    public function setMergesUrl($merges_url)
    {
        if (is_null($merges_url)) {
            throw new \InvalidArgumentException('non-nullable merges_url cannot be null');
        }
        $this->container['merges_url'] = $merges_url;

        return $this;
    }

    /**
     * Gets milestones_url
     *
     * @return string|null
     */
    public function getMilestonesUrl()
    {
        return $this->container['milestones_url'];
    }

    /**
     * Sets milestones_url
     *
     * @param string|null $milestones_url milestones_url
     *
     * @return self
     */
    public function setMilestonesUrl($milestones_url)
    {
        if (is_null($milestones_url)) {
            throw new \InvalidArgumentException('non-nullable milestones_url cannot be null');
        }
        $this->container['milestones_url'] = $milestones_url;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string|null
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string|null $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets notifications_url
     *
     * @return string|null
     */
    public function getNotificationsUrl()
    {
        return $this->container['notifications_url'];
    }

    /**
     * Sets notifications_url
     *
     * @param string|null $notifications_url notifications_url
     *
     * @return self
     */
    public function setNotificationsUrl($notifications_url)
    {
        if (is_null($notifications_url)) {
            throw new \InvalidArgumentException('non-nullable notifications_url cannot be null');
        }
        $this->container['notifications_url'] = $notifications_url;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksSponsorshipMaintainer|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksSponsorshipMaintainer|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool|null
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool|null $private private
     *
     * @return self
     */
    public function setPrivate($private)
    {
        if (is_null($private)) {
            throw new \InvalidArgumentException('non-nullable private cannot be null');
        }
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets pulls_url
     *
     * @return string|null
     */
    public function getPullsUrl()
    {
        return $this->container['pulls_url'];
    }

    /**
     * Sets pulls_url
     *
     * @param string|null $pulls_url pulls_url
     *
     * @return self
     */
    public function setPullsUrl($pulls_url)
    {
        if (is_null($pulls_url)) {
            throw new \InvalidArgumentException('non-nullable pulls_url cannot be null');
        }
        $this->container['pulls_url'] = $pulls_url;

        return $this;
    }

    /**
     * Gets releases_url
     *
     * @return string|null
     */
    public function getReleasesUrl()
    {
        return $this->container['releases_url'];
    }

    /**
     * Sets releases_url
     *
     * @param string|null $releases_url releases_url
     *
     * @return self
     */
    public function setReleasesUrl($releases_url)
    {
        if (is_null($releases_url)) {
            throw new \InvalidArgumentException('non-nullable releases_url cannot be null');
        }
        $this->container['releases_url'] = $releases_url;

        return $this;
    }

    /**
     * Gets stargazers_url
     *
     * @return string|null
     */
    public function getStargazersUrl()
    {
        return $this->container['stargazers_url'];
    }

    /**
     * Sets stargazers_url
     *
     * @param string|null $stargazers_url stargazers_url
     *
     * @return self
     */
    public function setStargazersUrl($stargazers_url)
    {
        if (is_null($stargazers_url)) {
            throw new \InvalidArgumentException('non-nullable stargazers_url cannot be null');
        }
        $this->container['stargazers_url'] = $stargazers_url;

        return $this;
    }

    /**
     * Gets statuses_url
     *
     * @return string|null
     */
    public function getStatusesUrl()
    {
        return $this->container['statuses_url'];
    }

    /**
     * Sets statuses_url
     *
     * @param string|null $statuses_url statuses_url
     *
     * @return self
     */
    public function setStatusesUrl($statuses_url)
    {
        if (is_null($statuses_url)) {
            throw new \InvalidArgumentException('non-nullable statuses_url cannot be null');
        }
        $this->container['statuses_url'] = $statuses_url;

        return $this;
    }

    /**
     * Gets subscribers_url
     *
     * @return string|null
     */
    public function getSubscribersUrl()
    {
        return $this->container['subscribers_url'];
    }

    /**
     * Sets subscribers_url
     *
     * @param string|null $subscribers_url subscribers_url
     *
     * @return self
     */
    public function setSubscribersUrl($subscribers_url)
    {
        if (is_null($subscribers_url)) {
            throw new \InvalidArgumentException('non-nullable subscribers_url cannot be null');
        }
        $this->container['subscribers_url'] = $subscribers_url;

        return $this;
    }

    /**
     * Gets subscription_url
     *
     * @return string|null
     */
    public function getSubscriptionUrl()
    {
        return $this->container['subscription_url'];
    }

    /**
     * Sets subscription_url
     *
     * @param string|null $subscription_url subscription_url
     *
     * @return self
     */
    public function setSubscriptionUrl($subscription_url)
    {
        if (is_null($subscription_url)) {
            throw new \InvalidArgumentException('non-nullable subscription_url cannot be null');
        }
        $this->container['subscription_url'] = $subscription_url;

        return $this;
    }

    /**
     * Gets tags_url
     *
     * @return string|null
     */
    public function getTagsUrl()
    {
        return $this->container['tags_url'];
    }

    /**
     * Sets tags_url
     *
     * @param string|null $tags_url tags_url
     *
     * @return self
     */
    public function setTagsUrl($tags_url)
    {
        if (is_null($tags_url)) {
            throw new \InvalidArgumentException('non-nullable tags_url cannot be null');
        }
        $this->container['tags_url'] = $tags_url;

        return $this;
    }

    /**
     * Gets teams_url
     *
     * @return string|null
     */
    public function getTeamsUrl()
    {
        return $this->container['teams_url'];
    }

    /**
     * Sets teams_url
     *
     * @param string|null $teams_url teams_url
     *
     * @return self
     */
    public function setTeamsUrl($teams_url)
    {
        if (is_null($teams_url)) {
            throw new \InvalidArgumentException('non-nullable teams_url cannot be null');
        }
        $this->container['teams_url'] = $teams_url;

        return $this;
    }

    /**
     * Gets trees_url
     *
     * @return string|null
     */
    public function getTreesUrl()
    {
        return $this->container['trees_url'];
    }

    /**
     * Sets trees_url
     *
     * @param string|null $trees_url trees_url
     *
     * @return self
     */
    public function setTreesUrl($trees_url)
    {
        if (is_null($trees_url)) {
            throw new \InvalidArgumentException('non-nullable trees_url cannot be null');
        }
        $this->container['trees_url'] = $trees_url;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


