<?php
/**
 * EnterpriseAdminGetManageSettings200Response2NodesInnerEventsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * EnterpriseAdminGetManageSettings200Response2NodesInnerEventsInner Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EnterpriseAdminGetManageSettings200Response2NodesInnerEventsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'enterprise_admin_get_manage_settings_200_response_2_nodes_inner_events_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'timestamp' => 'string',
        'severity_text' => 'string',
        'body' => 'string',
        'event_name' => 'string',
        'topology' => 'string',
        'hostname' => 'string',
        'config_run_id' => 'string',
        'trace_id' => 'string',
        'span_id' => 'string',
        'span_parent_id' => 'string',
        'span_depth' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'timestamp' => null,
        'severity_text' => null,
        'body' => null,
        'event_name' => null,
        'topology' => null,
        'hostname' => null,
        'config_run_id' => null,
        'trace_id' => null,
        'span_id' => null,
        'span_parent_id' => null,
        'span_depth' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'timestamp' => false,
        'severity_text' => false,
        'body' => false,
        'event_name' => false,
        'topology' => false,
        'hostname' => false,
        'config_run_id' => false,
        'trace_id' => false,
        'span_id' => false,
        'span_parent_id' => false,
        'span_depth' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timestamp' => 'timestamp',
        'severity_text' => 'severity_text',
        'body' => 'body',
        'event_name' => 'event_name',
        'topology' => 'topology',
        'hostname' => 'hostname',
        'config_run_id' => 'config_run_id',
        'trace_id' => 'trace_id',
        'span_id' => 'span_id',
        'span_parent_id' => 'span_parent_id',
        'span_depth' => 'span_depth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timestamp' => 'setTimestamp',
        'severity_text' => 'setSeverityText',
        'body' => 'setBody',
        'event_name' => 'setEventName',
        'topology' => 'setTopology',
        'hostname' => 'setHostname',
        'config_run_id' => 'setConfigRunId',
        'trace_id' => 'setTraceId',
        'span_id' => 'setSpanId',
        'span_parent_id' => 'setSpanParentId',
        'span_depth' => 'setSpanDepth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timestamp' => 'getTimestamp',
        'severity_text' => 'getSeverityText',
        'body' => 'getBody',
        'event_name' => 'getEventName',
        'topology' => 'getTopology',
        'hostname' => 'getHostname',
        'config_run_id' => 'getConfigRunId',
        'trace_id' => 'getTraceId',
        'span_id' => 'getSpanId',
        'span_parent_id' => 'getSpanParentId',
        'span_depth' => 'getSpanDepth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('severity_text', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('event_name', $data ?? [], null);
        $this->setIfExists('topology', $data ?? [], null);
        $this->setIfExists('hostname', $data ?? [], null);
        $this->setIfExists('config_run_id', $data ?? [], null);
        $this->setIfExists('trace_id', $data ?? [], null);
        $this->setIfExists('span_id', $data ?? [], null);
        $this->setIfExists('span_parent_id', $data ?? [], null);
        $this->setIfExists('span_depth', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timestamp
     *
     * @return string|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets severity_text
     *
     * @return string|null
     */
    public function getSeverityText()
    {
        return $this->container['severity_text'];
    }

    /**
     * Sets severity_text
     *
     * @param string|null $severity_text severity_text
     *
     * @return self
     */
    public function setSeverityText($severity_text)
    {
        if (is_null($severity_text)) {
            throw new \InvalidArgumentException('non-nullable severity_text cannot be null');
        }
        $this->container['severity_text'] = $severity_text;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets event_name
     *
     * @return string|null
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     *
     * @param string|null $event_name event_name
     *
     * @return self
     */
    public function setEventName($event_name)
    {
        if (is_null($event_name)) {
            throw new \InvalidArgumentException('non-nullable event_name cannot be null');
        }
        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets topology
     *
     * @return string|null
     */
    public function getTopology()
    {
        return $this->container['topology'];
    }

    /**
     * Sets topology
     *
     * @param string|null $topology topology
     *
     * @return self
     */
    public function setTopology($topology)
    {
        if (is_null($topology)) {
            throw new \InvalidArgumentException('non-nullable topology cannot be null');
        }
        $this->container['topology'] = $topology;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname hostname
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        if (is_null($hostname)) {
            throw new \InvalidArgumentException('non-nullable hostname cannot be null');
        }
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets config_run_id
     *
     * @return string|null
     */
    public function getConfigRunId()
    {
        return $this->container['config_run_id'];
    }

    /**
     * Sets config_run_id
     *
     * @param string|null $config_run_id config_run_id
     *
     * @return self
     */
    public function setConfigRunId($config_run_id)
    {
        if (is_null($config_run_id)) {
            throw new \InvalidArgumentException('non-nullable config_run_id cannot be null');
        }
        $this->container['config_run_id'] = $config_run_id;

        return $this;
    }

    /**
     * Gets trace_id
     *
     * @return string|null
     */
    public function getTraceId()
    {
        return $this->container['trace_id'];
    }

    /**
     * Sets trace_id
     *
     * @param string|null $trace_id trace_id
     *
     * @return self
     */
    public function setTraceId($trace_id)
    {
        if (is_null($trace_id)) {
            throw new \InvalidArgumentException('non-nullable trace_id cannot be null');
        }
        $this->container['trace_id'] = $trace_id;

        return $this;
    }

    /**
     * Gets span_id
     *
     * @return string|null
     */
    public function getSpanId()
    {
        return $this->container['span_id'];
    }

    /**
     * Sets span_id
     *
     * @param string|null $span_id span_id
     *
     * @return self
     */
    public function setSpanId($span_id)
    {
        if (is_null($span_id)) {
            throw new \InvalidArgumentException('non-nullable span_id cannot be null');
        }
        $this->container['span_id'] = $span_id;

        return $this;
    }

    /**
     * Gets span_parent_id
     *
     * @return string|null
     */
    public function getSpanParentId()
    {
        return $this->container['span_parent_id'];
    }

    /**
     * Sets span_parent_id
     *
     * @param string|null $span_parent_id span_parent_id
     *
     * @return self
     */
    public function setSpanParentId($span_parent_id)
    {
        if (is_null($span_parent_id)) {
            throw new \InvalidArgumentException('non-nullable span_parent_id cannot be null');
        }
        $this->container['span_parent_id'] = $span_parent_id;

        return $this;
    }

    /**
     * Gets span_depth
     *
     * @return int|null
     */
    public function getSpanDepth()
    {
        return $this->container['span_depth'];
    }

    /**
     * Sets span_depth
     *
     * @param int|null $span_depth span_depth
     *
     * @return self
     */
    public function setSpanDepth($span_depth)
    {
        if (is_null($span_depth)) {
            throw new \InvalidArgumentException('non-nullable span_depth cannot be null');
        }
        $this->container['span_depth'] = $span_depth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


