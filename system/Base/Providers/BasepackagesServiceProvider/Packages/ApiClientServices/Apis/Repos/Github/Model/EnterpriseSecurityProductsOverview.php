<?php
/**
 * EnterpriseSecurityProductsOverview
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * EnterpriseSecurityProductsOverview Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EnterpriseSecurityProductsOverview implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'enterprise-security-products-overview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_repos' => 'int',
        'nonarchived_repos' => 'int',
        'secret_scanning_enabled_repos' => 'int',
        'secret_scanning_push_protection_enabled_repos' => 'int',
        'code_scanning_enabled_repos' => 'int',
        'code_scanning_pr_reviews_enabled_repos' => 'int',
        'code_scanning_default_setup_enabled_repos' => 'int',
        'code_scanning_default_setup_eligible_repos' => 'int',
        'dependabot_alerts_enabled_repos' => 'int',
        'dependabot_security_updates_enabled_repos' => 'int',
        'dependabot_version_updates_enabled_repos' => 'int',
        'advanced_security_enabled_repos' => 'int',
        'active_committers' => 'int',
        'purchased_committers' => 'int',
        'maximum_committers' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_repos' => null,
        'nonarchived_repos' => null,
        'secret_scanning_enabled_repos' => null,
        'secret_scanning_push_protection_enabled_repos' => null,
        'code_scanning_enabled_repos' => null,
        'code_scanning_pr_reviews_enabled_repos' => null,
        'code_scanning_default_setup_enabled_repos' => null,
        'code_scanning_default_setup_eligible_repos' => null,
        'dependabot_alerts_enabled_repos' => null,
        'dependabot_security_updates_enabled_repos' => null,
        'dependabot_version_updates_enabled_repos' => null,
        'advanced_security_enabled_repos' => null,
        'active_committers' => null,
        'purchased_committers' => null,
        'maximum_committers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total_repos' => false,
        'nonarchived_repos' => false,
        'secret_scanning_enabled_repos' => false,
        'secret_scanning_push_protection_enabled_repos' => false,
        'code_scanning_enabled_repos' => false,
        'code_scanning_pr_reviews_enabled_repos' => false,
        'code_scanning_default_setup_enabled_repos' => false,
        'code_scanning_default_setup_eligible_repos' => false,
        'dependabot_alerts_enabled_repos' => false,
        'dependabot_security_updates_enabled_repos' => false,
        'dependabot_version_updates_enabled_repos' => false,
        'advanced_security_enabled_repos' => false,
        'active_committers' => false,
        'purchased_committers' => false,
        'maximum_committers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_repos' => 'total_repos',
        'nonarchived_repos' => 'nonarchived_repos',
        'secret_scanning_enabled_repos' => 'secret_scanning_enabled_repos',
        'secret_scanning_push_protection_enabled_repos' => 'secret_scanning_push_protection_enabled_repos',
        'code_scanning_enabled_repos' => 'code_scanning_enabled_repos',
        'code_scanning_pr_reviews_enabled_repos' => 'code_scanning_pr_reviews_enabled_repos',
        'code_scanning_default_setup_enabled_repos' => 'code_scanning_default_setup_enabled_repos',
        'code_scanning_default_setup_eligible_repos' => 'code_scanning_default_setup_eligible_repos',
        'dependabot_alerts_enabled_repos' => 'dependabot_alerts_enabled_repos',
        'dependabot_security_updates_enabled_repos' => 'dependabot_security_updates_enabled_repos',
        'dependabot_version_updates_enabled_repos' => 'dependabot_version_updates_enabled_repos',
        'advanced_security_enabled_repos' => 'advanced_security_enabled_repos',
        'active_committers' => 'active_committers',
        'purchased_committers' => 'purchased_committers',
        'maximum_committers' => 'maximum_committers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_repos' => 'setTotalRepos',
        'nonarchived_repos' => 'setNonarchivedRepos',
        'secret_scanning_enabled_repos' => 'setSecretScanningEnabledRepos',
        'secret_scanning_push_protection_enabled_repos' => 'setSecretScanningPushProtectionEnabledRepos',
        'code_scanning_enabled_repos' => 'setCodeScanningEnabledRepos',
        'code_scanning_pr_reviews_enabled_repos' => 'setCodeScanningPrReviewsEnabledRepos',
        'code_scanning_default_setup_enabled_repos' => 'setCodeScanningDefaultSetupEnabledRepos',
        'code_scanning_default_setup_eligible_repos' => 'setCodeScanningDefaultSetupEligibleRepos',
        'dependabot_alerts_enabled_repos' => 'setDependabotAlertsEnabledRepos',
        'dependabot_security_updates_enabled_repos' => 'setDependabotSecurityUpdatesEnabledRepos',
        'dependabot_version_updates_enabled_repos' => 'setDependabotVersionUpdatesEnabledRepos',
        'advanced_security_enabled_repos' => 'setAdvancedSecurityEnabledRepos',
        'active_committers' => 'setActiveCommitters',
        'purchased_committers' => 'setPurchasedCommitters',
        'maximum_committers' => 'setMaximumCommitters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_repos' => 'getTotalRepos',
        'nonarchived_repos' => 'getNonarchivedRepos',
        'secret_scanning_enabled_repos' => 'getSecretScanningEnabledRepos',
        'secret_scanning_push_protection_enabled_repos' => 'getSecretScanningPushProtectionEnabledRepos',
        'code_scanning_enabled_repos' => 'getCodeScanningEnabledRepos',
        'code_scanning_pr_reviews_enabled_repos' => 'getCodeScanningPrReviewsEnabledRepos',
        'code_scanning_default_setup_enabled_repos' => 'getCodeScanningDefaultSetupEnabledRepos',
        'code_scanning_default_setup_eligible_repos' => 'getCodeScanningDefaultSetupEligibleRepos',
        'dependabot_alerts_enabled_repos' => 'getDependabotAlertsEnabledRepos',
        'dependabot_security_updates_enabled_repos' => 'getDependabotSecurityUpdatesEnabledRepos',
        'dependabot_version_updates_enabled_repos' => 'getDependabotVersionUpdatesEnabledRepos',
        'advanced_security_enabled_repos' => 'getAdvancedSecurityEnabledRepos',
        'active_committers' => 'getActiveCommitters',
        'purchased_committers' => 'getPurchasedCommitters',
        'maximum_committers' => 'getMaximumCommitters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('total_repos', $data ?? [], null);
        $this->setIfExists('nonarchived_repos', $data ?? [], null);
        $this->setIfExists('secret_scanning_enabled_repos', $data ?? [], null);
        $this->setIfExists('secret_scanning_push_protection_enabled_repos', $data ?? [], null);
        $this->setIfExists('code_scanning_enabled_repos', $data ?? [], null);
        $this->setIfExists('code_scanning_pr_reviews_enabled_repos', $data ?? [], null);
        $this->setIfExists('code_scanning_default_setup_enabled_repos', $data ?? [], null);
        $this->setIfExists('code_scanning_default_setup_eligible_repos', $data ?? [], null);
        $this->setIfExists('dependabot_alerts_enabled_repos', $data ?? [], null);
        $this->setIfExists('dependabot_security_updates_enabled_repos', $data ?? [], null);
        $this->setIfExists('dependabot_version_updates_enabled_repos', $data ?? [], null);
        $this->setIfExists('advanced_security_enabled_repos', $data ?? [], null);
        $this->setIfExists('active_committers', $data ?? [], null);
        $this->setIfExists('purchased_committers', $data ?? [], null);
        $this->setIfExists('maximum_committers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_repos
     *
     * @return int|null
     */
    public function getTotalRepos()
    {
        return $this->container['total_repos'];
    }

    /**
     * Sets total_repos
     *
     * @param int|null $total_repos total_repos
     *
     * @return self
     */
    public function setTotalRepos($total_repos)
    {
        if (is_null($total_repos)) {
            throw new \InvalidArgumentException('non-nullable total_repos cannot be null');
        }
        $this->container['total_repos'] = $total_repos;

        return $this;
    }

    /**
     * Gets nonarchived_repos
     *
     * @return int|null
     */
    public function getNonarchivedRepos()
    {
        return $this->container['nonarchived_repos'];
    }

    /**
     * Sets nonarchived_repos
     *
     * @param int|null $nonarchived_repos nonarchived_repos
     *
     * @return self
     */
    public function setNonarchivedRepos($nonarchived_repos)
    {
        if (is_null($nonarchived_repos)) {
            throw new \InvalidArgumentException('non-nullable nonarchived_repos cannot be null');
        }
        $this->container['nonarchived_repos'] = $nonarchived_repos;

        return $this;
    }

    /**
     * Gets secret_scanning_enabled_repos
     *
     * @return int|null
     */
    public function getSecretScanningEnabledRepos()
    {
        return $this->container['secret_scanning_enabled_repos'];
    }

    /**
     * Sets secret_scanning_enabled_repos
     *
     * @param int|null $secret_scanning_enabled_repos secret_scanning_enabled_repos
     *
     * @return self
     */
    public function setSecretScanningEnabledRepos($secret_scanning_enabled_repos)
    {
        if (is_null($secret_scanning_enabled_repos)) {
            throw new \InvalidArgumentException('non-nullable secret_scanning_enabled_repos cannot be null');
        }
        $this->container['secret_scanning_enabled_repos'] = $secret_scanning_enabled_repos;

        return $this;
    }

    /**
     * Gets secret_scanning_push_protection_enabled_repos
     *
     * @return int|null
     */
    public function getSecretScanningPushProtectionEnabledRepos()
    {
        return $this->container['secret_scanning_push_protection_enabled_repos'];
    }

    /**
     * Sets secret_scanning_push_protection_enabled_repos
     *
     * @param int|null $secret_scanning_push_protection_enabled_repos secret_scanning_push_protection_enabled_repos
     *
     * @return self
     */
    public function setSecretScanningPushProtectionEnabledRepos($secret_scanning_push_protection_enabled_repos)
    {
        if (is_null($secret_scanning_push_protection_enabled_repos)) {
            throw new \InvalidArgumentException('non-nullable secret_scanning_push_protection_enabled_repos cannot be null');
        }
        $this->container['secret_scanning_push_protection_enabled_repos'] = $secret_scanning_push_protection_enabled_repos;

        return $this;
    }

    /**
     * Gets code_scanning_enabled_repos
     *
     * @return int|null
     */
    public function getCodeScanningEnabledRepos()
    {
        return $this->container['code_scanning_enabled_repos'];
    }

    /**
     * Sets code_scanning_enabled_repos
     *
     * @param int|null $code_scanning_enabled_repos code_scanning_enabled_repos
     *
     * @return self
     */
    public function setCodeScanningEnabledRepos($code_scanning_enabled_repos)
    {
        if (is_null($code_scanning_enabled_repos)) {
            throw new \InvalidArgumentException('non-nullable code_scanning_enabled_repos cannot be null');
        }
        $this->container['code_scanning_enabled_repos'] = $code_scanning_enabled_repos;

        return $this;
    }

    /**
     * Gets code_scanning_pr_reviews_enabled_repos
     *
     * @return int|null
     */
    public function getCodeScanningPrReviewsEnabledRepos()
    {
        return $this->container['code_scanning_pr_reviews_enabled_repos'];
    }

    /**
     * Sets code_scanning_pr_reviews_enabled_repos
     *
     * @param int|null $code_scanning_pr_reviews_enabled_repos code_scanning_pr_reviews_enabled_repos
     *
     * @return self
     */
    public function setCodeScanningPrReviewsEnabledRepos($code_scanning_pr_reviews_enabled_repos)
    {
        if (is_null($code_scanning_pr_reviews_enabled_repos)) {
            throw new \InvalidArgumentException('non-nullable code_scanning_pr_reviews_enabled_repos cannot be null');
        }
        $this->container['code_scanning_pr_reviews_enabled_repos'] = $code_scanning_pr_reviews_enabled_repos;

        return $this;
    }

    /**
     * Gets code_scanning_default_setup_enabled_repos
     *
     * @return int|null
     */
    public function getCodeScanningDefaultSetupEnabledRepos()
    {
        return $this->container['code_scanning_default_setup_enabled_repos'];
    }

    /**
     * Sets code_scanning_default_setup_enabled_repos
     *
     * @param int|null $code_scanning_default_setup_enabled_repos code_scanning_default_setup_enabled_repos
     *
     * @return self
     */
    public function setCodeScanningDefaultSetupEnabledRepos($code_scanning_default_setup_enabled_repos)
    {
        if (is_null($code_scanning_default_setup_enabled_repos)) {
            throw new \InvalidArgumentException('non-nullable code_scanning_default_setup_enabled_repos cannot be null');
        }
        $this->container['code_scanning_default_setup_enabled_repos'] = $code_scanning_default_setup_enabled_repos;

        return $this;
    }

    /**
     * Gets code_scanning_default_setup_eligible_repos
     *
     * @return int|null
     */
    public function getCodeScanningDefaultSetupEligibleRepos()
    {
        return $this->container['code_scanning_default_setup_eligible_repos'];
    }

    /**
     * Sets code_scanning_default_setup_eligible_repos
     *
     * @param int|null $code_scanning_default_setup_eligible_repos code_scanning_default_setup_eligible_repos
     *
     * @return self
     */
    public function setCodeScanningDefaultSetupEligibleRepos($code_scanning_default_setup_eligible_repos)
    {
        if (is_null($code_scanning_default_setup_eligible_repos)) {
            throw new \InvalidArgumentException('non-nullable code_scanning_default_setup_eligible_repos cannot be null');
        }
        $this->container['code_scanning_default_setup_eligible_repos'] = $code_scanning_default_setup_eligible_repos;

        return $this;
    }

    /**
     * Gets dependabot_alerts_enabled_repos
     *
     * @return int|null
     */
    public function getDependabotAlertsEnabledRepos()
    {
        return $this->container['dependabot_alerts_enabled_repos'];
    }

    /**
     * Sets dependabot_alerts_enabled_repos
     *
     * @param int|null $dependabot_alerts_enabled_repos dependabot_alerts_enabled_repos
     *
     * @return self
     */
    public function setDependabotAlertsEnabledRepos($dependabot_alerts_enabled_repos)
    {
        if (is_null($dependabot_alerts_enabled_repos)) {
            throw new \InvalidArgumentException('non-nullable dependabot_alerts_enabled_repos cannot be null');
        }
        $this->container['dependabot_alerts_enabled_repos'] = $dependabot_alerts_enabled_repos;

        return $this;
    }

    /**
     * Gets dependabot_security_updates_enabled_repos
     *
     * @return int|null
     */
    public function getDependabotSecurityUpdatesEnabledRepos()
    {
        return $this->container['dependabot_security_updates_enabled_repos'];
    }

    /**
     * Sets dependabot_security_updates_enabled_repos
     *
     * @param int|null $dependabot_security_updates_enabled_repos dependabot_security_updates_enabled_repos
     *
     * @return self
     */
    public function setDependabotSecurityUpdatesEnabledRepos($dependabot_security_updates_enabled_repos)
    {
        if (is_null($dependabot_security_updates_enabled_repos)) {
            throw new \InvalidArgumentException('non-nullable dependabot_security_updates_enabled_repos cannot be null');
        }
        $this->container['dependabot_security_updates_enabled_repos'] = $dependabot_security_updates_enabled_repos;

        return $this;
    }

    /**
     * Gets dependabot_version_updates_enabled_repos
     *
     * @return int|null
     */
    public function getDependabotVersionUpdatesEnabledRepos()
    {
        return $this->container['dependabot_version_updates_enabled_repos'];
    }

    /**
     * Sets dependabot_version_updates_enabled_repos
     *
     * @param int|null $dependabot_version_updates_enabled_repos dependabot_version_updates_enabled_repos
     *
     * @return self
     */
    public function setDependabotVersionUpdatesEnabledRepos($dependabot_version_updates_enabled_repos)
    {
        if (is_null($dependabot_version_updates_enabled_repos)) {
            throw new \InvalidArgumentException('non-nullable dependabot_version_updates_enabled_repos cannot be null');
        }
        $this->container['dependabot_version_updates_enabled_repos'] = $dependabot_version_updates_enabled_repos;

        return $this;
    }

    /**
     * Gets advanced_security_enabled_repos
     *
     * @return int|null
     */
    public function getAdvancedSecurityEnabledRepos()
    {
        return $this->container['advanced_security_enabled_repos'];
    }

    /**
     * Sets advanced_security_enabled_repos
     *
     * @param int|null $advanced_security_enabled_repos advanced_security_enabled_repos
     *
     * @return self
     */
    public function setAdvancedSecurityEnabledRepos($advanced_security_enabled_repos)
    {
        if (is_null($advanced_security_enabled_repos)) {
            throw new \InvalidArgumentException('non-nullable advanced_security_enabled_repos cannot be null');
        }
        $this->container['advanced_security_enabled_repos'] = $advanced_security_enabled_repos;

        return $this;
    }

    /**
     * Gets active_committers
     *
     * @return int|null
     */
    public function getActiveCommitters()
    {
        return $this->container['active_committers'];
    }

    /**
     * Sets active_committers
     *
     * @param int|null $active_committers active_committers
     *
     * @return self
     */
    public function setActiveCommitters($active_committers)
    {
        if (is_null($active_committers)) {
            throw new \InvalidArgumentException('non-nullable active_committers cannot be null');
        }
        $this->container['active_committers'] = $active_committers;

        return $this;
    }

    /**
     * Gets purchased_committers
     *
     * @return int|null
     */
    public function getPurchasedCommitters()
    {
        return $this->container['purchased_committers'];
    }

    /**
     * Sets purchased_committers
     *
     * @param int|null $purchased_committers purchased_committers
     *
     * @return self
     */
    public function setPurchasedCommitters($purchased_committers)
    {
        if (is_null($purchased_committers)) {
            throw new \InvalidArgumentException('non-nullable purchased_committers cannot be null');
        }
        $this->container['purchased_committers'] = $purchased_committers;

        return $this;
    }

    /**
     * Gets maximum_committers
     *
     * @return int|null
     */
    public function getMaximumCommitters()
    {
        return $this->container['maximum_committers'];
    }

    /**
     * Sets maximum_committers
     *
     * @param int|null $maximum_committers maximum_committers
     *
     * @return self
     */
    public function setMaximumCommitters($maximum_committers)
    {
        if (is_null($maximum_committers)) {
            throw new \InvalidArgumentException('non-nullable maximum_committers cannot be null');
        }
        $this->container['maximum_committers'] = $maximum_committers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


