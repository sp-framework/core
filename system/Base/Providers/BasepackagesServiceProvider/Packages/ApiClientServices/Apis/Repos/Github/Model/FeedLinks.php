<?php
/**
 * FeedLinks
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * FeedLinks Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FeedLinks implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'feed__links';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'timeline' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType',
        'user' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType',
        'security_advisories' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType',
        'current_user' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType',
        'current_user_public' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType',
        'current_user_actor' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType',
        'current_user_organization' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType',
        'current_user_organizations' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType[]',
        'repository_discussions' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType',
        'repository_discussions_category' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'timeline' => null,
        'user' => null,
        'security_advisories' => null,
        'current_user' => null,
        'current_user_public' => null,
        'current_user_actor' => null,
        'current_user_organization' => null,
        'current_user_organizations' => null,
        'repository_discussions' => null,
        'repository_discussions_category' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'timeline' => false,
        'user' => false,
        'security_advisories' => false,
        'current_user' => false,
        'current_user_public' => false,
        'current_user_actor' => false,
        'current_user_organization' => false,
        'current_user_organizations' => false,
        'repository_discussions' => false,
        'repository_discussions_category' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timeline' => 'timeline',
        'user' => 'user',
        'security_advisories' => 'security_advisories',
        'current_user' => 'current_user',
        'current_user_public' => 'current_user_public',
        'current_user_actor' => 'current_user_actor',
        'current_user_organization' => 'current_user_organization',
        'current_user_organizations' => 'current_user_organizations',
        'repository_discussions' => 'repository_discussions',
        'repository_discussions_category' => 'repository_discussions_category'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timeline' => 'setTimeline',
        'user' => 'setUser',
        'security_advisories' => 'setSecurityAdvisories',
        'current_user' => 'setCurrentUser',
        'current_user_public' => 'setCurrentUserPublic',
        'current_user_actor' => 'setCurrentUserActor',
        'current_user_organization' => 'setCurrentUserOrganization',
        'current_user_organizations' => 'setCurrentUserOrganizations',
        'repository_discussions' => 'setRepositoryDiscussions',
        'repository_discussions_category' => 'setRepositoryDiscussionsCategory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timeline' => 'getTimeline',
        'user' => 'getUser',
        'security_advisories' => 'getSecurityAdvisories',
        'current_user' => 'getCurrentUser',
        'current_user_public' => 'getCurrentUserPublic',
        'current_user_actor' => 'getCurrentUserActor',
        'current_user_organization' => 'getCurrentUserOrganization',
        'current_user_organizations' => 'getCurrentUserOrganizations',
        'repository_discussions' => 'getRepositoryDiscussions',
        'repository_discussions_category' => 'getRepositoryDiscussionsCategory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('timeline', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('security_advisories', $data ?? [], null);
        $this->setIfExists('current_user', $data ?? [], null);
        $this->setIfExists('current_user_public', $data ?? [], null);
        $this->setIfExists('current_user_actor', $data ?? [], null);
        $this->setIfExists('current_user_organization', $data ?? [], null);
        $this->setIfExists('current_user_organizations', $data ?? [], null);
        $this->setIfExists('repository_discussions', $data ?? [], null);
        $this->setIfExists('repository_discussions_category', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timeline'] === null) {
            $invalidProperties[] = "'timeline' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timeline
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType
     */
    public function getTimeline()
    {
        return $this->container['timeline'];
    }

    /**
     * Sets timeline
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType $timeline timeline
     *
     * @return self
     */
    public function setTimeline($timeline)
    {
        if (is_null($timeline)) {
            throw new \InvalidArgumentException('non-nullable timeline cannot be null');
        }
        $this->container['timeline'] = $timeline;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets security_advisories
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType|null
     */
    public function getSecurityAdvisories()
    {
        return $this->container['security_advisories'];
    }

    /**
     * Sets security_advisories
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType|null $security_advisories security_advisories
     *
     * @return self
     */
    public function setSecurityAdvisories($security_advisories)
    {
        if (is_null($security_advisories)) {
            throw new \InvalidArgumentException('non-nullable security_advisories cannot be null');
        }
        $this->container['security_advisories'] = $security_advisories;

        return $this;
    }

    /**
     * Gets current_user
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType|null
     */
    public function getCurrentUser()
    {
        return $this->container['current_user'];
    }

    /**
     * Sets current_user
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType|null $current_user current_user
     *
     * @return self
     */
    public function setCurrentUser($current_user)
    {
        if (is_null($current_user)) {
            throw new \InvalidArgumentException('non-nullable current_user cannot be null');
        }
        $this->container['current_user'] = $current_user;

        return $this;
    }

    /**
     * Gets current_user_public
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType|null
     */
    public function getCurrentUserPublic()
    {
        return $this->container['current_user_public'];
    }

    /**
     * Sets current_user_public
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType|null $current_user_public current_user_public
     *
     * @return self
     */
    public function setCurrentUserPublic($current_user_public)
    {
        if (is_null($current_user_public)) {
            throw new \InvalidArgumentException('non-nullable current_user_public cannot be null');
        }
        $this->container['current_user_public'] = $current_user_public;

        return $this;
    }

    /**
     * Gets current_user_actor
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType|null
     */
    public function getCurrentUserActor()
    {
        return $this->container['current_user_actor'];
    }

    /**
     * Sets current_user_actor
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType|null $current_user_actor current_user_actor
     *
     * @return self
     */
    public function setCurrentUserActor($current_user_actor)
    {
        if (is_null($current_user_actor)) {
            throw new \InvalidArgumentException('non-nullable current_user_actor cannot be null');
        }
        $this->container['current_user_actor'] = $current_user_actor;

        return $this;
    }

    /**
     * Gets current_user_organization
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType|null
     */
    public function getCurrentUserOrganization()
    {
        return $this->container['current_user_organization'];
    }

    /**
     * Sets current_user_organization
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType|null $current_user_organization current_user_organization
     *
     * @return self
     */
    public function setCurrentUserOrganization($current_user_organization)
    {
        if (is_null($current_user_organization)) {
            throw new \InvalidArgumentException('non-nullable current_user_organization cannot be null');
        }
        $this->container['current_user_organization'] = $current_user_organization;

        return $this;
    }

    /**
     * Gets current_user_organizations
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType[]|null
     */
    public function getCurrentUserOrganizations()
    {
        return $this->container['current_user_organizations'];
    }

    /**
     * Sets current_user_organizations
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType[]|null $current_user_organizations current_user_organizations
     *
     * @return self
     */
    public function setCurrentUserOrganizations($current_user_organizations)
    {
        if (is_null($current_user_organizations)) {
            throw new \InvalidArgumentException('non-nullable current_user_organizations cannot be null');
        }
        $this->container['current_user_organizations'] = $current_user_organizations;

        return $this;
    }

    /**
     * Gets repository_discussions
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType|null
     */
    public function getRepositoryDiscussions()
    {
        return $this->container['repository_discussions'];
    }

    /**
     * Sets repository_discussions
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType|null $repository_discussions repository_discussions
     *
     * @return self
     */
    public function setRepositoryDiscussions($repository_discussions)
    {
        if (is_null($repository_discussions)) {
            throw new \InvalidArgumentException('non-nullable repository_discussions cannot be null');
        }
        $this->container['repository_discussions'] = $repository_discussions;

        return $this;
    }

    /**
     * Gets repository_discussions_category
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType|null
     */
    public function getRepositoryDiscussionsCategory()
    {
        return $this->container['repository_discussions_category'];
    }

    /**
     * Sets repository_discussions_category
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\LinkWithType|null $repository_discussions_category repository_discussions_category
     *
     * @return self
     */
    public function setRepositoryDiscussionsCategory($repository_discussions_category)
    {
        if (is_null($repository_discussions_category)) {
            throw new \InvalidArgumentException('non-nullable repository_discussions_category cannot be null');
        }
        $this->container['repository_discussions_category'] = $repository_discussions_category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


