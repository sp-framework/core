<?php
/**
 * FullRepository
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * FullRepository Class Doc Comment
 *
 * @category Class
 * @description Full Repository
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FullRepository implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'full-repository';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'node_id' => 'string',
        'name' => 'string',
        'full_name' => 'string',
        'owner' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser',
        'private' => 'bool',
        'html_url' => 'string',
        'description' => 'string',
        'fork' => 'bool',
        'url' => 'string',
        'archive_url' => 'string',
        'assignees_url' => 'string',
        'blobs_url' => 'string',
        'branches_url' => 'string',
        'collaborators_url' => 'string',
        'comments_url' => 'string',
        'commits_url' => 'string',
        'compare_url' => 'string',
        'contents_url' => 'string',
        'contributors_url' => 'string',
        'deployments_url' => 'string',
        'downloads_url' => 'string',
        'events_url' => 'string',
        'forks_url' => 'string',
        'git_commits_url' => 'string',
        'git_refs_url' => 'string',
        'git_tags_url' => 'string',
        'git_url' => 'string',
        'issue_comment_url' => 'string',
        'issue_events_url' => 'string',
        'issues_url' => 'string',
        'keys_url' => 'string',
        'labels_url' => 'string',
        'languages_url' => 'string',
        'merges_url' => 'string',
        'milestones_url' => 'string',
        'notifications_url' => 'string',
        'pulls_url' => 'string',
        'releases_url' => 'string',
        'ssh_url' => 'string',
        'stargazers_url' => 'string',
        'statuses_url' => 'string',
        'subscribers_url' => 'string',
        'subscription_url' => 'string',
        'tags_url' => 'string',
        'teams_url' => 'string',
        'trees_url' => 'string',
        'clone_url' => 'string',
        'mirror_url' => 'string',
        'hooks_url' => 'string',
        'svn_url' => 'string',
        'homepage' => 'string',
        'language' => 'string',
        'forks_count' => 'int',
        'stargazers_count' => 'int',
        'watchers_count' => 'int',
        'size' => 'int',
        'default_branch' => 'string',
        'open_issues_count' => 'int',
        'is_template' => 'bool',
        'topics' => 'string[]',
        'has_issues' => 'bool',
        'has_projects' => 'bool',
        'has_wiki' => 'bool',
        'has_pages' => 'bool',
        'has_downloads' => 'bool',
        'has_discussions' => 'bool',
        'archived' => 'bool',
        'disabled' => 'bool',
        'visibility' => 'string',
        'pushed_at' => '\DateTime',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'permissions' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\FullRepositoryPermissions',
        'allow_rebase_merge' => 'bool',
        'template_repository' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableRepository',
        'temp_clone_token' => 'string',
        'allow_squash_merge' => 'bool',
        'allow_auto_merge' => 'bool',
        'delete_branch_on_merge' => 'bool',
        'allow_merge_commit' => 'bool',
        'allow_update_branch' => 'bool',
        'use_squash_pr_title_as_default' => 'bool',
        'squash_merge_commit_title' => 'string',
        'squash_merge_commit_message' => 'string',
        'merge_commit_title' => 'string',
        'merge_commit_message' => 'string',
        'allow_forking' => 'bool',
        'web_commit_signoff_required' => 'bool',
        'subscribers_count' => 'int',
        'network_count' => 'int',
        'license' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableLicenseSimple',
        'organization' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableSimpleUser',
        'parent' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Repository',
        'source' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Repository',
        'forks' => 'int',
        'master_branch' => 'string',
        'open_issues' => 'int',
        'watchers' => 'int',
        'anonymous_access_enabled' => 'bool',
        'code_of_conduct' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeOfConductSimple',
        'security_and_analysis' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SecurityAndAnalysis',
        'custom_properties' => 'array<string,mixed>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'node_id' => null,
        'name' => null,
        'full_name' => null,
        'owner' => null,
        'private' => null,
        'html_url' => 'uri',
        'description' => null,
        'fork' => null,
        'url' => 'uri',
        'archive_url' => null,
        'assignees_url' => null,
        'blobs_url' => null,
        'branches_url' => null,
        'collaborators_url' => null,
        'comments_url' => null,
        'commits_url' => null,
        'compare_url' => null,
        'contents_url' => null,
        'contributors_url' => 'uri',
        'deployments_url' => 'uri',
        'downloads_url' => 'uri',
        'events_url' => 'uri',
        'forks_url' => 'uri',
        'git_commits_url' => null,
        'git_refs_url' => null,
        'git_tags_url' => null,
        'git_url' => null,
        'issue_comment_url' => null,
        'issue_events_url' => null,
        'issues_url' => null,
        'keys_url' => null,
        'labels_url' => null,
        'languages_url' => 'uri',
        'merges_url' => 'uri',
        'milestones_url' => null,
        'notifications_url' => null,
        'pulls_url' => null,
        'releases_url' => null,
        'ssh_url' => null,
        'stargazers_url' => 'uri',
        'statuses_url' => null,
        'subscribers_url' => 'uri',
        'subscription_url' => 'uri',
        'tags_url' => 'uri',
        'teams_url' => 'uri',
        'trees_url' => null,
        'clone_url' => null,
        'mirror_url' => 'uri',
        'hooks_url' => 'uri',
        'svn_url' => 'uri',
        'homepage' => 'uri',
        'language' => null,
        'forks_count' => null,
        'stargazers_count' => null,
        'watchers_count' => null,
        'size' => null,
        'default_branch' => null,
        'open_issues_count' => null,
        'is_template' => null,
        'topics' => null,
        'has_issues' => null,
        'has_projects' => null,
        'has_wiki' => null,
        'has_pages' => null,
        'has_downloads' => null,
        'has_discussions' => null,
        'archived' => null,
        'disabled' => null,
        'visibility' => null,
        'pushed_at' => 'date-time',
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'permissions' => null,
        'allow_rebase_merge' => null,
        'template_repository' => null,
        'temp_clone_token' => null,
        'allow_squash_merge' => null,
        'allow_auto_merge' => null,
        'delete_branch_on_merge' => null,
        'allow_merge_commit' => null,
        'allow_update_branch' => null,
        'use_squash_pr_title_as_default' => null,
        'squash_merge_commit_title' => null,
        'squash_merge_commit_message' => null,
        'merge_commit_title' => null,
        'merge_commit_message' => null,
        'allow_forking' => null,
        'web_commit_signoff_required' => null,
        'subscribers_count' => null,
        'network_count' => null,
        'license' => null,
        'organization' => null,
        'parent' => null,
        'source' => null,
        'forks' => null,
        'master_branch' => null,
        'open_issues' => null,
        'watchers' => null,
        'anonymous_access_enabled' => null,
        'code_of_conduct' => null,
        'security_and_analysis' => null,
        'custom_properties' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'node_id' => false,
        'name' => false,
        'full_name' => false,
        'owner' => false,
        'private' => false,
        'html_url' => false,
        'description' => true,
        'fork' => false,
        'url' => false,
        'archive_url' => false,
        'assignees_url' => false,
        'blobs_url' => false,
        'branches_url' => false,
        'collaborators_url' => false,
        'comments_url' => false,
        'commits_url' => false,
        'compare_url' => false,
        'contents_url' => false,
        'contributors_url' => false,
        'deployments_url' => false,
        'downloads_url' => false,
        'events_url' => false,
        'forks_url' => false,
        'git_commits_url' => false,
        'git_refs_url' => false,
        'git_tags_url' => false,
        'git_url' => false,
        'issue_comment_url' => false,
        'issue_events_url' => false,
        'issues_url' => false,
        'keys_url' => false,
        'labels_url' => false,
        'languages_url' => false,
        'merges_url' => false,
        'milestones_url' => false,
        'notifications_url' => false,
        'pulls_url' => false,
        'releases_url' => false,
        'ssh_url' => false,
        'stargazers_url' => false,
        'statuses_url' => false,
        'subscribers_url' => false,
        'subscription_url' => false,
        'tags_url' => false,
        'teams_url' => false,
        'trees_url' => false,
        'clone_url' => false,
        'mirror_url' => true,
        'hooks_url' => false,
        'svn_url' => false,
        'homepage' => true,
        'language' => true,
        'forks_count' => false,
        'stargazers_count' => false,
        'watchers_count' => false,
        'size' => false,
        'default_branch' => false,
        'open_issues_count' => false,
        'is_template' => false,
        'topics' => false,
        'has_issues' => false,
        'has_projects' => false,
        'has_wiki' => false,
        'has_pages' => false,
        'has_downloads' => false,
        'has_discussions' => false,
        'archived' => false,
        'disabled' => false,
        'visibility' => false,
        'pushed_at' => false,
        'created_at' => false,
        'updated_at' => false,
        'permissions' => false,
        'allow_rebase_merge' => false,
        'template_repository' => true,
        'temp_clone_token' => true,
        'allow_squash_merge' => false,
        'allow_auto_merge' => false,
        'delete_branch_on_merge' => false,
        'allow_merge_commit' => false,
        'allow_update_branch' => false,
        'use_squash_pr_title_as_default' => false,
        'squash_merge_commit_title' => false,
        'squash_merge_commit_message' => false,
        'merge_commit_title' => false,
        'merge_commit_message' => false,
        'allow_forking' => false,
        'web_commit_signoff_required' => false,
        'subscribers_count' => false,
        'network_count' => false,
        'license' => true,
        'organization' => true,
        'parent' => false,
        'source' => false,
        'forks' => false,
        'master_branch' => false,
        'open_issues' => false,
        'watchers' => false,
        'anonymous_access_enabled' => false,
        'code_of_conduct' => false,
        'security_and_analysis' => true,
        'custom_properties' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'node_id' => 'node_id',
        'name' => 'name',
        'full_name' => 'full_name',
        'owner' => 'owner',
        'private' => 'private',
        'html_url' => 'html_url',
        'description' => 'description',
        'fork' => 'fork',
        'url' => 'url',
        'archive_url' => 'archive_url',
        'assignees_url' => 'assignees_url',
        'blobs_url' => 'blobs_url',
        'branches_url' => 'branches_url',
        'collaborators_url' => 'collaborators_url',
        'comments_url' => 'comments_url',
        'commits_url' => 'commits_url',
        'compare_url' => 'compare_url',
        'contents_url' => 'contents_url',
        'contributors_url' => 'contributors_url',
        'deployments_url' => 'deployments_url',
        'downloads_url' => 'downloads_url',
        'events_url' => 'events_url',
        'forks_url' => 'forks_url',
        'git_commits_url' => 'git_commits_url',
        'git_refs_url' => 'git_refs_url',
        'git_tags_url' => 'git_tags_url',
        'git_url' => 'git_url',
        'issue_comment_url' => 'issue_comment_url',
        'issue_events_url' => 'issue_events_url',
        'issues_url' => 'issues_url',
        'keys_url' => 'keys_url',
        'labels_url' => 'labels_url',
        'languages_url' => 'languages_url',
        'merges_url' => 'merges_url',
        'milestones_url' => 'milestones_url',
        'notifications_url' => 'notifications_url',
        'pulls_url' => 'pulls_url',
        'releases_url' => 'releases_url',
        'ssh_url' => 'ssh_url',
        'stargazers_url' => 'stargazers_url',
        'statuses_url' => 'statuses_url',
        'subscribers_url' => 'subscribers_url',
        'subscription_url' => 'subscription_url',
        'tags_url' => 'tags_url',
        'teams_url' => 'teams_url',
        'trees_url' => 'trees_url',
        'clone_url' => 'clone_url',
        'mirror_url' => 'mirror_url',
        'hooks_url' => 'hooks_url',
        'svn_url' => 'svn_url',
        'homepage' => 'homepage',
        'language' => 'language',
        'forks_count' => 'forks_count',
        'stargazers_count' => 'stargazers_count',
        'watchers_count' => 'watchers_count',
        'size' => 'size',
        'default_branch' => 'default_branch',
        'open_issues_count' => 'open_issues_count',
        'is_template' => 'is_template',
        'topics' => 'topics',
        'has_issues' => 'has_issues',
        'has_projects' => 'has_projects',
        'has_wiki' => 'has_wiki',
        'has_pages' => 'has_pages',
        'has_downloads' => 'has_downloads',
        'has_discussions' => 'has_discussions',
        'archived' => 'archived',
        'disabled' => 'disabled',
        'visibility' => 'visibility',
        'pushed_at' => 'pushed_at',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'permissions' => 'permissions',
        'allow_rebase_merge' => 'allow_rebase_merge',
        'template_repository' => 'template_repository',
        'temp_clone_token' => 'temp_clone_token',
        'allow_squash_merge' => 'allow_squash_merge',
        'allow_auto_merge' => 'allow_auto_merge',
        'delete_branch_on_merge' => 'delete_branch_on_merge',
        'allow_merge_commit' => 'allow_merge_commit',
        'allow_update_branch' => 'allow_update_branch',
        'use_squash_pr_title_as_default' => 'use_squash_pr_title_as_default',
        'squash_merge_commit_title' => 'squash_merge_commit_title',
        'squash_merge_commit_message' => 'squash_merge_commit_message',
        'merge_commit_title' => 'merge_commit_title',
        'merge_commit_message' => 'merge_commit_message',
        'allow_forking' => 'allow_forking',
        'web_commit_signoff_required' => 'web_commit_signoff_required',
        'subscribers_count' => 'subscribers_count',
        'network_count' => 'network_count',
        'license' => 'license',
        'organization' => 'organization',
        'parent' => 'parent',
        'source' => 'source',
        'forks' => 'forks',
        'master_branch' => 'master_branch',
        'open_issues' => 'open_issues',
        'watchers' => 'watchers',
        'anonymous_access_enabled' => 'anonymous_access_enabled',
        'code_of_conduct' => 'code_of_conduct',
        'security_and_analysis' => 'security_and_analysis',
        'custom_properties' => 'custom_properties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'node_id' => 'setNodeId',
        'name' => 'setName',
        'full_name' => 'setFullName',
        'owner' => 'setOwner',
        'private' => 'setPrivate',
        'html_url' => 'setHtmlUrl',
        'description' => 'setDescription',
        'fork' => 'setFork',
        'url' => 'setUrl',
        'archive_url' => 'setArchiveUrl',
        'assignees_url' => 'setAssigneesUrl',
        'blobs_url' => 'setBlobsUrl',
        'branches_url' => 'setBranchesUrl',
        'collaborators_url' => 'setCollaboratorsUrl',
        'comments_url' => 'setCommentsUrl',
        'commits_url' => 'setCommitsUrl',
        'compare_url' => 'setCompareUrl',
        'contents_url' => 'setContentsUrl',
        'contributors_url' => 'setContributorsUrl',
        'deployments_url' => 'setDeploymentsUrl',
        'downloads_url' => 'setDownloadsUrl',
        'events_url' => 'setEventsUrl',
        'forks_url' => 'setForksUrl',
        'git_commits_url' => 'setGitCommitsUrl',
        'git_refs_url' => 'setGitRefsUrl',
        'git_tags_url' => 'setGitTagsUrl',
        'git_url' => 'setGitUrl',
        'issue_comment_url' => 'setIssueCommentUrl',
        'issue_events_url' => 'setIssueEventsUrl',
        'issues_url' => 'setIssuesUrl',
        'keys_url' => 'setKeysUrl',
        'labels_url' => 'setLabelsUrl',
        'languages_url' => 'setLanguagesUrl',
        'merges_url' => 'setMergesUrl',
        'milestones_url' => 'setMilestonesUrl',
        'notifications_url' => 'setNotificationsUrl',
        'pulls_url' => 'setPullsUrl',
        'releases_url' => 'setReleasesUrl',
        'ssh_url' => 'setSshUrl',
        'stargazers_url' => 'setStargazersUrl',
        'statuses_url' => 'setStatusesUrl',
        'subscribers_url' => 'setSubscribersUrl',
        'subscription_url' => 'setSubscriptionUrl',
        'tags_url' => 'setTagsUrl',
        'teams_url' => 'setTeamsUrl',
        'trees_url' => 'setTreesUrl',
        'clone_url' => 'setCloneUrl',
        'mirror_url' => 'setMirrorUrl',
        'hooks_url' => 'setHooksUrl',
        'svn_url' => 'setSvnUrl',
        'homepage' => 'setHomepage',
        'language' => 'setLanguage',
        'forks_count' => 'setForksCount',
        'stargazers_count' => 'setStargazersCount',
        'watchers_count' => 'setWatchersCount',
        'size' => 'setSize',
        'default_branch' => 'setDefaultBranch',
        'open_issues_count' => 'setOpenIssuesCount',
        'is_template' => 'setIsTemplate',
        'topics' => 'setTopics',
        'has_issues' => 'setHasIssues',
        'has_projects' => 'setHasProjects',
        'has_wiki' => 'setHasWiki',
        'has_pages' => 'setHasPages',
        'has_downloads' => 'setHasDownloads',
        'has_discussions' => 'setHasDiscussions',
        'archived' => 'setArchived',
        'disabled' => 'setDisabled',
        'visibility' => 'setVisibility',
        'pushed_at' => 'setPushedAt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'permissions' => 'setPermissions',
        'allow_rebase_merge' => 'setAllowRebaseMerge',
        'template_repository' => 'setTemplateRepository',
        'temp_clone_token' => 'setTempCloneToken',
        'allow_squash_merge' => 'setAllowSquashMerge',
        'allow_auto_merge' => 'setAllowAutoMerge',
        'delete_branch_on_merge' => 'setDeleteBranchOnMerge',
        'allow_merge_commit' => 'setAllowMergeCommit',
        'allow_update_branch' => 'setAllowUpdateBranch',
        'use_squash_pr_title_as_default' => 'setUseSquashPrTitleAsDefault',
        'squash_merge_commit_title' => 'setSquashMergeCommitTitle',
        'squash_merge_commit_message' => 'setSquashMergeCommitMessage',
        'merge_commit_title' => 'setMergeCommitTitle',
        'merge_commit_message' => 'setMergeCommitMessage',
        'allow_forking' => 'setAllowForking',
        'web_commit_signoff_required' => 'setWebCommitSignoffRequired',
        'subscribers_count' => 'setSubscribersCount',
        'network_count' => 'setNetworkCount',
        'license' => 'setLicense',
        'organization' => 'setOrganization',
        'parent' => 'setParent',
        'source' => 'setSource',
        'forks' => 'setForks',
        'master_branch' => 'setMasterBranch',
        'open_issues' => 'setOpenIssues',
        'watchers' => 'setWatchers',
        'anonymous_access_enabled' => 'setAnonymousAccessEnabled',
        'code_of_conduct' => 'setCodeOfConduct',
        'security_and_analysis' => 'setSecurityAndAnalysis',
        'custom_properties' => 'setCustomProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'node_id' => 'getNodeId',
        'name' => 'getName',
        'full_name' => 'getFullName',
        'owner' => 'getOwner',
        'private' => 'getPrivate',
        'html_url' => 'getHtmlUrl',
        'description' => 'getDescription',
        'fork' => 'getFork',
        'url' => 'getUrl',
        'archive_url' => 'getArchiveUrl',
        'assignees_url' => 'getAssigneesUrl',
        'blobs_url' => 'getBlobsUrl',
        'branches_url' => 'getBranchesUrl',
        'collaborators_url' => 'getCollaboratorsUrl',
        'comments_url' => 'getCommentsUrl',
        'commits_url' => 'getCommitsUrl',
        'compare_url' => 'getCompareUrl',
        'contents_url' => 'getContentsUrl',
        'contributors_url' => 'getContributorsUrl',
        'deployments_url' => 'getDeploymentsUrl',
        'downloads_url' => 'getDownloadsUrl',
        'events_url' => 'getEventsUrl',
        'forks_url' => 'getForksUrl',
        'git_commits_url' => 'getGitCommitsUrl',
        'git_refs_url' => 'getGitRefsUrl',
        'git_tags_url' => 'getGitTagsUrl',
        'git_url' => 'getGitUrl',
        'issue_comment_url' => 'getIssueCommentUrl',
        'issue_events_url' => 'getIssueEventsUrl',
        'issues_url' => 'getIssuesUrl',
        'keys_url' => 'getKeysUrl',
        'labels_url' => 'getLabelsUrl',
        'languages_url' => 'getLanguagesUrl',
        'merges_url' => 'getMergesUrl',
        'milestones_url' => 'getMilestonesUrl',
        'notifications_url' => 'getNotificationsUrl',
        'pulls_url' => 'getPullsUrl',
        'releases_url' => 'getReleasesUrl',
        'ssh_url' => 'getSshUrl',
        'stargazers_url' => 'getStargazersUrl',
        'statuses_url' => 'getStatusesUrl',
        'subscribers_url' => 'getSubscribersUrl',
        'subscription_url' => 'getSubscriptionUrl',
        'tags_url' => 'getTagsUrl',
        'teams_url' => 'getTeamsUrl',
        'trees_url' => 'getTreesUrl',
        'clone_url' => 'getCloneUrl',
        'mirror_url' => 'getMirrorUrl',
        'hooks_url' => 'getHooksUrl',
        'svn_url' => 'getSvnUrl',
        'homepage' => 'getHomepage',
        'language' => 'getLanguage',
        'forks_count' => 'getForksCount',
        'stargazers_count' => 'getStargazersCount',
        'watchers_count' => 'getWatchersCount',
        'size' => 'getSize',
        'default_branch' => 'getDefaultBranch',
        'open_issues_count' => 'getOpenIssuesCount',
        'is_template' => 'getIsTemplate',
        'topics' => 'getTopics',
        'has_issues' => 'getHasIssues',
        'has_projects' => 'getHasProjects',
        'has_wiki' => 'getHasWiki',
        'has_pages' => 'getHasPages',
        'has_downloads' => 'getHasDownloads',
        'has_discussions' => 'getHasDiscussions',
        'archived' => 'getArchived',
        'disabled' => 'getDisabled',
        'visibility' => 'getVisibility',
        'pushed_at' => 'getPushedAt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'permissions' => 'getPermissions',
        'allow_rebase_merge' => 'getAllowRebaseMerge',
        'template_repository' => 'getTemplateRepository',
        'temp_clone_token' => 'getTempCloneToken',
        'allow_squash_merge' => 'getAllowSquashMerge',
        'allow_auto_merge' => 'getAllowAutoMerge',
        'delete_branch_on_merge' => 'getDeleteBranchOnMerge',
        'allow_merge_commit' => 'getAllowMergeCommit',
        'allow_update_branch' => 'getAllowUpdateBranch',
        'use_squash_pr_title_as_default' => 'getUseSquashPrTitleAsDefault',
        'squash_merge_commit_title' => 'getSquashMergeCommitTitle',
        'squash_merge_commit_message' => 'getSquashMergeCommitMessage',
        'merge_commit_title' => 'getMergeCommitTitle',
        'merge_commit_message' => 'getMergeCommitMessage',
        'allow_forking' => 'getAllowForking',
        'web_commit_signoff_required' => 'getWebCommitSignoffRequired',
        'subscribers_count' => 'getSubscribersCount',
        'network_count' => 'getNetworkCount',
        'license' => 'getLicense',
        'organization' => 'getOrganization',
        'parent' => 'getParent',
        'source' => 'getSource',
        'forks' => 'getForks',
        'master_branch' => 'getMasterBranch',
        'open_issues' => 'getOpenIssues',
        'watchers' => 'getWatchers',
        'anonymous_access_enabled' => 'getAnonymousAccessEnabled',
        'code_of_conduct' => 'getCodeOfConduct',
        'security_and_analysis' => 'getSecurityAndAnalysis',
        'custom_properties' => 'getCustomProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SQUASH_MERGE_COMMIT_TITLE_PR_TITLE = 'PR_TITLE';
    public const SQUASH_MERGE_COMMIT_TITLE_COMMIT_OR_PR_TITLE = 'COMMIT_OR_PR_TITLE';
    public const SQUASH_MERGE_COMMIT_MESSAGE_PR_BODY = 'PR_BODY';
    public const SQUASH_MERGE_COMMIT_MESSAGE_COMMIT_MESSAGES = 'COMMIT_MESSAGES';
    public const SQUASH_MERGE_COMMIT_MESSAGE_BLANK = 'BLANK';
    public const MERGE_COMMIT_TITLE_PR_TITLE = 'PR_TITLE';
    public const MERGE_COMMIT_TITLE_MERGE_MESSAGE = 'MERGE_MESSAGE';
    public const MERGE_COMMIT_MESSAGE_PR_BODY = 'PR_BODY';
    public const MERGE_COMMIT_MESSAGE_PR_TITLE = 'PR_TITLE';
    public const MERGE_COMMIT_MESSAGE_BLANK = 'BLANK';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSquashMergeCommitTitleAllowableValues()
    {
        return [
            self::SQUASH_MERGE_COMMIT_TITLE_PR_TITLE,
            self::SQUASH_MERGE_COMMIT_TITLE_COMMIT_OR_PR_TITLE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSquashMergeCommitMessageAllowableValues()
    {
        return [
            self::SQUASH_MERGE_COMMIT_MESSAGE_PR_BODY,
            self::SQUASH_MERGE_COMMIT_MESSAGE_COMMIT_MESSAGES,
            self::SQUASH_MERGE_COMMIT_MESSAGE_BLANK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMergeCommitTitleAllowableValues()
    {
        return [
            self::MERGE_COMMIT_TITLE_PR_TITLE,
            self::MERGE_COMMIT_TITLE_MERGE_MESSAGE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMergeCommitMessageAllowableValues()
    {
        return [
            self::MERGE_COMMIT_MESSAGE_PR_BODY,
            self::MERGE_COMMIT_MESSAGE_PR_TITLE,
            self::MERGE_COMMIT_MESSAGE_BLANK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('private', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('fork', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('archive_url', $data ?? [], null);
        $this->setIfExists('assignees_url', $data ?? [], null);
        $this->setIfExists('blobs_url', $data ?? [], null);
        $this->setIfExists('branches_url', $data ?? [], null);
        $this->setIfExists('collaborators_url', $data ?? [], null);
        $this->setIfExists('comments_url', $data ?? [], null);
        $this->setIfExists('commits_url', $data ?? [], null);
        $this->setIfExists('compare_url', $data ?? [], null);
        $this->setIfExists('contents_url', $data ?? [], null);
        $this->setIfExists('contributors_url', $data ?? [], null);
        $this->setIfExists('deployments_url', $data ?? [], null);
        $this->setIfExists('downloads_url', $data ?? [], null);
        $this->setIfExists('events_url', $data ?? [], null);
        $this->setIfExists('forks_url', $data ?? [], null);
        $this->setIfExists('git_commits_url', $data ?? [], null);
        $this->setIfExists('git_refs_url', $data ?? [], null);
        $this->setIfExists('git_tags_url', $data ?? [], null);
        $this->setIfExists('git_url', $data ?? [], null);
        $this->setIfExists('issue_comment_url', $data ?? [], null);
        $this->setIfExists('issue_events_url', $data ?? [], null);
        $this->setIfExists('issues_url', $data ?? [], null);
        $this->setIfExists('keys_url', $data ?? [], null);
        $this->setIfExists('labels_url', $data ?? [], null);
        $this->setIfExists('languages_url', $data ?? [], null);
        $this->setIfExists('merges_url', $data ?? [], null);
        $this->setIfExists('milestones_url', $data ?? [], null);
        $this->setIfExists('notifications_url', $data ?? [], null);
        $this->setIfExists('pulls_url', $data ?? [], null);
        $this->setIfExists('releases_url', $data ?? [], null);
        $this->setIfExists('ssh_url', $data ?? [], null);
        $this->setIfExists('stargazers_url', $data ?? [], null);
        $this->setIfExists('statuses_url', $data ?? [], null);
        $this->setIfExists('subscribers_url', $data ?? [], null);
        $this->setIfExists('subscription_url', $data ?? [], null);
        $this->setIfExists('tags_url', $data ?? [], null);
        $this->setIfExists('teams_url', $data ?? [], null);
        $this->setIfExists('trees_url', $data ?? [], null);
        $this->setIfExists('clone_url', $data ?? [], null);
        $this->setIfExists('mirror_url', $data ?? [], null);
        $this->setIfExists('hooks_url', $data ?? [], null);
        $this->setIfExists('svn_url', $data ?? [], null);
        $this->setIfExists('homepage', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('forks_count', $data ?? [], null);
        $this->setIfExists('stargazers_count', $data ?? [], null);
        $this->setIfExists('watchers_count', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('default_branch', $data ?? [], null);
        $this->setIfExists('open_issues_count', $data ?? [], null);
        $this->setIfExists('is_template', $data ?? [], null);
        $this->setIfExists('topics', $data ?? [], null);
        $this->setIfExists('has_issues', $data ?? [], null);
        $this->setIfExists('has_projects', $data ?? [], null);
        $this->setIfExists('has_wiki', $data ?? [], null);
        $this->setIfExists('has_pages', $data ?? [], null);
        $this->setIfExists('has_downloads', $data ?? [], null);
        $this->setIfExists('has_discussions', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('disabled', $data ?? [], null);
        $this->setIfExists('visibility', $data ?? [], null);
        $this->setIfExists('pushed_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('allow_rebase_merge', $data ?? [], null);
        $this->setIfExists('template_repository', $data ?? [], null);
        $this->setIfExists('temp_clone_token', $data ?? [], null);
        $this->setIfExists('allow_squash_merge', $data ?? [], null);
        $this->setIfExists('allow_auto_merge', $data ?? [], null);
        $this->setIfExists('delete_branch_on_merge', $data ?? [], null);
        $this->setIfExists('allow_merge_commit', $data ?? [], null);
        $this->setIfExists('allow_update_branch', $data ?? [], null);
        $this->setIfExists('use_squash_pr_title_as_default', $data ?? [], null);
        $this->setIfExists('squash_merge_commit_title', $data ?? [], null);
        $this->setIfExists('squash_merge_commit_message', $data ?? [], null);
        $this->setIfExists('merge_commit_title', $data ?? [], null);
        $this->setIfExists('merge_commit_message', $data ?? [], null);
        $this->setIfExists('allow_forking', $data ?? [], null);
        $this->setIfExists('web_commit_signoff_required', $data ?? [], null);
        $this->setIfExists('subscribers_count', $data ?? [], null);
        $this->setIfExists('network_count', $data ?? [], null);
        $this->setIfExists('license', $data ?? [], null);
        $this->setIfExists('organization', $data ?? [], null);
        $this->setIfExists('parent', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('forks', $data ?? [], null);
        $this->setIfExists('master_branch', $data ?? [], null);
        $this->setIfExists('open_issues', $data ?? [], null);
        $this->setIfExists('watchers', $data ?? [], null);
        $this->setIfExists('anonymous_access_enabled', $data ?? [], true);
        $this->setIfExists('code_of_conduct', $data ?? [], null);
        $this->setIfExists('security_and_analysis', $data ?? [], null);
        $this->setIfExists('custom_properties', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['node_id'] === null) {
            $invalidProperties[] = "'node_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['full_name'] === null) {
            $invalidProperties[] = "'full_name' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalidProperties[] = "'owner' can't be null";
        }
        if ($this->container['private'] === null) {
            $invalidProperties[] = "'private' can't be null";
        }
        if ($this->container['html_url'] === null) {
            $invalidProperties[] = "'html_url' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['fork'] === null) {
            $invalidProperties[] = "'fork' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['archive_url'] === null) {
            $invalidProperties[] = "'archive_url' can't be null";
        }
        if ($this->container['assignees_url'] === null) {
            $invalidProperties[] = "'assignees_url' can't be null";
        }
        if ($this->container['blobs_url'] === null) {
            $invalidProperties[] = "'blobs_url' can't be null";
        }
        if ($this->container['branches_url'] === null) {
            $invalidProperties[] = "'branches_url' can't be null";
        }
        if ($this->container['collaborators_url'] === null) {
            $invalidProperties[] = "'collaborators_url' can't be null";
        }
        if ($this->container['comments_url'] === null) {
            $invalidProperties[] = "'comments_url' can't be null";
        }
        if ($this->container['commits_url'] === null) {
            $invalidProperties[] = "'commits_url' can't be null";
        }
        if ($this->container['compare_url'] === null) {
            $invalidProperties[] = "'compare_url' can't be null";
        }
        if ($this->container['contents_url'] === null) {
            $invalidProperties[] = "'contents_url' can't be null";
        }
        if ($this->container['contributors_url'] === null) {
            $invalidProperties[] = "'contributors_url' can't be null";
        }
        if ($this->container['deployments_url'] === null) {
            $invalidProperties[] = "'deployments_url' can't be null";
        }
        if ($this->container['downloads_url'] === null) {
            $invalidProperties[] = "'downloads_url' can't be null";
        }
        if ($this->container['events_url'] === null) {
            $invalidProperties[] = "'events_url' can't be null";
        }
        if ($this->container['forks_url'] === null) {
            $invalidProperties[] = "'forks_url' can't be null";
        }
        if ($this->container['git_commits_url'] === null) {
            $invalidProperties[] = "'git_commits_url' can't be null";
        }
        if ($this->container['git_refs_url'] === null) {
            $invalidProperties[] = "'git_refs_url' can't be null";
        }
        if ($this->container['git_tags_url'] === null) {
            $invalidProperties[] = "'git_tags_url' can't be null";
        }
        if ($this->container['git_url'] === null) {
            $invalidProperties[] = "'git_url' can't be null";
        }
        if ($this->container['issue_comment_url'] === null) {
            $invalidProperties[] = "'issue_comment_url' can't be null";
        }
        if ($this->container['issue_events_url'] === null) {
            $invalidProperties[] = "'issue_events_url' can't be null";
        }
        if ($this->container['issues_url'] === null) {
            $invalidProperties[] = "'issues_url' can't be null";
        }
        if ($this->container['keys_url'] === null) {
            $invalidProperties[] = "'keys_url' can't be null";
        }
        if ($this->container['labels_url'] === null) {
            $invalidProperties[] = "'labels_url' can't be null";
        }
        if ($this->container['languages_url'] === null) {
            $invalidProperties[] = "'languages_url' can't be null";
        }
        if ($this->container['merges_url'] === null) {
            $invalidProperties[] = "'merges_url' can't be null";
        }
        if ($this->container['milestones_url'] === null) {
            $invalidProperties[] = "'milestones_url' can't be null";
        }
        if ($this->container['notifications_url'] === null) {
            $invalidProperties[] = "'notifications_url' can't be null";
        }
        if ($this->container['pulls_url'] === null) {
            $invalidProperties[] = "'pulls_url' can't be null";
        }
        if ($this->container['releases_url'] === null) {
            $invalidProperties[] = "'releases_url' can't be null";
        }
        if ($this->container['ssh_url'] === null) {
            $invalidProperties[] = "'ssh_url' can't be null";
        }
        if ($this->container['stargazers_url'] === null) {
            $invalidProperties[] = "'stargazers_url' can't be null";
        }
        if ($this->container['statuses_url'] === null) {
            $invalidProperties[] = "'statuses_url' can't be null";
        }
        if ($this->container['subscribers_url'] === null) {
            $invalidProperties[] = "'subscribers_url' can't be null";
        }
        if ($this->container['subscription_url'] === null) {
            $invalidProperties[] = "'subscription_url' can't be null";
        }
        if ($this->container['tags_url'] === null) {
            $invalidProperties[] = "'tags_url' can't be null";
        }
        if ($this->container['teams_url'] === null) {
            $invalidProperties[] = "'teams_url' can't be null";
        }
        if ($this->container['trees_url'] === null) {
            $invalidProperties[] = "'trees_url' can't be null";
        }
        if ($this->container['clone_url'] === null) {
            $invalidProperties[] = "'clone_url' can't be null";
        }
        if ($this->container['mirror_url'] === null) {
            $invalidProperties[] = "'mirror_url' can't be null";
        }
        if ($this->container['hooks_url'] === null) {
            $invalidProperties[] = "'hooks_url' can't be null";
        }
        if ($this->container['svn_url'] === null) {
            $invalidProperties[] = "'svn_url' can't be null";
        }
        if ($this->container['homepage'] === null) {
            $invalidProperties[] = "'homepage' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ($this->container['forks_count'] === null) {
            $invalidProperties[] = "'forks_count' can't be null";
        }
        if ($this->container['stargazers_count'] === null) {
            $invalidProperties[] = "'stargazers_count' can't be null";
        }
        if ($this->container['watchers_count'] === null) {
            $invalidProperties[] = "'watchers_count' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['default_branch'] === null) {
            $invalidProperties[] = "'default_branch' can't be null";
        }
        if ($this->container['open_issues_count'] === null) {
            $invalidProperties[] = "'open_issues_count' can't be null";
        }
        if ($this->container['has_issues'] === null) {
            $invalidProperties[] = "'has_issues' can't be null";
        }
        if ($this->container['has_projects'] === null) {
            $invalidProperties[] = "'has_projects' can't be null";
        }
        if ($this->container['has_wiki'] === null) {
            $invalidProperties[] = "'has_wiki' can't be null";
        }
        if ($this->container['has_pages'] === null) {
            $invalidProperties[] = "'has_pages' can't be null";
        }
        if ($this->container['has_discussions'] === null) {
            $invalidProperties[] = "'has_discussions' can't be null";
        }
        if ($this->container['archived'] === null) {
            $invalidProperties[] = "'archived' can't be null";
        }
        if ($this->container['disabled'] === null) {
            $invalidProperties[] = "'disabled' can't be null";
        }
        if ($this->container['pushed_at'] === null) {
            $invalidProperties[] = "'pushed_at' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        $allowedValues = $this->getSquashMergeCommitTitleAllowableValues();
        if (!is_null($this->container['squash_merge_commit_title']) && !in_array($this->container['squash_merge_commit_title'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'squash_merge_commit_title', must be one of '%s'",
                $this->container['squash_merge_commit_title'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSquashMergeCommitMessageAllowableValues();
        if (!is_null($this->container['squash_merge_commit_message']) && !in_array($this->container['squash_merge_commit_message'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'squash_merge_commit_message', must be one of '%s'",
                $this->container['squash_merge_commit_message'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMergeCommitTitleAllowableValues();
        if (!is_null($this->container['merge_commit_title']) && !in_array($this->container['merge_commit_title'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'merge_commit_title', must be one of '%s'",
                $this->container['merge_commit_title'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMergeCommitMessageAllowableValues();
        if (!is_null($this->container['merge_commit_message']) && !in_array($this->container['merge_commit_message'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'merge_commit_message', must be one of '%s'",
                $this->container['merge_commit_message'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['subscribers_count'] === null) {
            $invalidProperties[] = "'subscribers_count' can't be null";
        }
        if ($this->container['network_count'] === null) {
            $invalidProperties[] = "'network_count' can't be null";
        }
        if ($this->container['license'] === null) {
            $invalidProperties[] = "'license' can't be null";
        }
        if ($this->container['forks'] === null) {
            $invalidProperties[] = "'forks' can't be null";
        }
        if ($this->container['open_issues'] === null) {
            $invalidProperties[] = "'open_issues' can't be null";
        }
        if ($this->container['watchers'] === null) {
            $invalidProperties[] = "'watchers' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name full_name
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            throw new \InvalidArgumentException('non-nullable full_name cannot be null');
        }
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool $private private
     *
     * @return self
     */
    public function setPrivate($private)
    {
        if (is_null($private)) {
            throw new \InvalidArgumentException('non-nullable private cannot be null');
        }
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets fork
     *
     * @return bool
     */
    public function getFork()
    {
        return $this->container['fork'];
    }

    /**
     * Sets fork
     *
     * @param bool $fork fork
     *
     * @return self
     */
    public function setFork($fork)
    {
        if (is_null($fork)) {
            throw new \InvalidArgumentException('non-nullable fork cannot be null');
        }
        $this->container['fork'] = $fork;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets archive_url
     *
     * @return string
     */
    public function getArchiveUrl()
    {
        return $this->container['archive_url'];
    }

    /**
     * Sets archive_url
     *
     * @param string $archive_url archive_url
     *
     * @return self
     */
    public function setArchiveUrl($archive_url)
    {
        if (is_null($archive_url)) {
            throw new \InvalidArgumentException('non-nullable archive_url cannot be null');
        }
        $this->container['archive_url'] = $archive_url;

        return $this;
    }

    /**
     * Gets assignees_url
     *
     * @return string
     */
    public function getAssigneesUrl()
    {
        return $this->container['assignees_url'];
    }

    /**
     * Sets assignees_url
     *
     * @param string $assignees_url assignees_url
     *
     * @return self
     */
    public function setAssigneesUrl($assignees_url)
    {
        if (is_null($assignees_url)) {
            throw new \InvalidArgumentException('non-nullable assignees_url cannot be null');
        }
        $this->container['assignees_url'] = $assignees_url;

        return $this;
    }

    /**
     * Gets blobs_url
     *
     * @return string
     */
    public function getBlobsUrl()
    {
        return $this->container['blobs_url'];
    }

    /**
     * Sets blobs_url
     *
     * @param string $blobs_url blobs_url
     *
     * @return self
     */
    public function setBlobsUrl($blobs_url)
    {
        if (is_null($blobs_url)) {
            throw new \InvalidArgumentException('non-nullable blobs_url cannot be null');
        }
        $this->container['blobs_url'] = $blobs_url;

        return $this;
    }

    /**
     * Gets branches_url
     *
     * @return string
     */
    public function getBranchesUrl()
    {
        return $this->container['branches_url'];
    }

    /**
     * Sets branches_url
     *
     * @param string $branches_url branches_url
     *
     * @return self
     */
    public function setBranchesUrl($branches_url)
    {
        if (is_null($branches_url)) {
            throw new \InvalidArgumentException('non-nullable branches_url cannot be null');
        }
        $this->container['branches_url'] = $branches_url;

        return $this;
    }

    /**
     * Gets collaborators_url
     *
     * @return string
     */
    public function getCollaboratorsUrl()
    {
        return $this->container['collaborators_url'];
    }

    /**
     * Sets collaborators_url
     *
     * @param string $collaborators_url collaborators_url
     *
     * @return self
     */
    public function setCollaboratorsUrl($collaborators_url)
    {
        if (is_null($collaborators_url)) {
            throw new \InvalidArgumentException('non-nullable collaborators_url cannot be null');
        }
        $this->container['collaborators_url'] = $collaborators_url;

        return $this;
    }

    /**
     * Gets comments_url
     *
     * @return string
     */
    public function getCommentsUrl()
    {
        return $this->container['comments_url'];
    }

    /**
     * Sets comments_url
     *
     * @param string $comments_url comments_url
     *
     * @return self
     */
    public function setCommentsUrl($comments_url)
    {
        if (is_null($comments_url)) {
            throw new \InvalidArgumentException('non-nullable comments_url cannot be null');
        }
        $this->container['comments_url'] = $comments_url;

        return $this;
    }

    /**
     * Gets commits_url
     *
     * @return string
     */
    public function getCommitsUrl()
    {
        return $this->container['commits_url'];
    }

    /**
     * Sets commits_url
     *
     * @param string $commits_url commits_url
     *
     * @return self
     */
    public function setCommitsUrl($commits_url)
    {
        if (is_null($commits_url)) {
            throw new \InvalidArgumentException('non-nullable commits_url cannot be null');
        }
        $this->container['commits_url'] = $commits_url;

        return $this;
    }

    /**
     * Gets compare_url
     *
     * @return string
     */
    public function getCompareUrl()
    {
        return $this->container['compare_url'];
    }

    /**
     * Sets compare_url
     *
     * @param string $compare_url compare_url
     *
     * @return self
     */
    public function setCompareUrl($compare_url)
    {
        if (is_null($compare_url)) {
            throw new \InvalidArgumentException('non-nullable compare_url cannot be null');
        }
        $this->container['compare_url'] = $compare_url;

        return $this;
    }

    /**
     * Gets contents_url
     *
     * @return string
     */
    public function getContentsUrl()
    {
        return $this->container['contents_url'];
    }

    /**
     * Sets contents_url
     *
     * @param string $contents_url contents_url
     *
     * @return self
     */
    public function setContentsUrl($contents_url)
    {
        if (is_null($contents_url)) {
            throw new \InvalidArgumentException('non-nullable contents_url cannot be null');
        }
        $this->container['contents_url'] = $contents_url;

        return $this;
    }

    /**
     * Gets contributors_url
     *
     * @return string
     */
    public function getContributorsUrl()
    {
        return $this->container['contributors_url'];
    }

    /**
     * Sets contributors_url
     *
     * @param string $contributors_url contributors_url
     *
     * @return self
     */
    public function setContributorsUrl($contributors_url)
    {
        if (is_null($contributors_url)) {
            throw new \InvalidArgumentException('non-nullable contributors_url cannot be null');
        }
        $this->container['contributors_url'] = $contributors_url;

        return $this;
    }

    /**
     * Gets deployments_url
     *
     * @return string
     */
    public function getDeploymentsUrl()
    {
        return $this->container['deployments_url'];
    }

    /**
     * Sets deployments_url
     *
     * @param string $deployments_url deployments_url
     *
     * @return self
     */
    public function setDeploymentsUrl($deployments_url)
    {
        if (is_null($deployments_url)) {
            throw new \InvalidArgumentException('non-nullable deployments_url cannot be null');
        }
        $this->container['deployments_url'] = $deployments_url;

        return $this;
    }

    /**
     * Gets downloads_url
     *
     * @return string
     */
    public function getDownloadsUrl()
    {
        return $this->container['downloads_url'];
    }

    /**
     * Sets downloads_url
     *
     * @param string $downloads_url downloads_url
     *
     * @return self
     */
    public function setDownloadsUrl($downloads_url)
    {
        if (is_null($downloads_url)) {
            throw new \InvalidArgumentException('non-nullable downloads_url cannot be null');
        }
        $this->container['downloads_url'] = $downloads_url;

        return $this;
    }

    /**
     * Gets events_url
     *
     * @return string
     */
    public function getEventsUrl()
    {
        return $this->container['events_url'];
    }

    /**
     * Sets events_url
     *
     * @param string $events_url events_url
     *
     * @return self
     */
    public function setEventsUrl($events_url)
    {
        if (is_null($events_url)) {
            throw new \InvalidArgumentException('non-nullable events_url cannot be null');
        }
        $this->container['events_url'] = $events_url;

        return $this;
    }

    /**
     * Gets forks_url
     *
     * @return string
     */
    public function getForksUrl()
    {
        return $this->container['forks_url'];
    }

    /**
     * Sets forks_url
     *
     * @param string $forks_url forks_url
     *
     * @return self
     */
    public function setForksUrl($forks_url)
    {
        if (is_null($forks_url)) {
            throw new \InvalidArgumentException('non-nullable forks_url cannot be null');
        }
        $this->container['forks_url'] = $forks_url;

        return $this;
    }

    /**
     * Gets git_commits_url
     *
     * @return string
     */
    public function getGitCommitsUrl()
    {
        return $this->container['git_commits_url'];
    }

    /**
     * Sets git_commits_url
     *
     * @param string $git_commits_url git_commits_url
     *
     * @return self
     */
    public function setGitCommitsUrl($git_commits_url)
    {
        if (is_null($git_commits_url)) {
            throw new \InvalidArgumentException('non-nullable git_commits_url cannot be null');
        }
        $this->container['git_commits_url'] = $git_commits_url;

        return $this;
    }

    /**
     * Gets git_refs_url
     *
     * @return string
     */
    public function getGitRefsUrl()
    {
        return $this->container['git_refs_url'];
    }

    /**
     * Sets git_refs_url
     *
     * @param string $git_refs_url git_refs_url
     *
     * @return self
     */
    public function setGitRefsUrl($git_refs_url)
    {
        if (is_null($git_refs_url)) {
            throw new \InvalidArgumentException('non-nullable git_refs_url cannot be null');
        }
        $this->container['git_refs_url'] = $git_refs_url;

        return $this;
    }

    /**
     * Gets git_tags_url
     *
     * @return string
     */
    public function getGitTagsUrl()
    {
        return $this->container['git_tags_url'];
    }

    /**
     * Sets git_tags_url
     *
     * @param string $git_tags_url git_tags_url
     *
     * @return self
     */
    public function setGitTagsUrl($git_tags_url)
    {
        if (is_null($git_tags_url)) {
            throw new \InvalidArgumentException('non-nullable git_tags_url cannot be null');
        }
        $this->container['git_tags_url'] = $git_tags_url;

        return $this;
    }

    /**
     * Gets git_url
     *
     * @return string
     */
    public function getGitUrl()
    {
        return $this->container['git_url'];
    }

    /**
     * Sets git_url
     *
     * @param string $git_url git_url
     *
     * @return self
     */
    public function setGitUrl($git_url)
    {
        if (is_null($git_url)) {
            throw new \InvalidArgumentException('non-nullable git_url cannot be null');
        }
        $this->container['git_url'] = $git_url;

        return $this;
    }

    /**
     * Gets issue_comment_url
     *
     * @return string
     */
    public function getIssueCommentUrl()
    {
        return $this->container['issue_comment_url'];
    }

    /**
     * Sets issue_comment_url
     *
     * @param string $issue_comment_url issue_comment_url
     *
     * @return self
     */
    public function setIssueCommentUrl($issue_comment_url)
    {
        if (is_null($issue_comment_url)) {
            throw new \InvalidArgumentException('non-nullable issue_comment_url cannot be null');
        }
        $this->container['issue_comment_url'] = $issue_comment_url;

        return $this;
    }

    /**
     * Gets issue_events_url
     *
     * @return string
     */
    public function getIssueEventsUrl()
    {
        return $this->container['issue_events_url'];
    }

    /**
     * Sets issue_events_url
     *
     * @param string $issue_events_url issue_events_url
     *
     * @return self
     */
    public function setIssueEventsUrl($issue_events_url)
    {
        if (is_null($issue_events_url)) {
            throw new \InvalidArgumentException('non-nullable issue_events_url cannot be null');
        }
        $this->container['issue_events_url'] = $issue_events_url;

        return $this;
    }

    /**
     * Gets issues_url
     *
     * @return string
     */
    public function getIssuesUrl()
    {
        return $this->container['issues_url'];
    }

    /**
     * Sets issues_url
     *
     * @param string $issues_url issues_url
     *
     * @return self
     */
    public function setIssuesUrl($issues_url)
    {
        if (is_null($issues_url)) {
            throw new \InvalidArgumentException('non-nullable issues_url cannot be null');
        }
        $this->container['issues_url'] = $issues_url;

        return $this;
    }

    /**
     * Gets keys_url
     *
     * @return string
     */
    public function getKeysUrl()
    {
        return $this->container['keys_url'];
    }

    /**
     * Sets keys_url
     *
     * @param string $keys_url keys_url
     *
     * @return self
     */
    public function setKeysUrl($keys_url)
    {
        if (is_null($keys_url)) {
            throw new \InvalidArgumentException('non-nullable keys_url cannot be null');
        }
        $this->container['keys_url'] = $keys_url;

        return $this;
    }

    /**
     * Gets labels_url
     *
     * @return string
     */
    public function getLabelsUrl()
    {
        return $this->container['labels_url'];
    }

    /**
     * Sets labels_url
     *
     * @param string $labels_url labels_url
     *
     * @return self
     */
    public function setLabelsUrl($labels_url)
    {
        if (is_null($labels_url)) {
            throw new \InvalidArgumentException('non-nullable labels_url cannot be null');
        }
        $this->container['labels_url'] = $labels_url;

        return $this;
    }

    /**
     * Gets languages_url
     *
     * @return string
     */
    public function getLanguagesUrl()
    {
        return $this->container['languages_url'];
    }

    /**
     * Sets languages_url
     *
     * @param string $languages_url languages_url
     *
     * @return self
     */
    public function setLanguagesUrl($languages_url)
    {
        if (is_null($languages_url)) {
            throw new \InvalidArgumentException('non-nullable languages_url cannot be null');
        }
        $this->container['languages_url'] = $languages_url;

        return $this;
    }

    /**
     * Gets merges_url
     *
     * @return string
     */
    public function getMergesUrl()
    {
        return $this->container['merges_url'];
    }

    /**
     * Sets merges_url
     *
     * @param string $merges_url merges_url
     *
     * @return self
     */
    public function setMergesUrl($merges_url)
    {
        if (is_null($merges_url)) {
            throw new \InvalidArgumentException('non-nullable merges_url cannot be null');
        }
        $this->container['merges_url'] = $merges_url;

        return $this;
    }

    /**
     * Gets milestones_url
     *
     * @return string
     */
    public function getMilestonesUrl()
    {
        return $this->container['milestones_url'];
    }

    /**
     * Sets milestones_url
     *
     * @param string $milestones_url milestones_url
     *
     * @return self
     */
    public function setMilestonesUrl($milestones_url)
    {
        if (is_null($milestones_url)) {
            throw new \InvalidArgumentException('non-nullable milestones_url cannot be null');
        }
        $this->container['milestones_url'] = $milestones_url;

        return $this;
    }

    /**
     * Gets notifications_url
     *
     * @return string
     */
    public function getNotificationsUrl()
    {
        return $this->container['notifications_url'];
    }

    /**
     * Sets notifications_url
     *
     * @param string $notifications_url notifications_url
     *
     * @return self
     */
    public function setNotificationsUrl($notifications_url)
    {
        if (is_null($notifications_url)) {
            throw new \InvalidArgumentException('non-nullable notifications_url cannot be null');
        }
        $this->container['notifications_url'] = $notifications_url;

        return $this;
    }

    /**
     * Gets pulls_url
     *
     * @return string
     */
    public function getPullsUrl()
    {
        return $this->container['pulls_url'];
    }

    /**
     * Sets pulls_url
     *
     * @param string $pulls_url pulls_url
     *
     * @return self
     */
    public function setPullsUrl($pulls_url)
    {
        if (is_null($pulls_url)) {
            throw new \InvalidArgumentException('non-nullable pulls_url cannot be null');
        }
        $this->container['pulls_url'] = $pulls_url;

        return $this;
    }

    /**
     * Gets releases_url
     *
     * @return string
     */
    public function getReleasesUrl()
    {
        return $this->container['releases_url'];
    }

    /**
     * Sets releases_url
     *
     * @param string $releases_url releases_url
     *
     * @return self
     */
    public function setReleasesUrl($releases_url)
    {
        if (is_null($releases_url)) {
            throw new \InvalidArgumentException('non-nullable releases_url cannot be null');
        }
        $this->container['releases_url'] = $releases_url;

        return $this;
    }

    /**
     * Gets ssh_url
     *
     * @return string
     */
    public function getSshUrl()
    {
        return $this->container['ssh_url'];
    }

    /**
     * Sets ssh_url
     *
     * @param string $ssh_url ssh_url
     *
     * @return self
     */
    public function setSshUrl($ssh_url)
    {
        if (is_null($ssh_url)) {
            throw new \InvalidArgumentException('non-nullable ssh_url cannot be null');
        }
        $this->container['ssh_url'] = $ssh_url;

        return $this;
    }

    /**
     * Gets stargazers_url
     *
     * @return string
     */
    public function getStargazersUrl()
    {
        return $this->container['stargazers_url'];
    }

    /**
     * Sets stargazers_url
     *
     * @param string $stargazers_url stargazers_url
     *
     * @return self
     */
    public function setStargazersUrl($stargazers_url)
    {
        if (is_null($stargazers_url)) {
            throw new \InvalidArgumentException('non-nullable stargazers_url cannot be null');
        }
        $this->container['stargazers_url'] = $stargazers_url;

        return $this;
    }

    /**
     * Gets statuses_url
     *
     * @return string
     */
    public function getStatusesUrl()
    {
        return $this->container['statuses_url'];
    }

    /**
     * Sets statuses_url
     *
     * @param string $statuses_url statuses_url
     *
     * @return self
     */
    public function setStatusesUrl($statuses_url)
    {
        if (is_null($statuses_url)) {
            throw new \InvalidArgumentException('non-nullable statuses_url cannot be null');
        }
        $this->container['statuses_url'] = $statuses_url;

        return $this;
    }

    /**
     * Gets subscribers_url
     *
     * @return string
     */
    public function getSubscribersUrl()
    {
        return $this->container['subscribers_url'];
    }

    /**
     * Sets subscribers_url
     *
     * @param string $subscribers_url subscribers_url
     *
     * @return self
     */
    public function setSubscribersUrl($subscribers_url)
    {
        if (is_null($subscribers_url)) {
            throw new \InvalidArgumentException('non-nullable subscribers_url cannot be null');
        }
        $this->container['subscribers_url'] = $subscribers_url;

        return $this;
    }

    /**
     * Gets subscription_url
     *
     * @return string
     */
    public function getSubscriptionUrl()
    {
        return $this->container['subscription_url'];
    }

    /**
     * Sets subscription_url
     *
     * @param string $subscription_url subscription_url
     *
     * @return self
     */
    public function setSubscriptionUrl($subscription_url)
    {
        if (is_null($subscription_url)) {
            throw new \InvalidArgumentException('non-nullable subscription_url cannot be null');
        }
        $this->container['subscription_url'] = $subscription_url;

        return $this;
    }

    /**
     * Gets tags_url
     *
     * @return string
     */
    public function getTagsUrl()
    {
        return $this->container['tags_url'];
    }

    /**
     * Sets tags_url
     *
     * @param string $tags_url tags_url
     *
     * @return self
     */
    public function setTagsUrl($tags_url)
    {
        if (is_null($tags_url)) {
            throw new \InvalidArgumentException('non-nullable tags_url cannot be null');
        }
        $this->container['tags_url'] = $tags_url;

        return $this;
    }

    /**
     * Gets teams_url
     *
     * @return string
     */
    public function getTeamsUrl()
    {
        return $this->container['teams_url'];
    }

    /**
     * Sets teams_url
     *
     * @param string $teams_url teams_url
     *
     * @return self
     */
    public function setTeamsUrl($teams_url)
    {
        if (is_null($teams_url)) {
            throw new \InvalidArgumentException('non-nullable teams_url cannot be null');
        }
        $this->container['teams_url'] = $teams_url;

        return $this;
    }

    /**
     * Gets trees_url
     *
     * @return string
     */
    public function getTreesUrl()
    {
        return $this->container['trees_url'];
    }

    /**
     * Sets trees_url
     *
     * @param string $trees_url trees_url
     *
     * @return self
     */
    public function setTreesUrl($trees_url)
    {
        if (is_null($trees_url)) {
            throw new \InvalidArgumentException('non-nullable trees_url cannot be null');
        }
        $this->container['trees_url'] = $trees_url;

        return $this;
    }

    /**
     * Gets clone_url
     *
     * @return string
     */
    public function getCloneUrl()
    {
        return $this->container['clone_url'];
    }

    /**
     * Sets clone_url
     *
     * @param string $clone_url clone_url
     *
     * @return self
     */
    public function setCloneUrl($clone_url)
    {
        if (is_null($clone_url)) {
            throw new \InvalidArgumentException('non-nullable clone_url cannot be null');
        }
        $this->container['clone_url'] = $clone_url;

        return $this;
    }

    /**
     * Gets mirror_url
     *
     * @return string
     */
    public function getMirrorUrl()
    {
        return $this->container['mirror_url'];
    }

    /**
     * Sets mirror_url
     *
     * @param string $mirror_url mirror_url
     *
     * @return self
     */
    public function setMirrorUrl($mirror_url)
    {
        if (is_null($mirror_url)) {
            array_push($this->openAPINullablesSetToNull, 'mirror_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mirror_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mirror_url'] = $mirror_url;

        return $this;
    }

    /**
     * Gets hooks_url
     *
     * @return string
     */
    public function getHooksUrl()
    {
        return $this->container['hooks_url'];
    }

    /**
     * Sets hooks_url
     *
     * @param string $hooks_url hooks_url
     *
     * @return self
     */
    public function setHooksUrl($hooks_url)
    {
        if (is_null($hooks_url)) {
            throw new \InvalidArgumentException('non-nullable hooks_url cannot be null');
        }
        $this->container['hooks_url'] = $hooks_url;

        return $this;
    }

    /**
     * Gets svn_url
     *
     * @return string
     */
    public function getSvnUrl()
    {
        return $this->container['svn_url'];
    }

    /**
     * Sets svn_url
     *
     * @param string $svn_url svn_url
     *
     * @return self
     */
    public function setSvnUrl($svn_url)
    {
        if (is_null($svn_url)) {
            throw new \InvalidArgumentException('non-nullable svn_url cannot be null');
        }
        $this->container['svn_url'] = $svn_url;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return string
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param string $homepage homepage
     *
     * @return self
     */
    public function setHomepage($homepage)
    {
        if (is_null($homepage)) {
            array_push($this->openAPINullablesSetToNull, 'homepage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('homepage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            array_push($this->openAPINullablesSetToNull, 'language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets forks_count
     *
     * @return int
     */
    public function getForksCount()
    {
        return $this->container['forks_count'];
    }

    /**
     * Sets forks_count
     *
     * @param int $forks_count forks_count
     *
     * @return self
     */
    public function setForksCount($forks_count)
    {
        if (is_null($forks_count)) {
            throw new \InvalidArgumentException('non-nullable forks_count cannot be null');
        }
        $this->container['forks_count'] = $forks_count;

        return $this;
    }

    /**
     * Gets stargazers_count
     *
     * @return int
     */
    public function getStargazersCount()
    {
        return $this->container['stargazers_count'];
    }

    /**
     * Sets stargazers_count
     *
     * @param int $stargazers_count stargazers_count
     *
     * @return self
     */
    public function setStargazersCount($stargazers_count)
    {
        if (is_null($stargazers_count)) {
            throw new \InvalidArgumentException('non-nullable stargazers_count cannot be null');
        }
        $this->container['stargazers_count'] = $stargazers_count;

        return $this;
    }

    /**
     * Gets watchers_count
     *
     * @return int
     */
    public function getWatchersCount()
    {
        return $this->container['watchers_count'];
    }

    /**
     * Sets watchers_count
     *
     * @param int $watchers_count watchers_count
     *
     * @return self
     */
    public function setWatchersCount($watchers_count)
    {
        if (is_null($watchers_count)) {
            throw new \InvalidArgumentException('non-nullable watchers_count cannot be null');
        }
        $this->container['watchers_count'] = $watchers_count;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets default_branch
     *
     * @return string
     */
    public function getDefaultBranch()
    {
        return $this->container['default_branch'];
    }

    /**
     * Sets default_branch
     *
     * @param string $default_branch default_branch
     *
     * @return self
     */
    public function setDefaultBranch($default_branch)
    {
        if (is_null($default_branch)) {
            throw new \InvalidArgumentException('non-nullable default_branch cannot be null');
        }
        $this->container['default_branch'] = $default_branch;

        return $this;
    }

    /**
     * Gets open_issues_count
     *
     * @return int
     */
    public function getOpenIssuesCount()
    {
        return $this->container['open_issues_count'];
    }

    /**
     * Sets open_issues_count
     *
     * @param int $open_issues_count open_issues_count
     *
     * @return self
     */
    public function setOpenIssuesCount($open_issues_count)
    {
        if (is_null($open_issues_count)) {
            throw new \InvalidArgumentException('non-nullable open_issues_count cannot be null');
        }
        $this->container['open_issues_count'] = $open_issues_count;

        return $this;
    }

    /**
     * Gets is_template
     *
     * @return bool|null
     */
    public function getIsTemplate()
    {
        return $this->container['is_template'];
    }

    /**
     * Sets is_template
     *
     * @param bool|null $is_template is_template
     *
     * @return self
     */
    public function setIsTemplate($is_template)
    {
        if (is_null($is_template)) {
            throw new \InvalidArgumentException('non-nullable is_template cannot be null');
        }
        $this->container['is_template'] = $is_template;

        return $this;
    }

    /**
     * Gets topics
     *
     * @return string[]|null
     */
    public function getTopics()
    {
        return $this->container['topics'];
    }

    /**
     * Sets topics
     *
     * @param string[]|null $topics topics
     *
     * @return self
     */
    public function setTopics($topics)
    {
        if (is_null($topics)) {
            throw new \InvalidArgumentException('non-nullable topics cannot be null');
        }
        $this->container['topics'] = $topics;

        return $this;
    }

    /**
     * Gets has_issues
     *
     * @return bool
     */
    public function getHasIssues()
    {
        return $this->container['has_issues'];
    }

    /**
     * Sets has_issues
     *
     * @param bool $has_issues has_issues
     *
     * @return self
     */
    public function setHasIssues($has_issues)
    {
        if (is_null($has_issues)) {
            throw new \InvalidArgumentException('non-nullable has_issues cannot be null');
        }
        $this->container['has_issues'] = $has_issues;

        return $this;
    }

    /**
     * Gets has_projects
     *
     * @return bool
     */
    public function getHasProjects()
    {
        return $this->container['has_projects'];
    }

    /**
     * Sets has_projects
     *
     * @param bool $has_projects has_projects
     *
     * @return self
     */
    public function setHasProjects($has_projects)
    {
        if (is_null($has_projects)) {
            throw new \InvalidArgumentException('non-nullable has_projects cannot be null');
        }
        $this->container['has_projects'] = $has_projects;

        return $this;
    }

    /**
     * Gets has_wiki
     *
     * @return bool
     */
    public function getHasWiki()
    {
        return $this->container['has_wiki'];
    }

    /**
     * Sets has_wiki
     *
     * @param bool $has_wiki has_wiki
     *
     * @return self
     */
    public function setHasWiki($has_wiki)
    {
        if (is_null($has_wiki)) {
            throw new \InvalidArgumentException('non-nullable has_wiki cannot be null');
        }
        $this->container['has_wiki'] = $has_wiki;

        return $this;
    }

    /**
     * Gets has_pages
     *
     * @return bool
     */
    public function getHasPages()
    {
        return $this->container['has_pages'];
    }

    /**
     * Sets has_pages
     *
     * @param bool $has_pages has_pages
     *
     * @return self
     */
    public function setHasPages($has_pages)
    {
        if (is_null($has_pages)) {
            throw new \InvalidArgumentException('non-nullable has_pages cannot be null');
        }
        $this->container['has_pages'] = $has_pages;

        return $this;
    }

    /**
     * Gets has_downloads
     *
     * @return bool|null
     */
    public function getHasDownloads()
    {
        return $this->container['has_downloads'];
    }

    /**
     * Sets has_downloads
     *
     * @param bool|null $has_downloads has_downloads
     *
     * @return self
     */
    public function setHasDownloads($has_downloads)
    {
        if (is_null($has_downloads)) {
            throw new \InvalidArgumentException('non-nullable has_downloads cannot be null');
        }
        $this->container['has_downloads'] = $has_downloads;

        return $this;
    }

    /**
     * Gets has_discussions
     *
     * @return bool
     */
    public function getHasDiscussions()
    {
        return $this->container['has_discussions'];
    }

    /**
     * Sets has_discussions
     *
     * @param bool $has_discussions has_discussions
     *
     * @return self
     */
    public function setHasDiscussions($has_discussions)
    {
        if (is_null($has_discussions)) {
            throw new \InvalidArgumentException('non-nullable has_discussions cannot be null');
        }
        $this->container['has_discussions'] = $has_discussions;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool $archived archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled Returns whether or not this repository disabled.
     *
     * @return self
     */
    public function setDisabled($disabled)
    {
        if (is_null($disabled)) {
            throw new \InvalidArgumentException('non-nullable disabled cannot be null');
        }
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility The repository visibility: public, private, or internal.
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        if (is_null($visibility)) {
            throw new \InvalidArgumentException('non-nullable visibility cannot be null');
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets pushed_at
     *
     * @return \DateTime
     */
    public function getPushedAt()
    {
        return $this->container['pushed_at'];
    }

    /**
     * Sets pushed_at
     *
     * @param \DateTime $pushed_at pushed_at
     *
     * @return self
     */
    public function setPushedAt($pushed_at)
    {
        if (is_null($pushed_at)) {
            throw new \InvalidArgumentException('non-nullable pushed_at cannot be null');
        }
        $this->container['pushed_at'] = $pushed_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\FullRepositoryPermissions|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\FullRepositoryPermissions|null $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        if (is_null($permissions)) {
            throw new \InvalidArgumentException('non-nullable permissions cannot be null');
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets allow_rebase_merge
     *
     * @return bool|null
     */
    public function getAllowRebaseMerge()
    {
        return $this->container['allow_rebase_merge'];
    }

    /**
     * Sets allow_rebase_merge
     *
     * @param bool|null $allow_rebase_merge allow_rebase_merge
     *
     * @return self
     */
    public function setAllowRebaseMerge($allow_rebase_merge)
    {
        if (is_null($allow_rebase_merge)) {
            throw new \InvalidArgumentException('non-nullable allow_rebase_merge cannot be null');
        }
        $this->container['allow_rebase_merge'] = $allow_rebase_merge;

        return $this;
    }

    /**
     * Gets template_repository
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableRepository|null
     */
    public function getTemplateRepository()
    {
        return $this->container['template_repository'];
    }

    /**
     * Sets template_repository
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableRepository|null $template_repository template_repository
     *
     * @return self
     */
    public function setTemplateRepository($template_repository)
    {
        if (is_null($template_repository)) {
            array_push($this->openAPINullablesSetToNull, 'template_repository');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template_repository', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['template_repository'] = $template_repository;

        return $this;
    }

    /**
     * Gets temp_clone_token
     *
     * @return string|null
     */
    public function getTempCloneToken()
    {
        return $this->container['temp_clone_token'];
    }

    /**
     * Sets temp_clone_token
     *
     * @param string|null $temp_clone_token temp_clone_token
     *
     * @return self
     */
    public function setTempCloneToken($temp_clone_token)
    {
        if (is_null($temp_clone_token)) {
            array_push($this->openAPINullablesSetToNull, 'temp_clone_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('temp_clone_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['temp_clone_token'] = $temp_clone_token;

        return $this;
    }

    /**
     * Gets allow_squash_merge
     *
     * @return bool|null
     */
    public function getAllowSquashMerge()
    {
        return $this->container['allow_squash_merge'];
    }

    /**
     * Sets allow_squash_merge
     *
     * @param bool|null $allow_squash_merge allow_squash_merge
     *
     * @return self
     */
    public function setAllowSquashMerge($allow_squash_merge)
    {
        if (is_null($allow_squash_merge)) {
            throw new \InvalidArgumentException('non-nullable allow_squash_merge cannot be null');
        }
        $this->container['allow_squash_merge'] = $allow_squash_merge;

        return $this;
    }

    /**
     * Gets allow_auto_merge
     *
     * @return bool|null
     */
    public function getAllowAutoMerge()
    {
        return $this->container['allow_auto_merge'];
    }

    /**
     * Sets allow_auto_merge
     *
     * @param bool|null $allow_auto_merge allow_auto_merge
     *
     * @return self
     */
    public function setAllowAutoMerge($allow_auto_merge)
    {
        if (is_null($allow_auto_merge)) {
            throw new \InvalidArgumentException('non-nullable allow_auto_merge cannot be null');
        }
        $this->container['allow_auto_merge'] = $allow_auto_merge;

        return $this;
    }

    /**
     * Gets delete_branch_on_merge
     *
     * @return bool|null
     */
    public function getDeleteBranchOnMerge()
    {
        return $this->container['delete_branch_on_merge'];
    }

    /**
     * Sets delete_branch_on_merge
     *
     * @param bool|null $delete_branch_on_merge delete_branch_on_merge
     *
     * @return self
     */
    public function setDeleteBranchOnMerge($delete_branch_on_merge)
    {
        if (is_null($delete_branch_on_merge)) {
            throw new \InvalidArgumentException('non-nullable delete_branch_on_merge cannot be null');
        }
        $this->container['delete_branch_on_merge'] = $delete_branch_on_merge;

        return $this;
    }

    /**
     * Gets allow_merge_commit
     *
     * @return bool|null
     */
    public function getAllowMergeCommit()
    {
        return $this->container['allow_merge_commit'];
    }

    /**
     * Sets allow_merge_commit
     *
     * @param bool|null $allow_merge_commit allow_merge_commit
     *
     * @return self
     */
    public function setAllowMergeCommit($allow_merge_commit)
    {
        if (is_null($allow_merge_commit)) {
            throw new \InvalidArgumentException('non-nullable allow_merge_commit cannot be null');
        }
        $this->container['allow_merge_commit'] = $allow_merge_commit;

        return $this;
    }

    /**
     * Gets allow_update_branch
     *
     * @return bool|null
     */
    public function getAllowUpdateBranch()
    {
        return $this->container['allow_update_branch'];
    }

    /**
     * Sets allow_update_branch
     *
     * @param bool|null $allow_update_branch allow_update_branch
     *
     * @return self
     */
    public function setAllowUpdateBranch($allow_update_branch)
    {
        if (is_null($allow_update_branch)) {
            throw new \InvalidArgumentException('non-nullable allow_update_branch cannot be null');
        }
        $this->container['allow_update_branch'] = $allow_update_branch;

        return $this;
    }

    /**
     * Gets use_squash_pr_title_as_default
     *
     * @return bool|null
     */
    public function getUseSquashPrTitleAsDefault()
    {
        return $this->container['use_squash_pr_title_as_default'];
    }

    /**
     * Sets use_squash_pr_title_as_default
     *
     * @param bool|null $use_squash_pr_title_as_default use_squash_pr_title_as_default
     *
     * @return self
     */
    public function setUseSquashPrTitleAsDefault($use_squash_pr_title_as_default)
    {
        if (is_null($use_squash_pr_title_as_default)) {
            throw new \InvalidArgumentException('non-nullable use_squash_pr_title_as_default cannot be null');
        }
        $this->container['use_squash_pr_title_as_default'] = $use_squash_pr_title_as_default;

        return $this;
    }

    /**
     * Gets squash_merge_commit_title
     *
     * @return string|null
     */
    public function getSquashMergeCommitTitle()
    {
        return $this->container['squash_merge_commit_title'];
    }

    /**
     * Sets squash_merge_commit_title
     *
     * @param string|null $squash_merge_commit_title The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     *
     * @return self
     */
    public function setSquashMergeCommitTitle($squash_merge_commit_title)
    {
        if (is_null($squash_merge_commit_title)) {
            throw new \InvalidArgumentException('non-nullable squash_merge_commit_title cannot be null');
        }
        $allowedValues = $this->getSquashMergeCommitTitleAllowableValues();
        if (!in_array($squash_merge_commit_title, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'squash_merge_commit_title', must be one of '%s'",
                    $squash_merge_commit_title,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['squash_merge_commit_title'] = $squash_merge_commit_title;

        return $this;
    }

    /**
     * Gets squash_merge_commit_message
     *
     * @return string|null
     */
    public function getSquashMergeCommitMessage()
    {
        return $this->container['squash_merge_commit_message'];
    }

    /**
     * Sets squash_merge_commit_message
     *
     * @param string|null $squash_merge_commit_message The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.
     *
     * @return self
     */
    public function setSquashMergeCommitMessage($squash_merge_commit_message)
    {
        if (is_null($squash_merge_commit_message)) {
            throw new \InvalidArgumentException('non-nullable squash_merge_commit_message cannot be null');
        }
        $allowedValues = $this->getSquashMergeCommitMessageAllowableValues();
        if (!in_array($squash_merge_commit_message, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'squash_merge_commit_message', must be one of '%s'",
                    $squash_merge_commit_message,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['squash_merge_commit_message'] = $squash_merge_commit_message;

        return $this;
    }

    /**
     * Gets merge_commit_title
     *
     * @return string|null
     */
    public function getMergeCommitTitle()
    {
        return $this->container['merge_commit_title'];
    }

    /**
     * Sets merge_commit_title
     *
     * @param string|null $merge_commit_title The default value for a merge commit title.    - `PR_TITLE` - default to the pull request's title.   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     *
     * @return self
     */
    public function setMergeCommitTitle($merge_commit_title)
    {
        if (is_null($merge_commit_title)) {
            throw new \InvalidArgumentException('non-nullable merge_commit_title cannot be null');
        }
        $allowedValues = $this->getMergeCommitTitleAllowableValues();
        if (!in_array($merge_commit_title, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'merge_commit_title', must be one of '%s'",
                    $merge_commit_title,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['merge_commit_title'] = $merge_commit_title;

        return $this;
    }

    /**
     * Gets merge_commit_message
     *
     * @return string|null
     */
    public function getMergeCommitMessage()
    {
        return $this->container['merge_commit_message'];
    }

    /**
     * Sets merge_commit_message
     *
     * @param string|null $merge_commit_message The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.
     *
     * @return self
     */
    public function setMergeCommitMessage($merge_commit_message)
    {
        if (is_null($merge_commit_message)) {
            throw new \InvalidArgumentException('non-nullable merge_commit_message cannot be null');
        }
        $allowedValues = $this->getMergeCommitMessageAllowableValues();
        if (!in_array($merge_commit_message, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'merge_commit_message', must be one of '%s'",
                    $merge_commit_message,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['merge_commit_message'] = $merge_commit_message;

        return $this;
    }

    /**
     * Gets allow_forking
     *
     * @return bool|null
     */
    public function getAllowForking()
    {
        return $this->container['allow_forking'];
    }

    /**
     * Sets allow_forking
     *
     * @param bool|null $allow_forking allow_forking
     *
     * @return self
     */
    public function setAllowForking($allow_forking)
    {
        if (is_null($allow_forking)) {
            throw new \InvalidArgumentException('non-nullable allow_forking cannot be null');
        }
        $this->container['allow_forking'] = $allow_forking;

        return $this;
    }

    /**
     * Gets web_commit_signoff_required
     *
     * @return bool|null
     */
    public function getWebCommitSignoffRequired()
    {
        return $this->container['web_commit_signoff_required'];
    }

    /**
     * Sets web_commit_signoff_required
     *
     * @param bool|null $web_commit_signoff_required web_commit_signoff_required
     *
     * @return self
     */
    public function setWebCommitSignoffRequired($web_commit_signoff_required)
    {
        if (is_null($web_commit_signoff_required)) {
            throw new \InvalidArgumentException('non-nullable web_commit_signoff_required cannot be null');
        }
        $this->container['web_commit_signoff_required'] = $web_commit_signoff_required;

        return $this;
    }

    /**
     * Gets subscribers_count
     *
     * @return int
     */
    public function getSubscribersCount()
    {
        return $this->container['subscribers_count'];
    }

    /**
     * Sets subscribers_count
     *
     * @param int $subscribers_count subscribers_count
     *
     * @return self
     */
    public function setSubscribersCount($subscribers_count)
    {
        if (is_null($subscribers_count)) {
            throw new \InvalidArgumentException('non-nullable subscribers_count cannot be null');
        }
        $this->container['subscribers_count'] = $subscribers_count;

        return $this;
    }

    /**
     * Gets network_count
     *
     * @return int
     */
    public function getNetworkCount()
    {
        return $this->container['network_count'];
    }

    /**
     * Sets network_count
     *
     * @param int $network_count network_count
     *
     * @return self
     */
    public function setNetworkCount($network_count)
    {
        if (is_null($network_count)) {
            throw new \InvalidArgumentException('non-nullable network_count cannot be null');
        }
        $this->container['network_count'] = $network_count;

        return $this;
    }

    /**
     * Gets license
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableLicenseSimple
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableLicenseSimple $license license
     *
     * @return self
     */
    public function setLicense($license)
    {
        if (is_null($license)) {
            array_push($this->openAPINullablesSetToNull, 'license');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('license', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableSimpleUser|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableSimpleUser|null $organization organization
     *
     * @return self
     */
    public function setOrganization($organization)
    {
        if (is_null($organization)) {
            array_push($this->openAPINullablesSetToNull, 'organization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Repository|null
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Repository|null $parent parent
     *
     * @return self
     */
    public function setParent($parent)
    {
        if (is_null($parent)) {
            throw new \InvalidArgumentException('non-nullable parent cannot be null');
        }
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Repository|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Repository|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets forks
     *
     * @return int
     */
    public function getForks()
    {
        return $this->container['forks'];
    }

    /**
     * Sets forks
     *
     * @param int $forks forks
     *
     * @return self
     */
    public function setForks($forks)
    {
        if (is_null($forks)) {
            throw new \InvalidArgumentException('non-nullable forks cannot be null');
        }
        $this->container['forks'] = $forks;

        return $this;
    }

    /**
     * Gets master_branch
     *
     * @return string|null
     */
    public function getMasterBranch()
    {
        return $this->container['master_branch'];
    }

    /**
     * Sets master_branch
     *
     * @param string|null $master_branch master_branch
     *
     * @return self
     */
    public function setMasterBranch($master_branch)
    {
        if (is_null($master_branch)) {
            throw new \InvalidArgumentException('non-nullable master_branch cannot be null');
        }
        $this->container['master_branch'] = $master_branch;

        return $this;
    }

    /**
     * Gets open_issues
     *
     * @return int
     */
    public function getOpenIssues()
    {
        return $this->container['open_issues'];
    }

    /**
     * Sets open_issues
     *
     * @param int $open_issues open_issues
     *
     * @return self
     */
    public function setOpenIssues($open_issues)
    {
        if (is_null($open_issues)) {
            throw new \InvalidArgumentException('non-nullable open_issues cannot be null');
        }
        $this->container['open_issues'] = $open_issues;

        return $this;
    }

    /**
     * Gets watchers
     *
     * @return int
     */
    public function getWatchers()
    {
        return $this->container['watchers'];
    }

    /**
     * Sets watchers
     *
     * @param int $watchers watchers
     *
     * @return self
     */
    public function setWatchers($watchers)
    {
        if (is_null($watchers)) {
            throw new \InvalidArgumentException('non-nullable watchers cannot be null');
        }
        $this->container['watchers'] = $watchers;

        return $this;
    }

    /**
     * Gets anonymous_access_enabled
     *
     * @return bool|null
     */
    public function getAnonymousAccessEnabled()
    {
        return $this->container['anonymous_access_enabled'];
    }

    /**
     * Sets anonymous_access_enabled
     *
     * @param bool|null $anonymous_access_enabled Whether anonymous git access is allowed.
     *
     * @return self
     */
    public function setAnonymousAccessEnabled($anonymous_access_enabled)
    {
        if (is_null($anonymous_access_enabled)) {
            throw new \InvalidArgumentException('non-nullable anonymous_access_enabled cannot be null');
        }
        $this->container['anonymous_access_enabled'] = $anonymous_access_enabled;

        return $this;
    }

    /**
     * Gets code_of_conduct
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeOfConductSimple|null
     */
    public function getCodeOfConduct()
    {
        return $this->container['code_of_conduct'];
    }

    /**
     * Sets code_of_conduct
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\CodeOfConductSimple|null $code_of_conduct code_of_conduct
     *
     * @return self
     */
    public function setCodeOfConduct($code_of_conduct)
    {
        if (is_null($code_of_conduct)) {
            throw new \InvalidArgumentException('non-nullable code_of_conduct cannot be null');
        }
        $this->container['code_of_conduct'] = $code_of_conduct;

        return $this;
    }

    /**
     * Gets security_and_analysis
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SecurityAndAnalysis|null
     */
    public function getSecurityAndAnalysis()
    {
        return $this->container['security_and_analysis'];
    }

    /**
     * Sets security_and_analysis
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SecurityAndAnalysis|null $security_and_analysis security_and_analysis
     *
     * @return self
     */
    public function setSecurityAndAnalysis($security_and_analysis)
    {
        if (is_null($security_and_analysis)) {
            array_push($this->openAPINullablesSetToNull, 'security_and_analysis');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('security_and_analysis', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['security_and_analysis'] = $security_and_analysis;

        return $this;
    }

    /**
     * Gets custom_properties
     *
     * @return array<string,mixed>|null
     */
    public function getCustomProperties()
    {
        return $this->container['custom_properties'];
    }

    /**
     * Sets custom_properties
     *
     * @param array<string,mixed>|null $custom_properties The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
     *
     * @return self
     */
    public function setCustomProperties($custom_properties)
    {
        if (is_null($custom_properties)) {
            throw new \InvalidArgumentException('non-nullable custom_properties cannot be null');
        }
        $this->container['custom_properties'] = $custom_properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


