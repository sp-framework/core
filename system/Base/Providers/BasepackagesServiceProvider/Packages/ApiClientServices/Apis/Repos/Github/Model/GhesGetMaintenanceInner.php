<?php
/**
 * GhesGetMaintenanceInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * GhesGetMaintenanceInner Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GhesGetMaintenanceInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ghes_get_maintenance_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'hostname' => 'string',
        'uuid' => 'string',
        'status' => 'string',
        'scheduled_time' => '\DateTime',
        'connection_services' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetMaintenanceInnerConnectionServicesInner[]',
        'can_unset_maintenance' => 'bool',
        'ip_exception_list' => 'string[]',
        'maintenance_mode_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'hostname' => 'hostname',
        'uuid' => 'uuid',
        'status' => null,
        'scheduled_time' => 'date',
        'connection_services' => null,
        'can_unset_maintenance' => null,
        'ip_exception_list' => 'ip/cidr',
        'maintenance_mode_message' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'hostname' => false,
        'uuid' => false,
        'status' => false,
        'scheduled_time' => false,
        'connection_services' => false,
        'can_unset_maintenance' => false,
        'ip_exception_list' => false,
        'maintenance_mode_message' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hostname' => 'hostname',
        'uuid' => 'uuid',
        'status' => 'status',
        'scheduled_time' => 'scheduled_time',
        'connection_services' => 'connection_services',
        'can_unset_maintenance' => 'can_unset_maintenance',
        'ip_exception_list' => 'ip_exception_list',
        'maintenance_mode_message' => 'maintenance_mode_message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hostname' => 'setHostname',
        'uuid' => 'setUuid',
        'status' => 'setStatus',
        'scheduled_time' => 'setScheduledTime',
        'connection_services' => 'setConnectionServices',
        'can_unset_maintenance' => 'setCanUnsetMaintenance',
        'ip_exception_list' => 'setIpExceptionList',
        'maintenance_mode_message' => 'setMaintenanceModeMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hostname' => 'getHostname',
        'uuid' => 'getUuid',
        'status' => 'getStatus',
        'scheduled_time' => 'getScheduledTime',
        'connection_services' => 'getConnectionServices',
        'can_unset_maintenance' => 'getCanUnsetMaintenance',
        'ip_exception_list' => 'getIpExceptionList',
        'maintenance_mode_message' => 'getMaintenanceModeMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_ON = 'on';
    public const STATUS_OFF = 'off';
    public const STATUS_SCHEDULED = 'scheduled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ON,
            self::STATUS_OFF,
            self::STATUS_SCHEDULED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('hostname', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('scheduled_time', $data ?? [], null);
        $this->setIfExists('connection_services', $data ?? [], null);
        $this->setIfExists('can_unset_maintenance', $data ?? [], null);
        $this->setIfExists('ip_exception_list', $data ?? [], null);
        $this->setIfExists('maintenance_mode_message', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname hostname
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        if (is_null($hostname)) {
            throw new \InvalidArgumentException('non-nullable hostname cannot be null');
        }
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets scheduled_time
     *
     * @return \DateTime|null
     */
    public function getScheduledTime()
    {
        return $this->container['scheduled_time'];
    }

    /**
     * Sets scheduled_time
     *
     * @param \DateTime|null $scheduled_time scheduled_time
     *
     * @return self
     */
    public function setScheduledTime($scheduled_time)
    {
        if (is_null($scheduled_time)) {
            throw new \InvalidArgumentException('non-nullable scheduled_time cannot be null');
        }
        $this->container['scheduled_time'] = $scheduled_time;

        return $this;
    }

    /**
     * Gets connection_services
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetMaintenanceInnerConnectionServicesInner[]|null
     */
    public function getConnectionServices()
    {
        return $this->container['connection_services'];
    }

    /**
     * Sets connection_services
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetMaintenanceInnerConnectionServicesInner[]|null $connection_services connection_services
     *
     * @return self
     */
    public function setConnectionServices($connection_services)
    {
        if (is_null($connection_services)) {
            throw new \InvalidArgumentException('non-nullable connection_services cannot be null');
        }
        $this->container['connection_services'] = $connection_services;

        return $this;
    }

    /**
     * Gets can_unset_maintenance
     *
     * @return bool|null
     */
    public function getCanUnsetMaintenance()
    {
        return $this->container['can_unset_maintenance'];
    }

    /**
     * Sets can_unset_maintenance
     *
     * @param bool|null $can_unset_maintenance can_unset_maintenance
     *
     * @return self
     */
    public function setCanUnsetMaintenance($can_unset_maintenance)
    {
        if (is_null($can_unset_maintenance)) {
            throw new \InvalidArgumentException('non-nullable can_unset_maintenance cannot be null');
        }
        $this->container['can_unset_maintenance'] = $can_unset_maintenance;

        return $this;
    }

    /**
     * Gets ip_exception_list
     *
     * @return string[]|null
     */
    public function getIpExceptionList()
    {
        return $this->container['ip_exception_list'];
    }

    /**
     * Sets ip_exception_list
     *
     * @param string[]|null $ip_exception_list ip_exception_list
     *
     * @return self
     */
    public function setIpExceptionList($ip_exception_list)
    {
        if (is_null($ip_exception_list)) {
            throw new \InvalidArgumentException('non-nullable ip_exception_list cannot be null');
        }
        $this->container['ip_exception_list'] = $ip_exception_list;

        return $this;
    }

    /**
     * Gets maintenance_mode_message
     *
     * @return string|null
     */
    public function getMaintenanceModeMessage()
    {
        return $this->container['maintenance_mode_message'];
    }

    /**
     * Sets maintenance_mode_message
     *
     * @param string|null $maintenance_mode_message maintenance_mode_message
     *
     * @return self
     */
    public function setMaintenanceModeMessage($maintenance_mode_message)
    {
        if (is_null($maintenance_mode_message)) {
            throw new \InvalidArgumentException('non-nullable maintenance_mode_message cannot be null');
        }
        $this->container['maintenance_mode_message'] = $maintenance_mode_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


