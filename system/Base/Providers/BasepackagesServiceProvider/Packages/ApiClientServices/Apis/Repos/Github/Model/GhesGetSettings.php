<?php
/**
 * GhesGetSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * GhesGetSettings Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GhesGetSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ghes-get-settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'private_mode' => 'bool',
        'public_pages' => 'bool',
        'subdomain_isolation' => 'bool',
        'signup_enabled' => 'bool',
        'github_hostname' => 'string',
        'identicons_host' => 'string',
        'http_proxy' => 'string',
        'auth_mode' => 'string',
        'expire_sessions' => 'bool',
        'admin_password' => 'string',
        'configuration_id' => 'int',
        'configuration_run_count' => 'int',
        'avatar' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsAvatar',
        'customer' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsCustomer',
        'license' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsLicense',
        'github_ssl' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsGithubSsl',
        'ldap' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsLdap',
        'cas' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsCas',
        'saml' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsSaml',
        'github_oauth' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsGithubOauth',
        'smtp' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsSmtp',
        'ntp' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsNtp',
        'timezone' => 'string',
        'snmp' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsSnmp',
        'syslog' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsSyslog',
        'assets' => 'string',
        'pages' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsPages',
        'collectd' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsCollectd',
        'mapping' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsMapping',
        'load_balancer' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'private_mode' => null,
        'public_pages' => null,
        'subdomain_isolation' => null,
        'signup_enabled' => null,
        'github_hostname' => null,
        'identicons_host' => null,
        'http_proxy' => null,
        'auth_mode' => null,
        'expire_sessions' => null,
        'admin_password' => null,
        'configuration_id' => null,
        'configuration_run_count' => null,
        'avatar' => null,
        'customer' => null,
        'license' => null,
        'github_ssl' => null,
        'ldap' => null,
        'cas' => null,
        'saml' => null,
        'github_oauth' => null,
        'smtp' => null,
        'ntp' => null,
        'timezone' => null,
        'snmp' => null,
        'syslog' => null,
        'assets' => null,
        'pages' => null,
        'collectd' => null,
        'mapping' => null,
        'load_balancer' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'private_mode' => false,
        'public_pages' => false,
        'subdomain_isolation' => false,
        'signup_enabled' => false,
        'github_hostname' => false,
        'identicons_host' => false,
        'http_proxy' => true,
        'auth_mode' => false,
        'expire_sessions' => false,
        'admin_password' => true,
        'configuration_id' => false,
        'configuration_run_count' => false,
        'avatar' => false,
        'customer' => false,
        'license' => false,
        'github_ssl' => false,
        'ldap' => false,
        'cas' => false,
        'saml' => false,
        'github_oauth' => false,
        'smtp' => false,
        'ntp' => false,
        'timezone' => true,
        'snmp' => false,
        'syslog' => false,
        'assets' => true,
        'pages' => false,
        'collectd' => false,
        'mapping' => false,
        'load_balancer' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'private_mode' => 'private_mode',
        'public_pages' => 'public_pages',
        'subdomain_isolation' => 'subdomain_isolation',
        'signup_enabled' => 'signup_enabled',
        'github_hostname' => 'github_hostname',
        'identicons_host' => 'identicons_host',
        'http_proxy' => 'http_proxy',
        'auth_mode' => 'auth_mode',
        'expire_sessions' => 'expire_sessions',
        'admin_password' => 'admin_password',
        'configuration_id' => 'configuration_id',
        'configuration_run_count' => 'configuration_run_count',
        'avatar' => 'avatar',
        'customer' => 'customer',
        'license' => 'license',
        'github_ssl' => 'github_ssl',
        'ldap' => 'ldap',
        'cas' => 'cas',
        'saml' => 'saml',
        'github_oauth' => 'github_oauth',
        'smtp' => 'smtp',
        'ntp' => 'ntp',
        'timezone' => 'timezone',
        'snmp' => 'snmp',
        'syslog' => 'syslog',
        'assets' => 'assets',
        'pages' => 'pages',
        'collectd' => 'collectd',
        'mapping' => 'mapping',
        'load_balancer' => 'load_balancer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'private_mode' => 'setPrivateMode',
        'public_pages' => 'setPublicPages',
        'subdomain_isolation' => 'setSubdomainIsolation',
        'signup_enabled' => 'setSignupEnabled',
        'github_hostname' => 'setGithubHostname',
        'identicons_host' => 'setIdenticonsHost',
        'http_proxy' => 'setHttpProxy',
        'auth_mode' => 'setAuthMode',
        'expire_sessions' => 'setExpireSessions',
        'admin_password' => 'setAdminPassword',
        'configuration_id' => 'setConfigurationId',
        'configuration_run_count' => 'setConfigurationRunCount',
        'avatar' => 'setAvatar',
        'customer' => 'setCustomer',
        'license' => 'setLicense',
        'github_ssl' => 'setGithubSsl',
        'ldap' => 'setLdap',
        'cas' => 'setCas',
        'saml' => 'setSaml',
        'github_oauth' => 'setGithubOauth',
        'smtp' => 'setSmtp',
        'ntp' => 'setNtp',
        'timezone' => 'setTimezone',
        'snmp' => 'setSnmp',
        'syslog' => 'setSyslog',
        'assets' => 'setAssets',
        'pages' => 'setPages',
        'collectd' => 'setCollectd',
        'mapping' => 'setMapping',
        'load_balancer' => 'setLoadBalancer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'private_mode' => 'getPrivateMode',
        'public_pages' => 'getPublicPages',
        'subdomain_isolation' => 'getSubdomainIsolation',
        'signup_enabled' => 'getSignupEnabled',
        'github_hostname' => 'getGithubHostname',
        'identicons_host' => 'getIdenticonsHost',
        'http_proxy' => 'getHttpProxy',
        'auth_mode' => 'getAuthMode',
        'expire_sessions' => 'getExpireSessions',
        'admin_password' => 'getAdminPassword',
        'configuration_id' => 'getConfigurationId',
        'configuration_run_count' => 'getConfigurationRunCount',
        'avatar' => 'getAvatar',
        'customer' => 'getCustomer',
        'license' => 'getLicense',
        'github_ssl' => 'getGithubSsl',
        'ldap' => 'getLdap',
        'cas' => 'getCas',
        'saml' => 'getSaml',
        'github_oauth' => 'getGithubOauth',
        'smtp' => 'getSmtp',
        'ntp' => 'getNtp',
        'timezone' => 'getTimezone',
        'snmp' => 'getSnmp',
        'syslog' => 'getSyslog',
        'assets' => 'getAssets',
        'pages' => 'getPages',
        'collectd' => 'getCollectd',
        'mapping' => 'getMapping',
        'load_balancer' => 'getLoadBalancer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('private_mode', $data ?? [], null);
        $this->setIfExists('public_pages', $data ?? [], null);
        $this->setIfExists('subdomain_isolation', $data ?? [], null);
        $this->setIfExists('signup_enabled', $data ?? [], null);
        $this->setIfExists('github_hostname', $data ?? [], null);
        $this->setIfExists('identicons_host', $data ?? [], null);
        $this->setIfExists('http_proxy', $data ?? [], null);
        $this->setIfExists('auth_mode', $data ?? [], null);
        $this->setIfExists('expire_sessions', $data ?? [], null);
        $this->setIfExists('admin_password', $data ?? [], null);
        $this->setIfExists('configuration_id', $data ?? [], null);
        $this->setIfExists('configuration_run_count', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('license', $data ?? [], null);
        $this->setIfExists('github_ssl', $data ?? [], null);
        $this->setIfExists('ldap', $data ?? [], null);
        $this->setIfExists('cas', $data ?? [], null);
        $this->setIfExists('saml', $data ?? [], null);
        $this->setIfExists('github_oauth', $data ?? [], null);
        $this->setIfExists('smtp', $data ?? [], null);
        $this->setIfExists('ntp', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('snmp', $data ?? [], null);
        $this->setIfExists('syslog', $data ?? [], null);
        $this->setIfExists('assets', $data ?? [], null);
        $this->setIfExists('pages', $data ?? [], null);
        $this->setIfExists('collectd', $data ?? [], null);
        $this->setIfExists('mapping', $data ?? [], null);
        $this->setIfExists('load_balancer', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets private_mode
     *
     * @return bool|null
     */
    public function getPrivateMode()
    {
        return $this->container['private_mode'];
    }

    /**
     * Sets private_mode
     *
     * @param bool|null $private_mode private_mode
     *
     * @return self
     */
    public function setPrivateMode($private_mode)
    {
        if (is_null($private_mode)) {
            throw new \InvalidArgumentException('non-nullable private_mode cannot be null');
        }
        $this->container['private_mode'] = $private_mode;

        return $this;
    }

    /**
     * Gets public_pages
     *
     * @return bool|null
     */
    public function getPublicPages()
    {
        return $this->container['public_pages'];
    }

    /**
     * Sets public_pages
     *
     * @param bool|null $public_pages public_pages
     *
     * @return self
     */
    public function setPublicPages($public_pages)
    {
        if (is_null($public_pages)) {
            throw new \InvalidArgumentException('non-nullable public_pages cannot be null');
        }
        $this->container['public_pages'] = $public_pages;

        return $this;
    }

    /**
     * Gets subdomain_isolation
     *
     * @return bool|null
     */
    public function getSubdomainIsolation()
    {
        return $this->container['subdomain_isolation'];
    }

    /**
     * Sets subdomain_isolation
     *
     * @param bool|null $subdomain_isolation subdomain_isolation
     *
     * @return self
     */
    public function setSubdomainIsolation($subdomain_isolation)
    {
        if (is_null($subdomain_isolation)) {
            throw new \InvalidArgumentException('non-nullable subdomain_isolation cannot be null');
        }
        $this->container['subdomain_isolation'] = $subdomain_isolation;

        return $this;
    }

    /**
     * Gets signup_enabled
     *
     * @return bool|null
     */
    public function getSignupEnabled()
    {
        return $this->container['signup_enabled'];
    }

    /**
     * Sets signup_enabled
     *
     * @param bool|null $signup_enabled signup_enabled
     *
     * @return self
     */
    public function setSignupEnabled($signup_enabled)
    {
        if (is_null($signup_enabled)) {
            throw new \InvalidArgumentException('non-nullable signup_enabled cannot be null');
        }
        $this->container['signup_enabled'] = $signup_enabled;

        return $this;
    }

    /**
     * Gets github_hostname
     *
     * @return string|null
     */
    public function getGithubHostname()
    {
        return $this->container['github_hostname'];
    }

    /**
     * Sets github_hostname
     *
     * @param string|null $github_hostname github_hostname
     *
     * @return self
     */
    public function setGithubHostname($github_hostname)
    {
        if (is_null($github_hostname)) {
            throw new \InvalidArgumentException('non-nullable github_hostname cannot be null');
        }
        $this->container['github_hostname'] = $github_hostname;

        return $this;
    }

    /**
     * Gets identicons_host
     *
     * @return string|null
     */
    public function getIdenticonsHost()
    {
        return $this->container['identicons_host'];
    }

    /**
     * Sets identicons_host
     *
     * @param string|null $identicons_host identicons_host
     *
     * @return self
     */
    public function setIdenticonsHost($identicons_host)
    {
        if (is_null($identicons_host)) {
            throw new \InvalidArgumentException('non-nullable identicons_host cannot be null');
        }
        $this->container['identicons_host'] = $identicons_host;

        return $this;
    }

    /**
     * Gets http_proxy
     *
     * @return string|null
     */
    public function getHttpProxy()
    {
        return $this->container['http_proxy'];
    }

    /**
     * Sets http_proxy
     *
     * @param string|null $http_proxy http_proxy
     *
     * @return self
     */
    public function setHttpProxy($http_proxy)
    {
        if (is_null($http_proxy)) {
            array_push($this->openAPINullablesSetToNull, 'http_proxy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('http_proxy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['http_proxy'] = $http_proxy;

        return $this;
    }

    /**
     * Gets auth_mode
     *
     * @return string|null
     */
    public function getAuthMode()
    {
        return $this->container['auth_mode'];
    }

    /**
     * Sets auth_mode
     *
     * @param string|null $auth_mode auth_mode
     *
     * @return self
     */
    public function setAuthMode($auth_mode)
    {
        if (is_null($auth_mode)) {
            throw new \InvalidArgumentException('non-nullable auth_mode cannot be null');
        }
        $this->container['auth_mode'] = $auth_mode;

        return $this;
    }

    /**
     * Gets expire_sessions
     *
     * @return bool|null
     */
    public function getExpireSessions()
    {
        return $this->container['expire_sessions'];
    }

    /**
     * Sets expire_sessions
     *
     * @param bool|null $expire_sessions expire_sessions
     *
     * @return self
     */
    public function setExpireSessions($expire_sessions)
    {
        if (is_null($expire_sessions)) {
            throw new \InvalidArgumentException('non-nullable expire_sessions cannot be null');
        }
        $this->container['expire_sessions'] = $expire_sessions;

        return $this;
    }

    /**
     * Gets admin_password
     *
     * @return string|null
     */
    public function getAdminPassword()
    {
        return $this->container['admin_password'];
    }

    /**
     * Sets admin_password
     *
     * @param string|null $admin_password admin_password
     *
     * @return self
     */
    public function setAdminPassword($admin_password)
    {
        if (is_null($admin_password)) {
            array_push($this->openAPINullablesSetToNull, 'admin_password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('admin_password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['admin_password'] = $admin_password;

        return $this;
    }

    /**
     * Gets configuration_id
     *
     * @return int|null
     */
    public function getConfigurationId()
    {
        return $this->container['configuration_id'];
    }

    /**
     * Sets configuration_id
     *
     * @param int|null $configuration_id configuration_id
     *
     * @return self
     */
    public function setConfigurationId($configuration_id)
    {
        if (is_null($configuration_id)) {
            throw new \InvalidArgumentException('non-nullable configuration_id cannot be null');
        }
        $this->container['configuration_id'] = $configuration_id;

        return $this;
    }

    /**
     * Gets configuration_run_count
     *
     * @return int|null
     */
    public function getConfigurationRunCount()
    {
        return $this->container['configuration_run_count'];
    }

    /**
     * Sets configuration_run_count
     *
     * @param int|null $configuration_run_count configuration_run_count
     *
     * @return self
     */
    public function setConfigurationRunCount($configuration_run_count)
    {
        if (is_null($configuration_run_count)) {
            throw new \InvalidArgumentException('non-nullable configuration_run_count cannot be null');
        }
        $this->container['configuration_run_count'] = $configuration_run_count;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsAvatar|null
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsAvatar|null $avatar avatar
     *
     * @return self
     */
    public function setAvatar($avatar)
    {
        if (is_null($avatar)) {
            throw new \InvalidArgumentException('non-nullable avatar cannot be null');
        }
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsCustomer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsCustomer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets license
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsLicense|null
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsLicense|null $license license
     *
     * @return self
     */
    public function setLicense($license)
    {
        if (is_null($license)) {
            throw new \InvalidArgumentException('non-nullable license cannot be null');
        }
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets github_ssl
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsGithubSsl|null
     */
    public function getGithubSsl()
    {
        return $this->container['github_ssl'];
    }

    /**
     * Sets github_ssl
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsGithubSsl|null $github_ssl github_ssl
     *
     * @return self
     */
    public function setGithubSsl($github_ssl)
    {
        if (is_null($github_ssl)) {
            throw new \InvalidArgumentException('non-nullable github_ssl cannot be null');
        }
        $this->container['github_ssl'] = $github_ssl;

        return $this;
    }

    /**
     * Gets ldap
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsLdap|null
     */
    public function getLdap()
    {
        return $this->container['ldap'];
    }

    /**
     * Sets ldap
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsLdap|null $ldap ldap
     *
     * @return self
     */
    public function setLdap($ldap)
    {
        if (is_null($ldap)) {
            throw new \InvalidArgumentException('non-nullable ldap cannot be null');
        }
        $this->container['ldap'] = $ldap;

        return $this;
    }

    /**
     * Gets cas
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsCas|null
     */
    public function getCas()
    {
        return $this->container['cas'];
    }

    /**
     * Sets cas
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsCas|null $cas cas
     *
     * @return self
     */
    public function setCas($cas)
    {
        if (is_null($cas)) {
            throw new \InvalidArgumentException('non-nullable cas cannot be null');
        }
        $this->container['cas'] = $cas;

        return $this;
    }

    /**
     * Gets saml
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsSaml|null
     */
    public function getSaml()
    {
        return $this->container['saml'];
    }

    /**
     * Sets saml
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsSaml|null $saml saml
     *
     * @return self
     */
    public function setSaml($saml)
    {
        if (is_null($saml)) {
            throw new \InvalidArgumentException('non-nullable saml cannot be null');
        }
        $this->container['saml'] = $saml;

        return $this;
    }

    /**
     * Gets github_oauth
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsGithubOauth|null
     */
    public function getGithubOauth()
    {
        return $this->container['github_oauth'];
    }

    /**
     * Sets github_oauth
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsGithubOauth|null $github_oauth github_oauth
     *
     * @return self
     */
    public function setGithubOauth($github_oauth)
    {
        if (is_null($github_oauth)) {
            throw new \InvalidArgumentException('non-nullable github_oauth cannot be null');
        }
        $this->container['github_oauth'] = $github_oauth;

        return $this;
    }

    /**
     * Gets smtp
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsSmtp|null
     */
    public function getSmtp()
    {
        return $this->container['smtp'];
    }

    /**
     * Sets smtp
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsSmtp|null $smtp smtp
     *
     * @return self
     */
    public function setSmtp($smtp)
    {
        if (is_null($smtp)) {
            throw new \InvalidArgumentException('non-nullable smtp cannot be null');
        }
        $this->container['smtp'] = $smtp;

        return $this;
    }

    /**
     * Gets ntp
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsNtp|null
     */
    public function getNtp()
    {
        return $this->container['ntp'];
    }

    /**
     * Sets ntp
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsNtp|null $ntp ntp
     *
     * @return self
     */
    public function setNtp($ntp)
    {
        if (is_null($ntp)) {
            throw new \InvalidArgumentException('non-nullable ntp cannot be null');
        }
        $this->container['ntp'] = $ntp;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            array_push($this->openAPINullablesSetToNull, 'timezone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timezone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets snmp
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsSnmp|null
     */
    public function getSnmp()
    {
        return $this->container['snmp'];
    }

    /**
     * Sets snmp
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsSnmp|null $snmp snmp
     *
     * @return self
     */
    public function setSnmp($snmp)
    {
        if (is_null($snmp)) {
            throw new \InvalidArgumentException('non-nullable snmp cannot be null');
        }
        $this->container['snmp'] = $snmp;

        return $this;
    }

    /**
     * Gets syslog
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsSyslog|null
     */
    public function getSyslog()
    {
        return $this->container['syslog'];
    }

    /**
     * Sets syslog
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsSyslog|null $syslog syslog
     *
     * @return self
     */
    public function setSyslog($syslog)
    {
        if (is_null($syslog)) {
            throw new \InvalidArgumentException('non-nullable syslog cannot be null');
        }
        $this->container['syslog'] = $syslog;

        return $this;
    }

    /**
     * Gets assets
     *
     * @return string|null
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param string|null $assets assets
     *
     * @return self
     */
    public function setAssets($assets)
    {
        if (is_null($assets)) {
            array_push($this->openAPINullablesSetToNull, 'assets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assets'] = $assets;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsPages|null
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsPages|null $pages pages
     *
     * @return self
     */
    public function setPages($pages)
    {
        if (is_null($pages)) {
            throw new \InvalidArgumentException('non-nullable pages cannot be null');
        }
        $this->container['pages'] = $pages;

        return $this;
    }

    /**
     * Gets collectd
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsCollectd|null
     */
    public function getCollectd()
    {
        return $this->container['collectd'];
    }

    /**
     * Sets collectd
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsCollectd|null $collectd collectd
     *
     * @return self
     */
    public function setCollectd($collectd)
    {
        if (is_null($collectd)) {
            throw new \InvalidArgumentException('non-nullable collectd cannot be null');
        }
        $this->container['collectd'] = $collectd;

        return $this;
    }

    /**
     * Gets mapping
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsMapping|null
     */
    public function getMapping()
    {
        return $this->container['mapping'];
    }

    /**
     * Sets mapping
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsMapping|null $mapping mapping
     *
     * @return self
     */
    public function setMapping($mapping)
    {
        if (is_null($mapping)) {
            throw new \InvalidArgumentException('non-nullable mapping cannot be null');
        }
        $this->container['mapping'] = $mapping;

        return $this;
    }

    /**
     * Gets load_balancer
     *
     * @return string|null
     */
    public function getLoadBalancer()
    {
        return $this->container['load_balancer'];
    }

    /**
     * Sets load_balancer
     *
     * @param string|null $load_balancer load_balancer
     *
     * @return self
     */
    public function setLoadBalancer($load_balancer)
    {
        if (is_null($load_balancer)) {
            array_push($this->openAPINullablesSetToNull, 'load_balancer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('load_balancer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['load_balancer'] = $load_balancer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


