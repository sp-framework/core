<?php
/**
 * GhesGetSettingsLdap
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * GhesGetSettingsLdap Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GhesGetSettingsLdap implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ghes_get_settings_ldap';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'host' => 'string',
        'port' => 'int',
        'base' => 'mixed[]',
        'uid' => 'string',
        'bind_dn' => 'string',
        'password' => 'string',
        'method' => 'string',
        'search_strategy' => 'string',
        'user_groups' => 'mixed[]',
        'admin_group' => 'string',
        'virtual_attribute_enabled' => 'bool',
        'recursive_group_search' => 'bool',
        'posix_support' => 'bool',
        'user_sync_emails' => 'bool',
        'user_sync_keys' => 'bool',
        'user_sync_interval' => 'int',
        'team_sync_interval' => 'int',
        'sync_enabled' => 'bool',
        'reconciliation' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsLdapReconciliation',
        'profile' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsLdapProfile'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'host' => null,
        'port' => null,
        'base' => null,
        'uid' => null,
        'bind_dn' => null,
        'password' => null,
        'method' => null,
        'search_strategy' => null,
        'user_groups' => null,
        'admin_group' => null,
        'virtual_attribute_enabled' => null,
        'recursive_group_search' => null,
        'posix_support' => null,
        'user_sync_emails' => null,
        'user_sync_keys' => null,
        'user_sync_interval' => null,
        'team_sync_interval' => null,
        'sync_enabled' => null,
        'reconciliation' => null,
        'profile' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'host' => true,
        'port' => false,
        'base' => false,
        'uid' => true,
        'bind_dn' => true,
        'password' => true,
        'method' => false,
        'search_strategy' => false,
        'user_groups' => false,
        'admin_group' => true,
        'virtual_attribute_enabled' => false,
        'recursive_group_search' => false,
        'posix_support' => false,
        'user_sync_emails' => false,
        'user_sync_keys' => false,
        'user_sync_interval' => false,
        'team_sync_interval' => false,
        'sync_enabled' => false,
        'reconciliation' => false,
        'profile' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'host' => 'host',
        'port' => 'port',
        'base' => 'base',
        'uid' => 'uid',
        'bind_dn' => 'bind_dn',
        'password' => 'password',
        'method' => 'method',
        'search_strategy' => 'search_strategy',
        'user_groups' => 'user_groups',
        'admin_group' => 'admin_group',
        'virtual_attribute_enabled' => 'virtual_attribute_enabled',
        'recursive_group_search' => 'recursive_group_search',
        'posix_support' => 'posix_support',
        'user_sync_emails' => 'user_sync_emails',
        'user_sync_keys' => 'user_sync_keys',
        'user_sync_interval' => 'user_sync_interval',
        'team_sync_interval' => 'team_sync_interval',
        'sync_enabled' => 'sync_enabled',
        'reconciliation' => 'reconciliation',
        'profile' => 'profile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'host' => 'setHost',
        'port' => 'setPort',
        'base' => 'setBase',
        'uid' => 'setUid',
        'bind_dn' => 'setBindDn',
        'password' => 'setPassword',
        'method' => 'setMethod',
        'search_strategy' => 'setSearchStrategy',
        'user_groups' => 'setUserGroups',
        'admin_group' => 'setAdminGroup',
        'virtual_attribute_enabled' => 'setVirtualAttributeEnabled',
        'recursive_group_search' => 'setRecursiveGroupSearch',
        'posix_support' => 'setPosixSupport',
        'user_sync_emails' => 'setUserSyncEmails',
        'user_sync_keys' => 'setUserSyncKeys',
        'user_sync_interval' => 'setUserSyncInterval',
        'team_sync_interval' => 'setTeamSyncInterval',
        'sync_enabled' => 'setSyncEnabled',
        'reconciliation' => 'setReconciliation',
        'profile' => 'setProfile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'host' => 'getHost',
        'port' => 'getPort',
        'base' => 'getBase',
        'uid' => 'getUid',
        'bind_dn' => 'getBindDn',
        'password' => 'getPassword',
        'method' => 'getMethod',
        'search_strategy' => 'getSearchStrategy',
        'user_groups' => 'getUserGroups',
        'admin_group' => 'getAdminGroup',
        'virtual_attribute_enabled' => 'getVirtualAttributeEnabled',
        'recursive_group_search' => 'getRecursiveGroupSearch',
        'posix_support' => 'getPosixSupport',
        'user_sync_emails' => 'getUserSyncEmails',
        'user_sync_keys' => 'getUserSyncKeys',
        'user_sync_interval' => 'getUserSyncInterval',
        'team_sync_interval' => 'getTeamSyncInterval',
        'sync_enabled' => 'getSyncEnabled',
        'reconciliation' => 'getReconciliation',
        'profile' => 'getProfile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('host', $data ?? [], null);
        $this->setIfExists('port', $data ?? [], null);
        $this->setIfExists('base', $data ?? [], null);
        $this->setIfExists('uid', $data ?? [], null);
        $this->setIfExists('bind_dn', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('method', $data ?? [], null);
        $this->setIfExists('search_strategy', $data ?? [], null);
        $this->setIfExists('user_groups', $data ?? [], null);
        $this->setIfExists('admin_group', $data ?? [], null);
        $this->setIfExists('virtual_attribute_enabled', $data ?? [], null);
        $this->setIfExists('recursive_group_search', $data ?? [], null);
        $this->setIfExists('posix_support', $data ?? [], null);
        $this->setIfExists('user_sync_emails', $data ?? [], null);
        $this->setIfExists('user_sync_keys', $data ?? [], null);
        $this->setIfExists('user_sync_interval', $data ?? [], null);
        $this->setIfExists('team_sync_interval', $data ?? [], null);
        $this->setIfExists('sync_enabled', $data ?? [], null);
        $this->setIfExists('reconciliation', $data ?? [], null);
        $this->setIfExists('profile', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host host
     *
     * @return self
     */
    public function setHost($host)
    {
        if (is_null($host)) {
            array_push($this->openAPINullablesSetToNull, 'host');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('host', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port port
     *
     * @return self
     */
    public function setPort($port)
    {
        if (is_null($port)) {
            throw new \InvalidArgumentException('non-nullable port cannot be null');
        }
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets base
     *
     * @return mixed[]|null
     */
    public function getBase()
    {
        return $this->container['base'];
    }

    /**
     * Sets base
     *
     * @param mixed[]|null $base base
     *
     * @return self
     */
    public function setBase($base)
    {
        if (is_null($base)) {
            throw new \InvalidArgumentException('non-nullable base cannot be null');
        }
        $this->container['base'] = $base;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string|null
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string|null $uid uid
     *
     * @return self
     */
    public function setUid($uid)
    {
        if (is_null($uid)) {
            array_push($this->openAPINullablesSetToNull, 'uid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets bind_dn
     *
     * @return string|null
     */
    public function getBindDn()
    {
        return $this->container['bind_dn'];
    }

    /**
     * Sets bind_dn
     *
     * @param string|null $bind_dn bind_dn
     *
     * @return self
     */
    public function setBindDn($bind_dn)
    {
        if (is_null($bind_dn)) {
            array_push($this->openAPINullablesSetToNull, 'bind_dn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bind_dn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bind_dn'] = $bind_dn;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            array_push($this->openAPINullablesSetToNull, 'password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method method
     *
     * @return self
     */
    public function setMethod($method)
    {
        if (is_null($method)) {
            throw new \InvalidArgumentException('non-nullable method cannot be null');
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets search_strategy
     *
     * @return string|null
     */
    public function getSearchStrategy()
    {
        return $this->container['search_strategy'];
    }

    /**
     * Sets search_strategy
     *
     * @param string|null $search_strategy search_strategy
     *
     * @return self
     */
    public function setSearchStrategy($search_strategy)
    {
        if (is_null($search_strategy)) {
            throw new \InvalidArgumentException('non-nullable search_strategy cannot be null');
        }
        $this->container['search_strategy'] = $search_strategy;

        return $this;
    }

    /**
     * Gets user_groups
     *
     * @return mixed[]|null
     */
    public function getUserGroups()
    {
        return $this->container['user_groups'];
    }

    /**
     * Sets user_groups
     *
     * @param mixed[]|null $user_groups user_groups
     *
     * @return self
     */
    public function setUserGroups($user_groups)
    {
        if (is_null($user_groups)) {
            throw new \InvalidArgumentException('non-nullable user_groups cannot be null');
        }
        $this->container['user_groups'] = $user_groups;

        return $this;
    }

    /**
     * Gets admin_group
     *
     * @return string|null
     */
    public function getAdminGroup()
    {
        return $this->container['admin_group'];
    }

    /**
     * Sets admin_group
     *
     * @param string|null $admin_group admin_group
     *
     * @return self
     */
    public function setAdminGroup($admin_group)
    {
        if (is_null($admin_group)) {
            array_push($this->openAPINullablesSetToNull, 'admin_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('admin_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['admin_group'] = $admin_group;

        return $this;
    }

    /**
     * Gets virtual_attribute_enabled
     *
     * @return bool|null
     */
    public function getVirtualAttributeEnabled()
    {
        return $this->container['virtual_attribute_enabled'];
    }

    /**
     * Sets virtual_attribute_enabled
     *
     * @param bool|null $virtual_attribute_enabled virtual_attribute_enabled
     *
     * @return self
     */
    public function setVirtualAttributeEnabled($virtual_attribute_enabled)
    {
        if (is_null($virtual_attribute_enabled)) {
            throw new \InvalidArgumentException('non-nullable virtual_attribute_enabled cannot be null');
        }
        $this->container['virtual_attribute_enabled'] = $virtual_attribute_enabled;

        return $this;
    }

    /**
     * Gets recursive_group_search
     *
     * @return bool|null
     */
    public function getRecursiveGroupSearch()
    {
        return $this->container['recursive_group_search'];
    }

    /**
     * Sets recursive_group_search
     *
     * @param bool|null $recursive_group_search recursive_group_search
     *
     * @return self
     */
    public function setRecursiveGroupSearch($recursive_group_search)
    {
        if (is_null($recursive_group_search)) {
            throw new \InvalidArgumentException('non-nullable recursive_group_search cannot be null');
        }
        $this->container['recursive_group_search'] = $recursive_group_search;

        return $this;
    }

    /**
     * Gets posix_support
     *
     * @return bool|null
     */
    public function getPosixSupport()
    {
        return $this->container['posix_support'];
    }

    /**
     * Sets posix_support
     *
     * @param bool|null $posix_support posix_support
     *
     * @return self
     */
    public function setPosixSupport($posix_support)
    {
        if (is_null($posix_support)) {
            throw new \InvalidArgumentException('non-nullable posix_support cannot be null');
        }
        $this->container['posix_support'] = $posix_support;

        return $this;
    }

    /**
     * Gets user_sync_emails
     *
     * @return bool|null
     */
    public function getUserSyncEmails()
    {
        return $this->container['user_sync_emails'];
    }

    /**
     * Sets user_sync_emails
     *
     * @param bool|null $user_sync_emails user_sync_emails
     *
     * @return self
     */
    public function setUserSyncEmails($user_sync_emails)
    {
        if (is_null($user_sync_emails)) {
            throw new \InvalidArgumentException('non-nullable user_sync_emails cannot be null');
        }
        $this->container['user_sync_emails'] = $user_sync_emails;

        return $this;
    }

    /**
     * Gets user_sync_keys
     *
     * @return bool|null
     */
    public function getUserSyncKeys()
    {
        return $this->container['user_sync_keys'];
    }

    /**
     * Sets user_sync_keys
     *
     * @param bool|null $user_sync_keys user_sync_keys
     *
     * @return self
     */
    public function setUserSyncKeys($user_sync_keys)
    {
        if (is_null($user_sync_keys)) {
            throw new \InvalidArgumentException('non-nullable user_sync_keys cannot be null');
        }
        $this->container['user_sync_keys'] = $user_sync_keys;

        return $this;
    }

    /**
     * Gets user_sync_interval
     *
     * @return int|null
     */
    public function getUserSyncInterval()
    {
        return $this->container['user_sync_interval'];
    }

    /**
     * Sets user_sync_interval
     *
     * @param int|null $user_sync_interval user_sync_interval
     *
     * @return self
     */
    public function setUserSyncInterval($user_sync_interval)
    {
        if (is_null($user_sync_interval)) {
            throw new \InvalidArgumentException('non-nullable user_sync_interval cannot be null');
        }
        $this->container['user_sync_interval'] = $user_sync_interval;

        return $this;
    }

    /**
     * Gets team_sync_interval
     *
     * @return int|null
     */
    public function getTeamSyncInterval()
    {
        return $this->container['team_sync_interval'];
    }

    /**
     * Sets team_sync_interval
     *
     * @param int|null $team_sync_interval team_sync_interval
     *
     * @return self
     */
    public function setTeamSyncInterval($team_sync_interval)
    {
        if (is_null($team_sync_interval)) {
            throw new \InvalidArgumentException('non-nullable team_sync_interval cannot be null');
        }
        $this->container['team_sync_interval'] = $team_sync_interval;

        return $this;
    }

    /**
     * Gets sync_enabled
     *
     * @return bool|null
     */
    public function getSyncEnabled()
    {
        return $this->container['sync_enabled'];
    }

    /**
     * Sets sync_enabled
     *
     * @param bool|null $sync_enabled sync_enabled
     *
     * @return self
     */
    public function setSyncEnabled($sync_enabled)
    {
        if (is_null($sync_enabled)) {
            throw new \InvalidArgumentException('non-nullable sync_enabled cannot be null');
        }
        $this->container['sync_enabled'] = $sync_enabled;

        return $this;
    }

    /**
     * Gets reconciliation
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsLdapReconciliation|null
     */
    public function getReconciliation()
    {
        return $this->container['reconciliation'];
    }

    /**
     * Sets reconciliation
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsLdapReconciliation|null $reconciliation reconciliation
     *
     * @return self
     */
    public function setReconciliation($reconciliation)
    {
        if (is_null($reconciliation)) {
            throw new \InvalidArgumentException('non-nullable reconciliation cannot be null');
        }
        $this->container['reconciliation'] = $reconciliation;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsLdapProfile|null
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GhesGetSettingsLdapProfile|null $profile profile
     *
     * @return self
     */
    public function setProfile($profile)
    {
        if (is_null($profile)) {
            throw new \InvalidArgumentException('non-nullable profile cannot be null');
        }
        $this->container['profile'] = $profile;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


