<?php
/**
 * GhesGetSettingsSmtp
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * GhesGetSettingsSmtp Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GhesGetSettingsSmtp implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ghes_get_settings_smtp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => 'bool',
        'address' => 'string',
        'authentication' => 'string',
        'port' => 'string',
        'domain' => 'string',
        'username' => 'string',
        'user_name' => 'string',
        'enable_starttls_auto' => 'bool',
        'password' => 'string',
        'discard_to_noreply_address' => 'bool',
        'support_address' => 'string',
        'support_address_type' => 'string',
        'noreply_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'address' => null,
        'authentication' => null,
        'port' => null,
        'domain' => null,
        'username' => null,
        'user_name' => null,
        'enable_starttls_auto' => null,
        'password' => null,
        'discard_to_noreply_address' => null,
        'support_address' => null,
        'support_address_type' => null,
        'noreply_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enabled' => false,
        'address' => false,
        'authentication' => false,
        'port' => false,
        'domain' => false,
        'username' => false,
        'user_name' => false,
        'enable_starttls_auto' => false,
        'password' => false,
        'discard_to_noreply_address' => false,
        'support_address' => false,
        'support_address_type' => false,
        'noreply_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'address' => 'address',
        'authentication' => 'authentication',
        'port' => 'port',
        'domain' => 'domain',
        'username' => 'username',
        'user_name' => 'user_name',
        'enable_starttls_auto' => 'enable_starttls_auto',
        'password' => 'password',
        'discard_to_noreply_address' => 'discard-to-noreply-address',
        'support_address' => 'support_address',
        'support_address_type' => 'support_address_type',
        'noreply_address' => 'noreply_address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'address' => 'setAddress',
        'authentication' => 'setAuthentication',
        'port' => 'setPort',
        'domain' => 'setDomain',
        'username' => 'setUsername',
        'user_name' => 'setUserName',
        'enable_starttls_auto' => 'setEnableStarttlsAuto',
        'password' => 'setPassword',
        'discard_to_noreply_address' => 'setDiscardToNoreplyAddress',
        'support_address' => 'setSupportAddress',
        'support_address_type' => 'setSupportAddressType',
        'noreply_address' => 'setNoreplyAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'address' => 'getAddress',
        'authentication' => 'getAuthentication',
        'port' => 'getPort',
        'domain' => 'getDomain',
        'username' => 'getUsername',
        'user_name' => 'getUserName',
        'enable_starttls_auto' => 'getEnableStarttlsAuto',
        'password' => 'getPassword',
        'discard_to_noreply_address' => 'getDiscardToNoreplyAddress',
        'support_address' => 'getSupportAddress',
        'support_address_type' => 'getSupportAddressType',
        'noreply_address' => 'getNoreplyAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('authentication', $data ?? [], null);
        $this->setIfExists('port', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('user_name', $data ?? [], null);
        $this->setIfExists('enable_starttls_auto', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('discard_to_noreply_address', $data ?? [], null);
        $this->setIfExists('support_address', $data ?? [], null);
        $this->setIfExists('support_address_type', $data ?? [], null);
        $this->setIfExists('noreply_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets authentication
     *
     * @return string|null
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param string|null $authentication authentication
     *
     * @return self
     */
    public function setAuthentication($authentication)
    {
        if (is_null($authentication)) {
            throw new \InvalidArgumentException('non-nullable authentication cannot be null');
        }
        $this->container['authentication'] = $authentication;

        return $this;
    }

    /**
     * Gets port
     *
     * @return string|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param string|null $port port
     *
     * @return self
     */
    public function setPort($port)
    {
        if (is_null($port)) {
            throw new \InvalidArgumentException('non-nullable port cannot be null');
        }
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string|null $user_name user_name
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        if (is_null($user_name)) {
            throw new \InvalidArgumentException('non-nullable user_name cannot be null');
        }
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets enable_starttls_auto
     *
     * @return bool|null
     */
    public function getEnableStarttlsAuto()
    {
        return $this->container['enable_starttls_auto'];
    }

    /**
     * Sets enable_starttls_auto
     *
     * @param bool|null $enable_starttls_auto enable_starttls_auto
     *
     * @return self
     */
    public function setEnableStarttlsAuto($enable_starttls_auto)
    {
        if (is_null($enable_starttls_auto)) {
            throw new \InvalidArgumentException('non-nullable enable_starttls_auto cannot be null');
        }
        $this->container['enable_starttls_auto'] = $enable_starttls_auto;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets discard_to_noreply_address
     *
     * @return bool|null
     */
    public function getDiscardToNoreplyAddress()
    {
        return $this->container['discard_to_noreply_address'];
    }

    /**
     * Sets discard_to_noreply_address
     *
     * @param bool|null $discard_to_noreply_address discard_to_noreply_address
     *
     * @return self
     */
    public function setDiscardToNoreplyAddress($discard_to_noreply_address)
    {
        if (is_null($discard_to_noreply_address)) {
            throw new \InvalidArgumentException('non-nullable discard_to_noreply_address cannot be null');
        }
        $this->container['discard_to_noreply_address'] = $discard_to_noreply_address;

        return $this;
    }

    /**
     * Gets support_address
     *
     * @return string|null
     */
    public function getSupportAddress()
    {
        return $this->container['support_address'];
    }

    /**
     * Sets support_address
     *
     * @param string|null $support_address support_address
     *
     * @return self
     */
    public function setSupportAddress($support_address)
    {
        if (is_null($support_address)) {
            throw new \InvalidArgumentException('non-nullable support_address cannot be null');
        }
        $this->container['support_address'] = $support_address;

        return $this;
    }

    /**
     * Gets support_address_type
     *
     * @return string|null
     */
    public function getSupportAddressType()
    {
        return $this->container['support_address_type'];
    }

    /**
     * Sets support_address_type
     *
     * @param string|null $support_address_type support_address_type
     *
     * @return self
     */
    public function setSupportAddressType($support_address_type)
    {
        if (is_null($support_address_type)) {
            throw new \InvalidArgumentException('non-nullable support_address_type cannot be null');
        }
        $this->container['support_address_type'] = $support_address_type;

        return $this;
    }

    /**
     * Gets noreply_address
     *
     * @return string|null
     */
    public function getNoreplyAddress()
    {
        return $this->container['noreply_address'];
    }

    /**
     * Sets noreply_address
     *
     * @param string|null $noreply_address noreply_address
     *
     * @return self
     */
    public function setNoreplyAddress($noreply_address)
    {
        if (is_null($noreply_address)) {
            throw new \InvalidArgumentException('non-nullable noreply_address cannot be null');
        }
        $this->container['noreply_address'] = $noreply_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


