<?php
/**
 * GhesLicenseInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * GhesLicenseInfo Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GhesLicenseInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ghes-license-info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'advanced_security_enabled' => 'bool',
        'advanced_security_seats' => 'int',
        'cluster_support' => 'bool',
        'company' => 'string',
        'croquet_support' => 'bool',
        'custom_terms' => 'bool',
        'evaluation' => 'bool',
        'expire_at' => '\DateTime',
        'insights_enabled' => 'bool',
        'insights_expire_at' => '\DateTime',
        'learning_lab_evaluation_expires' => '\DateTime',
        'learning_lab_seats' => 'int',
        'perpetual' => 'bool',
        'reference_number' => 'string',
        'seats' => 'int',
        'ssh_allowed' => 'bool',
        'support_key' => 'string',
        'unlimited_seating' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'advanced_security_enabled' => null,
        'advanced_security_seats' => null,
        'cluster_support' => null,
        'company' => null,
        'croquet_support' => null,
        'custom_terms' => null,
        'evaluation' => null,
        'expire_at' => 'date-time',
        'insights_enabled' => null,
        'insights_expire_at' => 'date-time',
        'learning_lab_evaluation_expires' => 'date-time',
        'learning_lab_seats' => null,
        'perpetual' => null,
        'reference_number' => null,
        'seats' => null,
        'ssh_allowed' => null,
        'support_key' => null,
        'unlimited_seating' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'advanced_security_enabled' => false,
        'advanced_security_seats' => false,
        'cluster_support' => false,
        'company' => false,
        'croquet_support' => false,
        'custom_terms' => false,
        'evaluation' => false,
        'expire_at' => false,
        'insights_enabled' => false,
        'insights_expire_at' => false,
        'learning_lab_evaluation_expires' => false,
        'learning_lab_seats' => false,
        'perpetual' => false,
        'reference_number' => false,
        'seats' => false,
        'ssh_allowed' => false,
        'support_key' => false,
        'unlimited_seating' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advanced_security_enabled' => 'advancedSecurityEnabled',
        'advanced_security_seats' => 'advancedSecuritySeats',
        'cluster_support' => 'clusterSupport',
        'company' => 'company',
        'croquet_support' => 'croquetSupport',
        'custom_terms' => 'customTerms',
        'evaluation' => 'evaluation',
        'expire_at' => 'expireAt',
        'insights_enabled' => 'insightsEnabled',
        'insights_expire_at' => 'insightsExpireAt',
        'learning_lab_evaluation_expires' => 'learningLabEvaluationExpires',
        'learning_lab_seats' => 'learningLabSeats',
        'perpetual' => 'perpetual',
        'reference_number' => 'referenceNumber',
        'seats' => 'seats',
        'ssh_allowed' => 'sshAllowed',
        'support_key' => 'supportKey',
        'unlimited_seating' => 'unlimitedSeating'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advanced_security_enabled' => 'setAdvancedSecurityEnabled',
        'advanced_security_seats' => 'setAdvancedSecuritySeats',
        'cluster_support' => 'setClusterSupport',
        'company' => 'setCompany',
        'croquet_support' => 'setCroquetSupport',
        'custom_terms' => 'setCustomTerms',
        'evaluation' => 'setEvaluation',
        'expire_at' => 'setExpireAt',
        'insights_enabled' => 'setInsightsEnabled',
        'insights_expire_at' => 'setInsightsExpireAt',
        'learning_lab_evaluation_expires' => 'setLearningLabEvaluationExpires',
        'learning_lab_seats' => 'setLearningLabSeats',
        'perpetual' => 'setPerpetual',
        'reference_number' => 'setReferenceNumber',
        'seats' => 'setSeats',
        'ssh_allowed' => 'setSshAllowed',
        'support_key' => 'setSupportKey',
        'unlimited_seating' => 'setUnlimitedSeating'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advanced_security_enabled' => 'getAdvancedSecurityEnabled',
        'advanced_security_seats' => 'getAdvancedSecuritySeats',
        'cluster_support' => 'getClusterSupport',
        'company' => 'getCompany',
        'croquet_support' => 'getCroquetSupport',
        'custom_terms' => 'getCustomTerms',
        'evaluation' => 'getEvaluation',
        'expire_at' => 'getExpireAt',
        'insights_enabled' => 'getInsightsEnabled',
        'insights_expire_at' => 'getInsightsExpireAt',
        'learning_lab_evaluation_expires' => 'getLearningLabEvaluationExpires',
        'learning_lab_seats' => 'getLearningLabSeats',
        'perpetual' => 'getPerpetual',
        'reference_number' => 'getReferenceNumber',
        'seats' => 'getSeats',
        'ssh_allowed' => 'getSshAllowed',
        'support_key' => 'getSupportKey',
        'unlimited_seating' => 'getUnlimitedSeating'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('advanced_security_enabled', $data ?? [], null);
        $this->setIfExists('advanced_security_seats', $data ?? [], null);
        $this->setIfExists('cluster_support', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('croquet_support', $data ?? [], null);
        $this->setIfExists('custom_terms', $data ?? [], null);
        $this->setIfExists('evaluation', $data ?? [], null);
        $this->setIfExists('expire_at', $data ?? [], null);
        $this->setIfExists('insights_enabled', $data ?? [], null);
        $this->setIfExists('insights_expire_at', $data ?? [], null);
        $this->setIfExists('learning_lab_evaluation_expires', $data ?? [], null);
        $this->setIfExists('learning_lab_seats', $data ?? [], null);
        $this->setIfExists('perpetual', $data ?? [], null);
        $this->setIfExists('reference_number', $data ?? [], null);
        $this->setIfExists('seats', $data ?? [], null);
        $this->setIfExists('ssh_allowed', $data ?? [], null);
        $this->setIfExists('support_key', $data ?? [], null);
        $this->setIfExists('unlimited_seating', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets advanced_security_enabled
     *
     * @return bool|null
     */
    public function getAdvancedSecurityEnabled()
    {
        return $this->container['advanced_security_enabled'];
    }

    /**
     * Sets advanced_security_enabled
     *
     * @param bool|null $advanced_security_enabled Whether the GitHub Advanced Security feature is enabled.
     *
     * @return self
     */
    public function setAdvancedSecurityEnabled($advanced_security_enabled)
    {
        if (is_null($advanced_security_enabled)) {
            throw new \InvalidArgumentException('non-nullable advanced_security_enabled cannot be null');
        }
        $this->container['advanced_security_enabled'] = $advanced_security_enabled;

        return $this;
    }

    /**
     * Gets advanced_security_seats
     *
     * @return int|null
     */
    public function getAdvancedSecuritySeats()
    {
        return $this->container['advanced_security_seats'];
    }

    /**
     * Sets advanced_security_seats
     *
     * @param int|null $advanced_security_seats If the GitHub Advanced Security feature is enabled, the seat count.
     *
     * @return self
     */
    public function setAdvancedSecuritySeats($advanced_security_seats)
    {
        if (is_null($advanced_security_seats)) {
            throw new \InvalidArgumentException('non-nullable advanced_security_seats cannot be null');
        }
        $this->container['advanced_security_seats'] = $advanced_security_seats;

        return $this;
    }

    /**
     * Gets cluster_support
     *
     * @return bool|null
     */
    public function getClusterSupport()
    {
        return $this->container['cluster_support'];
    }

    /**
     * Sets cluster_support
     *
     * @param bool|null $cluster_support Whether the cluster support feature is enabled.
     *
     * @return self
     */
    public function setClusterSupport($cluster_support)
    {
        if (is_null($cluster_support)) {
            throw new \InvalidArgumentException('non-nullable cluster_support cannot be null');
        }
        $this->container['cluster_support'] = $cluster_support;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company The company under which the license is issued.
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets croquet_support
     *
     * @return bool|null
     */
    public function getCroquetSupport()
    {
        return $this->container['croquet_support'];
    }

    /**
     * Sets croquet_support
     *
     * @param bool|null $croquet_support Whether the Github Connect feature is enabled.
     *
     * @return self
     */
    public function setCroquetSupport($croquet_support)
    {
        if (is_null($croquet_support)) {
            throw new \InvalidArgumentException('non-nullable croquet_support cannot be null');
        }
        $this->container['croquet_support'] = $croquet_support;

        return $this;
    }

    /**
     * Gets custom_terms
     *
     * @return bool|null
     */
    public function getCustomTerms()
    {
        return $this->container['custom_terms'];
    }

    /**
     * Sets custom_terms
     *
     * @param bool|null $custom_terms Whether this license is issued under custom terms.
     *
     * @return self
     */
    public function setCustomTerms($custom_terms)
    {
        if (is_null($custom_terms)) {
            throw new \InvalidArgumentException('non-nullable custom_terms cannot be null');
        }
        $this->container['custom_terms'] = $custom_terms;

        return $this;
    }

    /**
     * Gets evaluation
     *
     * @return bool|null
     */
    public function getEvaluation()
    {
        return $this->container['evaluation'];
    }

    /**
     * Sets evaluation
     *
     * @param bool|null $evaluation Wheter this license is issued as an evaluation license.
     *
     * @return self
     */
    public function setEvaluation($evaluation)
    {
        if (is_null($evaluation)) {
            throw new \InvalidArgumentException('non-nullable evaluation cannot be null');
        }
        $this->container['evaluation'] = $evaluation;

        return $this;
    }

    /**
     * Gets expire_at
     *
     * @return \DateTime|null
     */
    public function getExpireAt()
    {
        return $this->container['expire_at'];
    }

    /**
     * Sets expire_at
     *
     * @param \DateTime|null $expire_at The expiration date of the license.
     *
     * @return self
     */
    public function setExpireAt($expire_at)
    {
        if (is_null($expire_at)) {
            throw new \InvalidArgumentException('non-nullable expire_at cannot be null');
        }
        $this->container['expire_at'] = $expire_at;

        return $this;
    }

    /**
     * Gets insights_enabled
     *
     * @return bool|null
     */
    public function getInsightsEnabled()
    {
        return $this->container['insights_enabled'];
    }

    /**
     * Sets insights_enabled
     *
     * @param bool|null $insights_enabled Whether the insights feature is enabled.
     *
     * @return self
     */
    public function setInsightsEnabled($insights_enabled)
    {
        if (is_null($insights_enabled)) {
            throw new \InvalidArgumentException('non-nullable insights_enabled cannot be null');
        }
        $this->container['insights_enabled'] = $insights_enabled;

        return $this;
    }

    /**
     * Gets insights_expire_at
     *
     * @return \DateTime|null
     */
    public function getInsightsExpireAt()
    {
        return $this->container['insights_expire_at'];
    }

    /**
     * Sets insights_expire_at
     *
     * @param \DateTime|null $insights_expire_at If the insights feature is enabled, the expiration date.
     *
     * @return self
     */
    public function setInsightsExpireAt($insights_expire_at)
    {
        if (is_null($insights_expire_at)) {
            throw new \InvalidArgumentException('non-nullable insights_expire_at cannot be null');
        }
        $this->container['insights_expire_at'] = $insights_expire_at;

        return $this;
    }

    /**
     * Gets learning_lab_evaluation_expires
     *
     * @return \DateTime|null
     */
    public function getLearningLabEvaluationExpires()
    {
        return $this->container['learning_lab_evaluation_expires'];
    }

    /**
     * Sets learning_lab_evaluation_expires
     *
     * @param \DateTime|null $learning_lab_evaluation_expires If the learning lab feature is enabled, the expiration date.
     *
     * @return self
     */
    public function setLearningLabEvaluationExpires($learning_lab_evaluation_expires)
    {
        if (is_null($learning_lab_evaluation_expires)) {
            throw new \InvalidArgumentException('non-nullable learning_lab_evaluation_expires cannot be null');
        }
        $this->container['learning_lab_evaluation_expires'] = $learning_lab_evaluation_expires;

        return $this;
    }

    /**
     * Gets learning_lab_seats
     *
     * @return int|null
     */
    public function getLearningLabSeats()
    {
        return $this->container['learning_lab_seats'];
    }

    /**
     * Sets learning_lab_seats
     *
     * @param int|null $learning_lab_seats If the learning lab feature is enabled, the seat count.
     *
     * @return self
     */
    public function setLearningLabSeats($learning_lab_seats)
    {
        if (is_null($learning_lab_seats)) {
            throw new \InvalidArgumentException('non-nullable learning_lab_seats cannot be null');
        }
        $this->container['learning_lab_seats'] = $learning_lab_seats;

        return $this;
    }

    /**
     * Gets perpetual
     *
     * @return bool|null
     */
    public function getPerpetual()
    {
        return $this->container['perpetual'];
    }

    /**
     * Sets perpetual
     *
     * @param bool|null $perpetual Whether the perpetual feature is enabled.
     *
     * @return self
     */
    public function setPerpetual($perpetual)
    {
        if (is_null($perpetual)) {
            throw new \InvalidArgumentException('non-nullable perpetual cannot be null');
        }
        $this->container['perpetual'] = $perpetual;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number The unique reference number of the license.
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        if (is_null($reference_number)) {
            throw new \InvalidArgumentException('non-nullable reference_number cannot be null');
        }
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets seats
     *
     * @return int|null
     */
    public function getSeats()
    {
        return $this->container['seats'];
    }

    /**
     * Sets seats
     *
     * @param int|null $seats If the license is issued with limited seating, the seat count.
     *
     * @return self
     */
    public function setSeats($seats)
    {
        if (is_null($seats)) {
            throw new \InvalidArgumentException('non-nullable seats cannot be null');
        }
        $this->container['seats'] = $seats;

        return $this;
    }

    /**
     * Gets ssh_allowed
     *
     * @return bool|null
     */
    public function getSshAllowed()
    {
        return $this->container['ssh_allowed'];
    }

    /**
     * Sets ssh_allowed
     *
     * @param bool|null $ssh_allowed Whether the SSH feature is enabled.
     *
     * @return self
     */
    public function setSshAllowed($ssh_allowed)
    {
        if (is_null($ssh_allowed)) {
            throw new \InvalidArgumentException('non-nullable ssh_allowed cannot be null');
        }
        $this->container['ssh_allowed'] = $ssh_allowed;

        return $this;
    }

    /**
     * Gets support_key
     *
     * @return string|null
     */
    public function getSupportKey()
    {
        return $this->container['support_key'];
    }

    /**
     * Sets support_key
     *
     * @param string|null $support_key The support key of the license.
     *
     * @return self
     */
    public function setSupportKey($support_key)
    {
        if (is_null($support_key)) {
            throw new \InvalidArgumentException('non-nullable support_key cannot be null');
        }
        $this->container['support_key'] = $support_key;

        return $this;
    }

    /**
     * Gets unlimited_seating
     *
     * @return bool|null
     */
    public function getUnlimitedSeating()
    {
        return $this->container['unlimited_seating'];
    }

    /**
     * Sets unlimited_seating
     *
     * @param bool|null $unlimited_seating Whether the license is issued with unlimited seat count.
     *
     * @return self
     */
    public function setUnlimitedSeating($unlimited_seating)
    {
        if (is_null($unlimited_seating)) {
            throw new \InvalidArgumentException('non-nullable unlimited_seating cannot be null');
        }
        $this->container['unlimited_seating'] = $unlimited_seating;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


