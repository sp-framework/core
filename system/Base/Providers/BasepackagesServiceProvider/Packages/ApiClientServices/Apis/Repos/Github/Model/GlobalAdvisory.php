<?php
/**
 * GlobalAdvisory
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * GlobalAdvisory Class Doc Comment
 *
 * @category Class
 * @description A GitHub Security Advisory.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GlobalAdvisory implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'global-advisory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ghsa_id' => 'string',
        'cve_id' => 'string',
        'url' => 'string',
        'html_url' => 'string',
        'repository_advisory_url' => 'string',
        'summary' => 'string',
        'description' => 'string',
        'type' => 'string',
        'severity' => 'string',
        'source_code_location' => 'string',
        'identifiers' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisoryIdentifiersInner[]',
        'references' => 'string[]',
        'published_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'github_reviewed_at' => '\DateTime',
        'nvd_published_at' => '\DateTime',
        'withdrawn_at' => '\DateTime',
        'vulnerabilities' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Vulnerability[]',
        'cvss' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisoryCvss',
        'cwes' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisoryCwesInner[]',
        'credits' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisoryCreditsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ghsa_id' => null,
        'cve_id' => null,
        'url' => null,
        'html_url' => 'uri',
        'repository_advisory_url' => 'uri',
        'summary' => null,
        'description' => null,
        'type' => null,
        'severity' => null,
        'source_code_location' => 'uri',
        'identifiers' => null,
        'references' => null,
        'published_at' => 'date-time',
        'updated_at' => 'date-time',
        'github_reviewed_at' => 'date-time',
        'nvd_published_at' => 'date-time',
        'withdrawn_at' => 'date-time',
        'vulnerabilities' => null,
        'cvss' => null,
        'cwes' => null,
        'credits' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ghsa_id' => false,
        'cve_id' => true,
        'url' => false,
        'html_url' => false,
        'repository_advisory_url' => true,
        'summary' => false,
        'description' => true,
        'type' => false,
        'severity' => false,
        'source_code_location' => true,
        'identifiers' => true,
        'references' => true,
        'published_at' => false,
        'updated_at' => false,
        'github_reviewed_at' => true,
        'nvd_published_at' => true,
        'withdrawn_at' => true,
        'vulnerabilities' => true,
        'cvss' => true,
        'cwes' => true,
        'credits' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ghsa_id' => 'ghsa_id',
        'cve_id' => 'cve_id',
        'url' => 'url',
        'html_url' => 'html_url',
        'repository_advisory_url' => 'repository_advisory_url',
        'summary' => 'summary',
        'description' => 'description',
        'type' => 'type',
        'severity' => 'severity',
        'source_code_location' => 'source_code_location',
        'identifiers' => 'identifiers',
        'references' => 'references',
        'published_at' => 'published_at',
        'updated_at' => 'updated_at',
        'github_reviewed_at' => 'github_reviewed_at',
        'nvd_published_at' => 'nvd_published_at',
        'withdrawn_at' => 'withdrawn_at',
        'vulnerabilities' => 'vulnerabilities',
        'cvss' => 'cvss',
        'cwes' => 'cwes',
        'credits' => 'credits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ghsa_id' => 'setGhsaId',
        'cve_id' => 'setCveId',
        'url' => 'setUrl',
        'html_url' => 'setHtmlUrl',
        'repository_advisory_url' => 'setRepositoryAdvisoryUrl',
        'summary' => 'setSummary',
        'description' => 'setDescription',
        'type' => 'setType',
        'severity' => 'setSeverity',
        'source_code_location' => 'setSourceCodeLocation',
        'identifiers' => 'setIdentifiers',
        'references' => 'setReferences',
        'published_at' => 'setPublishedAt',
        'updated_at' => 'setUpdatedAt',
        'github_reviewed_at' => 'setGithubReviewedAt',
        'nvd_published_at' => 'setNvdPublishedAt',
        'withdrawn_at' => 'setWithdrawnAt',
        'vulnerabilities' => 'setVulnerabilities',
        'cvss' => 'setCvss',
        'cwes' => 'setCwes',
        'credits' => 'setCredits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ghsa_id' => 'getGhsaId',
        'cve_id' => 'getCveId',
        'url' => 'getUrl',
        'html_url' => 'getHtmlUrl',
        'repository_advisory_url' => 'getRepositoryAdvisoryUrl',
        'summary' => 'getSummary',
        'description' => 'getDescription',
        'type' => 'getType',
        'severity' => 'getSeverity',
        'source_code_location' => 'getSourceCodeLocation',
        'identifiers' => 'getIdentifiers',
        'references' => 'getReferences',
        'published_at' => 'getPublishedAt',
        'updated_at' => 'getUpdatedAt',
        'github_reviewed_at' => 'getGithubReviewedAt',
        'nvd_published_at' => 'getNvdPublishedAt',
        'withdrawn_at' => 'getWithdrawnAt',
        'vulnerabilities' => 'getVulnerabilities',
        'cvss' => 'getCvss',
        'cwes' => 'getCwes',
        'credits' => 'getCredits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_REVIEWED = 'reviewed';
    public const TYPE_UNREVIEWED = 'unreviewed';
    public const TYPE_MALWARE = 'malware';
    public const SEVERITY_CRITICAL = 'critical';
    public const SEVERITY_HIGH = 'high';
    public const SEVERITY_MEDIUM = 'medium';
    public const SEVERITY_LOW = 'low';
    public const SEVERITY_UNKNOWN = 'unknown';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_REVIEWED,
            self::TYPE_UNREVIEWED,
            self::TYPE_MALWARE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSeverityAllowableValues()
    {
        return [
            self::SEVERITY_CRITICAL,
            self::SEVERITY_HIGH,
            self::SEVERITY_MEDIUM,
            self::SEVERITY_LOW,
            self::SEVERITY_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ghsa_id', $data ?? [], null);
        $this->setIfExists('cve_id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('repository_advisory_url', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('severity', $data ?? [], null);
        $this->setIfExists('source_code_location', $data ?? [], null);
        $this->setIfExists('identifiers', $data ?? [], null);
        $this->setIfExists('references', $data ?? [], null);
        $this->setIfExists('published_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('github_reviewed_at', $data ?? [], null);
        $this->setIfExists('nvd_published_at', $data ?? [], null);
        $this->setIfExists('withdrawn_at', $data ?? [], null);
        $this->setIfExists('vulnerabilities', $data ?? [], null);
        $this->setIfExists('cvss', $data ?? [], null);
        $this->setIfExists('cwes', $data ?? [], null);
        $this->setIfExists('credits', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ghsa_id'] === null) {
            $invalidProperties[] = "'ghsa_id' can't be null";
        }
        if ($this->container['cve_id'] === null) {
            $invalidProperties[] = "'cve_id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['html_url'] === null) {
            $invalidProperties[] = "'html_url' can't be null";
        }
        if ($this->container['repository_advisory_url'] === null) {
            $invalidProperties[] = "'repository_advisory_url' can't be null";
        }
        if ($this->container['summary'] === null) {
            $invalidProperties[] = "'summary' can't be null";
        }
        if ((mb_strlen($this->container['summary']) > 1024)) {
            $invalidProperties[] = "invalid value for 'summary', the character length must be smaller than or equal to 1024.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) > 65535)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 65535.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['severity'] === null) {
            $invalidProperties[] = "'severity' can't be null";
        }
        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($this->container['severity']) && !in_array($this->container['severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'severity', must be one of '%s'",
                $this->container['severity'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['source_code_location'] === null) {
            $invalidProperties[] = "'source_code_location' can't be null";
        }
        if ($this->container['identifiers'] === null) {
            $invalidProperties[] = "'identifiers' can't be null";
        }
        if ($this->container['references'] === null) {
            $invalidProperties[] = "'references' can't be null";
        }
        if ($this->container['published_at'] === null) {
            $invalidProperties[] = "'published_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['github_reviewed_at'] === null) {
            $invalidProperties[] = "'github_reviewed_at' can't be null";
        }
        if ($this->container['nvd_published_at'] === null) {
            $invalidProperties[] = "'nvd_published_at' can't be null";
        }
        if ($this->container['withdrawn_at'] === null) {
            $invalidProperties[] = "'withdrawn_at' can't be null";
        }
        if ($this->container['vulnerabilities'] === null) {
            $invalidProperties[] = "'vulnerabilities' can't be null";
        }
        if ($this->container['cvss'] === null) {
            $invalidProperties[] = "'cvss' can't be null";
        }
        if ($this->container['cwes'] === null) {
            $invalidProperties[] = "'cwes' can't be null";
        }
        if ($this->container['credits'] === null) {
            $invalidProperties[] = "'credits' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ghsa_id
     *
     * @return string
     */
    public function getGhsaId()
    {
        return $this->container['ghsa_id'];
    }

    /**
     * Sets ghsa_id
     *
     * @param string $ghsa_id The GitHub Security Advisory ID.
     *
     * @return self
     */
    public function setGhsaId($ghsa_id)
    {
        if (is_null($ghsa_id)) {
            throw new \InvalidArgumentException('non-nullable ghsa_id cannot be null');
        }
        $this->container['ghsa_id'] = $ghsa_id;

        return $this;
    }

    /**
     * Gets cve_id
     *
     * @return string
     */
    public function getCveId()
    {
        return $this->container['cve_id'];
    }

    /**
     * Sets cve_id
     *
     * @param string $cve_id The Common Vulnerabilities and Exposures (CVE) ID.
     *
     * @return self
     */
    public function setCveId($cve_id)
    {
        if (is_null($cve_id)) {
            array_push($this->openAPINullablesSetToNull, 'cve_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cve_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cve_id'] = $cve_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The API URL for the advisory.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url The URL for the advisory.
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets repository_advisory_url
     *
     * @return string
     */
    public function getRepositoryAdvisoryUrl()
    {
        return $this->container['repository_advisory_url'];
    }

    /**
     * Sets repository_advisory_url
     *
     * @param string $repository_advisory_url The API URL for the repository advisory.
     *
     * @return self
     */
    public function setRepositoryAdvisoryUrl($repository_advisory_url)
    {
        if (is_null($repository_advisory_url)) {
            array_push($this->openAPINullablesSetToNull, 'repository_advisory_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repository_advisory_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repository_advisory_url'] = $repository_advisory_url;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary A short summary of the advisory.
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            throw new \InvalidArgumentException('non-nullable summary cannot be null');
        }
        if ((mb_strlen($summary) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $summary when calling GlobalAdvisory., must be smaller than or equal to 1024.');
        }

        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A detailed description of what the advisory entails.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $description when calling GlobalAdvisory., must be smaller than or equal to 65535.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of advisory.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string $severity The severity of the advisory.
     *
     * @return self
     */
    public function setSeverity($severity)
    {
        if (is_null($severity)) {
            throw new \InvalidArgumentException('non-nullable severity cannot be null');
        }
        $allowedValues = $this->getSeverityAllowableValues();
        if (!in_array($severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'severity', must be one of '%s'",
                    $severity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets source_code_location
     *
     * @return string
     */
    public function getSourceCodeLocation()
    {
        return $this->container['source_code_location'];
    }

    /**
     * Sets source_code_location
     *
     * @param string $source_code_location The URL of the advisory's source code.
     *
     * @return self
     */
    public function setSourceCodeLocation($source_code_location)
    {
        if (is_null($source_code_location)) {
            array_push($this->openAPINullablesSetToNull, 'source_code_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_code_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_code_location'] = $source_code_location;

        return $this;
    }

    /**
     * Gets identifiers
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisoryIdentifiersInner[]
     */
    public function getIdentifiers()
    {
        return $this->container['identifiers'];
    }

    /**
     * Sets identifiers
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisoryIdentifiersInner[] $identifiers identifiers
     *
     * @return self
     */
    public function setIdentifiers($identifiers)
    {
        if (is_null($identifiers)) {
            array_push($this->openAPINullablesSetToNull, 'identifiers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('identifiers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['identifiers'] = $identifiers;

        return $this;
    }

    /**
     * Gets references
     *
     * @return string[]
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param string[] $references references
     *
     * @return self
     */
    public function setReferences($references)
    {
        if (is_null($references)) {
            array_push($this->openAPINullablesSetToNull, 'references');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('references', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets published_at
     *
     * @return \DateTime
     */
    public function getPublishedAt()
    {
        return $this->container['published_at'];
    }

    /**
     * Sets published_at
     *
     * @param \DateTime $published_at The date and time of when the advisory was published, in ISO 8601 format.
     *
     * @return self
     */
    public function setPublishedAt($published_at)
    {
        if (is_null($published_at)) {
            throw new \InvalidArgumentException('non-nullable published_at cannot be null');
        }
        $this->container['published_at'] = $published_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The date and time of when the advisory was last updated, in ISO 8601 format.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets github_reviewed_at
     *
     * @return \DateTime
     */
    public function getGithubReviewedAt()
    {
        return $this->container['github_reviewed_at'];
    }

    /**
     * Sets github_reviewed_at
     *
     * @param \DateTime $github_reviewed_at The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format.
     *
     * @return self
     */
    public function setGithubReviewedAt($github_reviewed_at)
    {
        if (is_null($github_reviewed_at)) {
            array_push($this->openAPINullablesSetToNull, 'github_reviewed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('github_reviewed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['github_reviewed_at'] = $github_reviewed_at;

        return $this;
    }

    /**
     * Gets nvd_published_at
     *
     * @return \DateTime
     */
    public function getNvdPublishedAt()
    {
        return $this->container['nvd_published_at'];
    }

    /**
     * Sets nvd_published_at
     *
     * @param \DateTime $nvd_published_at The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format. This field is only populated when the advisory is imported from the National Vulnerability Database.
     *
     * @return self
     */
    public function setNvdPublishedAt($nvd_published_at)
    {
        if (is_null($nvd_published_at)) {
            array_push($this->openAPINullablesSetToNull, 'nvd_published_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nvd_published_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nvd_published_at'] = $nvd_published_at;

        return $this;
    }

    /**
     * Gets withdrawn_at
     *
     * @return \DateTime
     */
    public function getWithdrawnAt()
    {
        return $this->container['withdrawn_at'];
    }

    /**
     * Sets withdrawn_at
     *
     * @param \DateTime $withdrawn_at The date and time of when the advisory was withdrawn, in ISO 8601 format.
     *
     * @return self
     */
    public function setWithdrawnAt($withdrawn_at)
    {
        if (is_null($withdrawn_at)) {
            array_push($this->openAPINullablesSetToNull, 'withdrawn_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('withdrawn_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['withdrawn_at'] = $withdrawn_at;

        return $this;
    }

    /**
     * Gets vulnerabilities
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Vulnerability[]
     */
    public function getVulnerabilities()
    {
        return $this->container['vulnerabilities'];
    }

    /**
     * Sets vulnerabilities
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Vulnerability[] $vulnerabilities The products and respective version ranges affected by the advisory.
     *
     * @return self
     */
    public function setVulnerabilities($vulnerabilities)
    {
        if (is_null($vulnerabilities)) {
            array_push($this->openAPINullablesSetToNull, 'vulnerabilities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vulnerabilities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vulnerabilities'] = $vulnerabilities;

        return $this;
    }

    /**
     * Gets cvss
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisoryCvss
     */
    public function getCvss()
    {
        return $this->container['cvss'];
    }

    /**
     * Sets cvss
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisoryCvss $cvss cvss
     *
     * @return self
     */
    public function setCvss($cvss)
    {
        if (is_null($cvss)) {
            array_push($this->openAPINullablesSetToNull, 'cvss');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cvss', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cvss'] = $cvss;

        return $this;
    }

    /**
     * Gets cwes
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisoryCwesInner[]
     */
    public function getCwes()
    {
        return $this->container['cwes'];
    }

    /**
     * Sets cwes
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisoryCwesInner[] $cwes cwes
     *
     * @return self
     */
    public function setCwes($cwes)
    {
        if (is_null($cwes)) {
            array_push($this->openAPINullablesSetToNull, 'cwes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cwes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cwes'] = $cwes;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisoryCreditsInner[]
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\GlobalAdvisoryCreditsInner[] $credits The users who contributed to the advisory.
     *
     * @return self
     */
    public function setCredits($credits)
    {
        if (is_null($credits)) {
            array_push($this->openAPINullablesSetToNull, 'credits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['credits'] = $credits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


