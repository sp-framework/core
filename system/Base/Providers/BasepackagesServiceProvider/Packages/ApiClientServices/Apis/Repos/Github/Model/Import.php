<?php
/**
 * Import
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * Import Class Doc Comment
 *
 * @category Class
 * @description A repository import from an external source.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Import implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'import';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vcs' => 'string',
        'use_lfs' => 'bool',
        'vcs_url' => 'string',
        'svc_root' => 'string',
        'tfvc_project' => 'string',
        'status' => 'string',
        'status_text' => 'string',
        'failed_step' => 'string',
        'error_message' => 'string',
        'import_percent' => 'int',
        'commit_count' => 'int',
        'push_percent' => 'int',
        'has_large_files' => 'bool',
        'large_files_size' => 'int',
        'large_files_count' => 'int',
        'project_choices' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ImportProjectChoicesInner[]',
        'message' => 'string',
        'authors_count' => 'int',
        'url' => 'string',
        'html_url' => 'string',
        'authors_url' => 'string',
        'repository_url' => 'string',
        'svn_root' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vcs' => null,
        'use_lfs' => null,
        'vcs_url' => null,
        'svc_root' => null,
        'tfvc_project' => null,
        'status' => null,
        'status_text' => null,
        'failed_step' => null,
        'error_message' => null,
        'import_percent' => null,
        'commit_count' => null,
        'push_percent' => null,
        'has_large_files' => null,
        'large_files_size' => null,
        'large_files_count' => null,
        'project_choices' => null,
        'message' => null,
        'authors_count' => null,
        'url' => 'uri',
        'html_url' => 'uri',
        'authors_url' => 'uri',
        'repository_url' => 'uri',
        'svn_root' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'vcs' => true,
        'use_lfs' => false,
        'vcs_url' => false,
        'svc_root' => false,
        'tfvc_project' => false,
        'status' => false,
        'status_text' => true,
        'failed_step' => true,
        'error_message' => true,
        'import_percent' => true,
        'commit_count' => true,
        'push_percent' => true,
        'has_large_files' => false,
        'large_files_size' => false,
        'large_files_count' => false,
        'project_choices' => false,
        'message' => false,
        'authors_count' => true,
        'url' => false,
        'html_url' => false,
        'authors_url' => false,
        'repository_url' => false,
        'svn_root' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vcs' => 'vcs',
        'use_lfs' => 'use_lfs',
        'vcs_url' => 'vcs_url',
        'svc_root' => 'svc_root',
        'tfvc_project' => 'tfvc_project',
        'status' => 'status',
        'status_text' => 'status_text',
        'failed_step' => 'failed_step',
        'error_message' => 'error_message',
        'import_percent' => 'import_percent',
        'commit_count' => 'commit_count',
        'push_percent' => 'push_percent',
        'has_large_files' => 'has_large_files',
        'large_files_size' => 'large_files_size',
        'large_files_count' => 'large_files_count',
        'project_choices' => 'project_choices',
        'message' => 'message',
        'authors_count' => 'authors_count',
        'url' => 'url',
        'html_url' => 'html_url',
        'authors_url' => 'authors_url',
        'repository_url' => 'repository_url',
        'svn_root' => 'svn_root'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vcs' => 'setVcs',
        'use_lfs' => 'setUseLfs',
        'vcs_url' => 'setVcsUrl',
        'svc_root' => 'setSvcRoot',
        'tfvc_project' => 'setTfvcProject',
        'status' => 'setStatus',
        'status_text' => 'setStatusText',
        'failed_step' => 'setFailedStep',
        'error_message' => 'setErrorMessage',
        'import_percent' => 'setImportPercent',
        'commit_count' => 'setCommitCount',
        'push_percent' => 'setPushPercent',
        'has_large_files' => 'setHasLargeFiles',
        'large_files_size' => 'setLargeFilesSize',
        'large_files_count' => 'setLargeFilesCount',
        'project_choices' => 'setProjectChoices',
        'message' => 'setMessage',
        'authors_count' => 'setAuthorsCount',
        'url' => 'setUrl',
        'html_url' => 'setHtmlUrl',
        'authors_url' => 'setAuthorsUrl',
        'repository_url' => 'setRepositoryUrl',
        'svn_root' => 'setSvnRoot'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vcs' => 'getVcs',
        'use_lfs' => 'getUseLfs',
        'vcs_url' => 'getVcsUrl',
        'svc_root' => 'getSvcRoot',
        'tfvc_project' => 'getTfvcProject',
        'status' => 'getStatus',
        'status_text' => 'getStatusText',
        'failed_step' => 'getFailedStep',
        'error_message' => 'getErrorMessage',
        'import_percent' => 'getImportPercent',
        'commit_count' => 'getCommitCount',
        'push_percent' => 'getPushPercent',
        'has_large_files' => 'getHasLargeFiles',
        'large_files_size' => 'getLargeFilesSize',
        'large_files_count' => 'getLargeFilesCount',
        'project_choices' => 'getProjectChoices',
        'message' => 'getMessage',
        'authors_count' => 'getAuthorsCount',
        'url' => 'getUrl',
        'html_url' => 'getHtmlUrl',
        'authors_url' => 'getAuthorsUrl',
        'repository_url' => 'getRepositoryUrl',
        'svn_root' => 'getSvnRoot'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_AUTH = 'auth';
    public const STATUS_ERROR = 'error';
    public const STATUS_NONE = 'none';
    public const STATUS_DETECTING = 'detecting';
    public const STATUS_CHOOSE = 'choose';
    public const STATUS_AUTH_FAILED = 'auth_failed';
    public const STATUS_IMPORTING = 'importing';
    public const STATUS_MAPPING = 'mapping';
    public const STATUS_WAITING_TO_PUSH = 'waiting_to_push';
    public const STATUS_PUSHING = 'pushing';
    public const STATUS_COMPLETE = 'complete';
    public const STATUS_SETUP = 'setup';
    public const STATUS_UNKNOWN = 'unknown';
    public const STATUS_DETECTION_FOUND_MULTIPLE = 'detection_found_multiple';
    public const STATUS_DETECTION_FOUND_NOTHING = 'detection_found_nothing';
    public const STATUS_DETECTION_NEEDS_AUTH = 'detection_needs_auth';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_AUTH,
            self::STATUS_ERROR,
            self::STATUS_NONE,
            self::STATUS_DETECTING,
            self::STATUS_CHOOSE,
            self::STATUS_AUTH_FAILED,
            self::STATUS_IMPORTING,
            self::STATUS_MAPPING,
            self::STATUS_WAITING_TO_PUSH,
            self::STATUS_PUSHING,
            self::STATUS_COMPLETE,
            self::STATUS_SETUP,
            self::STATUS_UNKNOWN,
            self::STATUS_DETECTION_FOUND_MULTIPLE,
            self::STATUS_DETECTION_FOUND_NOTHING,
            self::STATUS_DETECTION_NEEDS_AUTH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('vcs', $data ?? [], null);
        $this->setIfExists('use_lfs', $data ?? [], null);
        $this->setIfExists('vcs_url', $data ?? [], null);
        $this->setIfExists('svc_root', $data ?? [], null);
        $this->setIfExists('tfvc_project', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_text', $data ?? [], null);
        $this->setIfExists('failed_step', $data ?? [], null);
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('import_percent', $data ?? [], null);
        $this->setIfExists('commit_count', $data ?? [], null);
        $this->setIfExists('push_percent', $data ?? [], null);
        $this->setIfExists('has_large_files', $data ?? [], null);
        $this->setIfExists('large_files_size', $data ?? [], null);
        $this->setIfExists('large_files_count', $data ?? [], null);
        $this->setIfExists('project_choices', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('authors_count', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('authors_url', $data ?? [], null);
        $this->setIfExists('repository_url', $data ?? [], null);
        $this->setIfExists('svn_root', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['vcs'] === null) {
            $invalidProperties[] = "'vcs' can't be null";
        }
        if ($this->container['vcs_url'] === null) {
            $invalidProperties[] = "'vcs_url' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['html_url'] === null) {
            $invalidProperties[] = "'html_url' can't be null";
        }
        if ($this->container['authors_url'] === null) {
            $invalidProperties[] = "'authors_url' can't be null";
        }
        if ($this->container['repository_url'] === null) {
            $invalidProperties[] = "'repository_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vcs
     *
     * @return string
     */
    public function getVcs()
    {
        return $this->container['vcs'];
    }

    /**
     * Sets vcs
     *
     * @param string $vcs vcs
     *
     * @return self
     */
    public function setVcs($vcs)
    {
        if (is_null($vcs)) {
            array_push($this->openAPINullablesSetToNull, 'vcs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vcs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vcs'] = $vcs;

        return $this;
    }

    /**
     * Gets use_lfs
     *
     * @return bool|null
     */
    public function getUseLfs()
    {
        return $this->container['use_lfs'];
    }

    /**
     * Sets use_lfs
     *
     * @param bool|null $use_lfs use_lfs
     *
     * @return self
     */
    public function setUseLfs($use_lfs)
    {
        if (is_null($use_lfs)) {
            throw new \InvalidArgumentException('non-nullable use_lfs cannot be null');
        }
        $this->container['use_lfs'] = $use_lfs;

        return $this;
    }

    /**
     * Gets vcs_url
     *
     * @return string
     */
    public function getVcsUrl()
    {
        return $this->container['vcs_url'];
    }

    /**
     * Sets vcs_url
     *
     * @param string $vcs_url The URL of the originating repository.
     *
     * @return self
     */
    public function setVcsUrl($vcs_url)
    {
        if (is_null($vcs_url)) {
            throw new \InvalidArgumentException('non-nullable vcs_url cannot be null');
        }
        $this->container['vcs_url'] = $vcs_url;

        return $this;
    }

    /**
     * Gets svc_root
     *
     * @return string|null
     */
    public function getSvcRoot()
    {
        return $this->container['svc_root'];
    }

    /**
     * Sets svc_root
     *
     * @param string|null $svc_root svc_root
     *
     * @return self
     */
    public function setSvcRoot($svc_root)
    {
        if (is_null($svc_root)) {
            throw new \InvalidArgumentException('non-nullable svc_root cannot be null');
        }
        $this->container['svc_root'] = $svc_root;

        return $this;
    }

    /**
     * Gets tfvc_project
     *
     * @return string|null
     */
    public function getTfvcProject()
    {
        return $this->container['tfvc_project'];
    }

    /**
     * Sets tfvc_project
     *
     * @param string|null $tfvc_project tfvc_project
     *
     * @return self
     */
    public function setTfvcProject($tfvc_project)
    {
        if (is_null($tfvc_project)) {
            throw new \InvalidArgumentException('non-nullable tfvc_project cannot be null');
        }
        $this->container['tfvc_project'] = $tfvc_project;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_text
     *
     * @return string|null
     */
    public function getStatusText()
    {
        return $this->container['status_text'];
    }

    /**
     * Sets status_text
     *
     * @param string|null $status_text status_text
     *
     * @return self
     */
    public function setStatusText($status_text)
    {
        if (is_null($status_text)) {
            array_push($this->openAPINullablesSetToNull, 'status_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status_text'] = $status_text;

        return $this;
    }

    /**
     * Gets failed_step
     *
     * @return string|null
     */
    public function getFailedStep()
    {
        return $this->container['failed_step'];
    }

    /**
     * Sets failed_step
     *
     * @param string|null $failed_step failed_step
     *
     * @return self
     */
    public function setFailedStep($failed_step)
    {
        if (is_null($failed_step)) {
            array_push($this->openAPINullablesSetToNull, 'failed_step');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failed_step', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['failed_step'] = $failed_step;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message error_message
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        if (is_null($error_message)) {
            array_push($this->openAPINullablesSetToNull, 'error_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets import_percent
     *
     * @return int|null
     */
    public function getImportPercent()
    {
        return $this->container['import_percent'];
    }

    /**
     * Sets import_percent
     *
     * @param int|null $import_percent import_percent
     *
     * @return self
     */
    public function setImportPercent($import_percent)
    {
        if (is_null($import_percent)) {
            array_push($this->openAPINullablesSetToNull, 'import_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('import_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['import_percent'] = $import_percent;

        return $this;
    }

    /**
     * Gets commit_count
     *
     * @return int|null
     */
    public function getCommitCount()
    {
        return $this->container['commit_count'];
    }

    /**
     * Sets commit_count
     *
     * @param int|null $commit_count commit_count
     *
     * @return self
     */
    public function setCommitCount($commit_count)
    {
        if (is_null($commit_count)) {
            array_push($this->openAPINullablesSetToNull, 'commit_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commit_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['commit_count'] = $commit_count;

        return $this;
    }

    /**
     * Gets push_percent
     *
     * @return int|null
     */
    public function getPushPercent()
    {
        return $this->container['push_percent'];
    }

    /**
     * Sets push_percent
     *
     * @param int|null $push_percent push_percent
     *
     * @return self
     */
    public function setPushPercent($push_percent)
    {
        if (is_null($push_percent)) {
            array_push($this->openAPINullablesSetToNull, 'push_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('push_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['push_percent'] = $push_percent;

        return $this;
    }

    /**
     * Gets has_large_files
     *
     * @return bool|null
     */
    public function getHasLargeFiles()
    {
        return $this->container['has_large_files'];
    }

    /**
     * Sets has_large_files
     *
     * @param bool|null $has_large_files has_large_files
     *
     * @return self
     */
    public function setHasLargeFiles($has_large_files)
    {
        if (is_null($has_large_files)) {
            throw new \InvalidArgumentException('non-nullable has_large_files cannot be null');
        }
        $this->container['has_large_files'] = $has_large_files;

        return $this;
    }

    /**
     * Gets large_files_size
     *
     * @return int|null
     */
    public function getLargeFilesSize()
    {
        return $this->container['large_files_size'];
    }

    /**
     * Sets large_files_size
     *
     * @param int|null $large_files_size large_files_size
     *
     * @return self
     */
    public function setLargeFilesSize($large_files_size)
    {
        if (is_null($large_files_size)) {
            throw new \InvalidArgumentException('non-nullable large_files_size cannot be null');
        }
        $this->container['large_files_size'] = $large_files_size;

        return $this;
    }

    /**
     * Gets large_files_count
     *
     * @return int|null
     */
    public function getLargeFilesCount()
    {
        return $this->container['large_files_count'];
    }

    /**
     * Sets large_files_count
     *
     * @param int|null $large_files_count large_files_count
     *
     * @return self
     */
    public function setLargeFilesCount($large_files_count)
    {
        if (is_null($large_files_count)) {
            throw new \InvalidArgumentException('non-nullable large_files_count cannot be null');
        }
        $this->container['large_files_count'] = $large_files_count;

        return $this;
    }

    /**
     * Gets project_choices
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ImportProjectChoicesInner[]|null
     */
    public function getProjectChoices()
    {
        return $this->container['project_choices'];
    }

    /**
     * Sets project_choices
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ImportProjectChoicesInner[]|null $project_choices project_choices
     *
     * @return self
     */
    public function setProjectChoices($project_choices)
    {
        if (is_null($project_choices)) {
            throw new \InvalidArgumentException('non-nullable project_choices cannot be null');
        }
        $this->container['project_choices'] = $project_choices;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets authors_count
     *
     * @return int|null
     */
    public function getAuthorsCount()
    {
        return $this->container['authors_count'];
    }

    /**
     * Sets authors_count
     *
     * @param int|null $authors_count authors_count
     *
     * @return self
     */
    public function setAuthorsCount($authors_count)
    {
        if (is_null($authors_count)) {
            array_push($this->openAPINullablesSetToNull, 'authors_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authors_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authors_count'] = $authors_count;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets authors_url
     *
     * @return string
     */
    public function getAuthorsUrl()
    {
        return $this->container['authors_url'];
    }

    /**
     * Sets authors_url
     *
     * @param string $authors_url authors_url
     *
     * @return self
     */
    public function setAuthorsUrl($authors_url)
    {
        if (is_null($authors_url)) {
            throw new \InvalidArgumentException('non-nullable authors_url cannot be null');
        }
        $this->container['authors_url'] = $authors_url;

        return $this;
    }

    /**
     * Gets repository_url
     *
     * @return string
     */
    public function getRepositoryUrl()
    {
        return $this->container['repository_url'];
    }

    /**
     * Sets repository_url
     *
     * @param string $repository_url repository_url
     *
     * @return self
     */
    public function setRepositoryUrl($repository_url)
    {
        if (is_null($repository_url)) {
            throw new \InvalidArgumentException('non-nullable repository_url cannot be null');
        }
        $this->container['repository_url'] = $repository_url;

        return $this;
    }

    /**
     * Gets svn_root
     *
     * @return string|null
     */
    public function getSvnRoot()
    {
        return $this->container['svn_root'];
    }

    /**
     * Sets svn_root
     *
     * @param string|null $svn_root svn_root
     *
     * @return self
     */
    public function setSvnRoot($svn_root)
    {
        if (is_null($svn_root)) {
            throw new \InvalidArgumentException('non-nullable svn_root cannot be null');
        }
        $this->container['svn_root'] = $svn_root;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


