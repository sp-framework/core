<?php
/**
 * Installation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * Installation Class Doc Comment
 *
 * @category Class
 * @description Installation
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Installation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'installation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'account' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\InstallationAccount',
        'repository_selection' => 'string',
        'access_tokens_url' => 'string',
        'repositories_url' => 'string',
        'html_url' => 'string',
        'app_id' => 'int',
        'target_id' => 'int',
        'target_type' => 'string',
        'permissions' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\AppPermissions',
        'events' => 'string[]',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'single_file_name' => 'string',
        'has_multiple_single_files' => 'bool',
        'single_file_paths' => 'string[]',
        'app_slug' => 'string',
        'suspended_by' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableSimpleUser',
        'suspended_at' => '\DateTime',
        'contact_email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'account' => null,
        'repository_selection' => null,
        'access_tokens_url' => 'uri',
        'repositories_url' => 'uri',
        'html_url' => 'uri',
        'app_id' => null,
        'target_id' => null,
        'target_type' => null,
        'permissions' => null,
        'events' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'single_file_name' => null,
        'has_multiple_single_files' => null,
        'single_file_paths' => null,
        'app_slug' => null,
        'suspended_by' => null,
        'suspended_at' => 'date-time',
        'contact_email' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'account' => true,
        'repository_selection' => false,
        'access_tokens_url' => false,
        'repositories_url' => false,
        'html_url' => false,
        'app_id' => false,
        'target_id' => false,
        'target_type' => false,
        'permissions' => false,
        'events' => false,
        'created_at' => false,
        'updated_at' => false,
        'single_file_name' => true,
        'has_multiple_single_files' => false,
        'single_file_paths' => false,
        'app_slug' => false,
        'suspended_by' => true,
        'suspended_at' => true,
        'contact_email' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'account' => 'account',
        'repository_selection' => 'repository_selection',
        'access_tokens_url' => 'access_tokens_url',
        'repositories_url' => 'repositories_url',
        'html_url' => 'html_url',
        'app_id' => 'app_id',
        'target_id' => 'target_id',
        'target_type' => 'target_type',
        'permissions' => 'permissions',
        'events' => 'events',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'single_file_name' => 'single_file_name',
        'has_multiple_single_files' => 'has_multiple_single_files',
        'single_file_paths' => 'single_file_paths',
        'app_slug' => 'app_slug',
        'suspended_by' => 'suspended_by',
        'suspended_at' => 'suspended_at',
        'contact_email' => 'contact_email'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account' => 'setAccount',
        'repository_selection' => 'setRepositorySelection',
        'access_tokens_url' => 'setAccessTokensUrl',
        'repositories_url' => 'setRepositoriesUrl',
        'html_url' => 'setHtmlUrl',
        'app_id' => 'setAppId',
        'target_id' => 'setTargetId',
        'target_type' => 'setTargetType',
        'permissions' => 'setPermissions',
        'events' => 'setEvents',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'single_file_name' => 'setSingleFileName',
        'has_multiple_single_files' => 'setHasMultipleSingleFiles',
        'single_file_paths' => 'setSingleFilePaths',
        'app_slug' => 'setAppSlug',
        'suspended_by' => 'setSuspendedBy',
        'suspended_at' => 'setSuspendedAt',
        'contact_email' => 'setContactEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account' => 'getAccount',
        'repository_selection' => 'getRepositorySelection',
        'access_tokens_url' => 'getAccessTokensUrl',
        'repositories_url' => 'getRepositoriesUrl',
        'html_url' => 'getHtmlUrl',
        'app_id' => 'getAppId',
        'target_id' => 'getTargetId',
        'target_type' => 'getTargetType',
        'permissions' => 'getPermissions',
        'events' => 'getEvents',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'single_file_name' => 'getSingleFileName',
        'has_multiple_single_files' => 'getHasMultipleSingleFiles',
        'single_file_paths' => 'getSingleFilePaths',
        'app_slug' => 'getAppSlug',
        'suspended_by' => 'getSuspendedBy',
        'suspended_at' => 'getSuspendedAt',
        'contact_email' => 'getContactEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const REPOSITORY_SELECTION_ALL = 'all';
    public const REPOSITORY_SELECTION_SELECTED = 'selected';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRepositorySelectionAllowableValues()
    {
        return [
            self::REPOSITORY_SELECTION_ALL,
            self::REPOSITORY_SELECTION_SELECTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('repository_selection', $data ?? [], null);
        $this->setIfExists('access_tokens_url', $data ?? [], null);
        $this->setIfExists('repositories_url', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('app_id', $data ?? [], null);
        $this->setIfExists('target_id', $data ?? [], null);
        $this->setIfExists('target_type', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('events', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('single_file_name', $data ?? [], null);
        $this->setIfExists('has_multiple_single_files', $data ?? [], null);
        $this->setIfExists('single_file_paths', $data ?? [], null);
        $this->setIfExists('app_slug', $data ?? [], null);
        $this->setIfExists('suspended_by', $data ?? [], null);
        $this->setIfExists('suspended_at', $data ?? [], null);
        $this->setIfExists('contact_email', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        if ($this->container['repository_selection'] === null) {
            $invalidProperties[] = "'repository_selection' can't be null";
        }
        $allowedValues = $this->getRepositorySelectionAllowableValues();
        if (!is_null($this->container['repository_selection']) && !in_array($this->container['repository_selection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'repository_selection', must be one of '%s'",
                $this->container['repository_selection'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['access_tokens_url'] === null) {
            $invalidProperties[] = "'access_tokens_url' can't be null";
        }
        if ($this->container['repositories_url'] === null) {
            $invalidProperties[] = "'repositories_url' can't be null";
        }
        if ($this->container['html_url'] === null) {
            $invalidProperties[] = "'html_url' can't be null";
        }
        if ($this->container['app_id'] === null) {
            $invalidProperties[] = "'app_id' can't be null";
        }
        if ($this->container['target_id'] === null) {
            $invalidProperties[] = "'target_id' can't be null";
        }
        if ($this->container['target_type'] === null) {
            $invalidProperties[] = "'target_type' can't be null";
        }
        if ($this->container['permissions'] === null) {
            $invalidProperties[] = "'permissions' can't be null";
        }
        if ($this->container['events'] === null) {
            $invalidProperties[] = "'events' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['single_file_name'] === null) {
            $invalidProperties[] = "'single_file_name' can't be null";
        }
        if ($this->container['app_slug'] === null) {
            $invalidProperties[] = "'app_slug' can't be null";
        }
        if ($this->container['suspended_by'] === null) {
            $invalidProperties[] = "'suspended_by' can't be null";
        }
        if ($this->container['suspended_at'] === null) {
            $invalidProperties[] = "'suspended_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the installation.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\InstallationAccount
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\InstallationAccount $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            array_push($this->openAPINullablesSetToNull, 'account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets repository_selection
     *
     * @return string
     */
    public function getRepositorySelection()
    {
        return $this->container['repository_selection'];
    }

    /**
     * Sets repository_selection
     *
     * @param string $repository_selection Describe whether all repositories have been selected or there's a selection involved
     *
     * @return self
     */
    public function setRepositorySelection($repository_selection)
    {
        if (is_null($repository_selection)) {
            throw new \InvalidArgumentException('non-nullable repository_selection cannot be null');
        }
        $allowedValues = $this->getRepositorySelectionAllowableValues();
        if (!in_array($repository_selection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'repository_selection', must be one of '%s'",
                    $repository_selection,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['repository_selection'] = $repository_selection;

        return $this;
    }

    /**
     * Gets access_tokens_url
     *
     * @return string
     */
    public function getAccessTokensUrl()
    {
        return $this->container['access_tokens_url'];
    }

    /**
     * Sets access_tokens_url
     *
     * @param string $access_tokens_url access_tokens_url
     *
     * @return self
     */
    public function setAccessTokensUrl($access_tokens_url)
    {
        if (is_null($access_tokens_url)) {
            throw new \InvalidArgumentException('non-nullable access_tokens_url cannot be null');
        }
        $this->container['access_tokens_url'] = $access_tokens_url;

        return $this;
    }

    /**
     * Gets repositories_url
     *
     * @return string
     */
    public function getRepositoriesUrl()
    {
        return $this->container['repositories_url'];
    }

    /**
     * Sets repositories_url
     *
     * @param string $repositories_url repositories_url
     *
     * @return self
     */
    public function setRepositoriesUrl($repositories_url)
    {
        if (is_null($repositories_url)) {
            throw new \InvalidArgumentException('non-nullable repositories_url cannot be null');
        }
        $this->container['repositories_url'] = $repositories_url;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param int $app_id app_id
     *
     * @return self
     */
    public function setAppId($app_id)
    {
        if (is_null($app_id)) {
            throw new \InvalidArgumentException('non-nullable app_id cannot be null');
        }
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets target_id
     *
     * @return int
     */
    public function getTargetId()
    {
        return $this->container['target_id'];
    }

    /**
     * Sets target_id
     *
     * @param int $target_id The ID of the user or organization this token is being scoped to.
     *
     * @return self
     */
    public function setTargetId($target_id)
    {
        if (is_null($target_id)) {
            throw new \InvalidArgumentException('non-nullable target_id cannot be null');
        }
        $this->container['target_id'] = $target_id;

        return $this;
    }

    /**
     * Gets target_type
     *
     * @return string
     */
    public function getTargetType()
    {
        return $this->container['target_type'];
    }

    /**
     * Sets target_type
     *
     * @param string $target_type target_type
     *
     * @return self
     */
    public function setTargetType($target_type)
    {
        if (is_null($target_type)) {
            throw new \InvalidArgumentException('non-nullable target_type cannot be null');
        }
        $this->container['target_type'] = $target_type;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\AppPermissions
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\AppPermissions $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        if (is_null($permissions)) {
            throw new \InvalidArgumentException('non-nullable permissions cannot be null');
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets events
     *
     * @return string[]
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param string[] $events events
     *
     * @return self
     */
    public function setEvents($events)
    {
        if (is_null($events)) {
            throw new \InvalidArgumentException('non-nullable events cannot be null');
        }
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets single_file_name
     *
     * @return string
     */
    public function getSingleFileName()
    {
        return $this->container['single_file_name'];
    }

    /**
     * Sets single_file_name
     *
     * @param string $single_file_name single_file_name
     *
     * @return self
     */
    public function setSingleFileName($single_file_name)
    {
        if (is_null($single_file_name)) {
            array_push($this->openAPINullablesSetToNull, 'single_file_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('single_file_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['single_file_name'] = $single_file_name;

        return $this;
    }

    /**
     * Gets has_multiple_single_files
     *
     * @return bool|null
     */
    public function getHasMultipleSingleFiles()
    {
        return $this->container['has_multiple_single_files'];
    }

    /**
     * Sets has_multiple_single_files
     *
     * @param bool|null $has_multiple_single_files has_multiple_single_files
     *
     * @return self
     */
    public function setHasMultipleSingleFiles($has_multiple_single_files)
    {
        if (is_null($has_multiple_single_files)) {
            throw new \InvalidArgumentException('non-nullable has_multiple_single_files cannot be null');
        }
        $this->container['has_multiple_single_files'] = $has_multiple_single_files;

        return $this;
    }

    /**
     * Gets single_file_paths
     *
     * @return string[]|null
     */
    public function getSingleFilePaths()
    {
        return $this->container['single_file_paths'];
    }

    /**
     * Sets single_file_paths
     *
     * @param string[]|null $single_file_paths single_file_paths
     *
     * @return self
     */
    public function setSingleFilePaths($single_file_paths)
    {
        if (is_null($single_file_paths)) {
            throw new \InvalidArgumentException('non-nullable single_file_paths cannot be null');
        }
        $this->container['single_file_paths'] = $single_file_paths;

        return $this;
    }

    /**
     * Gets app_slug
     *
     * @return string
     */
    public function getAppSlug()
    {
        return $this->container['app_slug'];
    }

    /**
     * Sets app_slug
     *
     * @param string $app_slug app_slug
     *
     * @return self
     */
    public function setAppSlug($app_slug)
    {
        if (is_null($app_slug)) {
            throw new \InvalidArgumentException('non-nullable app_slug cannot be null');
        }
        $this->container['app_slug'] = $app_slug;

        return $this;
    }

    /**
     * Gets suspended_by
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableSimpleUser
     */
    public function getSuspendedBy()
    {
        return $this->container['suspended_by'];
    }

    /**
     * Sets suspended_by
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableSimpleUser $suspended_by suspended_by
     *
     * @return self
     */
    public function setSuspendedBy($suspended_by)
    {
        if (is_null($suspended_by)) {
            array_push($this->openAPINullablesSetToNull, 'suspended_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suspended_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suspended_by'] = $suspended_by;

        return $this;
    }

    /**
     * Gets suspended_at
     *
     * @return \DateTime
     */
    public function getSuspendedAt()
    {
        return $this->container['suspended_at'];
    }

    /**
     * Sets suspended_at
     *
     * @param \DateTime $suspended_at suspended_at
     *
     * @return self
     */
    public function setSuspendedAt($suspended_at)
    {
        if (is_null($suspended_at)) {
            array_push($this->openAPINullablesSetToNull, 'suspended_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suspended_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suspended_at'] = $suspended_at;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string|null
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string|null $contact_email contact_email
     *
     * @return self
     */
    public function setContactEmail($contact_email)
    {
        if (is_null($contact_email)) {
            array_push($this->openAPINullablesSetToNull, 'contact_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contact_email'] = $contact_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


