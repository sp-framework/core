<?php
/**
 * Migration
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * Migration Class Doc Comment
 *
 * @category Class
 * @description A migration.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Migration implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'migration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'owner' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableSimpleUser',
        'guid' => 'string',
        'state' => 'string',
        'lock_repositories' => 'bool',
        'exclude_metadata' => 'bool',
        'exclude_git_data' => 'bool',
        'exclude_attachments' => 'bool',
        'exclude_releases' => 'bool',
        'exclude_owner_projects' => 'bool',
        'org_metadata_only' => 'bool',
        'repositories' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Repository[]',
        'url' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'node_id' => 'string',
        'archive_url' => 'string',
        'exclude' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'owner' => null,
        'guid' => null,
        'state' => null,
        'lock_repositories' => null,
        'exclude_metadata' => null,
        'exclude_git_data' => null,
        'exclude_attachments' => null,
        'exclude_releases' => null,
        'exclude_owner_projects' => null,
        'org_metadata_only' => null,
        'repositories' => null,
        'url' => 'uri',
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'node_id' => null,
        'archive_url' => 'uri',
        'exclude' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'owner' => true,
        'guid' => false,
        'state' => false,
        'lock_repositories' => false,
        'exclude_metadata' => false,
        'exclude_git_data' => false,
        'exclude_attachments' => false,
        'exclude_releases' => false,
        'exclude_owner_projects' => false,
        'org_metadata_only' => false,
        'repositories' => false,
        'url' => false,
        'created_at' => false,
        'updated_at' => false,
        'node_id' => false,
        'archive_url' => false,
        'exclude' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'owner' => 'owner',
        'guid' => 'guid',
        'state' => 'state',
        'lock_repositories' => 'lock_repositories',
        'exclude_metadata' => 'exclude_metadata',
        'exclude_git_data' => 'exclude_git_data',
        'exclude_attachments' => 'exclude_attachments',
        'exclude_releases' => 'exclude_releases',
        'exclude_owner_projects' => 'exclude_owner_projects',
        'org_metadata_only' => 'org_metadata_only',
        'repositories' => 'repositories',
        'url' => 'url',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'node_id' => 'node_id',
        'archive_url' => 'archive_url',
        'exclude' => 'exclude'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'owner' => 'setOwner',
        'guid' => 'setGuid',
        'state' => 'setState',
        'lock_repositories' => 'setLockRepositories',
        'exclude_metadata' => 'setExcludeMetadata',
        'exclude_git_data' => 'setExcludeGitData',
        'exclude_attachments' => 'setExcludeAttachments',
        'exclude_releases' => 'setExcludeReleases',
        'exclude_owner_projects' => 'setExcludeOwnerProjects',
        'org_metadata_only' => 'setOrgMetadataOnly',
        'repositories' => 'setRepositories',
        'url' => 'setUrl',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'node_id' => 'setNodeId',
        'archive_url' => 'setArchiveUrl',
        'exclude' => 'setExclude'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'owner' => 'getOwner',
        'guid' => 'getGuid',
        'state' => 'getState',
        'lock_repositories' => 'getLockRepositories',
        'exclude_metadata' => 'getExcludeMetadata',
        'exclude_git_data' => 'getExcludeGitData',
        'exclude_attachments' => 'getExcludeAttachments',
        'exclude_releases' => 'getExcludeReleases',
        'exclude_owner_projects' => 'getExcludeOwnerProjects',
        'org_metadata_only' => 'getOrgMetadataOnly',
        'repositories' => 'getRepositories',
        'url' => 'getUrl',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'node_id' => 'getNodeId',
        'archive_url' => 'getArchiveUrl',
        'exclude' => 'getExclude'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('guid', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('lock_repositories', $data ?? [], null);
        $this->setIfExists('exclude_metadata', $data ?? [], null);
        $this->setIfExists('exclude_git_data', $data ?? [], null);
        $this->setIfExists('exclude_attachments', $data ?? [], null);
        $this->setIfExists('exclude_releases', $data ?? [], null);
        $this->setIfExists('exclude_owner_projects', $data ?? [], null);
        $this->setIfExists('org_metadata_only', $data ?? [], null);
        $this->setIfExists('repositories', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('archive_url', $data ?? [], null);
        $this->setIfExists('exclude', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalidProperties[] = "'owner' can't be null";
        }
        if ($this->container['guid'] === null) {
            $invalidProperties[] = "'guid' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['lock_repositories'] === null) {
            $invalidProperties[] = "'lock_repositories' can't be null";
        }
        if ($this->container['exclude_metadata'] === null) {
            $invalidProperties[] = "'exclude_metadata' can't be null";
        }
        if ($this->container['exclude_git_data'] === null) {
            $invalidProperties[] = "'exclude_git_data' can't be null";
        }
        if ($this->container['exclude_attachments'] === null) {
            $invalidProperties[] = "'exclude_attachments' can't be null";
        }
        if ($this->container['exclude_releases'] === null) {
            $invalidProperties[] = "'exclude_releases' can't be null";
        }
        if ($this->container['exclude_owner_projects'] === null) {
            $invalidProperties[] = "'exclude_owner_projects' can't be null";
        }
        if ($this->container['org_metadata_only'] === null) {
            $invalidProperties[] = "'org_metadata_only' can't be null";
        }
        if ($this->container['repositories'] === null) {
            $invalidProperties[] = "'repositories' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['node_id'] === null) {
            $invalidProperties[] = "'node_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableSimpleUser
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\NullableSimpleUser $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            array_push($this->openAPINullablesSetToNull, 'owner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('owner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string $guid guid
     *
     * @return self
     */
    public function setGuid($guid)
    {
        if (is_null($guid)) {
            throw new \InvalidArgumentException('non-nullable guid cannot be null');
        }
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets lock_repositories
     *
     * @return bool
     */
    public function getLockRepositories()
    {
        return $this->container['lock_repositories'];
    }

    /**
     * Sets lock_repositories
     *
     * @param bool $lock_repositories lock_repositories
     *
     * @return self
     */
    public function setLockRepositories($lock_repositories)
    {
        if (is_null($lock_repositories)) {
            throw new \InvalidArgumentException('non-nullable lock_repositories cannot be null');
        }
        $this->container['lock_repositories'] = $lock_repositories;

        return $this;
    }

    /**
     * Gets exclude_metadata
     *
     * @return bool
     */
    public function getExcludeMetadata()
    {
        return $this->container['exclude_metadata'];
    }

    /**
     * Sets exclude_metadata
     *
     * @param bool $exclude_metadata exclude_metadata
     *
     * @return self
     */
    public function setExcludeMetadata($exclude_metadata)
    {
        if (is_null($exclude_metadata)) {
            throw new \InvalidArgumentException('non-nullable exclude_metadata cannot be null');
        }
        $this->container['exclude_metadata'] = $exclude_metadata;

        return $this;
    }

    /**
     * Gets exclude_git_data
     *
     * @return bool
     */
    public function getExcludeGitData()
    {
        return $this->container['exclude_git_data'];
    }

    /**
     * Sets exclude_git_data
     *
     * @param bool $exclude_git_data exclude_git_data
     *
     * @return self
     */
    public function setExcludeGitData($exclude_git_data)
    {
        if (is_null($exclude_git_data)) {
            throw new \InvalidArgumentException('non-nullable exclude_git_data cannot be null');
        }
        $this->container['exclude_git_data'] = $exclude_git_data;

        return $this;
    }

    /**
     * Gets exclude_attachments
     *
     * @return bool
     */
    public function getExcludeAttachments()
    {
        return $this->container['exclude_attachments'];
    }

    /**
     * Sets exclude_attachments
     *
     * @param bool $exclude_attachments exclude_attachments
     *
     * @return self
     */
    public function setExcludeAttachments($exclude_attachments)
    {
        if (is_null($exclude_attachments)) {
            throw new \InvalidArgumentException('non-nullable exclude_attachments cannot be null');
        }
        $this->container['exclude_attachments'] = $exclude_attachments;

        return $this;
    }

    /**
     * Gets exclude_releases
     *
     * @return bool
     */
    public function getExcludeReleases()
    {
        return $this->container['exclude_releases'];
    }

    /**
     * Sets exclude_releases
     *
     * @param bool $exclude_releases exclude_releases
     *
     * @return self
     */
    public function setExcludeReleases($exclude_releases)
    {
        if (is_null($exclude_releases)) {
            throw new \InvalidArgumentException('non-nullable exclude_releases cannot be null');
        }
        $this->container['exclude_releases'] = $exclude_releases;

        return $this;
    }

    /**
     * Gets exclude_owner_projects
     *
     * @return bool
     */
    public function getExcludeOwnerProjects()
    {
        return $this->container['exclude_owner_projects'];
    }

    /**
     * Sets exclude_owner_projects
     *
     * @param bool $exclude_owner_projects exclude_owner_projects
     *
     * @return self
     */
    public function setExcludeOwnerProjects($exclude_owner_projects)
    {
        if (is_null($exclude_owner_projects)) {
            throw new \InvalidArgumentException('non-nullable exclude_owner_projects cannot be null');
        }
        $this->container['exclude_owner_projects'] = $exclude_owner_projects;

        return $this;
    }

    /**
     * Gets org_metadata_only
     *
     * @return bool
     */
    public function getOrgMetadataOnly()
    {
        return $this->container['org_metadata_only'];
    }

    /**
     * Sets org_metadata_only
     *
     * @param bool $org_metadata_only org_metadata_only
     *
     * @return self
     */
    public function setOrgMetadataOnly($org_metadata_only)
    {
        if (is_null($org_metadata_only)) {
            throw new \InvalidArgumentException('non-nullable org_metadata_only cannot be null');
        }
        $this->container['org_metadata_only'] = $org_metadata_only;

        return $this;
    }

    /**
     * Gets repositories
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Repository[]
     */
    public function getRepositories()
    {
        return $this->container['repositories'];
    }

    /**
     * Sets repositories
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Repository[] $repositories The repositories included in the migration. Only returned for export migrations.
     *
     * @return self
     */
    public function setRepositories($repositories)
    {
        if (is_null($repositories)) {
            throw new \InvalidArgumentException('non-nullable repositories cannot be null');
        }
        $this->container['repositories'] = $repositories;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets archive_url
     *
     * @return string|null
     */
    public function getArchiveUrl()
    {
        return $this->container['archive_url'];
    }

    /**
     * Sets archive_url
     *
     * @param string|null $archive_url archive_url
     *
     * @return self
     */
    public function setArchiveUrl($archive_url)
    {
        if (is_null($archive_url)) {
            throw new \InvalidArgumentException('non-nullable archive_url cannot be null');
        }
        $this->container['archive_url'] = $archive_url;

        return $this;
    }

    /**
     * Gets exclude
     *
     * @return string[]|null
     */
    public function getExclude()
    {
        return $this->container['exclude'];
    }

    /**
     * Sets exclude
     *
     * @param string[]|null $exclude Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `\"repositories\"`.
     *
     * @return self
     */
    public function setExclude($exclude)
    {
        if (is_null($exclude)) {
            throw new \InvalidArgumentException('non-nullable exclude cannot be null');
        }
        $this->container['exclude'] = $exclude;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


