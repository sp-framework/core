<?php
/**
 * OrganizationFull
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * OrganizationFull Class Doc Comment
 *
 * @category Class
 * @description Organization Full
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrganizationFull implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'organization-full';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'login' => 'string',
        'id' => 'int',
        'node_id' => 'string',
        'url' => 'string',
        'repos_url' => 'string',
        'events_url' => 'string',
        'hooks_url' => 'string',
        'issues_url' => 'string',
        'members_url' => 'string',
        'public_members_url' => 'string',
        'avatar_url' => 'string',
        'description' => 'string',
        'name' => 'string',
        'company' => 'string',
        'blog' => 'string',
        'location' => 'string',
        'email' => 'string',
        'twitter_username' => 'string',
        'is_verified' => 'bool',
        'has_organization_projects' => 'bool',
        'has_repository_projects' => 'bool',
        'public_repos' => 'int',
        'public_gists' => 'int',
        'followers' => 'int',
        'following' => 'int',
        'html_url' => 'string',
        'type' => 'string',
        'total_private_repos' => 'int',
        'owned_private_repos' => 'int',
        'private_gists' => 'int',
        'disk_usage' => 'int',
        'collaborators' => 'int',
        'billing_email' => 'string',
        'plan' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\OrganizationFullPlan',
        'default_repository_permission' => 'string',
        'members_can_create_repositories' => 'bool',
        'two_factor_requirement_enabled' => 'bool',
        'members_allowed_repository_creation_type' => 'string',
        'members_can_create_public_repositories' => 'bool',
        'members_can_create_private_repositories' => 'bool',
        'members_can_create_internal_repositories' => 'bool',
        'members_can_create_pages' => 'bool',
        'members_can_create_public_pages' => 'bool',
        'members_can_create_private_pages' => 'bool',
        'members_can_fork_private_repositories' => 'bool',
        'web_commit_signoff_required' => 'bool',
        'advanced_security_enabled_for_new_repositories' => 'bool',
        'dependabot_alerts_enabled_for_new_repositories' => 'bool',
        'dependabot_security_updates_enabled_for_new_repositories' => 'bool',
        'dependency_graph_enabled_for_new_repositories' => 'bool',
        'secret_scanning_enabled_for_new_repositories' => 'bool',
        'secret_scanning_push_protection_enabled_for_new_repositories' => 'bool',
        'secret_scanning_push_protection_custom_link_enabled' => 'bool',
        'secret_scanning_push_protection_custom_link' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'archived_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'login' => null,
        'id' => null,
        'node_id' => null,
        'url' => 'uri',
        'repos_url' => 'uri',
        'events_url' => 'uri',
        'hooks_url' => null,
        'issues_url' => null,
        'members_url' => null,
        'public_members_url' => null,
        'avatar_url' => null,
        'description' => null,
        'name' => null,
        'company' => null,
        'blog' => 'uri',
        'location' => null,
        'email' => 'email',
        'twitter_username' => null,
        'is_verified' => null,
        'has_organization_projects' => null,
        'has_repository_projects' => null,
        'public_repos' => null,
        'public_gists' => null,
        'followers' => null,
        'following' => null,
        'html_url' => 'uri',
        'type' => null,
        'total_private_repos' => null,
        'owned_private_repos' => null,
        'private_gists' => null,
        'disk_usage' => null,
        'collaborators' => null,
        'billing_email' => 'email',
        'plan' => null,
        'default_repository_permission' => null,
        'members_can_create_repositories' => null,
        'two_factor_requirement_enabled' => null,
        'members_allowed_repository_creation_type' => null,
        'members_can_create_public_repositories' => null,
        'members_can_create_private_repositories' => null,
        'members_can_create_internal_repositories' => null,
        'members_can_create_pages' => null,
        'members_can_create_public_pages' => null,
        'members_can_create_private_pages' => null,
        'members_can_fork_private_repositories' => null,
        'web_commit_signoff_required' => null,
        'advanced_security_enabled_for_new_repositories' => null,
        'dependabot_alerts_enabled_for_new_repositories' => null,
        'dependabot_security_updates_enabled_for_new_repositories' => null,
        'dependency_graph_enabled_for_new_repositories' => null,
        'secret_scanning_enabled_for_new_repositories' => null,
        'secret_scanning_push_protection_enabled_for_new_repositories' => null,
        'secret_scanning_push_protection_custom_link_enabled' => null,
        'secret_scanning_push_protection_custom_link' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'archived_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'login' => false,
        'id' => false,
        'node_id' => false,
        'url' => false,
        'repos_url' => false,
        'events_url' => false,
        'hooks_url' => false,
        'issues_url' => false,
        'members_url' => false,
        'public_members_url' => false,
        'avatar_url' => false,
        'description' => true,
        'name' => false,
        'company' => false,
        'blog' => false,
        'location' => false,
        'email' => false,
        'twitter_username' => true,
        'is_verified' => false,
        'has_organization_projects' => false,
        'has_repository_projects' => false,
        'public_repos' => false,
        'public_gists' => false,
        'followers' => false,
        'following' => false,
        'html_url' => false,
        'type' => false,
        'total_private_repos' => false,
        'owned_private_repos' => false,
        'private_gists' => true,
        'disk_usage' => true,
        'collaborators' => true,
        'billing_email' => true,
        'plan' => false,
        'default_repository_permission' => true,
        'members_can_create_repositories' => true,
        'two_factor_requirement_enabled' => true,
        'members_allowed_repository_creation_type' => false,
        'members_can_create_public_repositories' => false,
        'members_can_create_private_repositories' => false,
        'members_can_create_internal_repositories' => false,
        'members_can_create_pages' => false,
        'members_can_create_public_pages' => false,
        'members_can_create_private_pages' => false,
        'members_can_fork_private_repositories' => true,
        'web_commit_signoff_required' => false,
        'advanced_security_enabled_for_new_repositories' => false,
        'dependabot_alerts_enabled_for_new_repositories' => false,
        'dependabot_security_updates_enabled_for_new_repositories' => false,
        'dependency_graph_enabled_for_new_repositories' => false,
        'secret_scanning_enabled_for_new_repositories' => false,
        'secret_scanning_push_protection_enabled_for_new_repositories' => false,
        'secret_scanning_push_protection_custom_link_enabled' => false,
        'secret_scanning_push_protection_custom_link' => true,
        'created_at' => false,
        'updated_at' => false,
        'archived_at' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'login' => 'login',
        'id' => 'id',
        'node_id' => 'node_id',
        'url' => 'url',
        'repos_url' => 'repos_url',
        'events_url' => 'events_url',
        'hooks_url' => 'hooks_url',
        'issues_url' => 'issues_url',
        'members_url' => 'members_url',
        'public_members_url' => 'public_members_url',
        'avatar_url' => 'avatar_url',
        'description' => 'description',
        'name' => 'name',
        'company' => 'company',
        'blog' => 'blog',
        'location' => 'location',
        'email' => 'email',
        'twitter_username' => 'twitter_username',
        'is_verified' => 'is_verified',
        'has_organization_projects' => 'has_organization_projects',
        'has_repository_projects' => 'has_repository_projects',
        'public_repos' => 'public_repos',
        'public_gists' => 'public_gists',
        'followers' => 'followers',
        'following' => 'following',
        'html_url' => 'html_url',
        'type' => 'type',
        'total_private_repos' => 'total_private_repos',
        'owned_private_repos' => 'owned_private_repos',
        'private_gists' => 'private_gists',
        'disk_usage' => 'disk_usage',
        'collaborators' => 'collaborators',
        'billing_email' => 'billing_email',
        'plan' => 'plan',
        'default_repository_permission' => 'default_repository_permission',
        'members_can_create_repositories' => 'members_can_create_repositories',
        'two_factor_requirement_enabled' => 'two_factor_requirement_enabled',
        'members_allowed_repository_creation_type' => 'members_allowed_repository_creation_type',
        'members_can_create_public_repositories' => 'members_can_create_public_repositories',
        'members_can_create_private_repositories' => 'members_can_create_private_repositories',
        'members_can_create_internal_repositories' => 'members_can_create_internal_repositories',
        'members_can_create_pages' => 'members_can_create_pages',
        'members_can_create_public_pages' => 'members_can_create_public_pages',
        'members_can_create_private_pages' => 'members_can_create_private_pages',
        'members_can_fork_private_repositories' => 'members_can_fork_private_repositories',
        'web_commit_signoff_required' => 'web_commit_signoff_required',
        'advanced_security_enabled_for_new_repositories' => 'advanced_security_enabled_for_new_repositories',
        'dependabot_alerts_enabled_for_new_repositories' => 'dependabot_alerts_enabled_for_new_repositories',
        'dependabot_security_updates_enabled_for_new_repositories' => 'dependabot_security_updates_enabled_for_new_repositories',
        'dependency_graph_enabled_for_new_repositories' => 'dependency_graph_enabled_for_new_repositories',
        'secret_scanning_enabled_for_new_repositories' => 'secret_scanning_enabled_for_new_repositories',
        'secret_scanning_push_protection_enabled_for_new_repositories' => 'secret_scanning_push_protection_enabled_for_new_repositories',
        'secret_scanning_push_protection_custom_link_enabled' => 'secret_scanning_push_protection_custom_link_enabled',
        'secret_scanning_push_protection_custom_link' => 'secret_scanning_push_protection_custom_link',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'archived_at' => 'archived_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'login' => 'setLogin',
        'id' => 'setId',
        'node_id' => 'setNodeId',
        'url' => 'setUrl',
        'repos_url' => 'setReposUrl',
        'events_url' => 'setEventsUrl',
        'hooks_url' => 'setHooksUrl',
        'issues_url' => 'setIssuesUrl',
        'members_url' => 'setMembersUrl',
        'public_members_url' => 'setPublicMembersUrl',
        'avatar_url' => 'setAvatarUrl',
        'description' => 'setDescription',
        'name' => 'setName',
        'company' => 'setCompany',
        'blog' => 'setBlog',
        'location' => 'setLocation',
        'email' => 'setEmail',
        'twitter_username' => 'setTwitterUsername',
        'is_verified' => 'setIsVerified',
        'has_organization_projects' => 'setHasOrganizationProjects',
        'has_repository_projects' => 'setHasRepositoryProjects',
        'public_repos' => 'setPublicRepos',
        'public_gists' => 'setPublicGists',
        'followers' => 'setFollowers',
        'following' => 'setFollowing',
        'html_url' => 'setHtmlUrl',
        'type' => 'setType',
        'total_private_repos' => 'setTotalPrivateRepos',
        'owned_private_repos' => 'setOwnedPrivateRepos',
        'private_gists' => 'setPrivateGists',
        'disk_usage' => 'setDiskUsage',
        'collaborators' => 'setCollaborators',
        'billing_email' => 'setBillingEmail',
        'plan' => 'setPlan',
        'default_repository_permission' => 'setDefaultRepositoryPermission',
        'members_can_create_repositories' => 'setMembersCanCreateRepositories',
        'two_factor_requirement_enabled' => 'setTwoFactorRequirementEnabled',
        'members_allowed_repository_creation_type' => 'setMembersAllowedRepositoryCreationType',
        'members_can_create_public_repositories' => 'setMembersCanCreatePublicRepositories',
        'members_can_create_private_repositories' => 'setMembersCanCreatePrivateRepositories',
        'members_can_create_internal_repositories' => 'setMembersCanCreateInternalRepositories',
        'members_can_create_pages' => 'setMembersCanCreatePages',
        'members_can_create_public_pages' => 'setMembersCanCreatePublicPages',
        'members_can_create_private_pages' => 'setMembersCanCreatePrivatePages',
        'members_can_fork_private_repositories' => 'setMembersCanForkPrivateRepositories',
        'web_commit_signoff_required' => 'setWebCommitSignoffRequired',
        'advanced_security_enabled_for_new_repositories' => 'setAdvancedSecurityEnabledForNewRepositories',
        'dependabot_alerts_enabled_for_new_repositories' => 'setDependabotAlertsEnabledForNewRepositories',
        'dependabot_security_updates_enabled_for_new_repositories' => 'setDependabotSecurityUpdatesEnabledForNewRepositories',
        'dependency_graph_enabled_for_new_repositories' => 'setDependencyGraphEnabledForNewRepositories',
        'secret_scanning_enabled_for_new_repositories' => 'setSecretScanningEnabledForNewRepositories',
        'secret_scanning_push_protection_enabled_for_new_repositories' => 'setSecretScanningPushProtectionEnabledForNewRepositories',
        'secret_scanning_push_protection_custom_link_enabled' => 'setSecretScanningPushProtectionCustomLinkEnabled',
        'secret_scanning_push_protection_custom_link' => 'setSecretScanningPushProtectionCustomLink',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'archived_at' => 'setArchivedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'login' => 'getLogin',
        'id' => 'getId',
        'node_id' => 'getNodeId',
        'url' => 'getUrl',
        'repos_url' => 'getReposUrl',
        'events_url' => 'getEventsUrl',
        'hooks_url' => 'getHooksUrl',
        'issues_url' => 'getIssuesUrl',
        'members_url' => 'getMembersUrl',
        'public_members_url' => 'getPublicMembersUrl',
        'avatar_url' => 'getAvatarUrl',
        'description' => 'getDescription',
        'name' => 'getName',
        'company' => 'getCompany',
        'blog' => 'getBlog',
        'location' => 'getLocation',
        'email' => 'getEmail',
        'twitter_username' => 'getTwitterUsername',
        'is_verified' => 'getIsVerified',
        'has_organization_projects' => 'getHasOrganizationProjects',
        'has_repository_projects' => 'getHasRepositoryProjects',
        'public_repos' => 'getPublicRepos',
        'public_gists' => 'getPublicGists',
        'followers' => 'getFollowers',
        'following' => 'getFollowing',
        'html_url' => 'getHtmlUrl',
        'type' => 'getType',
        'total_private_repos' => 'getTotalPrivateRepos',
        'owned_private_repos' => 'getOwnedPrivateRepos',
        'private_gists' => 'getPrivateGists',
        'disk_usage' => 'getDiskUsage',
        'collaborators' => 'getCollaborators',
        'billing_email' => 'getBillingEmail',
        'plan' => 'getPlan',
        'default_repository_permission' => 'getDefaultRepositoryPermission',
        'members_can_create_repositories' => 'getMembersCanCreateRepositories',
        'two_factor_requirement_enabled' => 'getTwoFactorRequirementEnabled',
        'members_allowed_repository_creation_type' => 'getMembersAllowedRepositoryCreationType',
        'members_can_create_public_repositories' => 'getMembersCanCreatePublicRepositories',
        'members_can_create_private_repositories' => 'getMembersCanCreatePrivateRepositories',
        'members_can_create_internal_repositories' => 'getMembersCanCreateInternalRepositories',
        'members_can_create_pages' => 'getMembersCanCreatePages',
        'members_can_create_public_pages' => 'getMembersCanCreatePublicPages',
        'members_can_create_private_pages' => 'getMembersCanCreatePrivatePages',
        'members_can_fork_private_repositories' => 'getMembersCanForkPrivateRepositories',
        'web_commit_signoff_required' => 'getWebCommitSignoffRequired',
        'advanced_security_enabled_for_new_repositories' => 'getAdvancedSecurityEnabledForNewRepositories',
        'dependabot_alerts_enabled_for_new_repositories' => 'getDependabotAlertsEnabledForNewRepositories',
        'dependabot_security_updates_enabled_for_new_repositories' => 'getDependabotSecurityUpdatesEnabledForNewRepositories',
        'dependency_graph_enabled_for_new_repositories' => 'getDependencyGraphEnabledForNewRepositories',
        'secret_scanning_enabled_for_new_repositories' => 'getSecretScanningEnabledForNewRepositories',
        'secret_scanning_push_protection_enabled_for_new_repositories' => 'getSecretScanningPushProtectionEnabledForNewRepositories',
        'secret_scanning_push_protection_custom_link_enabled' => 'getSecretScanningPushProtectionCustomLinkEnabled',
        'secret_scanning_push_protection_custom_link' => 'getSecretScanningPushProtectionCustomLink',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'archived_at' => 'getArchivedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('login', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('repos_url', $data ?? [], null);
        $this->setIfExists('events_url', $data ?? [], null);
        $this->setIfExists('hooks_url', $data ?? [], null);
        $this->setIfExists('issues_url', $data ?? [], null);
        $this->setIfExists('members_url', $data ?? [], null);
        $this->setIfExists('public_members_url', $data ?? [], null);
        $this->setIfExists('avatar_url', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('blog', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('twitter_username', $data ?? [], null);
        $this->setIfExists('is_verified', $data ?? [], null);
        $this->setIfExists('has_organization_projects', $data ?? [], null);
        $this->setIfExists('has_repository_projects', $data ?? [], null);
        $this->setIfExists('public_repos', $data ?? [], null);
        $this->setIfExists('public_gists', $data ?? [], null);
        $this->setIfExists('followers', $data ?? [], null);
        $this->setIfExists('following', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('total_private_repos', $data ?? [], null);
        $this->setIfExists('owned_private_repos', $data ?? [], null);
        $this->setIfExists('private_gists', $data ?? [], null);
        $this->setIfExists('disk_usage', $data ?? [], null);
        $this->setIfExists('collaborators', $data ?? [], null);
        $this->setIfExists('billing_email', $data ?? [], null);
        $this->setIfExists('plan', $data ?? [], null);
        $this->setIfExists('default_repository_permission', $data ?? [], null);
        $this->setIfExists('members_can_create_repositories', $data ?? [], null);
        $this->setIfExists('two_factor_requirement_enabled', $data ?? [], null);
        $this->setIfExists('members_allowed_repository_creation_type', $data ?? [], null);
        $this->setIfExists('members_can_create_public_repositories', $data ?? [], null);
        $this->setIfExists('members_can_create_private_repositories', $data ?? [], null);
        $this->setIfExists('members_can_create_internal_repositories', $data ?? [], null);
        $this->setIfExists('members_can_create_pages', $data ?? [], null);
        $this->setIfExists('members_can_create_public_pages', $data ?? [], null);
        $this->setIfExists('members_can_create_private_pages', $data ?? [], null);
        $this->setIfExists('members_can_fork_private_repositories', $data ?? [], null);
        $this->setIfExists('web_commit_signoff_required', $data ?? [], null);
        $this->setIfExists('advanced_security_enabled_for_new_repositories', $data ?? [], null);
        $this->setIfExists('dependabot_alerts_enabled_for_new_repositories', $data ?? [], null);
        $this->setIfExists('dependabot_security_updates_enabled_for_new_repositories', $data ?? [], null);
        $this->setIfExists('dependency_graph_enabled_for_new_repositories', $data ?? [], null);
        $this->setIfExists('secret_scanning_enabled_for_new_repositories', $data ?? [], null);
        $this->setIfExists('secret_scanning_push_protection_enabled_for_new_repositories', $data ?? [], null);
        $this->setIfExists('secret_scanning_push_protection_custom_link_enabled', $data ?? [], null);
        $this->setIfExists('secret_scanning_push_protection_custom_link', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('archived_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['login'] === null) {
            $invalidProperties[] = "'login' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['node_id'] === null) {
            $invalidProperties[] = "'node_id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['repos_url'] === null) {
            $invalidProperties[] = "'repos_url' can't be null";
        }
        if ($this->container['events_url'] === null) {
            $invalidProperties[] = "'events_url' can't be null";
        }
        if ($this->container['hooks_url'] === null) {
            $invalidProperties[] = "'hooks_url' can't be null";
        }
        if ($this->container['issues_url'] === null) {
            $invalidProperties[] = "'issues_url' can't be null";
        }
        if ($this->container['members_url'] === null) {
            $invalidProperties[] = "'members_url' can't be null";
        }
        if ($this->container['public_members_url'] === null) {
            $invalidProperties[] = "'public_members_url' can't be null";
        }
        if ($this->container['avatar_url'] === null) {
            $invalidProperties[] = "'avatar_url' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['has_organization_projects'] === null) {
            $invalidProperties[] = "'has_organization_projects' can't be null";
        }
        if ($this->container['has_repository_projects'] === null) {
            $invalidProperties[] = "'has_repository_projects' can't be null";
        }
        if ($this->container['public_repos'] === null) {
            $invalidProperties[] = "'public_repos' can't be null";
        }
        if ($this->container['public_gists'] === null) {
            $invalidProperties[] = "'public_gists' can't be null";
        }
        if ($this->container['followers'] === null) {
            $invalidProperties[] = "'followers' can't be null";
        }
        if ($this->container['following'] === null) {
            $invalidProperties[] = "'following' can't be null";
        }
        if ($this->container['html_url'] === null) {
            $invalidProperties[] = "'html_url' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['archived_at'] === null) {
            $invalidProperties[] = "'archived_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets login
     *
     * @return string
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string $login login
     *
     * @return self
     */
    public function setLogin($login)
    {
        if (is_null($login)) {
            throw new \InvalidArgumentException('non-nullable login cannot be null');
        }
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets repos_url
     *
     * @return string
     */
    public function getReposUrl()
    {
        return $this->container['repos_url'];
    }

    /**
     * Sets repos_url
     *
     * @param string $repos_url repos_url
     *
     * @return self
     */
    public function setReposUrl($repos_url)
    {
        if (is_null($repos_url)) {
            throw new \InvalidArgumentException('non-nullable repos_url cannot be null');
        }
        $this->container['repos_url'] = $repos_url;

        return $this;
    }

    /**
     * Gets events_url
     *
     * @return string
     */
    public function getEventsUrl()
    {
        return $this->container['events_url'];
    }

    /**
     * Sets events_url
     *
     * @param string $events_url events_url
     *
     * @return self
     */
    public function setEventsUrl($events_url)
    {
        if (is_null($events_url)) {
            throw new \InvalidArgumentException('non-nullable events_url cannot be null');
        }
        $this->container['events_url'] = $events_url;

        return $this;
    }

    /**
     * Gets hooks_url
     *
     * @return string
     */
    public function getHooksUrl()
    {
        return $this->container['hooks_url'];
    }

    /**
     * Sets hooks_url
     *
     * @param string $hooks_url hooks_url
     *
     * @return self
     */
    public function setHooksUrl($hooks_url)
    {
        if (is_null($hooks_url)) {
            throw new \InvalidArgumentException('non-nullable hooks_url cannot be null');
        }
        $this->container['hooks_url'] = $hooks_url;

        return $this;
    }

    /**
     * Gets issues_url
     *
     * @return string
     */
    public function getIssuesUrl()
    {
        return $this->container['issues_url'];
    }

    /**
     * Sets issues_url
     *
     * @param string $issues_url issues_url
     *
     * @return self
     */
    public function setIssuesUrl($issues_url)
    {
        if (is_null($issues_url)) {
            throw new \InvalidArgumentException('non-nullable issues_url cannot be null');
        }
        $this->container['issues_url'] = $issues_url;

        return $this;
    }

    /**
     * Gets members_url
     *
     * @return string
     */
    public function getMembersUrl()
    {
        return $this->container['members_url'];
    }

    /**
     * Sets members_url
     *
     * @param string $members_url members_url
     *
     * @return self
     */
    public function setMembersUrl($members_url)
    {
        if (is_null($members_url)) {
            throw new \InvalidArgumentException('non-nullable members_url cannot be null');
        }
        $this->container['members_url'] = $members_url;

        return $this;
    }

    /**
     * Gets public_members_url
     *
     * @return string
     */
    public function getPublicMembersUrl()
    {
        return $this->container['public_members_url'];
    }

    /**
     * Sets public_members_url
     *
     * @param string $public_members_url public_members_url
     *
     * @return self
     */
    public function setPublicMembersUrl($public_members_url)
    {
        if (is_null($public_members_url)) {
            throw new \InvalidArgumentException('non-nullable public_members_url cannot be null');
        }
        $this->container['public_members_url'] = $public_members_url;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string $avatar_url avatar_url
     *
     * @return self
     */
    public function setAvatarUrl($avatar_url)
    {
        if (is_null($avatar_url)) {
            throw new \InvalidArgumentException('non-nullable avatar_url cannot be null');
        }
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets blog
     *
     * @return string|null
     */
    public function getBlog()
    {
        return $this->container['blog'];
    }

    /**
     * Sets blog
     *
     * @param string|null $blog blog
     *
     * @return self
     */
    public function setBlog($blog)
    {
        if (is_null($blog)) {
            throw new \InvalidArgumentException('non-nullable blog cannot be null');
        }
        $this->container['blog'] = $blog;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets twitter_username
     *
     * @return string|null
     */
    public function getTwitterUsername()
    {
        return $this->container['twitter_username'];
    }

    /**
     * Sets twitter_username
     *
     * @param string|null $twitter_username twitter_username
     *
     * @return self
     */
    public function setTwitterUsername($twitter_username)
    {
        if (is_null($twitter_username)) {
            array_push($this->openAPINullablesSetToNull, 'twitter_username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('twitter_username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['twitter_username'] = $twitter_username;

        return $this;
    }

    /**
     * Gets is_verified
     *
     * @return bool|null
     */
    public function getIsVerified()
    {
        return $this->container['is_verified'];
    }

    /**
     * Sets is_verified
     *
     * @param bool|null $is_verified is_verified
     *
     * @return self
     */
    public function setIsVerified($is_verified)
    {
        if (is_null($is_verified)) {
            throw new \InvalidArgumentException('non-nullable is_verified cannot be null');
        }
        $this->container['is_verified'] = $is_verified;

        return $this;
    }

    /**
     * Gets has_organization_projects
     *
     * @return bool
     */
    public function getHasOrganizationProjects()
    {
        return $this->container['has_organization_projects'];
    }

    /**
     * Sets has_organization_projects
     *
     * @param bool $has_organization_projects has_organization_projects
     *
     * @return self
     */
    public function setHasOrganizationProjects($has_organization_projects)
    {
        if (is_null($has_organization_projects)) {
            throw new \InvalidArgumentException('non-nullable has_organization_projects cannot be null');
        }
        $this->container['has_organization_projects'] = $has_organization_projects;

        return $this;
    }

    /**
     * Gets has_repository_projects
     *
     * @return bool
     */
    public function getHasRepositoryProjects()
    {
        return $this->container['has_repository_projects'];
    }

    /**
     * Sets has_repository_projects
     *
     * @param bool $has_repository_projects has_repository_projects
     *
     * @return self
     */
    public function setHasRepositoryProjects($has_repository_projects)
    {
        if (is_null($has_repository_projects)) {
            throw new \InvalidArgumentException('non-nullable has_repository_projects cannot be null');
        }
        $this->container['has_repository_projects'] = $has_repository_projects;

        return $this;
    }

    /**
     * Gets public_repos
     *
     * @return int
     */
    public function getPublicRepos()
    {
        return $this->container['public_repos'];
    }

    /**
     * Sets public_repos
     *
     * @param int $public_repos public_repos
     *
     * @return self
     */
    public function setPublicRepos($public_repos)
    {
        if (is_null($public_repos)) {
            throw new \InvalidArgumentException('non-nullable public_repos cannot be null');
        }
        $this->container['public_repos'] = $public_repos;

        return $this;
    }

    /**
     * Gets public_gists
     *
     * @return int
     */
    public function getPublicGists()
    {
        return $this->container['public_gists'];
    }

    /**
     * Sets public_gists
     *
     * @param int $public_gists public_gists
     *
     * @return self
     */
    public function setPublicGists($public_gists)
    {
        if (is_null($public_gists)) {
            throw new \InvalidArgumentException('non-nullable public_gists cannot be null');
        }
        $this->container['public_gists'] = $public_gists;

        return $this;
    }

    /**
     * Gets followers
     *
     * @return int
     */
    public function getFollowers()
    {
        return $this->container['followers'];
    }

    /**
     * Sets followers
     *
     * @param int $followers followers
     *
     * @return self
     */
    public function setFollowers($followers)
    {
        if (is_null($followers)) {
            throw new \InvalidArgumentException('non-nullable followers cannot be null');
        }
        $this->container['followers'] = $followers;

        return $this;
    }

    /**
     * Gets following
     *
     * @return int
     */
    public function getFollowing()
    {
        return $this->container['following'];
    }

    /**
     * Sets following
     *
     * @param int $following following
     *
     * @return self
     */
    public function setFollowing($following)
    {
        if (is_null($following)) {
            throw new \InvalidArgumentException('non-nullable following cannot be null');
        }
        $this->container['following'] = $following;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets total_private_repos
     *
     * @return int|null
     */
    public function getTotalPrivateRepos()
    {
        return $this->container['total_private_repos'];
    }

    /**
     * Sets total_private_repos
     *
     * @param int|null $total_private_repos total_private_repos
     *
     * @return self
     */
    public function setTotalPrivateRepos($total_private_repos)
    {
        if (is_null($total_private_repos)) {
            throw new \InvalidArgumentException('non-nullable total_private_repos cannot be null');
        }
        $this->container['total_private_repos'] = $total_private_repos;

        return $this;
    }

    /**
     * Gets owned_private_repos
     *
     * @return int|null
     */
    public function getOwnedPrivateRepos()
    {
        return $this->container['owned_private_repos'];
    }

    /**
     * Sets owned_private_repos
     *
     * @param int|null $owned_private_repos owned_private_repos
     *
     * @return self
     */
    public function setOwnedPrivateRepos($owned_private_repos)
    {
        if (is_null($owned_private_repos)) {
            throw new \InvalidArgumentException('non-nullable owned_private_repos cannot be null');
        }
        $this->container['owned_private_repos'] = $owned_private_repos;

        return $this;
    }

    /**
     * Gets private_gists
     *
     * @return int|null
     */
    public function getPrivateGists()
    {
        return $this->container['private_gists'];
    }

    /**
     * Sets private_gists
     *
     * @param int|null $private_gists private_gists
     *
     * @return self
     */
    public function setPrivateGists($private_gists)
    {
        if (is_null($private_gists)) {
            array_push($this->openAPINullablesSetToNull, 'private_gists');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('private_gists', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['private_gists'] = $private_gists;

        return $this;
    }

    /**
     * Gets disk_usage
     *
     * @return int|null
     */
    public function getDiskUsage()
    {
        return $this->container['disk_usage'];
    }

    /**
     * Sets disk_usage
     *
     * @param int|null $disk_usage disk_usage
     *
     * @return self
     */
    public function setDiskUsage($disk_usage)
    {
        if (is_null($disk_usage)) {
            array_push($this->openAPINullablesSetToNull, 'disk_usage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disk_usage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disk_usage'] = $disk_usage;

        return $this;
    }

    /**
     * Gets collaborators
     *
     * @return int|null
     */
    public function getCollaborators()
    {
        return $this->container['collaborators'];
    }

    /**
     * Sets collaborators
     *
     * @param int|null $collaborators collaborators
     *
     * @return self
     */
    public function setCollaborators($collaborators)
    {
        if (is_null($collaborators)) {
            array_push($this->openAPINullablesSetToNull, 'collaborators');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('collaborators', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['collaborators'] = $collaborators;

        return $this;
    }

    /**
     * Gets billing_email
     *
     * @return string|null
     */
    public function getBillingEmail()
    {
        return $this->container['billing_email'];
    }

    /**
     * Sets billing_email
     *
     * @param string|null $billing_email billing_email
     *
     * @return self
     */
    public function setBillingEmail($billing_email)
    {
        if (is_null($billing_email)) {
            array_push($this->openAPINullablesSetToNull, 'billing_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_email'] = $billing_email;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\OrganizationFullPlan|null
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\OrganizationFullPlan|null $plan plan
     *
     * @return self
     */
    public function setPlan($plan)
    {
        if (is_null($plan)) {
            throw new \InvalidArgumentException('non-nullable plan cannot be null');
        }
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets default_repository_permission
     *
     * @return string|null
     */
    public function getDefaultRepositoryPermission()
    {
        return $this->container['default_repository_permission'];
    }

    /**
     * Sets default_repository_permission
     *
     * @param string|null $default_repository_permission default_repository_permission
     *
     * @return self
     */
    public function setDefaultRepositoryPermission($default_repository_permission)
    {
        if (is_null($default_repository_permission)) {
            array_push($this->openAPINullablesSetToNull, 'default_repository_permission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_repository_permission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_repository_permission'] = $default_repository_permission;

        return $this;
    }

    /**
     * Gets members_can_create_repositories
     *
     * @return bool|null
     */
    public function getMembersCanCreateRepositories()
    {
        return $this->container['members_can_create_repositories'];
    }

    /**
     * Sets members_can_create_repositories
     *
     * @param bool|null $members_can_create_repositories members_can_create_repositories
     *
     * @return self
     */
    public function setMembersCanCreateRepositories($members_can_create_repositories)
    {
        if (is_null($members_can_create_repositories)) {
            array_push($this->openAPINullablesSetToNull, 'members_can_create_repositories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('members_can_create_repositories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['members_can_create_repositories'] = $members_can_create_repositories;

        return $this;
    }

    /**
     * Gets two_factor_requirement_enabled
     *
     * @return bool|null
     */
    public function getTwoFactorRequirementEnabled()
    {
        return $this->container['two_factor_requirement_enabled'];
    }

    /**
     * Sets two_factor_requirement_enabled
     *
     * @param bool|null $two_factor_requirement_enabled two_factor_requirement_enabled
     *
     * @return self
     */
    public function setTwoFactorRequirementEnabled($two_factor_requirement_enabled)
    {
        if (is_null($two_factor_requirement_enabled)) {
            array_push($this->openAPINullablesSetToNull, 'two_factor_requirement_enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('two_factor_requirement_enabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['two_factor_requirement_enabled'] = $two_factor_requirement_enabled;

        return $this;
    }

    /**
     * Gets members_allowed_repository_creation_type
     *
     * @return string|null
     */
    public function getMembersAllowedRepositoryCreationType()
    {
        return $this->container['members_allowed_repository_creation_type'];
    }

    /**
     * Sets members_allowed_repository_creation_type
     *
     * @param string|null $members_allowed_repository_creation_type members_allowed_repository_creation_type
     *
     * @return self
     */
    public function setMembersAllowedRepositoryCreationType($members_allowed_repository_creation_type)
    {
        if (is_null($members_allowed_repository_creation_type)) {
            throw new \InvalidArgumentException('non-nullable members_allowed_repository_creation_type cannot be null');
        }
        $this->container['members_allowed_repository_creation_type'] = $members_allowed_repository_creation_type;

        return $this;
    }

    /**
     * Gets members_can_create_public_repositories
     *
     * @return bool|null
     */
    public function getMembersCanCreatePublicRepositories()
    {
        return $this->container['members_can_create_public_repositories'];
    }

    /**
     * Sets members_can_create_public_repositories
     *
     * @param bool|null $members_can_create_public_repositories members_can_create_public_repositories
     *
     * @return self
     */
    public function setMembersCanCreatePublicRepositories($members_can_create_public_repositories)
    {
        if (is_null($members_can_create_public_repositories)) {
            throw new \InvalidArgumentException('non-nullable members_can_create_public_repositories cannot be null');
        }
        $this->container['members_can_create_public_repositories'] = $members_can_create_public_repositories;

        return $this;
    }

    /**
     * Gets members_can_create_private_repositories
     *
     * @return bool|null
     */
    public function getMembersCanCreatePrivateRepositories()
    {
        return $this->container['members_can_create_private_repositories'];
    }

    /**
     * Sets members_can_create_private_repositories
     *
     * @param bool|null $members_can_create_private_repositories members_can_create_private_repositories
     *
     * @return self
     */
    public function setMembersCanCreatePrivateRepositories($members_can_create_private_repositories)
    {
        if (is_null($members_can_create_private_repositories)) {
            throw new \InvalidArgumentException('non-nullable members_can_create_private_repositories cannot be null');
        }
        $this->container['members_can_create_private_repositories'] = $members_can_create_private_repositories;

        return $this;
    }

    /**
     * Gets members_can_create_internal_repositories
     *
     * @return bool|null
     */
    public function getMembersCanCreateInternalRepositories()
    {
        return $this->container['members_can_create_internal_repositories'];
    }

    /**
     * Sets members_can_create_internal_repositories
     *
     * @param bool|null $members_can_create_internal_repositories members_can_create_internal_repositories
     *
     * @return self
     */
    public function setMembersCanCreateInternalRepositories($members_can_create_internal_repositories)
    {
        if (is_null($members_can_create_internal_repositories)) {
            throw new \InvalidArgumentException('non-nullable members_can_create_internal_repositories cannot be null');
        }
        $this->container['members_can_create_internal_repositories'] = $members_can_create_internal_repositories;

        return $this;
    }

    /**
     * Gets members_can_create_pages
     *
     * @return bool|null
     */
    public function getMembersCanCreatePages()
    {
        return $this->container['members_can_create_pages'];
    }

    /**
     * Sets members_can_create_pages
     *
     * @param bool|null $members_can_create_pages members_can_create_pages
     *
     * @return self
     */
    public function setMembersCanCreatePages($members_can_create_pages)
    {
        if (is_null($members_can_create_pages)) {
            throw new \InvalidArgumentException('non-nullable members_can_create_pages cannot be null');
        }
        $this->container['members_can_create_pages'] = $members_can_create_pages;

        return $this;
    }

    /**
     * Gets members_can_create_public_pages
     *
     * @return bool|null
     */
    public function getMembersCanCreatePublicPages()
    {
        return $this->container['members_can_create_public_pages'];
    }

    /**
     * Sets members_can_create_public_pages
     *
     * @param bool|null $members_can_create_public_pages members_can_create_public_pages
     *
     * @return self
     */
    public function setMembersCanCreatePublicPages($members_can_create_public_pages)
    {
        if (is_null($members_can_create_public_pages)) {
            throw new \InvalidArgumentException('non-nullable members_can_create_public_pages cannot be null');
        }
        $this->container['members_can_create_public_pages'] = $members_can_create_public_pages;

        return $this;
    }

    /**
     * Gets members_can_create_private_pages
     *
     * @return bool|null
     */
    public function getMembersCanCreatePrivatePages()
    {
        return $this->container['members_can_create_private_pages'];
    }

    /**
     * Sets members_can_create_private_pages
     *
     * @param bool|null $members_can_create_private_pages members_can_create_private_pages
     *
     * @return self
     */
    public function setMembersCanCreatePrivatePages($members_can_create_private_pages)
    {
        if (is_null($members_can_create_private_pages)) {
            throw new \InvalidArgumentException('non-nullable members_can_create_private_pages cannot be null');
        }
        $this->container['members_can_create_private_pages'] = $members_can_create_private_pages;

        return $this;
    }

    /**
     * Gets members_can_fork_private_repositories
     *
     * @return bool|null
     */
    public function getMembersCanForkPrivateRepositories()
    {
        return $this->container['members_can_fork_private_repositories'];
    }

    /**
     * Sets members_can_fork_private_repositories
     *
     * @param bool|null $members_can_fork_private_repositories members_can_fork_private_repositories
     *
     * @return self
     */
    public function setMembersCanForkPrivateRepositories($members_can_fork_private_repositories)
    {
        if (is_null($members_can_fork_private_repositories)) {
            array_push($this->openAPINullablesSetToNull, 'members_can_fork_private_repositories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('members_can_fork_private_repositories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['members_can_fork_private_repositories'] = $members_can_fork_private_repositories;

        return $this;
    }

    /**
     * Gets web_commit_signoff_required
     *
     * @return bool|null
     */
    public function getWebCommitSignoffRequired()
    {
        return $this->container['web_commit_signoff_required'];
    }

    /**
     * Sets web_commit_signoff_required
     *
     * @param bool|null $web_commit_signoff_required web_commit_signoff_required
     *
     * @return self
     */
    public function setWebCommitSignoffRequired($web_commit_signoff_required)
    {
        if (is_null($web_commit_signoff_required)) {
            throw new \InvalidArgumentException('non-nullable web_commit_signoff_required cannot be null');
        }
        $this->container['web_commit_signoff_required'] = $web_commit_signoff_required;

        return $this;
    }

    /**
     * Gets advanced_security_enabled_for_new_repositories
     *
     * @return bool|null
     */
    public function getAdvancedSecurityEnabledForNewRepositories()
    {
        return $this->container['advanced_security_enabled_for_new_repositories'];
    }

    /**
     * Sets advanced_security_enabled_for_new_repositories
     *
     * @param bool|null $advanced_security_enabled_for_new_repositories Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.  This field is only visible to organization owners or members of a team with the security manager role.
     *
     * @return self
     */
    public function setAdvancedSecurityEnabledForNewRepositories($advanced_security_enabled_for_new_repositories)
    {
        if (is_null($advanced_security_enabled_for_new_repositories)) {
            throw new \InvalidArgumentException('non-nullable advanced_security_enabled_for_new_repositories cannot be null');
        }
        $this->container['advanced_security_enabled_for_new_repositories'] = $advanced_security_enabled_for_new_repositories;

        return $this;
    }

    /**
     * Gets dependabot_alerts_enabled_for_new_repositories
     *
     * @return bool|null
     */
    public function getDependabotAlertsEnabledForNewRepositories()
    {
        return $this->container['dependabot_alerts_enabled_for_new_repositories'];
    }

    /**
     * Sets dependabot_alerts_enabled_for_new_repositories
     *
     * @param bool|null $dependabot_alerts_enabled_for_new_repositories Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to this organization.  This field is only visible to organization owners or members of a team with the security manager role.
     *
     * @return self
     */
    public function setDependabotAlertsEnabledForNewRepositories($dependabot_alerts_enabled_for_new_repositories)
    {
        if (is_null($dependabot_alerts_enabled_for_new_repositories)) {
            throw new \InvalidArgumentException('non-nullable dependabot_alerts_enabled_for_new_repositories cannot be null');
        }
        $this->container['dependabot_alerts_enabled_for_new_repositories'] = $dependabot_alerts_enabled_for_new_repositories;

        return $this;
    }

    /**
     * Gets dependabot_security_updates_enabled_for_new_repositories
     *
     * @return bool|null
     */
    public function getDependabotSecurityUpdatesEnabledForNewRepositories()
    {
        return $this->container['dependabot_security_updates_enabled_for_new_repositories'];
    }

    /**
     * Sets dependabot_security_updates_enabled_for_new_repositories
     *
     * @param bool|null $dependabot_security_updates_enabled_for_new_repositories Whether dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.  This field is only visible to organization owners or members of a team with the security manager role.
     *
     * @return self
     */
    public function setDependabotSecurityUpdatesEnabledForNewRepositories($dependabot_security_updates_enabled_for_new_repositories)
    {
        if (is_null($dependabot_security_updates_enabled_for_new_repositories)) {
            throw new \InvalidArgumentException('non-nullable dependabot_security_updates_enabled_for_new_repositories cannot be null');
        }
        $this->container['dependabot_security_updates_enabled_for_new_repositories'] = $dependabot_security_updates_enabled_for_new_repositories;

        return $this;
    }

    /**
     * Gets dependency_graph_enabled_for_new_repositories
     *
     * @return bool|null
     */
    public function getDependencyGraphEnabledForNewRepositories()
    {
        return $this->container['dependency_graph_enabled_for_new_repositories'];
    }

    /**
     * Sets dependency_graph_enabled_for_new_repositories
     *
     * @param bool|null $dependency_graph_enabled_for_new_repositories Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.  This field is only visible to organization owners or members of a team with the security manager role.
     *
     * @return self
     */
    public function setDependencyGraphEnabledForNewRepositories($dependency_graph_enabled_for_new_repositories)
    {
        if (is_null($dependency_graph_enabled_for_new_repositories)) {
            throw new \InvalidArgumentException('non-nullable dependency_graph_enabled_for_new_repositories cannot be null');
        }
        $this->container['dependency_graph_enabled_for_new_repositories'] = $dependency_graph_enabled_for_new_repositories;

        return $this;
    }

    /**
     * Gets secret_scanning_enabled_for_new_repositories
     *
     * @return bool|null
     */
    public function getSecretScanningEnabledForNewRepositories()
    {
        return $this->container['secret_scanning_enabled_for_new_repositories'];
    }

    /**
     * Sets secret_scanning_enabled_for_new_repositories
     *
     * @param bool|null $secret_scanning_enabled_for_new_repositories Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.  This field is only visible to organization owners or members of a team with the security manager role.
     *
     * @return self
     */
    public function setSecretScanningEnabledForNewRepositories($secret_scanning_enabled_for_new_repositories)
    {
        if (is_null($secret_scanning_enabled_for_new_repositories)) {
            throw new \InvalidArgumentException('non-nullable secret_scanning_enabled_for_new_repositories cannot be null');
        }
        $this->container['secret_scanning_enabled_for_new_repositories'] = $secret_scanning_enabled_for_new_repositories;

        return $this;
    }

    /**
     * Gets secret_scanning_push_protection_enabled_for_new_repositories
     *
     * @return bool|null
     */
    public function getSecretScanningPushProtectionEnabledForNewRepositories()
    {
        return $this->container['secret_scanning_push_protection_enabled_for_new_repositories'];
    }

    /**
     * Sets secret_scanning_push_protection_enabled_for_new_repositories
     *
     * @param bool|null $secret_scanning_push_protection_enabled_for_new_repositories Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.  This field is only visible to organization owners or members of a team with the security manager role.
     *
     * @return self
     */
    public function setSecretScanningPushProtectionEnabledForNewRepositories($secret_scanning_push_protection_enabled_for_new_repositories)
    {
        if (is_null($secret_scanning_push_protection_enabled_for_new_repositories)) {
            throw new \InvalidArgumentException('non-nullable secret_scanning_push_protection_enabled_for_new_repositories cannot be null');
        }
        $this->container['secret_scanning_push_protection_enabled_for_new_repositories'] = $secret_scanning_push_protection_enabled_for_new_repositories;

        return $this;
    }

    /**
     * Gets secret_scanning_push_protection_custom_link_enabled
     *
     * @return bool|null
     */
    public function getSecretScanningPushProtectionCustomLinkEnabled()
    {
        return $this->container['secret_scanning_push_protection_custom_link_enabled'];
    }

    /**
     * Sets secret_scanning_push_protection_custom_link_enabled
     *
     * @param bool|null $secret_scanning_push_protection_custom_link_enabled Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
     *
     * @return self
     */
    public function setSecretScanningPushProtectionCustomLinkEnabled($secret_scanning_push_protection_custom_link_enabled)
    {
        if (is_null($secret_scanning_push_protection_custom_link_enabled)) {
            throw new \InvalidArgumentException('non-nullable secret_scanning_push_protection_custom_link_enabled cannot be null');
        }
        $this->container['secret_scanning_push_protection_custom_link_enabled'] = $secret_scanning_push_protection_custom_link_enabled;

        return $this;
    }

    /**
     * Gets secret_scanning_push_protection_custom_link
     *
     * @return string|null
     */
    public function getSecretScanningPushProtectionCustomLink()
    {
        return $this->container['secret_scanning_push_protection_custom_link'];
    }

    /**
     * Sets secret_scanning_push_protection_custom_link
     *
     * @param string|null $secret_scanning_push_protection_custom_link An optional URL string to display to contributors who are blocked from pushing a secret.
     *
     * @return self
     */
    public function setSecretScanningPushProtectionCustomLink($secret_scanning_push_protection_custom_link)
    {
        if (is_null($secret_scanning_push_protection_custom_link)) {
            array_push($this->openAPINullablesSetToNull, 'secret_scanning_push_protection_custom_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secret_scanning_push_protection_custom_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secret_scanning_push_protection_custom_link'] = $secret_scanning_push_protection_custom_link;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets archived_at
     *
     * @return \DateTime
     */
    public function getArchivedAt()
    {
        return $this->container['archived_at'];
    }

    /**
     * Sets archived_at
     *
     * @param \DateTime $archived_at archived_at
     *
     * @return self
     */
    public function setArchivedAt($archived_at)
    {
        if (is_null($archived_at)) {
            array_push($this->openAPINullablesSetToNull, 'archived_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('archived_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['archived_at'] = $archived_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


