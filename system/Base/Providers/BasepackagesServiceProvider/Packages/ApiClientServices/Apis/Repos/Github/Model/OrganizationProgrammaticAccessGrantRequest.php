<?php
/**
 * OrganizationProgrammaticAccessGrantRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * OrganizationProgrammaticAccessGrantRequest Class Doc Comment
 *
 * @category Class
 * @description Minimal representation of an organization programmatic access grant request for enumerations
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrganizationProgrammaticAccessGrantRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'organization-programmatic-access-grant-request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'reason' => 'string',
        'owner' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser',
        'repository_selection' => 'string',
        'repositories_url' => 'string',
        'permissions' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\OrganizationProgrammaticAccessGrantRequestPermissions',
        'created_at' => 'string',
        'token_expired' => 'bool',
        'token_expires_at' => 'string',
        'token_last_used_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'reason' => null,
        'owner' => null,
        'repository_selection' => null,
        'repositories_url' => null,
        'permissions' => null,
        'created_at' => null,
        'token_expired' => null,
        'token_expires_at' => null,
        'token_last_used_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'reason' => true,
        'owner' => false,
        'repository_selection' => false,
        'repositories_url' => false,
        'permissions' => false,
        'created_at' => false,
        'token_expired' => false,
        'token_expires_at' => true,
        'token_last_used_at' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'reason' => 'reason',
        'owner' => 'owner',
        'repository_selection' => 'repository_selection',
        'repositories_url' => 'repositories_url',
        'permissions' => 'permissions',
        'created_at' => 'created_at',
        'token_expired' => 'token_expired',
        'token_expires_at' => 'token_expires_at',
        'token_last_used_at' => 'token_last_used_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'reason' => 'setReason',
        'owner' => 'setOwner',
        'repository_selection' => 'setRepositorySelection',
        'repositories_url' => 'setRepositoriesUrl',
        'permissions' => 'setPermissions',
        'created_at' => 'setCreatedAt',
        'token_expired' => 'setTokenExpired',
        'token_expires_at' => 'setTokenExpiresAt',
        'token_last_used_at' => 'setTokenLastUsedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'reason' => 'getReason',
        'owner' => 'getOwner',
        'repository_selection' => 'getRepositorySelection',
        'repositories_url' => 'getRepositoriesUrl',
        'permissions' => 'getPermissions',
        'created_at' => 'getCreatedAt',
        'token_expired' => 'getTokenExpired',
        'token_expires_at' => 'getTokenExpiresAt',
        'token_last_used_at' => 'getTokenLastUsedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const REPOSITORY_SELECTION_NONE = 'none';
    public const REPOSITORY_SELECTION_ALL = 'all';
    public const REPOSITORY_SELECTION_SUBSET = 'subset';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRepositorySelectionAllowableValues()
    {
        return [
            self::REPOSITORY_SELECTION_NONE,
            self::REPOSITORY_SELECTION_ALL,
            self::REPOSITORY_SELECTION_SUBSET,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('repository_selection', $data ?? [], null);
        $this->setIfExists('repositories_url', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('token_expired', $data ?? [], null);
        $this->setIfExists('token_expires_at', $data ?? [], null);
        $this->setIfExists('token_last_used_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalidProperties[] = "'owner' can't be null";
        }
        if ($this->container['repository_selection'] === null) {
            $invalidProperties[] = "'repository_selection' can't be null";
        }
        $allowedValues = $this->getRepositorySelectionAllowableValues();
        if (!is_null($this->container['repository_selection']) && !in_array($this->container['repository_selection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'repository_selection', must be one of '%s'",
                $this->container['repository_selection'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['repositories_url'] === null) {
            $invalidProperties[] = "'repositories_url' can't be null";
        }
        if ($this->container['permissions'] === null) {
            $invalidProperties[] = "'permissions' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['token_expired'] === null) {
            $invalidProperties[] = "'token_expired' can't be null";
        }
        if ($this->container['token_expires_at'] === null) {
            $invalidProperties[] = "'token_expires_at' can't be null";
        }
        if ($this->container['token_last_used_at'] === null) {
            $invalidProperties[] = "'token_last_used_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason Reason for requesting access.
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            array_push($this->openAPINullablesSetToNull, 'reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleUser $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets repository_selection
     *
     * @return string
     */
    public function getRepositorySelection()
    {
        return $this->container['repository_selection'];
    }

    /**
     * Sets repository_selection
     *
     * @param string $repository_selection Type of repository selection requested.
     *
     * @return self
     */
    public function setRepositorySelection($repository_selection)
    {
        if (is_null($repository_selection)) {
            throw new \InvalidArgumentException('non-nullable repository_selection cannot be null');
        }
        $allowedValues = $this->getRepositorySelectionAllowableValues();
        if (!in_array($repository_selection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'repository_selection', must be one of '%s'",
                    $repository_selection,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['repository_selection'] = $repository_selection;

        return $this;
    }

    /**
     * Gets repositories_url
     *
     * @return string
     */
    public function getRepositoriesUrl()
    {
        return $this->container['repositories_url'];
    }

    /**
     * Sets repositories_url
     *
     * @param string $repositories_url URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`.
     *
     * @return self
     */
    public function setRepositoriesUrl($repositories_url)
    {
        if (is_null($repositories_url)) {
            throw new \InvalidArgumentException('non-nullable repositories_url cannot be null');
        }
        $this->container['repositories_url'] = $repositories_url;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\OrganizationProgrammaticAccessGrantRequestPermissions
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\OrganizationProgrammaticAccessGrantRequestPermissions $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        if (is_null($permissions)) {
            throw new \InvalidArgumentException('non-nullable permissions cannot be null');
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at Date and time when the request for access was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets token_expired
     *
     * @return bool
     */
    public function getTokenExpired()
    {
        return $this->container['token_expired'];
    }

    /**
     * Sets token_expired
     *
     * @param bool $token_expired Whether the associated fine-grained personal access token has expired.
     *
     * @return self
     */
    public function setTokenExpired($token_expired)
    {
        if (is_null($token_expired)) {
            throw new \InvalidArgumentException('non-nullable token_expired cannot be null');
        }
        $this->container['token_expired'] = $token_expired;

        return $this;
    }

    /**
     * Gets token_expires_at
     *
     * @return string
     */
    public function getTokenExpiresAt()
    {
        return $this->container['token_expires_at'];
    }

    /**
     * Sets token_expires_at
     *
     * @param string $token_expires_at Date and time when the associated fine-grained personal access token expires.
     *
     * @return self
     */
    public function setTokenExpiresAt($token_expires_at)
    {
        if (is_null($token_expires_at)) {
            array_push($this->openAPINullablesSetToNull, 'token_expires_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('token_expires_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['token_expires_at'] = $token_expires_at;

        return $this;
    }

    /**
     * Gets token_last_used_at
     *
     * @return string
     */
    public function getTokenLastUsedAt()
    {
        return $this->container['token_last_used_at'];
    }

    /**
     * Sets token_last_used_at
     *
     * @param string $token_last_used_at Date and time when the associated fine-grained personal access token was last used for authentication.
     *
     * @return self
     */
    public function setTokenLastUsedAt($token_last_used_at)
    {
        if (is_null($token_last_used_at)) {
            array_push($this->openAPINullablesSetToNull, 'token_last_used_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('token_last_used_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['token_last_used_at'] = $token_last_used_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


