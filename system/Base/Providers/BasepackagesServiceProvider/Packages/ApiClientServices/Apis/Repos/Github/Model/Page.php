<?php
/**
 * Page
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * Page Class Doc Comment
 *
 * @category Class
 * @description The configuration for GitHub Pages for a repository.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Page implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'page';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'url' => 'string',
        'status' => 'string',
        'cname' => 'string',
        'protected_domain_state' => 'string',
        'pending_domain_unverified_at' => '\DateTime',
        'custom_404' => 'bool',
        'html_url' => 'string',
        'build_type' => 'string',
        'source' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PagesSourceHash',
        'public' => 'bool',
        'https_certificate' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PagesHttpsCertificate',
        'https_enforced' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'url' => 'uri',
        'status' => null,
        'cname' => null,
        'protected_domain_state' => null,
        'pending_domain_unverified_at' => 'date-time',
        'custom_404' => null,
        'html_url' => 'uri',
        'build_type' => null,
        'source' => null,
        'public' => null,
        'https_certificate' => null,
        'https_enforced' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'url' => false,
        'status' => true,
        'cname' => true,
        'protected_domain_state' => true,
        'pending_domain_unverified_at' => true,
        'custom_404' => false,
        'html_url' => false,
        'build_type' => true,
        'source' => false,
        'public' => false,
        'https_certificate' => false,
        'https_enforced' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'status' => 'status',
        'cname' => 'cname',
        'protected_domain_state' => 'protected_domain_state',
        'pending_domain_unverified_at' => 'pending_domain_unverified_at',
        'custom_404' => 'custom_404',
        'html_url' => 'html_url',
        'build_type' => 'build_type',
        'source' => 'source',
        'public' => 'public',
        'https_certificate' => 'https_certificate',
        'https_enforced' => 'https_enforced'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'status' => 'setStatus',
        'cname' => 'setCname',
        'protected_domain_state' => 'setProtectedDomainState',
        'pending_domain_unverified_at' => 'setPendingDomainUnverifiedAt',
        'custom_404' => 'setCustom404',
        'html_url' => 'setHtmlUrl',
        'build_type' => 'setBuildType',
        'source' => 'setSource',
        'public' => 'setPublic',
        'https_certificate' => 'setHttpsCertificate',
        'https_enforced' => 'setHttpsEnforced'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'status' => 'getStatus',
        'cname' => 'getCname',
        'protected_domain_state' => 'getProtectedDomainState',
        'pending_domain_unverified_at' => 'getPendingDomainUnverifiedAt',
        'custom_404' => 'getCustom404',
        'html_url' => 'getHtmlUrl',
        'build_type' => 'getBuildType',
        'source' => 'getSource',
        'public' => 'getPublic',
        'https_certificate' => 'getHttpsCertificate',
        'https_enforced' => 'getHttpsEnforced'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_BUILT = 'built';
    public const STATUS_BUILDING = 'building';
    public const STATUS_ERRORED = 'errored';
    public const PROTECTED_DOMAIN_STATE_PENDING = 'pending';
    public const PROTECTED_DOMAIN_STATE_VERIFIED = 'verified';
    public const PROTECTED_DOMAIN_STATE_UNVERIFIED = 'unverified';
    public const BUILD_TYPE_LEGACY = 'legacy';
    public const BUILD_TYPE_WORKFLOW = 'workflow';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_BUILT,
            self::STATUS_BUILDING,
            self::STATUS_ERRORED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtectedDomainStateAllowableValues()
    {
        return [
            self::PROTECTED_DOMAIN_STATE_PENDING,
            self::PROTECTED_DOMAIN_STATE_VERIFIED,
            self::PROTECTED_DOMAIN_STATE_UNVERIFIED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBuildTypeAllowableValues()
    {
        return [
            self::BUILD_TYPE_LEGACY,
            self::BUILD_TYPE_WORKFLOW,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('cname', $data ?? [], null);
        $this->setIfExists('protected_domain_state', $data ?? [], null);
        $this->setIfExists('pending_domain_unverified_at', $data ?? [], null);
        $this->setIfExists('custom_404', $data ?? [], false);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('build_type', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('public', $data ?? [], null);
        $this->setIfExists('https_certificate', $data ?? [], null);
        $this->setIfExists('https_enforced', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['cname'] === null) {
            $invalidProperties[] = "'cname' can't be null";
        }
        $allowedValues = $this->getProtectedDomainStateAllowableValues();
        if (!is_null($this->container['protected_domain_state']) && !in_array($this->container['protected_domain_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'protected_domain_state', must be one of '%s'",
                $this->container['protected_domain_state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['custom_404'] === null) {
            $invalidProperties[] = "'custom_404' can't be null";
        }
        $allowedValues = $this->getBuildTypeAllowableValues();
        if (!is_null($this->container['build_type']) && !in_array($this->container['build_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'build_type', must be one of '%s'",
                $this->container['build_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['public'] === null) {
            $invalidProperties[] = "'public' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The API address for accessing this Page resource.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the most recent build of the Page.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets cname
     *
     * @return string
     */
    public function getCname()
    {
        return $this->container['cname'];
    }

    /**
     * Sets cname
     *
     * @param string $cname The Pages site's custom domain
     *
     * @return self
     */
    public function setCname($cname)
    {
        if (is_null($cname)) {
            array_push($this->openAPINullablesSetToNull, 'cname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cname'] = $cname;

        return $this;
    }

    /**
     * Gets protected_domain_state
     *
     * @return string|null
     */
    public function getProtectedDomainState()
    {
        return $this->container['protected_domain_state'];
    }

    /**
     * Sets protected_domain_state
     *
     * @param string|null $protected_domain_state The state if the domain is verified
     *
     * @return self
     */
    public function setProtectedDomainState($protected_domain_state)
    {
        if (is_null($protected_domain_state)) {
            array_push($this->openAPINullablesSetToNull, 'protected_domain_state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('protected_domain_state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getProtectedDomainStateAllowableValues();
        if (!is_null($protected_domain_state) && !in_array($protected_domain_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'protected_domain_state', must be one of '%s'",
                    $protected_domain_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protected_domain_state'] = $protected_domain_state;

        return $this;
    }

    /**
     * Gets pending_domain_unverified_at
     *
     * @return \DateTime|null
     */
    public function getPendingDomainUnverifiedAt()
    {
        return $this->container['pending_domain_unverified_at'];
    }

    /**
     * Sets pending_domain_unverified_at
     *
     * @param \DateTime|null $pending_domain_unverified_at The timestamp when a pending domain becomes unverified.
     *
     * @return self
     */
    public function setPendingDomainUnverifiedAt($pending_domain_unverified_at)
    {
        if (is_null($pending_domain_unverified_at)) {
            array_push($this->openAPINullablesSetToNull, 'pending_domain_unverified_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pending_domain_unverified_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pending_domain_unverified_at'] = $pending_domain_unverified_at;

        return $this;
    }

    /**
     * Gets custom_404
     *
     * @return bool
     */
    public function getCustom404()
    {
        return $this->container['custom_404'];
    }

    /**
     * Sets custom_404
     *
     * @param bool $custom_404 Whether the Page has a custom 404 page.
     *
     * @return self
     */
    public function setCustom404($custom_404)
    {
        if (is_null($custom_404)) {
            throw new \InvalidArgumentException('non-nullable custom_404 cannot be null');
        }
        $this->container['custom_404'] = $custom_404;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string|null
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string|null $html_url The web address the Page can be accessed from.
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets build_type
     *
     * @return string|null
     */
    public function getBuildType()
    {
        return $this->container['build_type'];
    }

    /**
     * Sets build_type
     *
     * @param string|null $build_type The process in which the Page will be built.
     *
     * @return self
     */
    public function setBuildType($build_type)
    {
        if (is_null($build_type)) {
            array_push($this->openAPINullablesSetToNull, 'build_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('build_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getBuildTypeAllowableValues();
        if (!is_null($build_type) && !in_array($build_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'build_type', must be one of '%s'",
                    $build_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['build_type'] = $build_type;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PagesSourceHash|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PagesSourceHash|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets public
     *
     * @return bool
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool $public Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
     *
     * @return self
     */
    public function setPublic($public)
    {
        if (is_null($public)) {
            throw new \InvalidArgumentException('non-nullable public cannot be null');
        }
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets https_certificate
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PagesHttpsCertificate|null
     */
    public function getHttpsCertificate()
    {
        return $this->container['https_certificate'];
    }

    /**
     * Sets https_certificate
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PagesHttpsCertificate|null $https_certificate https_certificate
     *
     * @return self
     */
    public function setHttpsCertificate($https_certificate)
    {
        if (is_null($https_certificate)) {
            throw new \InvalidArgumentException('non-nullable https_certificate cannot be null');
        }
        $this->container['https_certificate'] = $https_certificate;

        return $this;
    }

    /**
     * Gets https_enforced
     *
     * @return bool|null
     */
    public function getHttpsEnforced()
    {
        return $this->container['https_enforced'];
    }

    /**
     * Sets https_enforced
     *
     * @param bool|null $https_enforced Whether https is enabled on the domain
     *
     * @return self
     */
    public function setHttpsEnforced($https_enforced)
    {
        if (is_null($https_enforced)) {
            throw new \InvalidArgumentException('non-nullable https_enforced cannot be null');
        }
        $this->container['https_enforced'] = $https_enforced;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


