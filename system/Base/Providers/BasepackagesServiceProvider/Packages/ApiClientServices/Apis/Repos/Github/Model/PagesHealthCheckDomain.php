<?php
/**
 * PagesHealthCheckDomain
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * PagesHealthCheckDomain Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PagesHealthCheckDomain implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'pages_health_check_domain';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'host' => 'string',
        'uri' => 'string',
        'nameservers' => 'string',
        'dns_resolves' => 'bool',
        'is_proxied' => 'bool',
        'is_cloudflare_ip' => 'bool',
        'is_fastly_ip' => 'bool',
        'is_old_ip_address' => 'bool',
        'is_a_record' => 'bool',
        'has_cname_record' => 'bool',
        'has_mx_records_present' => 'bool',
        'is_valid_domain' => 'bool',
        'is_apex_domain' => 'bool',
        'should_be_a_record' => 'bool',
        'is_cname_to_github_user_domain' => 'bool',
        'is_cname_to_pages_dot_github_dot_com' => 'bool',
        'is_cname_to_fastly' => 'bool',
        'is_pointed_to_github_pages_ip' => 'bool',
        'is_non_github_pages_ip_present' => 'bool',
        'is_pages_domain' => 'bool',
        'is_served_by_pages' => 'bool',
        'is_valid' => 'bool',
        'reason' => 'string',
        'responds_to_https' => 'bool',
        'enforces_https' => 'bool',
        'https_error' => 'string',
        'is_https_eligible' => 'bool',
        'caa_error' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'host' => null,
        'uri' => null,
        'nameservers' => null,
        'dns_resolves' => null,
        'is_proxied' => null,
        'is_cloudflare_ip' => null,
        'is_fastly_ip' => null,
        'is_old_ip_address' => null,
        'is_a_record' => null,
        'has_cname_record' => null,
        'has_mx_records_present' => null,
        'is_valid_domain' => null,
        'is_apex_domain' => null,
        'should_be_a_record' => null,
        'is_cname_to_github_user_domain' => null,
        'is_cname_to_pages_dot_github_dot_com' => null,
        'is_cname_to_fastly' => null,
        'is_pointed_to_github_pages_ip' => null,
        'is_non_github_pages_ip_present' => null,
        'is_pages_domain' => null,
        'is_served_by_pages' => null,
        'is_valid' => null,
        'reason' => null,
        'responds_to_https' => null,
        'enforces_https' => null,
        'https_error' => null,
        'is_https_eligible' => null,
        'caa_error' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'host' => false,
        'uri' => false,
        'nameservers' => false,
        'dns_resolves' => false,
        'is_proxied' => true,
        'is_cloudflare_ip' => true,
        'is_fastly_ip' => true,
        'is_old_ip_address' => true,
        'is_a_record' => true,
        'has_cname_record' => true,
        'has_mx_records_present' => true,
        'is_valid_domain' => false,
        'is_apex_domain' => false,
        'should_be_a_record' => true,
        'is_cname_to_github_user_domain' => true,
        'is_cname_to_pages_dot_github_dot_com' => true,
        'is_cname_to_fastly' => true,
        'is_pointed_to_github_pages_ip' => true,
        'is_non_github_pages_ip_present' => true,
        'is_pages_domain' => false,
        'is_served_by_pages' => true,
        'is_valid' => false,
        'reason' => true,
        'responds_to_https' => false,
        'enforces_https' => false,
        'https_error' => true,
        'is_https_eligible' => true,
        'caa_error' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'host' => 'host',
        'uri' => 'uri',
        'nameservers' => 'nameservers',
        'dns_resolves' => 'dns_resolves',
        'is_proxied' => 'is_proxied',
        'is_cloudflare_ip' => 'is_cloudflare_ip',
        'is_fastly_ip' => 'is_fastly_ip',
        'is_old_ip_address' => 'is_old_ip_address',
        'is_a_record' => 'is_a_record',
        'has_cname_record' => 'has_cname_record',
        'has_mx_records_present' => 'has_mx_records_present',
        'is_valid_domain' => 'is_valid_domain',
        'is_apex_domain' => 'is_apex_domain',
        'should_be_a_record' => 'should_be_a_record',
        'is_cname_to_github_user_domain' => 'is_cname_to_github_user_domain',
        'is_cname_to_pages_dot_github_dot_com' => 'is_cname_to_pages_dot_github_dot_com',
        'is_cname_to_fastly' => 'is_cname_to_fastly',
        'is_pointed_to_github_pages_ip' => 'is_pointed_to_github_pages_ip',
        'is_non_github_pages_ip_present' => 'is_non_github_pages_ip_present',
        'is_pages_domain' => 'is_pages_domain',
        'is_served_by_pages' => 'is_served_by_pages',
        'is_valid' => 'is_valid',
        'reason' => 'reason',
        'responds_to_https' => 'responds_to_https',
        'enforces_https' => 'enforces_https',
        'https_error' => 'https_error',
        'is_https_eligible' => 'is_https_eligible',
        'caa_error' => 'caa_error'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'host' => 'setHost',
        'uri' => 'setUri',
        'nameservers' => 'setNameservers',
        'dns_resolves' => 'setDnsResolves',
        'is_proxied' => 'setIsProxied',
        'is_cloudflare_ip' => 'setIsCloudflareIp',
        'is_fastly_ip' => 'setIsFastlyIp',
        'is_old_ip_address' => 'setIsOldIpAddress',
        'is_a_record' => 'setIsARecord',
        'has_cname_record' => 'setHasCnameRecord',
        'has_mx_records_present' => 'setHasMxRecordsPresent',
        'is_valid_domain' => 'setIsValidDomain',
        'is_apex_domain' => 'setIsApexDomain',
        'should_be_a_record' => 'setShouldBeARecord',
        'is_cname_to_github_user_domain' => 'setIsCnameToGithubUserDomain',
        'is_cname_to_pages_dot_github_dot_com' => 'setIsCnameToPagesDotGithubDotCom',
        'is_cname_to_fastly' => 'setIsCnameToFastly',
        'is_pointed_to_github_pages_ip' => 'setIsPointedToGithubPagesIp',
        'is_non_github_pages_ip_present' => 'setIsNonGithubPagesIpPresent',
        'is_pages_domain' => 'setIsPagesDomain',
        'is_served_by_pages' => 'setIsServedByPages',
        'is_valid' => 'setIsValid',
        'reason' => 'setReason',
        'responds_to_https' => 'setRespondsToHttps',
        'enforces_https' => 'setEnforcesHttps',
        'https_error' => 'setHttpsError',
        'is_https_eligible' => 'setIsHttpsEligible',
        'caa_error' => 'setCaaError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'host' => 'getHost',
        'uri' => 'getUri',
        'nameservers' => 'getNameservers',
        'dns_resolves' => 'getDnsResolves',
        'is_proxied' => 'getIsProxied',
        'is_cloudflare_ip' => 'getIsCloudflareIp',
        'is_fastly_ip' => 'getIsFastlyIp',
        'is_old_ip_address' => 'getIsOldIpAddress',
        'is_a_record' => 'getIsARecord',
        'has_cname_record' => 'getHasCnameRecord',
        'has_mx_records_present' => 'getHasMxRecordsPresent',
        'is_valid_domain' => 'getIsValidDomain',
        'is_apex_domain' => 'getIsApexDomain',
        'should_be_a_record' => 'getShouldBeARecord',
        'is_cname_to_github_user_domain' => 'getIsCnameToGithubUserDomain',
        'is_cname_to_pages_dot_github_dot_com' => 'getIsCnameToPagesDotGithubDotCom',
        'is_cname_to_fastly' => 'getIsCnameToFastly',
        'is_pointed_to_github_pages_ip' => 'getIsPointedToGithubPagesIp',
        'is_non_github_pages_ip_present' => 'getIsNonGithubPagesIpPresent',
        'is_pages_domain' => 'getIsPagesDomain',
        'is_served_by_pages' => 'getIsServedByPages',
        'is_valid' => 'getIsValid',
        'reason' => 'getReason',
        'responds_to_https' => 'getRespondsToHttps',
        'enforces_https' => 'getEnforcesHttps',
        'https_error' => 'getHttpsError',
        'is_https_eligible' => 'getIsHttpsEligible',
        'caa_error' => 'getCaaError'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('host', $data ?? [], null);
        $this->setIfExists('uri', $data ?? [], null);
        $this->setIfExists('nameservers', $data ?? [], null);
        $this->setIfExists('dns_resolves', $data ?? [], null);
        $this->setIfExists('is_proxied', $data ?? [], null);
        $this->setIfExists('is_cloudflare_ip', $data ?? [], null);
        $this->setIfExists('is_fastly_ip', $data ?? [], null);
        $this->setIfExists('is_old_ip_address', $data ?? [], null);
        $this->setIfExists('is_a_record', $data ?? [], null);
        $this->setIfExists('has_cname_record', $data ?? [], null);
        $this->setIfExists('has_mx_records_present', $data ?? [], null);
        $this->setIfExists('is_valid_domain', $data ?? [], null);
        $this->setIfExists('is_apex_domain', $data ?? [], null);
        $this->setIfExists('should_be_a_record', $data ?? [], null);
        $this->setIfExists('is_cname_to_github_user_domain', $data ?? [], null);
        $this->setIfExists('is_cname_to_pages_dot_github_dot_com', $data ?? [], null);
        $this->setIfExists('is_cname_to_fastly', $data ?? [], null);
        $this->setIfExists('is_pointed_to_github_pages_ip', $data ?? [], null);
        $this->setIfExists('is_non_github_pages_ip_present', $data ?? [], null);
        $this->setIfExists('is_pages_domain', $data ?? [], null);
        $this->setIfExists('is_served_by_pages', $data ?? [], null);
        $this->setIfExists('is_valid', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('responds_to_https', $data ?? [], null);
        $this->setIfExists('enforces_https', $data ?? [], null);
        $this->setIfExists('https_error', $data ?? [], null);
        $this->setIfExists('is_https_eligible', $data ?? [], null);
        $this->setIfExists('caa_error', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host host
     *
     * @return self
     */
    public function setHost($host)
    {
        if (is_null($host)) {
            throw new \InvalidArgumentException('non-nullable host cannot be null');
        }
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string|null
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string|null $uri uri
     *
     * @return self
     */
    public function setUri($uri)
    {
        if (is_null($uri)) {
            throw new \InvalidArgumentException('non-nullable uri cannot be null');
        }
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets nameservers
     *
     * @return string|null
     */
    public function getNameservers()
    {
        return $this->container['nameservers'];
    }

    /**
     * Sets nameservers
     *
     * @param string|null $nameservers nameservers
     *
     * @return self
     */
    public function setNameservers($nameservers)
    {
        if (is_null($nameservers)) {
            throw new \InvalidArgumentException('non-nullable nameservers cannot be null');
        }
        $this->container['nameservers'] = $nameservers;

        return $this;
    }

    /**
     * Gets dns_resolves
     *
     * @return bool|null
     */
    public function getDnsResolves()
    {
        return $this->container['dns_resolves'];
    }

    /**
     * Sets dns_resolves
     *
     * @param bool|null $dns_resolves dns_resolves
     *
     * @return self
     */
    public function setDnsResolves($dns_resolves)
    {
        if (is_null($dns_resolves)) {
            throw new \InvalidArgumentException('non-nullable dns_resolves cannot be null');
        }
        $this->container['dns_resolves'] = $dns_resolves;

        return $this;
    }

    /**
     * Gets is_proxied
     *
     * @return bool|null
     */
    public function getIsProxied()
    {
        return $this->container['is_proxied'];
    }

    /**
     * Sets is_proxied
     *
     * @param bool|null $is_proxied is_proxied
     *
     * @return self
     */
    public function setIsProxied($is_proxied)
    {
        if (is_null($is_proxied)) {
            array_push($this->openAPINullablesSetToNull, 'is_proxied');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_proxied', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_proxied'] = $is_proxied;

        return $this;
    }

    /**
     * Gets is_cloudflare_ip
     *
     * @return bool|null
     */
    public function getIsCloudflareIp()
    {
        return $this->container['is_cloudflare_ip'];
    }

    /**
     * Sets is_cloudflare_ip
     *
     * @param bool|null $is_cloudflare_ip is_cloudflare_ip
     *
     * @return self
     */
    public function setIsCloudflareIp($is_cloudflare_ip)
    {
        if (is_null($is_cloudflare_ip)) {
            array_push($this->openAPINullablesSetToNull, 'is_cloudflare_ip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_cloudflare_ip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_cloudflare_ip'] = $is_cloudflare_ip;

        return $this;
    }

    /**
     * Gets is_fastly_ip
     *
     * @return bool|null
     */
    public function getIsFastlyIp()
    {
        return $this->container['is_fastly_ip'];
    }

    /**
     * Sets is_fastly_ip
     *
     * @param bool|null $is_fastly_ip is_fastly_ip
     *
     * @return self
     */
    public function setIsFastlyIp($is_fastly_ip)
    {
        if (is_null($is_fastly_ip)) {
            array_push($this->openAPINullablesSetToNull, 'is_fastly_ip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_fastly_ip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_fastly_ip'] = $is_fastly_ip;

        return $this;
    }

    /**
     * Gets is_old_ip_address
     *
     * @return bool|null
     */
    public function getIsOldIpAddress()
    {
        return $this->container['is_old_ip_address'];
    }

    /**
     * Sets is_old_ip_address
     *
     * @param bool|null $is_old_ip_address is_old_ip_address
     *
     * @return self
     */
    public function setIsOldIpAddress($is_old_ip_address)
    {
        if (is_null($is_old_ip_address)) {
            array_push($this->openAPINullablesSetToNull, 'is_old_ip_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_old_ip_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_old_ip_address'] = $is_old_ip_address;

        return $this;
    }

    /**
     * Gets is_a_record
     *
     * @return bool|null
     */
    public function getIsARecord()
    {
        return $this->container['is_a_record'];
    }

    /**
     * Sets is_a_record
     *
     * @param bool|null $is_a_record is_a_record
     *
     * @return self
     */
    public function setIsARecord($is_a_record)
    {
        if (is_null($is_a_record)) {
            array_push($this->openAPINullablesSetToNull, 'is_a_record');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_a_record', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_a_record'] = $is_a_record;

        return $this;
    }

    /**
     * Gets has_cname_record
     *
     * @return bool|null
     */
    public function getHasCnameRecord()
    {
        return $this->container['has_cname_record'];
    }

    /**
     * Sets has_cname_record
     *
     * @param bool|null $has_cname_record has_cname_record
     *
     * @return self
     */
    public function setHasCnameRecord($has_cname_record)
    {
        if (is_null($has_cname_record)) {
            array_push($this->openAPINullablesSetToNull, 'has_cname_record');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_cname_record', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_cname_record'] = $has_cname_record;

        return $this;
    }

    /**
     * Gets has_mx_records_present
     *
     * @return bool|null
     */
    public function getHasMxRecordsPresent()
    {
        return $this->container['has_mx_records_present'];
    }

    /**
     * Sets has_mx_records_present
     *
     * @param bool|null $has_mx_records_present has_mx_records_present
     *
     * @return self
     */
    public function setHasMxRecordsPresent($has_mx_records_present)
    {
        if (is_null($has_mx_records_present)) {
            array_push($this->openAPINullablesSetToNull, 'has_mx_records_present');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_mx_records_present', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_mx_records_present'] = $has_mx_records_present;

        return $this;
    }

    /**
     * Gets is_valid_domain
     *
     * @return bool|null
     */
    public function getIsValidDomain()
    {
        return $this->container['is_valid_domain'];
    }

    /**
     * Sets is_valid_domain
     *
     * @param bool|null $is_valid_domain is_valid_domain
     *
     * @return self
     */
    public function setIsValidDomain($is_valid_domain)
    {
        if (is_null($is_valid_domain)) {
            throw new \InvalidArgumentException('non-nullable is_valid_domain cannot be null');
        }
        $this->container['is_valid_domain'] = $is_valid_domain;

        return $this;
    }

    /**
     * Gets is_apex_domain
     *
     * @return bool|null
     */
    public function getIsApexDomain()
    {
        return $this->container['is_apex_domain'];
    }

    /**
     * Sets is_apex_domain
     *
     * @param bool|null $is_apex_domain is_apex_domain
     *
     * @return self
     */
    public function setIsApexDomain($is_apex_domain)
    {
        if (is_null($is_apex_domain)) {
            throw new \InvalidArgumentException('non-nullable is_apex_domain cannot be null');
        }
        $this->container['is_apex_domain'] = $is_apex_domain;

        return $this;
    }

    /**
     * Gets should_be_a_record
     *
     * @return bool|null
     */
    public function getShouldBeARecord()
    {
        return $this->container['should_be_a_record'];
    }

    /**
     * Sets should_be_a_record
     *
     * @param bool|null $should_be_a_record should_be_a_record
     *
     * @return self
     */
    public function setShouldBeARecord($should_be_a_record)
    {
        if (is_null($should_be_a_record)) {
            array_push($this->openAPINullablesSetToNull, 'should_be_a_record');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('should_be_a_record', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['should_be_a_record'] = $should_be_a_record;

        return $this;
    }

    /**
     * Gets is_cname_to_github_user_domain
     *
     * @return bool|null
     */
    public function getIsCnameToGithubUserDomain()
    {
        return $this->container['is_cname_to_github_user_domain'];
    }

    /**
     * Sets is_cname_to_github_user_domain
     *
     * @param bool|null $is_cname_to_github_user_domain is_cname_to_github_user_domain
     *
     * @return self
     */
    public function setIsCnameToGithubUserDomain($is_cname_to_github_user_domain)
    {
        if (is_null($is_cname_to_github_user_domain)) {
            array_push($this->openAPINullablesSetToNull, 'is_cname_to_github_user_domain');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_cname_to_github_user_domain', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_cname_to_github_user_domain'] = $is_cname_to_github_user_domain;

        return $this;
    }

    /**
     * Gets is_cname_to_pages_dot_github_dot_com
     *
     * @return bool|null
     */
    public function getIsCnameToPagesDotGithubDotCom()
    {
        return $this->container['is_cname_to_pages_dot_github_dot_com'];
    }

    /**
     * Sets is_cname_to_pages_dot_github_dot_com
     *
     * @param bool|null $is_cname_to_pages_dot_github_dot_com is_cname_to_pages_dot_github_dot_com
     *
     * @return self
     */
    public function setIsCnameToPagesDotGithubDotCom($is_cname_to_pages_dot_github_dot_com)
    {
        if (is_null($is_cname_to_pages_dot_github_dot_com)) {
            array_push($this->openAPINullablesSetToNull, 'is_cname_to_pages_dot_github_dot_com');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_cname_to_pages_dot_github_dot_com', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_cname_to_pages_dot_github_dot_com'] = $is_cname_to_pages_dot_github_dot_com;

        return $this;
    }

    /**
     * Gets is_cname_to_fastly
     *
     * @return bool|null
     */
    public function getIsCnameToFastly()
    {
        return $this->container['is_cname_to_fastly'];
    }

    /**
     * Sets is_cname_to_fastly
     *
     * @param bool|null $is_cname_to_fastly is_cname_to_fastly
     *
     * @return self
     */
    public function setIsCnameToFastly($is_cname_to_fastly)
    {
        if (is_null($is_cname_to_fastly)) {
            array_push($this->openAPINullablesSetToNull, 'is_cname_to_fastly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_cname_to_fastly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_cname_to_fastly'] = $is_cname_to_fastly;

        return $this;
    }

    /**
     * Gets is_pointed_to_github_pages_ip
     *
     * @return bool|null
     */
    public function getIsPointedToGithubPagesIp()
    {
        return $this->container['is_pointed_to_github_pages_ip'];
    }

    /**
     * Sets is_pointed_to_github_pages_ip
     *
     * @param bool|null $is_pointed_to_github_pages_ip is_pointed_to_github_pages_ip
     *
     * @return self
     */
    public function setIsPointedToGithubPagesIp($is_pointed_to_github_pages_ip)
    {
        if (is_null($is_pointed_to_github_pages_ip)) {
            array_push($this->openAPINullablesSetToNull, 'is_pointed_to_github_pages_ip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_pointed_to_github_pages_ip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_pointed_to_github_pages_ip'] = $is_pointed_to_github_pages_ip;

        return $this;
    }

    /**
     * Gets is_non_github_pages_ip_present
     *
     * @return bool|null
     */
    public function getIsNonGithubPagesIpPresent()
    {
        return $this->container['is_non_github_pages_ip_present'];
    }

    /**
     * Sets is_non_github_pages_ip_present
     *
     * @param bool|null $is_non_github_pages_ip_present is_non_github_pages_ip_present
     *
     * @return self
     */
    public function setIsNonGithubPagesIpPresent($is_non_github_pages_ip_present)
    {
        if (is_null($is_non_github_pages_ip_present)) {
            array_push($this->openAPINullablesSetToNull, 'is_non_github_pages_ip_present');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_non_github_pages_ip_present', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_non_github_pages_ip_present'] = $is_non_github_pages_ip_present;

        return $this;
    }

    /**
     * Gets is_pages_domain
     *
     * @return bool|null
     */
    public function getIsPagesDomain()
    {
        return $this->container['is_pages_domain'];
    }

    /**
     * Sets is_pages_domain
     *
     * @param bool|null $is_pages_domain is_pages_domain
     *
     * @return self
     */
    public function setIsPagesDomain($is_pages_domain)
    {
        if (is_null($is_pages_domain)) {
            throw new \InvalidArgumentException('non-nullable is_pages_domain cannot be null');
        }
        $this->container['is_pages_domain'] = $is_pages_domain;

        return $this;
    }

    /**
     * Gets is_served_by_pages
     *
     * @return bool|null
     */
    public function getIsServedByPages()
    {
        return $this->container['is_served_by_pages'];
    }

    /**
     * Sets is_served_by_pages
     *
     * @param bool|null $is_served_by_pages is_served_by_pages
     *
     * @return self
     */
    public function setIsServedByPages($is_served_by_pages)
    {
        if (is_null($is_served_by_pages)) {
            array_push($this->openAPINullablesSetToNull, 'is_served_by_pages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_served_by_pages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_served_by_pages'] = $is_served_by_pages;

        return $this;
    }

    /**
     * Gets is_valid
     *
     * @return bool|null
     */
    public function getIsValid()
    {
        return $this->container['is_valid'];
    }

    /**
     * Sets is_valid
     *
     * @param bool|null $is_valid is_valid
     *
     * @return self
     */
    public function setIsValid($is_valid)
    {
        if (is_null($is_valid)) {
            throw new \InvalidArgumentException('non-nullable is_valid cannot be null');
        }
        $this->container['is_valid'] = $is_valid;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            array_push($this->openAPINullablesSetToNull, 'reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets responds_to_https
     *
     * @return bool|null
     */
    public function getRespondsToHttps()
    {
        return $this->container['responds_to_https'];
    }

    /**
     * Sets responds_to_https
     *
     * @param bool|null $responds_to_https responds_to_https
     *
     * @return self
     */
    public function setRespondsToHttps($responds_to_https)
    {
        if (is_null($responds_to_https)) {
            throw new \InvalidArgumentException('non-nullable responds_to_https cannot be null');
        }
        $this->container['responds_to_https'] = $responds_to_https;

        return $this;
    }

    /**
     * Gets enforces_https
     *
     * @return bool|null
     */
    public function getEnforcesHttps()
    {
        return $this->container['enforces_https'];
    }

    /**
     * Sets enforces_https
     *
     * @param bool|null $enforces_https enforces_https
     *
     * @return self
     */
    public function setEnforcesHttps($enforces_https)
    {
        if (is_null($enforces_https)) {
            throw new \InvalidArgumentException('non-nullable enforces_https cannot be null');
        }
        $this->container['enforces_https'] = $enforces_https;

        return $this;
    }

    /**
     * Gets https_error
     *
     * @return string|null
     */
    public function getHttpsError()
    {
        return $this->container['https_error'];
    }

    /**
     * Sets https_error
     *
     * @param string|null $https_error https_error
     *
     * @return self
     */
    public function setHttpsError($https_error)
    {
        if (is_null($https_error)) {
            array_push($this->openAPINullablesSetToNull, 'https_error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('https_error', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['https_error'] = $https_error;

        return $this;
    }

    /**
     * Gets is_https_eligible
     *
     * @return bool|null
     */
    public function getIsHttpsEligible()
    {
        return $this->container['is_https_eligible'];
    }

    /**
     * Sets is_https_eligible
     *
     * @param bool|null $is_https_eligible is_https_eligible
     *
     * @return self
     */
    public function setIsHttpsEligible($is_https_eligible)
    {
        if (is_null($is_https_eligible)) {
            array_push($this->openAPINullablesSetToNull, 'is_https_eligible');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_https_eligible', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_https_eligible'] = $is_https_eligible;

        return $this;
    }

    /**
     * Gets caa_error
     *
     * @return string|null
     */
    public function getCaaError()
    {
        return $this->container['caa_error'];
    }

    /**
     * Sets caa_error
     *
     * @param string|null $caa_error caa_error
     *
     * @return self
     */
    public function setCaaError($caa_error)
    {
        if (is_null($caa_error)) {
            array_push($this->openAPINullablesSetToNull, 'caa_error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('caa_error', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['caa_error'] = $caa_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


