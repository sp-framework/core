<?php
/**
 * PullRequest8
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * PullRequest8 Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PullRequest8 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Pull_Request_8';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_links' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksPullRequest5Links',
        'active_lock_reason' => 'string',
        'additions' => 'int',
        'assignee' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User1',
        'assignees' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User1[]',
        'author_association' => 'string',
        'auto_merge' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PullRequestAutoMerge',
        'base' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PullRequestBase',
        'body' => 'string',
        'changed_files' => 'int',
        'closed_at' => '\DateTime',
        'comments' => 'int',
        'comments_url' => 'string',
        'commits' => 'int',
        'commits_url' => 'string',
        'created_at' => '\DateTime',
        'deletions' => 'int',
        'diff_url' => 'string',
        'draft' => 'bool',
        'head' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PullRequestBase',
        'html_url' => 'string',
        'id' => 'int',
        'issue_url' => 'string',
        'labels' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Label[]',
        'locked' => 'bool',
        'maintainer_can_modify' => 'bool',
        'merge_commit_sha' => 'string',
        'mergeable' => 'bool',
        'mergeable_state' => 'string',
        'merged' => 'bool',
        'merged_at' => '\DateTime',
        'merged_by' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User',
        'milestone' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Milestone',
        'node_id' => 'string',
        'number' => 'int',
        'patch_url' => 'string',
        'rebaseable' => 'bool',
        'requested_reviewers' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksPullRequest5RequestedReviewersInner[]',
        'requested_teams' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Team[]',
        'review_comment_url' => 'string',
        'review_comments' => 'int',
        'review_comments_url' => 'string',
        'state' => 'string',
        'statuses_url' => 'string',
        'title' => 'string',
        'updated_at' => '\DateTime',
        'url' => 'string',
        'user' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User1'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_links' => null,
        'active_lock_reason' => null,
        'additions' => null,
        'assignee' => null,
        'assignees' => null,
        'author_association' => null,
        'auto_merge' => null,
        'base' => null,
        'body' => null,
        'changed_files' => null,
        'closed_at' => 'date-time',
        'comments' => null,
        'comments_url' => 'uri',
        'commits' => null,
        'commits_url' => 'uri',
        'created_at' => 'date-time',
        'deletions' => null,
        'diff_url' => 'uri',
        'draft' => null,
        'head' => null,
        'html_url' => 'uri',
        'id' => null,
        'issue_url' => 'uri',
        'labels' => null,
        'locked' => null,
        'maintainer_can_modify' => null,
        'merge_commit_sha' => null,
        'mergeable' => null,
        'mergeable_state' => null,
        'merged' => null,
        'merged_at' => 'date-time',
        'merged_by' => null,
        'milestone' => null,
        'node_id' => null,
        'number' => null,
        'patch_url' => 'uri',
        'rebaseable' => null,
        'requested_reviewers' => null,
        'requested_teams' => null,
        'review_comment_url' => 'uri-template',
        'review_comments' => null,
        'review_comments_url' => 'uri',
        'state' => null,
        'statuses_url' => 'uri',
        'title' => null,
        'updated_at' => 'date-time',
        'url' => 'uri',
        'user' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_links' => false,
        'active_lock_reason' => true,
        'additions' => false,
        'assignee' => true,
        'assignees' => false,
        'author_association' => false,
        'auto_merge' => true,
        'base' => false,
        'body' => true,
        'changed_files' => false,
        'closed_at' => true,
        'comments' => false,
        'comments_url' => false,
        'commits' => false,
        'commits_url' => false,
        'created_at' => false,
        'deletions' => false,
        'diff_url' => false,
        'draft' => false,
        'head' => false,
        'html_url' => false,
        'id' => false,
        'issue_url' => false,
        'labels' => false,
        'locked' => false,
        'maintainer_can_modify' => false,
        'merge_commit_sha' => true,
        'mergeable' => true,
        'mergeable_state' => false,
        'merged' => true,
        'merged_at' => true,
        'merged_by' => true,
        'milestone' => true,
        'node_id' => false,
        'number' => false,
        'patch_url' => false,
        'rebaseable' => true,
        'requested_reviewers' => false,
        'requested_teams' => false,
        'review_comment_url' => false,
        'review_comments' => false,
        'review_comments_url' => false,
        'state' => false,
        'statuses_url' => false,
        'title' => false,
        'updated_at' => false,
        'url' => false,
        'user' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_links' => '_links',
        'active_lock_reason' => 'active_lock_reason',
        'additions' => 'additions',
        'assignee' => 'assignee',
        'assignees' => 'assignees',
        'author_association' => 'author_association',
        'auto_merge' => 'auto_merge',
        'base' => 'base',
        'body' => 'body',
        'changed_files' => 'changed_files',
        'closed_at' => 'closed_at',
        'comments' => 'comments',
        'comments_url' => 'comments_url',
        'commits' => 'commits',
        'commits_url' => 'commits_url',
        'created_at' => 'created_at',
        'deletions' => 'deletions',
        'diff_url' => 'diff_url',
        'draft' => 'draft',
        'head' => 'head',
        'html_url' => 'html_url',
        'id' => 'id',
        'issue_url' => 'issue_url',
        'labels' => 'labels',
        'locked' => 'locked',
        'maintainer_can_modify' => 'maintainer_can_modify',
        'merge_commit_sha' => 'merge_commit_sha',
        'mergeable' => 'mergeable',
        'mergeable_state' => 'mergeable_state',
        'merged' => 'merged',
        'merged_at' => 'merged_at',
        'merged_by' => 'merged_by',
        'milestone' => 'milestone',
        'node_id' => 'node_id',
        'number' => 'number',
        'patch_url' => 'patch_url',
        'rebaseable' => 'rebaseable',
        'requested_reviewers' => 'requested_reviewers',
        'requested_teams' => 'requested_teams',
        'review_comment_url' => 'review_comment_url',
        'review_comments' => 'review_comments',
        'review_comments_url' => 'review_comments_url',
        'state' => 'state',
        'statuses_url' => 'statuses_url',
        'title' => 'title',
        'updated_at' => 'updated_at',
        'url' => 'url',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_links' => 'setLinks',
        'active_lock_reason' => 'setActiveLockReason',
        'additions' => 'setAdditions',
        'assignee' => 'setAssignee',
        'assignees' => 'setAssignees',
        'author_association' => 'setAuthorAssociation',
        'auto_merge' => 'setAutoMerge',
        'base' => 'setBase',
        'body' => 'setBody',
        'changed_files' => 'setChangedFiles',
        'closed_at' => 'setClosedAt',
        'comments' => 'setComments',
        'comments_url' => 'setCommentsUrl',
        'commits' => 'setCommits',
        'commits_url' => 'setCommitsUrl',
        'created_at' => 'setCreatedAt',
        'deletions' => 'setDeletions',
        'diff_url' => 'setDiffUrl',
        'draft' => 'setDraft',
        'head' => 'setHead',
        'html_url' => 'setHtmlUrl',
        'id' => 'setId',
        'issue_url' => 'setIssueUrl',
        'labels' => 'setLabels',
        'locked' => 'setLocked',
        'maintainer_can_modify' => 'setMaintainerCanModify',
        'merge_commit_sha' => 'setMergeCommitSha',
        'mergeable' => 'setMergeable',
        'mergeable_state' => 'setMergeableState',
        'merged' => 'setMerged',
        'merged_at' => 'setMergedAt',
        'merged_by' => 'setMergedBy',
        'milestone' => 'setMilestone',
        'node_id' => 'setNodeId',
        'number' => 'setNumber',
        'patch_url' => 'setPatchUrl',
        'rebaseable' => 'setRebaseable',
        'requested_reviewers' => 'setRequestedReviewers',
        'requested_teams' => 'setRequestedTeams',
        'review_comment_url' => 'setReviewCommentUrl',
        'review_comments' => 'setReviewComments',
        'review_comments_url' => 'setReviewCommentsUrl',
        'state' => 'setState',
        'statuses_url' => 'setStatusesUrl',
        'title' => 'setTitle',
        'updated_at' => 'setUpdatedAt',
        'url' => 'setUrl',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_links' => 'getLinks',
        'active_lock_reason' => 'getActiveLockReason',
        'additions' => 'getAdditions',
        'assignee' => 'getAssignee',
        'assignees' => 'getAssignees',
        'author_association' => 'getAuthorAssociation',
        'auto_merge' => 'getAutoMerge',
        'base' => 'getBase',
        'body' => 'getBody',
        'changed_files' => 'getChangedFiles',
        'closed_at' => 'getClosedAt',
        'comments' => 'getComments',
        'comments_url' => 'getCommentsUrl',
        'commits' => 'getCommits',
        'commits_url' => 'getCommitsUrl',
        'created_at' => 'getCreatedAt',
        'deletions' => 'getDeletions',
        'diff_url' => 'getDiffUrl',
        'draft' => 'getDraft',
        'head' => 'getHead',
        'html_url' => 'getHtmlUrl',
        'id' => 'getId',
        'issue_url' => 'getIssueUrl',
        'labels' => 'getLabels',
        'locked' => 'getLocked',
        'maintainer_can_modify' => 'getMaintainerCanModify',
        'merge_commit_sha' => 'getMergeCommitSha',
        'mergeable' => 'getMergeable',
        'mergeable_state' => 'getMergeableState',
        'merged' => 'getMerged',
        'merged_at' => 'getMergedAt',
        'merged_by' => 'getMergedBy',
        'milestone' => 'getMilestone',
        'node_id' => 'getNodeId',
        'number' => 'getNumber',
        'patch_url' => 'getPatchUrl',
        'rebaseable' => 'getRebaseable',
        'requested_reviewers' => 'getRequestedReviewers',
        'requested_teams' => 'getRequestedTeams',
        'review_comment_url' => 'getReviewCommentUrl',
        'review_comments' => 'getReviewComments',
        'review_comments_url' => 'getReviewCommentsUrl',
        'state' => 'getState',
        'statuses_url' => 'getStatusesUrl',
        'title' => 'getTitle',
        'updated_at' => 'getUpdatedAt',
        'url' => 'getUrl',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACTIVE_LOCK_REASON_RESOLVED = 'resolved';
    public const ACTIVE_LOCK_REASON_OFF_TOPIC = 'off-topic';
    public const ACTIVE_LOCK_REASON_TOO_HEATED = 'too heated';
    public const ACTIVE_LOCK_REASON_SPAM = 'spam';
    public const ACTIVE_LOCK_REASON_NULL = 'null';
    public const AUTHOR_ASSOCIATION_COLLABORATOR = 'COLLABORATOR';
    public const AUTHOR_ASSOCIATION_CONTRIBUTOR = 'CONTRIBUTOR';
    public const AUTHOR_ASSOCIATION_FIRST_TIMER = 'FIRST_TIMER';
    public const AUTHOR_ASSOCIATION_FIRST_TIME_CONTRIBUTOR = 'FIRST_TIME_CONTRIBUTOR';
    public const AUTHOR_ASSOCIATION_MANNEQUIN = 'MANNEQUIN';
    public const AUTHOR_ASSOCIATION_MEMBER = 'MEMBER';
    public const AUTHOR_ASSOCIATION_NONE = 'NONE';
    public const AUTHOR_ASSOCIATION_OWNER = 'OWNER';
    public const STATE_OPEN = 'open';
    public const STATE_CLOSED = 'closed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActiveLockReasonAllowableValues()
    {
        return [
            self::ACTIVE_LOCK_REASON_RESOLVED,
            self::ACTIVE_LOCK_REASON_OFF_TOPIC,
            self::ACTIVE_LOCK_REASON_TOO_HEATED,
            self::ACTIVE_LOCK_REASON_SPAM,
            self::ACTIVE_LOCK_REASON_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthorAssociationAllowableValues()
    {
        return [
            self::AUTHOR_ASSOCIATION_COLLABORATOR,
            self::AUTHOR_ASSOCIATION_CONTRIBUTOR,
            self::AUTHOR_ASSOCIATION_FIRST_TIMER,
            self::AUTHOR_ASSOCIATION_FIRST_TIME_CONTRIBUTOR,
            self::AUTHOR_ASSOCIATION_MANNEQUIN,
            self::AUTHOR_ASSOCIATION_MEMBER,
            self::AUTHOR_ASSOCIATION_NONE,
            self::AUTHOR_ASSOCIATION_OWNER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_OPEN,
            self::STATE_CLOSED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('_links', $data ?? [], null);
        $this->setIfExists('active_lock_reason', $data ?? [], null);
        $this->setIfExists('additions', $data ?? [], null);
        $this->setIfExists('assignee', $data ?? [], null);
        $this->setIfExists('assignees', $data ?? [], null);
        $this->setIfExists('author_association', $data ?? [], null);
        $this->setIfExists('auto_merge', $data ?? [], null);
        $this->setIfExists('base', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('changed_files', $data ?? [], null);
        $this->setIfExists('closed_at', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('comments_url', $data ?? [], null);
        $this->setIfExists('commits', $data ?? [], null);
        $this->setIfExists('commits_url', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('deletions', $data ?? [], null);
        $this->setIfExists('diff_url', $data ?? [], null);
        $this->setIfExists('draft', $data ?? [], null);
        $this->setIfExists('head', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('issue_url', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('locked', $data ?? [], null);
        $this->setIfExists('maintainer_can_modify', $data ?? [], null);
        $this->setIfExists('merge_commit_sha', $data ?? [], null);
        $this->setIfExists('mergeable', $data ?? [], null);
        $this->setIfExists('mergeable_state', $data ?? [], null);
        $this->setIfExists('merged', $data ?? [], null);
        $this->setIfExists('merged_at', $data ?? [], null);
        $this->setIfExists('merged_by', $data ?? [], null);
        $this->setIfExists('milestone', $data ?? [], null);
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('patch_url', $data ?? [], null);
        $this->setIfExists('rebaseable', $data ?? [], null);
        $this->setIfExists('requested_reviewers', $data ?? [], null);
        $this->setIfExists('requested_teams', $data ?? [], null);
        $this->setIfExists('review_comment_url', $data ?? [], null);
        $this->setIfExists('review_comments', $data ?? [], null);
        $this->setIfExists('review_comments_url', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('statuses_url', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['_links'] === null) {
            $invalidProperties[] = "'_links' can't be null";
        }
        if ($this->container['active_lock_reason'] === null) {
            $invalidProperties[] = "'active_lock_reason' can't be null";
        }
        $allowedValues = $this->getActiveLockReasonAllowableValues();
        if (!is_null($this->container['active_lock_reason']) && !in_array($this->container['active_lock_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'active_lock_reason', must be one of '%s'",
                $this->container['active_lock_reason'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['assignee'] === null) {
            $invalidProperties[] = "'assignee' can't be null";
        }
        if ($this->container['assignees'] === null) {
            $invalidProperties[] = "'assignees' can't be null";
        }
        if ($this->container['author_association'] === null) {
            $invalidProperties[] = "'author_association' can't be null";
        }
        $allowedValues = $this->getAuthorAssociationAllowableValues();
        if (!is_null($this->container['author_association']) && !in_array($this->container['author_association'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'author_association', must be one of '%s'",
                $this->container['author_association'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['auto_merge'] === null) {
            $invalidProperties[] = "'auto_merge' can't be null";
        }
        if ($this->container['base'] === null) {
            $invalidProperties[] = "'base' can't be null";
        }
        if ($this->container['body'] === null) {
            $invalidProperties[] = "'body' can't be null";
        }
        if ($this->container['closed_at'] === null) {
            $invalidProperties[] = "'closed_at' can't be null";
        }
        if ($this->container['comments_url'] === null) {
            $invalidProperties[] = "'comments_url' can't be null";
        }
        if ($this->container['commits_url'] === null) {
            $invalidProperties[] = "'commits_url' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['diff_url'] === null) {
            $invalidProperties[] = "'diff_url' can't be null";
        }
        if ($this->container['draft'] === null) {
            $invalidProperties[] = "'draft' can't be null";
        }
        if ($this->container['head'] === null) {
            $invalidProperties[] = "'head' can't be null";
        }
        if ($this->container['html_url'] === null) {
            $invalidProperties[] = "'html_url' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['issue_url'] === null) {
            $invalidProperties[] = "'issue_url' can't be null";
        }
        if ($this->container['labels'] === null) {
            $invalidProperties[] = "'labels' can't be null";
        }
        if ($this->container['locked'] === null) {
            $invalidProperties[] = "'locked' can't be null";
        }
        if ($this->container['merge_commit_sha'] === null) {
            $invalidProperties[] = "'merge_commit_sha' can't be null";
        }
        if ($this->container['merged_at'] === null) {
            $invalidProperties[] = "'merged_at' can't be null";
        }
        if ($this->container['milestone'] === null) {
            $invalidProperties[] = "'milestone' can't be null";
        }
        if ($this->container['node_id'] === null) {
            $invalidProperties[] = "'node_id' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['patch_url'] === null) {
            $invalidProperties[] = "'patch_url' can't be null";
        }
        if ($this->container['requested_reviewers'] === null) {
            $invalidProperties[] = "'requested_reviewers' can't be null";
        }
        if ($this->container['requested_teams'] === null) {
            $invalidProperties[] = "'requested_teams' can't be null";
        }
        if ($this->container['review_comment_url'] === null) {
            $invalidProperties[] = "'review_comment_url' can't be null";
        }
        if ($this->container['review_comments_url'] === null) {
            $invalidProperties[] = "'review_comments_url' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['statuses_url'] === null) {
            $invalidProperties[] = "'statuses_url' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _links
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksPullRequest5Links
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksPullRequest5Links $_links _links
     *
     * @return self
     */
    public function setLinks($_links)
    {
        if (is_null($_links)) {
            throw new \InvalidArgumentException('non-nullable _links cannot be null');
        }
        $this->container['_links'] = $_links;

        return $this;
    }

    /**
     * Gets active_lock_reason
     *
     * @return string
     */
    public function getActiveLockReason()
    {
        return $this->container['active_lock_reason'];
    }

    /**
     * Sets active_lock_reason
     *
     * @param string $active_lock_reason active_lock_reason
     *
     * @return self
     */
    public function setActiveLockReason($active_lock_reason)
    {
        if (is_null($active_lock_reason)) {
            array_push($this->openAPINullablesSetToNull, 'active_lock_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active_lock_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getActiveLockReasonAllowableValues();
        if (!is_null($active_lock_reason) && !in_array($active_lock_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'active_lock_reason', must be one of '%s'",
                    $active_lock_reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['active_lock_reason'] = $active_lock_reason;

        return $this;
    }

    /**
     * Gets additions
     *
     * @return int|null
     */
    public function getAdditions()
    {
        return $this->container['additions'];
    }

    /**
     * Sets additions
     *
     * @param int|null $additions additions
     *
     * @return self
     */
    public function setAdditions($additions)
    {
        if (is_null($additions)) {
            throw new \InvalidArgumentException('non-nullable additions cannot be null');
        }
        $this->container['additions'] = $additions;

        return $this;
    }

    /**
     * Gets assignee
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User1
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User1 $assignee assignee
     *
     * @return self
     */
    public function setAssignee($assignee)
    {
        if (is_null($assignee)) {
            array_push($this->openAPINullablesSetToNull, 'assignee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assignee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets assignees
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User1[]
     */
    public function getAssignees()
    {
        return $this->container['assignees'];
    }

    /**
     * Sets assignees
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User1[] $assignees assignees
     *
     * @return self
     */
    public function setAssignees($assignees)
    {
        if (is_null($assignees)) {
            throw new \InvalidArgumentException('non-nullable assignees cannot be null');
        }
        $this->container['assignees'] = $assignees;

        return $this;
    }

    /**
     * Gets author_association
     *
     * @return string
     */
    public function getAuthorAssociation()
    {
        return $this->container['author_association'];
    }

    /**
     * Sets author_association
     *
     * @param string $author_association How the author is associated with the repository.
     *
     * @return self
     */
    public function setAuthorAssociation($author_association)
    {
        if (is_null($author_association)) {
            throw new \InvalidArgumentException('non-nullable author_association cannot be null');
        }
        $allowedValues = $this->getAuthorAssociationAllowableValues();
        if (!in_array($author_association, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'author_association', must be one of '%s'",
                    $author_association,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['author_association'] = $author_association;

        return $this;
    }

    /**
     * Gets auto_merge
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PullRequestAutoMerge
     */
    public function getAutoMerge()
    {
        return $this->container['auto_merge'];
    }

    /**
     * Sets auto_merge
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PullRequestAutoMerge $auto_merge auto_merge
     *
     * @return self
     */
    public function setAutoMerge($auto_merge)
    {
        if (is_null($auto_merge)) {
            array_push($this->openAPINullablesSetToNull, 'auto_merge');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auto_merge', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auto_merge'] = $auto_merge;

        return $this;
    }

    /**
     * Gets base
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PullRequestBase
     */
    public function getBase()
    {
        return $this->container['base'];
    }

    /**
     * Sets base
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PullRequestBase $base base
     *
     * @return self
     */
    public function setBase($base)
    {
        if (is_null($base)) {
            throw new \InvalidArgumentException('non-nullable base cannot be null');
        }
        $this->container['base'] = $base;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            array_push($this->openAPINullablesSetToNull, 'body');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('body', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets changed_files
     *
     * @return int|null
     */
    public function getChangedFiles()
    {
        return $this->container['changed_files'];
    }

    /**
     * Sets changed_files
     *
     * @param int|null $changed_files changed_files
     *
     * @return self
     */
    public function setChangedFiles($changed_files)
    {
        if (is_null($changed_files)) {
            throw new \InvalidArgumentException('non-nullable changed_files cannot be null');
        }
        $this->container['changed_files'] = $changed_files;

        return $this;
    }

    /**
     * Gets closed_at
     *
     * @return \DateTime
     */
    public function getClosedAt()
    {
        return $this->container['closed_at'];
    }

    /**
     * Sets closed_at
     *
     * @param \DateTime $closed_at closed_at
     *
     * @return self
     */
    public function setClosedAt($closed_at)
    {
        if (is_null($closed_at)) {
            array_push($this->openAPINullablesSetToNull, 'closed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('closed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['closed_at'] = $closed_at;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return int|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param int|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets comments_url
     *
     * @return string
     */
    public function getCommentsUrl()
    {
        return $this->container['comments_url'];
    }

    /**
     * Sets comments_url
     *
     * @param string $comments_url comments_url
     *
     * @return self
     */
    public function setCommentsUrl($comments_url)
    {
        if (is_null($comments_url)) {
            throw new \InvalidArgumentException('non-nullable comments_url cannot be null');
        }
        $this->container['comments_url'] = $comments_url;

        return $this;
    }

    /**
     * Gets commits
     *
     * @return int|null
     */
    public function getCommits()
    {
        return $this->container['commits'];
    }

    /**
     * Sets commits
     *
     * @param int|null $commits commits
     *
     * @return self
     */
    public function setCommits($commits)
    {
        if (is_null($commits)) {
            throw new \InvalidArgumentException('non-nullable commits cannot be null');
        }
        $this->container['commits'] = $commits;

        return $this;
    }

    /**
     * Gets commits_url
     *
     * @return string
     */
    public function getCommitsUrl()
    {
        return $this->container['commits_url'];
    }

    /**
     * Sets commits_url
     *
     * @param string $commits_url commits_url
     *
     * @return self
     */
    public function setCommitsUrl($commits_url)
    {
        if (is_null($commits_url)) {
            throw new \InvalidArgumentException('non-nullable commits_url cannot be null');
        }
        $this->container['commits_url'] = $commits_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets deletions
     *
     * @return int|null
     */
    public function getDeletions()
    {
        return $this->container['deletions'];
    }

    /**
     * Sets deletions
     *
     * @param int|null $deletions deletions
     *
     * @return self
     */
    public function setDeletions($deletions)
    {
        if (is_null($deletions)) {
            throw new \InvalidArgumentException('non-nullable deletions cannot be null');
        }
        $this->container['deletions'] = $deletions;

        return $this;
    }

    /**
     * Gets diff_url
     *
     * @return string
     */
    public function getDiffUrl()
    {
        return $this->container['diff_url'];
    }

    /**
     * Sets diff_url
     *
     * @param string $diff_url diff_url
     *
     * @return self
     */
    public function setDiffUrl($diff_url)
    {
        if (is_null($diff_url)) {
            throw new \InvalidArgumentException('non-nullable diff_url cannot be null');
        }
        $this->container['diff_url'] = $diff_url;

        return $this;
    }

    /**
     * Gets draft
     *
     * @return bool
     */
    public function getDraft()
    {
        return $this->container['draft'];
    }

    /**
     * Sets draft
     *
     * @param bool $draft Indicates whether or not the pull request is a draft.
     *
     * @return self
     */
    public function setDraft($draft)
    {
        if (is_null($draft)) {
            throw new \InvalidArgumentException('non-nullable draft cannot be null');
        }
        $this->container['draft'] = $draft;

        return $this;
    }

    /**
     * Gets head
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PullRequestBase
     */
    public function getHead()
    {
        return $this->container['head'];
    }

    /**
     * Sets head
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\PullRequestBase $head head
     *
     * @return self
     */
    public function setHead($head)
    {
        if (is_null($head)) {
            throw new \InvalidArgumentException('non-nullable head cannot be null');
        }
        $this->container['head'] = $head;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets issue_url
     *
     * @return string
     */
    public function getIssueUrl()
    {
        return $this->container['issue_url'];
    }

    /**
     * Sets issue_url
     *
     * @param string $issue_url issue_url
     *
     * @return self
     */
    public function setIssueUrl($issue_url)
    {
        if (is_null($issue_url)) {
            throw new \InvalidArgumentException('non-nullable issue_url cannot be null');
        }
        $this->container['issue_url'] = $issue_url;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Label[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Label[] $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked locked
     *
     * @return self
     */
    public function setLocked($locked)
    {
        if (is_null($locked)) {
            throw new \InvalidArgumentException('non-nullable locked cannot be null');
        }
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets maintainer_can_modify
     *
     * @return bool|null
     */
    public function getMaintainerCanModify()
    {
        return $this->container['maintainer_can_modify'];
    }

    /**
     * Sets maintainer_can_modify
     *
     * @param bool|null $maintainer_can_modify Indicates whether maintainers can modify the pull request.
     *
     * @return self
     */
    public function setMaintainerCanModify($maintainer_can_modify)
    {
        if (is_null($maintainer_can_modify)) {
            throw new \InvalidArgumentException('non-nullable maintainer_can_modify cannot be null');
        }
        $this->container['maintainer_can_modify'] = $maintainer_can_modify;

        return $this;
    }

    /**
     * Gets merge_commit_sha
     *
     * @return string
     */
    public function getMergeCommitSha()
    {
        return $this->container['merge_commit_sha'];
    }

    /**
     * Sets merge_commit_sha
     *
     * @param string $merge_commit_sha merge_commit_sha
     *
     * @return self
     */
    public function setMergeCommitSha($merge_commit_sha)
    {
        if (is_null($merge_commit_sha)) {
            array_push($this->openAPINullablesSetToNull, 'merge_commit_sha');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merge_commit_sha', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merge_commit_sha'] = $merge_commit_sha;

        return $this;
    }

    /**
     * Gets mergeable
     *
     * @return bool|null
     */
    public function getMergeable()
    {
        return $this->container['mergeable'];
    }

    /**
     * Sets mergeable
     *
     * @param bool|null $mergeable mergeable
     *
     * @return self
     */
    public function setMergeable($mergeable)
    {
        if (is_null($mergeable)) {
            array_push($this->openAPINullablesSetToNull, 'mergeable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mergeable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mergeable'] = $mergeable;

        return $this;
    }

    /**
     * Gets mergeable_state
     *
     * @return string|null
     */
    public function getMergeableState()
    {
        return $this->container['mergeable_state'];
    }

    /**
     * Sets mergeable_state
     *
     * @param string|null $mergeable_state mergeable_state
     *
     * @return self
     */
    public function setMergeableState($mergeable_state)
    {
        if (is_null($mergeable_state)) {
            throw new \InvalidArgumentException('non-nullable mergeable_state cannot be null');
        }
        $this->container['mergeable_state'] = $mergeable_state;

        return $this;
    }

    /**
     * Gets merged
     *
     * @return bool|null
     */
    public function getMerged()
    {
        return $this->container['merged'];
    }

    /**
     * Sets merged
     *
     * @param bool|null $merged merged
     *
     * @return self
     */
    public function setMerged($merged)
    {
        if (is_null($merged)) {
            array_push($this->openAPINullablesSetToNull, 'merged');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merged', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merged'] = $merged;

        return $this;
    }

    /**
     * Gets merged_at
     *
     * @return \DateTime
     */
    public function getMergedAt()
    {
        return $this->container['merged_at'];
    }

    /**
     * Sets merged_at
     *
     * @param \DateTime $merged_at merged_at
     *
     * @return self
     */
    public function setMergedAt($merged_at)
    {
        if (is_null($merged_at)) {
            array_push($this->openAPINullablesSetToNull, 'merged_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merged_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merged_at'] = $merged_at;

        return $this;
    }

    /**
     * Gets merged_by
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User|null
     */
    public function getMergedBy()
    {
        return $this->container['merged_by'];
    }

    /**
     * Sets merged_by
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User|null $merged_by merged_by
     *
     * @return self
     */
    public function setMergedBy($merged_by)
    {
        if (is_null($merged_by)) {
            array_push($this->openAPINullablesSetToNull, 'merged_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merged_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merged_by'] = $merged_by;

        return $this;
    }

    /**
     * Gets milestone
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Milestone
     */
    public function getMilestone()
    {
        return $this->container['milestone'];
    }

    /**
     * Sets milestone
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Milestone $milestone milestone
     *
     * @return self
     */
    public function setMilestone($milestone)
    {
        if (is_null($milestone)) {
            array_push($this->openAPINullablesSetToNull, 'milestone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('milestone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['milestone'] = $milestone;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number Number uniquely identifying the pull request within its repository.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets patch_url
     *
     * @return string
     */
    public function getPatchUrl()
    {
        return $this->container['patch_url'];
    }

    /**
     * Sets patch_url
     *
     * @param string $patch_url patch_url
     *
     * @return self
     */
    public function setPatchUrl($patch_url)
    {
        if (is_null($patch_url)) {
            throw new \InvalidArgumentException('non-nullable patch_url cannot be null');
        }
        $this->container['patch_url'] = $patch_url;

        return $this;
    }

    /**
     * Gets rebaseable
     *
     * @return bool|null
     */
    public function getRebaseable()
    {
        return $this->container['rebaseable'];
    }

    /**
     * Sets rebaseable
     *
     * @param bool|null $rebaseable rebaseable
     *
     * @return self
     */
    public function setRebaseable($rebaseable)
    {
        if (is_null($rebaseable)) {
            array_push($this->openAPINullablesSetToNull, 'rebaseable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rebaseable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rebaseable'] = $rebaseable;

        return $this;
    }

    /**
     * Gets requested_reviewers
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksPullRequest5RequestedReviewersInner[]
     */
    public function getRequestedReviewers()
    {
        return $this->container['requested_reviewers'];
    }

    /**
     * Sets requested_reviewers
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksPullRequest5RequestedReviewersInner[] $requested_reviewers requested_reviewers
     *
     * @return self
     */
    public function setRequestedReviewers($requested_reviewers)
    {
        if (is_null($requested_reviewers)) {
            throw new \InvalidArgumentException('non-nullable requested_reviewers cannot be null');
        }
        $this->container['requested_reviewers'] = $requested_reviewers;

        return $this;
    }

    /**
     * Gets requested_teams
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Team[]
     */
    public function getRequestedTeams()
    {
        return $this->container['requested_teams'];
    }

    /**
     * Sets requested_teams
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Team[] $requested_teams requested_teams
     *
     * @return self
     */
    public function setRequestedTeams($requested_teams)
    {
        if (is_null($requested_teams)) {
            throw new \InvalidArgumentException('non-nullable requested_teams cannot be null');
        }
        $this->container['requested_teams'] = $requested_teams;

        return $this;
    }

    /**
     * Gets review_comment_url
     *
     * @return string
     */
    public function getReviewCommentUrl()
    {
        return $this->container['review_comment_url'];
    }

    /**
     * Sets review_comment_url
     *
     * @param string $review_comment_url review_comment_url
     *
     * @return self
     */
    public function setReviewCommentUrl($review_comment_url)
    {
        if (is_null($review_comment_url)) {
            throw new \InvalidArgumentException('non-nullable review_comment_url cannot be null');
        }
        $this->container['review_comment_url'] = $review_comment_url;

        return $this;
    }

    /**
     * Gets review_comments
     *
     * @return int|null
     */
    public function getReviewComments()
    {
        return $this->container['review_comments'];
    }

    /**
     * Sets review_comments
     *
     * @param int|null $review_comments review_comments
     *
     * @return self
     */
    public function setReviewComments($review_comments)
    {
        if (is_null($review_comments)) {
            throw new \InvalidArgumentException('non-nullable review_comments cannot be null');
        }
        $this->container['review_comments'] = $review_comments;

        return $this;
    }

    /**
     * Gets review_comments_url
     *
     * @return string
     */
    public function getReviewCommentsUrl()
    {
        return $this->container['review_comments_url'];
    }

    /**
     * Sets review_comments_url
     *
     * @param string $review_comments_url review_comments_url
     *
     * @return self
     */
    public function setReviewCommentsUrl($review_comments_url)
    {
        if (is_null($review_comments_url)) {
            throw new \InvalidArgumentException('non-nullable review_comments_url cannot be null');
        }
        $this->container['review_comments_url'] = $review_comments_url;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of this Pull Request. Either `open` or `closed`.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets statuses_url
     *
     * @return string
     */
    public function getStatusesUrl()
    {
        return $this->container['statuses_url'];
    }

    /**
     * Sets statuses_url
     *
     * @param string $statuses_url statuses_url
     *
     * @return self
     */
    public function setStatusesUrl($statuses_url)
    {
        if (is_null($statuses_url)) {
            throw new \InvalidArgumentException('non-nullable statuses_url cannot be null');
        }
        $this->container['statuses_url'] = $statuses_url;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the pull request.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User1
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User1 $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


