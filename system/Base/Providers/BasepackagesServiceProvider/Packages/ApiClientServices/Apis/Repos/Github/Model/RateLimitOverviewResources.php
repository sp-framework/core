<?php
/**
 * RateLimitOverviewResources
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * RateLimitOverviewResources Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RateLimitOverviewResources implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'rate_limit_overview_resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'core' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit',
        'graphql' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit',
        'search' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit',
        'code_search' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit',
        'source_import' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit',
        'integration_manifest' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit',
        'code_scanning_upload' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit',
        'actions_runner_registration' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit',
        'scim' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit',
        'dependency_snapshots' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'core' => null,
        'graphql' => null,
        'search' => null,
        'code_search' => null,
        'source_import' => null,
        'integration_manifest' => null,
        'code_scanning_upload' => null,
        'actions_runner_registration' => null,
        'scim' => null,
        'dependency_snapshots' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'core' => false,
        'graphql' => false,
        'search' => false,
        'code_search' => false,
        'source_import' => false,
        'integration_manifest' => false,
        'code_scanning_upload' => false,
        'actions_runner_registration' => false,
        'scim' => false,
        'dependency_snapshots' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'core' => 'core',
        'graphql' => 'graphql',
        'search' => 'search',
        'code_search' => 'code_search',
        'source_import' => 'source_import',
        'integration_manifest' => 'integration_manifest',
        'code_scanning_upload' => 'code_scanning_upload',
        'actions_runner_registration' => 'actions_runner_registration',
        'scim' => 'scim',
        'dependency_snapshots' => 'dependency_snapshots'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'core' => 'setCore',
        'graphql' => 'setGraphql',
        'search' => 'setSearch',
        'code_search' => 'setCodeSearch',
        'source_import' => 'setSourceImport',
        'integration_manifest' => 'setIntegrationManifest',
        'code_scanning_upload' => 'setCodeScanningUpload',
        'actions_runner_registration' => 'setActionsRunnerRegistration',
        'scim' => 'setScim',
        'dependency_snapshots' => 'setDependencySnapshots'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'core' => 'getCore',
        'graphql' => 'getGraphql',
        'search' => 'getSearch',
        'code_search' => 'getCodeSearch',
        'source_import' => 'getSourceImport',
        'integration_manifest' => 'getIntegrationManifest',
        'code_scanning_upload' => 'getCodeScanningUpload',
        'actions_runner_registration' => 'getActionsRunnerRegistration',
        'scim' => 'getScim',
        'dependency_snapshots' => 'getDependencySnapshots'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('core', $data ?? [], null);
        $this->setIfExists('graphql', $data ?? [], null);
        $this->setIfExists('search', $data ?? [], null);
        $this->setIfExists('code_search', $data ?? [], null);
        $this->setIfExists('source_import', $data ?? [], null);
        $this->setIfExists('integration_manifest', $data ?? [], null);
        $this->setIfExists('code_scanning_upload', $data ?? [], null);
        $this->setIfExists('actions_runner_registration', $data ?? [], null);
        $this->setIfExists('scim', $data ?? [], null);
        $this->setIfExists('dependency_snapshots', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['core'] === null) {
            $invalidProperties[] = "'core' can't be null";
        }
        if ($this->container['search'] === null) {
            $invalidProperties[] = "'search' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets core
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit
     */
    public function getCore()
    {
        return $this->container['core'];
    }

    /**
     * Sets core
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit $core core
     *
     * @return self
     */
    public function setCore($core)
    {
        if (is_null($core)) {
            throw new \InvalidArgumentException('non-nullable core cannot be null');
        }
        $this->container['core'] = $core;

        return $this;
    }

    /**
     * Gets graphql
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null
     */
    public function getGraphql()
    {
        return $this->container['graphql'];
    }

    /**
     * Sets graphql
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null $graphql graphql
     *
     * @return self
     */
    public function setGraphql($graphql)
    {
        if (is_null($graphql)) {
            throw new \InvalidArgumentException('non-nullable graphql cannot be null');
        }
        $this->container['graphql'] = $graphql;

        return $this;
    }

    /**
     * Gets search
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit
     */
    public function getSearch()
    {
        return $this->container['search'];
    }

    /**
     * Sets search
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit $search search
     *
     * @return self
     */
    public function setSearch($search)
    {
        if (is_null($search)) {
            throw new \InvalidArgumentException('non-nullable search cannot be null');
        }
        $this->container['search'] = $search;

        return $this;
    }

    /**
     * Gets code_search
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null
     */
    public function getCodeSearch()
    {
        return $this->container['code_search'];
    }

    /**
     * Sets code_search
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null $code_search code_search
     *
     * @return self
     */
    public function setCodeSearch($code_search)
    {
        if (is_null($code_search)) {
            throw new \InvalidArgumentException('non-nullable code_search cannot be null');
        }
        $this->container['code_search'] = $code_search;

        return $this;
    }

    /**
     * Gets source_import
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null
     */
    public function getSourceImport()
    {
        return $this->container['source_import'];
    }

    /**
     * Sets source_import
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null $source_import source_import
     *
     * @return self
     */
    public function setSourceImport($source_import)
    {
        if (is_null($source_import)) {
            throw new \InvalidArgumentException('non-nullable source_import cannot be null');
        }
        $this->container['source_import'] = $source_import;

        return $this;
    }

    /**
     * Gets integration_manifest
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null
     */
    public function getIntegrationManifest()
    {
        return $this->container['integration_manifest'];
    }

    /**
     * Sets integration_manifest
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null $integration_manifest integration_manifest
     *
     * @return self
     */
    public function setIntegrationManifest($integration_manifest)
    {
        if (is_null($integration_manifest)) {
            throw new \InvalidArgumentException('non-nullable integration_manifest cannot be null');
        }
        $this->container['integration_manifest'] = $integration_manifest;

        return $this;
    }

    /**
     * Gets code_scanning_upload
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null
     */
    public function getCodeScanningUpload()
    {
        return $this->container['code_scanning_upload'];
    }

    /**
     * Sets code_scanning_upload
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null $code_scanning_upload code_scanning_upload
     *
     * @return self
     */
    public function setCodeScanningUpload($code_scanning_upload)
    {
        if (is_null($code_scanning_upload)) {
            throw new \InvalidArgumentException('non-nullable code_scanning_upload cannot be null');
        }
        $this->container['code_scanning_upload'] = $code_scanning_upload;

        return $this;
    }

    /**
     * Gets actions_runner_registration
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null
     */
    public function getActionsRunnerRegistration()
    {
        return $this->container['actions_runner_registration'];
    }

    /**
     * Sets actions_runner_registration
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null $actions_runner_registration actions_runner_registration
     *
     * @return self
     */
    public function setActionsRunnerRegistration($actions_runner_registration)
    {
        if (is_null($actions_runner_registration)) {
            throw new \InvalidArgumentException('non-nullable actions_runner_registration cannot be null');
        }
        $this->container['actions_runner_registration'] = $actions_runner_registration;

        return $this;
    }

    /**
     * Gets scim
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null
     */
    public function getScim()
    {
        return $this->container['scim'];
    }

    /**
     * Sets scim
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null $scim scim
     *
     * @return self
     */
    public function setScim($scim)
    {
        if (is_null($scim)) {
            throw new \InvalidArgumentException('non-nullable scim cannot be null');
        }
        $this->container['scim'] = $scim;

        return $this;
    }

    /**
     * Gets dependency_snapshots
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null
     */
    public function getDependencySnapshots()
    {
        return $this->container['dependency_snapshots'];
    }

    /**
     * Sets dependency_snapshots
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RateLimit|null $dependency_snapshots dependency_snapshots
     *
     * @return self
     */
    public function setDependencySnapshots($dependency_snapshots)
    {
        if (is_null($dependency_snapshots)) {
            throw new \InvalidArgumentException('non-nullable dependency_snapshots cannot be null');
        }
        $this->container['dependency_snapshots'] = $dependency_snapshots;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


