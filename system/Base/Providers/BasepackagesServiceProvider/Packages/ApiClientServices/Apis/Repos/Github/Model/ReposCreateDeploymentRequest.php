<?php
/**
 * ReposCreateDeploymentRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * ReposCreateDeploymentRequest Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReposCreateDeploymentRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'repos_create_deployment_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ref' => 'string',
        'task' => 'string',
        'auto_merge' => 'bool',
        'required_contexts' => 'string[]',
        'payload' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ReposCreateDeploymentRequestPayload',
        'environment' => 'string',
        'description' => 'string',
        'transient_environment' => 'bool',
        'production_environment' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ref' => null,
        'task' => null,
        'auto_merge' => null,
        'required_contexts' => null,
        'payload' => null,
        'environment' => null,
        'description' => null,
        'transient_environment' => null,
        'production_environment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ref' => false,
        'task' => false,
        'auto_merge' => false,
        'required_contexts' => false,
        'payload' => false,
        'environment' => false,
        'description' => true,
        'transient_environment' => false,
        'production_environment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ref' => 'ref',
        'task' => 'task',
        'auto_merge' => 'auto_merge',
        'required_contexts' => 'required_contexts',
        'payload' => 'payload',
        'environment' => 'environment',
        'description' => 'description',
        'transient_environment' => 'transient_environment',
        'production_environment' => 'production_environment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ref' => 'setRef',
        'task' => 'setTask',
        'auto_merge' => 'setAutoMerge',
        'required_contexts' => 'setRequiredContexts',
        'payload' => 'setPayload',
        'environment' => 'setEnvironment',
        'description' => 'setDescription',
        'transient_environment' => 'setTransientEnvironment',
        'production_environment' => 'setProductionEnvironment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ref' => 'getRef',
        'task' => 'getTask',
        'auto_merge' => 'getAutoMerge',
        'required_contexts' => 'getRequiredContexts',
        'payload' => 'getPayload',
        'environment' => 'getEnvironment',
        'description' => 'getDescription',
        'transient_environment' => 'getTransientEnvironment',
        'production_environment' => 'getProductionEnvironment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ref', $data ?? [], null);
        $this->setIfExists('task', $data ?? [], 'deploy');
        $this->setIfExists('auto_merge', $data ?? [], true);
        $this->setIfExists('required_contexts', $data ?? [], null);
        $this->setIfExists('payload', $data ?? [], null);
        $this->setIfExists('environment', $data ?? [], 'production');
        $this->setIfExists('description', $data ?? [], '');
        $this->setIfExists('transient_environment', $data ?? [], false);
        $this->setIfExists('production_environment', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ref'] === null) {
            $invalidProperties[] = "'ref' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ref
     *
     * @return string
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string $ref The ref to deploy. This can be a branch, tag, or SHA.
     *
     * @return self
     */
    public function setRef($ref)
    {
        if (is_null($ref)) {
            throw new \InvalidArgumentException('non-nullable ref cannot be null');
        }
        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets task
     *
     * @return string|null
     */
    public function getTask()
    {
        return $this->container['task'];
    }

    /**
     * Sets task
     *
     * @param string|null $task Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
     *
     * @return self
     */
    public function setTask($task)
    {
        if (is_null($task)) {
            throw new \InvalidArgumentException('non-nullable task cannot be null');
        }
        $this->container['task'] = $task;

        return $this;
    }

    /**
     * Gets auto_merge
     *
     * @return bool|null
     */
    public function getAutoMerge()
    {
        return $this->container['auto_merge'];
    }

    /**
     * Sets auto_merge
     *
     * @param bool|null $auto_merge Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
     *
     * @return self
     */
    public function setAutoMerge($auto_merge)
    {
        if (is_null($auto_merge)) {
            throw new \InvalidArgumentException('non-nullable auto_merge cannot be null');
        }
        $this->container['auto_merge'] = $auto_merge;

        return $this;
    }

    /**
     * Gets required_contexts
     *
     * @return string[]|null
     */
    public function getRequiredContexts()
    {
        return $this->container['required_contexts'];
    }

    /**
     * Sets required_contexts
     *
     * @param string[]|null $required_contexts The [status](https://docs.github.com/enterprise-server@3.12/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
     *
     * @return self
     */
    public function setRequiredContexts($required_contexts)
    {
        if (is_null($required_contexts)) {
            throw new \InvalidArgumentException('non-nullable required_contexts cannot be null');
        }
        $this->container['required_contexts'] = $required_contexts;

        return $this;
    }

    /**
     * Gets payload
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ReposCreateDeploymentRequestPayload|null
     */
    public function getPayload()
    {
        return $this->container['payload'];
    }

    /**
     * Sets payload
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ReposCreateDeploymentRequestPayload|null $payload payload
     *
     * @return self
     */
    public function setPayload($payload)
    {
        if (is_null($payload)) {
            throw new \InvalidArgumentException('non-nullable payload cannot be null');
        }
        $this->container['payload'] = $payload;

        return $this;
    }

    /**
     * Gets environment
     *
     * @return string|null
     */
    public function getEnvironment()
    {
        return $this->container['environment'];
    }

    /**
     * Sets environment
     *
     * @param string|null $environment Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
     *
     * @return self
     */
    public function setEnvironment($environment)
    {
        if (is_null($environment)) {
            throw new \InvalidArgumentException('non-nullable environment cannot be null');
        }
        $this->container['environment'] = $environment;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Short description of the deployment.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets transient_environment
     *
     * @return bool|null
     */
    public function getTransientEnvironment()
    {
        return $this->container['transient_environment'];
    }

    /**
     * Sets transient_environment
     *
     * @param bool|null $transient_environment Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
     *
     * @return self
     */
    public function setTransientEnvironment($transient_environment)
    {
        if (is_null($transient_environment)) {
            throw new \InvalidArgumentException('non-nullable transient_environment cannot be null');
        }
        $this->container['transient_environment'] = $transient_environment;

        return $this;
    }

    /**
     * Gets production_environment
     *
     * @return bool|null
     */
    public function getProductionEnvironment()
    {
        return $this->container['production_environment'];
    }

    /**
     * Sets production_environment
     *
     * @param bool|null $production_environment Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
     *
     * @return self
     */
    public function setProductionEnvironment($production_environment)
    {
        if (is_null($production_environment)) {
            throw new \InvalidArgumentException('non-nullable production_environment cannot be null');
        }
        $this->container['production_environment'] = $production_environment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


