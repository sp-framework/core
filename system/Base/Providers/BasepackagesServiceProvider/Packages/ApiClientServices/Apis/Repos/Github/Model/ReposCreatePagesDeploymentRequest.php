<?php
/**
 * ReposCreatePagesDeploymentRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * ReposCreatePagesDeploymentRequest Class Doc Comment
 *
 * @category Class
 * @description The object used to create GitHub Pages deployment
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReposCreatePagesDeploymentRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'repos_create_pages_deployment_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'artifact_id' => 'float',
        'artifact_url' => 'string',
        'environment' => 'string',
        'pages_build_version' => 'string',
        'oidc_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'artifact_id' => null,
        'artifact_url' => null,
        'environment' => null,
        'pages_build_version' => null,
        'oidc_token' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'artifact_id' => false,
        'artifact_url' => false,
        'environment' => false,
        'pages_build_version' => false,
        'oidc_token' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'artifact_id' => 'artifact_id',
        'artifact_url' => 'artifact_url',
        'environment' => 'environment',
        'pages_build_version' => 'pages_build_version',
        'oidc_token' => 'oidc_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'artifact_id' => 'setArtifactId',
        'artifact_url' => 'setArtifactUrl',
        'environment' => 'setEnvironment',
        'pages_build_version' => 'setPagesBuildVersion',
        'oidc_token' => 'setOidcToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'artifact_id' => 'getArtifactId',
        'artifact_url' => 'getArtifactUrl',
        'environment' => 'getEnvironment',
        'pages_build_version' => 'getPagesBuildVersion',
        'oidc_token' => 'getOidcToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('artifact_id', $data ?? [], null);
        $this->setIfExists('artifact_url', $data ?? [], null);
        $this->setIfExists('environment', $data ?? [], 'github-pages');
        $this->setIfExists('pages_build_version', $data ?? [], 'GITHUB_SHA');
        $this->setIfExists('oidc_token', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pages_build_version'] === null) {
            $invalidProperties[] = "'pages_build_version' can't be null";
        }
        if ($this->container['oidc_token'] === null) {
            $invalidProperties[] = "'oidc_token' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets artifact_id
     *
     * @return float|null
     */
    public function getArtifactId()
    {
        return $this->container['artifact_id'];
    }

    /**
     * Sets artifact_id
     *
     * @param float|null $artifact_id The ID of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.
     *
     * @return self
     */
    public function setArtifactId($artifact_id)
    {
        if (is_null($artifact_id)) {
            throw new \InvalidArgumentException('non-nullable artifact_id cannot be null');
        }
        $this->container['artifact_id'] = $artifact_id;

        return $this;
    }

    /**
     * Gets artifact_url
     *
     * @return string|null
     */
    public function getArtifactUrl()
    {
        return $this->container['artifact_url'];
    }

    /**
     * Sets artifact_url
     *
     * @param string|null $artifact_url The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.
     *
     * @return self
     */
    public function setArtifactUrl($artifact_url)
    {
        if (is_null($artifact_url)) {
            throw new \InvalidArgumentException('non-nullable artifact_url cannot be null');
        }
        $this->container['artifact_url'] = $artifact_url;

        return $this;
    }

    /**
     * Gets environment
     *
     * @return string|null
     */
    public function getEnvironment()
    {
        return $this->container['environment'];
    }

    /**
     * Sets environment
     *
     * @param string|null $environment The target environment for this GitHub Pages deployment.
     *
     * @return self
     */
    public function setEnvironment($environment)
    {
        if (is_null($environment)) {
            throw new \InvalidArgumentException('non-nullable environment cannot be null');
        }
        $this->container['environment'] = $environment;

        return $this;
    }

    /**
     * Gets pages_build_version
     *
     * @return string
     */
    public function getPagesBuildVersion()
    {
        return $this->container['pages_build_version'];
    }

    /**
     * Sets pages_build_version
     *
     * @param string $pages_build_version A unique string that represents the version of the build for this deployment.
     *
     * @return self
     */
    public function setPagesBuildVersion($pages_build_version)
    {
        if (is_null($pages_build_version)) {
            throw new \InvalidArgumentException('non-nullable pages_build_version cannot be null');
        }
        $this->container['pages_build_version'] = $pages_build_version;

        return $this;
    }

    /**
     * Gets oidc_token
     *
     * @return string
     */
    public function getOidcToken()
    {
        return $this->container['oidc_token'];
    }

    /**
     * Sets oidc_token
     *
     * @param string $oidc_token The OIDC token issued by GitHub Actions certifying the origin of the deployment.
     *
     * @return self
     */
    public function setOidcToken($oidc_token)
    {
        if (is_null($oidc_token)) {
            throw new \InvalidArgumentException('non-nullable oidc_token cannot be null');
        }
        $this->container['oidc_token'] = $oidc_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


