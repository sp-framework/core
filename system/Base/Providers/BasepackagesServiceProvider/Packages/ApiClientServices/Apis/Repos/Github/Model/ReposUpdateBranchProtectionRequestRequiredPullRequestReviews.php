<?php
/**
 * ReposUpdateBranchProtectionRequestRequiredPullRequestReviews
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * ReposUpdateBranchProtectionRequestRequiredPullRequestReviews Class Doc Comment
 *
 * @category Class
 * @description Require at least one approving review on a pull request, before merging. Set to &#x60;null&#x60; to disable.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReposUpdateBranchProtectionRequestRequiredPullRequestReviews implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'repos_update_branch_protection_request_required_pull_request_reviews';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dismissal_restrictions' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ReposUpdateBranchProtectionRequestRequiredPullRequestReviewsDismissalRestrictions',
        'dismiss_stale_reviews' => 'bool',
        'require_code_owner_reviews' => 'bool',
        'required_approving_review_count' => 'int',
        'require_last_push_approval' => 'bool',
        'bypass_pull_request_allowances' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ReposUpdateBranchProtectionRequestRequiredPullRequestReviewsBypassPullRequestAllowances'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dismissal_restrictions' => null,
        'dismiss_stale_reviews' => null,
        'require_code_owner_reviews' => null,
        'required_approving_review_count' => null,
        'require_last_push_approval' => null,
        'bypass_pull_request_allowances' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dismissal_restrictions' => false,
        'dismiss_stale_reviews' => false,
        'require_code_owner_reviews' => false,
        'required_approving_review_count' => false,
        'require_last_push_approval' => false,
        'bypass_pull_request_allowances' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dismissal_restrictions' => 'dismissal_restrictions',
        'dismiss_stale_reviews' => 'dismiss_stale_reviews',
        'require_code_owner_reviews' => 'require_code_owner_reviews',
        'required_approving_review_count' => 'required_approving_review_count',
        'require_last_push_approval' => 'require_last_push_approval',
        'bypass_pull_request_allowances' => 'bypass_pull_request_allowances'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dismissal_restrictions' => 'setDismissalRestrictions',
        'dismiss_stale_reviews' => 'setDismissStaleReviews',
        'require_code_owner_reviews' => 'setRequireCodeOwnerReviews',
        'required_approving_review_count' => 'setRequiredApprovingReviewCount',
        'require_last_push_approval' => 'setRequireLastPushApproval',
        'bypass_pull_request_allowances' => 'setBypassPullRequestAllowances'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dismissal_restrictions' => 'getDismissalRestrictions',
        'dismiss_stale_reviews' => 'getDismissStaleReviews',
        'require_code_owner_reviews' => 'getRequireCodeOwnerReviews',
        'required_approving_review_count' => 'getRequiredApprovingReviewCount',
        'require_last_push_approval' => 'getRequireLastPushApproval',
        'bypass_pull_request_allowances' => 'getBypassPullRequestAllowances'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dismissal_restrictions', $data ?? [], null);
        $this->setIfExists('dismiss_stale_reviews', $data ?? [], null);
        $this->setIfExists('require_code_owner_reviews', $data ?? [], null);
        $this->setIfExists('required_approving_review_count', $data ?? [], null);
        $this->setIfExists('require_last_push_approval', $data ?? [], false);
        $this->setIfExists('bypass_pull_request_allowances', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dismissal_restrictions
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ReposUpdateBranchProtectionRequestRequiredPullRequestReviewsDismissalRestrictions|null
     */
    public function getDismissalRestrictions()
    {
        return $this->container['dismissal_restrictions'];
    }

    /**
     * Sets dismissal_restrictions
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ReposUpdateBranchProtectionRequestRequiredPullRequestReviewsDismissalRestrictions|null $dismissal_restrictions dismissal_restrictions
     *
     * @return self
     */
    public function setDismissalRestrictions($dismissal_restrictions)
    {
        if (is_null($dismissal_restrictions)) {
            throw new \InvalidArgumentException('non-nullable dismissal_restrictions cannot be null');
        }
        $this->container['dismissal_restrictions'] = $dismissal_restrictions;

        return $this;
    }

    /**
     * Gets dismiss_stale_reviews
     *
     * @return bool|null
     */
    public function getDismissStaleReviews()
    {
        return $this->container['dismiss_stale_reviews'];
    }

    /**
     * Sets dismiss_stale_reviews
     *
     * @param bool|null $dismiss_stale_reviews Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
     *
     * @return self
     */
    public function setDismissStaleReviews($dismiss_stale_reviews)
    {
        if (is_null($dismiss_stale_reviews)) {
            throw new \InvalidArgumentException('non-nullable dismiss_stale_reviews cannot be null');
        }
        $this->container['dismiss_stale_reviews'] = $dismiss_stale_reviews;

        return $this;
    }

    /**
     * Gets require_code_owner_reviews
     *
     * @return bool|null
     */
    public function getRequireCodeOwnerReviews()
    {
        return $this->container['require_code_owner_reviews'];
    }

    /**
     * Sets require_code_owner_reviews
     *
     * @param bool|null $require_code_owner_reviews Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.
     *
     * @return self
     */
    public function setRequireCodeOwnerReviews($require_code_owner_reviews)
    {
        if (is_null($require_code_owner_reviews)) {
            throw new \InvalidArgumentException('non-nullable require_code_owner_reviews cannot be null');
        }
        $this->container['require_code_owner_reviews'] = $require_code_owner_reviews;

        return $this;
    }

    /**
     * Gets required_approving_review_count
     *
     * @return int|null
     */
    public function getRequiredApprovingReviewCount()
    {
        return $this->container['required_approving_review_count'];
    }

    /**
     * Sets required_approving_review_count
     *
     * @param int|null $required_approving_review_count Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
     *
     * @return self
     */
    public function setRequiredApprovingReviewCount($required_approving_review_count)
    {
        if (is_null($required_approving_review_count)) {
            throw new \InvalidArgumentException('non-nullable required_approving_review_count cannot be null');
        }
        $this->container['required_approving_review_count'] = $required_approving_review_count;

        return $this;
    }

    /**
     * Gets require_last_push_approval
     *
     * @return bool|null
     */
    public function getRequireLastPushApproval()
    {
        return $this->container['require_last_push_approval'];
    }

    /**
     * Sets require_last_push_approval
     *
     * @param bool|null $require_last_push_approval Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.
     *
     * @return self
     */
    public function setRequireLastPushApproval($require_last_push_approval)
    {
        if (is_null($require_last_push_approval)) {
            throw new \InvalidArgumentException('non-nullable require_last_push_approval cannot be null');
        }
        $this->container['require_last_push_approval'] = $require_last_push_approval;

        return $this;
    }

    /**
     * Gets bypass_pull_request_allowances
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ReposUpdateBranchProtectionRequestRequiredPullRequestReviewsBypassPullRequestAllowances|null
     */
    public function getBypassPullRequestAllowances()
    {
        return $this->container['bypass_pull_request_allowances'];
    }

    /**
     * Sets bypass_pull_request_allowances
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ReposUpdateBranchProtectionRequestRequiredPullRequestReviewsBypassPullRequestAllowances|null $bypass_pull_request_allowances bypass_pull_request_allowances
     *
     * @return self
     */
    public function setBypassPullRequestAllowances($bypass_pull_request_allowances)
    {
        if (is_null($bypass_pull_request_allowances)) {
            throw new \InvalidArgumentException('non-nullable bypass_pull_request_allowances cannot be null');
        }
        $this->container['bypass_pull_request_allowances'] = $bypass_pull_request_allowances;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


