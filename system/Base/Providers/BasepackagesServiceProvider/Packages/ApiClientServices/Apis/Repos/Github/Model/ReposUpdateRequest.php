<?php
/**
 * ReposUpdateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * ReposUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReposUpdateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'repos_update_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'homepage' => 'string',
        'private' => 'bool',
        'visibility' => 'string',
        'security_and_analysis' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ReposUpdateRequestSecurityAndAnalysis',
        'has_issues' => 'bool',
        'has_projects' => 'bool',
        'has_wiki' => 'bool',
        'is_template' => 'bool',
        'default_branch' => 'string',
        'allow_squash_merge' => 'bool',
        'allow_merge_commit' => 'bool',
        'allow_rebase_merge' => 'bool',
        'delete_branch_on_merge' => 'bool',
        'allow_update_branch' => 'bool',
        'use_squash_pr_title_as_default' => 'bool',
        'squash_merge_commit_title' => 'string',
        'squash_merge_commit_message' => 'string',
        'merge_commit_title' => 'string',
        'merge_commit_message' => 'string',
        'archived' => 'bool',
        'allow_forking' => 'bool',
        'web_commit_signoff_required' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'homepage' => null,
        'private' => null,
        'visibility' => null,
        'security_and_analysis' => null,
        'has_issues' => null,
        'has_projects' => null,
        'has_wiki' => null,
        'is_template' => null,
        'default_branch' => null,
        'allow_squash_merge' => null,
        'allow_merge_commit' => null,
        'allow_rebase_merge' => null,
        'delete_branch_on_merge' => null,
        'allow_update_branch' => null,
        'use_squash_pr_title_as_default' => null,
        'squash_merge_commit_title' => null,
        'squash_merge_commit_message' => null,
        'merge_commit_title' => null,
        'merge_commit_message' => null,
        'archived' => null,
        'allow_forking' => null,
        'web_commit_signoff_required' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'description' => false,
        'homepage' => false,
        'private' => false,
        'visibility' => false,
        'security_and_analysis' => true,
        'has_issues' => false,
        'has_projects' => false,
        'has_wiki' => false,
        'is_template' => false,
        'default_branch' => false,
        'allow_squash_merge' => false,
        'allow_merge_commit' => false,
        'allow_rebase_merge' => false,
        'delete_branch_on_merge' => false,
        'allow_update_branch' => false,
        'use_squash_pr_title_as_default' => false,
        'squash_merge_commit_title' => false,
        'squash_merge_commit_message' => false,
        'merge_commit_title' => false,
        'merge_commit_message' => false,
        'archived' => false,
        'allow_forking' => false,
        'web_commit_signoff_required' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'homepage' => 'homepage',
        'private' => 'private',
        'visibility' => 'visibility',
        'security_and_analysis' => 'security_and_analysis',
        'has_issues' => 'has_issues',
        'has_projects' => 'has_projects',
        'has_wiki' => 'has_wiki',
        'is_template' => 'is_template',
        'default_branch' => 'default_branch',
        'allow_squash_merge' => 'allow_squash_merge',
        'allow_merge_commit' => 'allow_merge_commit',
        'allow_rebase_merge' => 'allow_rebase_merge',
        'delete_branch_on_merge' => 'delete_branch_on_merge',
        'allow_update_branch' => 'allow_update_branch',
        'use_squash_pr_title_as_default' => 'use_squash_pr_title_as_default',
        'squash_merge_commit_title' => 'squash_merge_commit_title',
        'squash_merge_commit_message' => 'squash_merge_commit_message',
        'merge_commit_title' => 'merge_commit_title',
        'merge_commit_message' => 'merge_commit_message',
        'archived' => 'archived',
        'allow_forking' => 'allow_forking',
        'web_commit_signoff_required' => 'web_commit_signoff_required'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'homepage' => 'setHomepage',
        'private' => 'setPrivate',
        'visibility' => 'setVisibility',
        'security_and_analysis' => 'setSecurityAndAnalysis',
        'has_issues' => 'setHasIssues',
        'has_projects' => 'setHasProjects',
        'has_wiki' => 'setHasWiki',
        'is_template' => 'setIsTemplate',
        'default_branch' => 'setDefaultBranch',
        'allow_squash_merge' => 'setAllowSquashMerge',
        'allow_merge_commit' => 'setAllowMergeCommit',
        'allow_rebase_merge' => 'setAllowRebaseMerge',
        'delete_branch_on_merge' => 'setDeleteBranchOnMerge',
        'allow_update_branch' => 'setAllowUpdateBranch',
        'use_squash_pr_title_as_default' => 'setUseSquashPrTitleAsDefault',
        'squash_merge_commit_title' => 'setSquashMergeCommitTitle',
        'squash_merge_commit_message' => 'setSquashMergeCommitMessage',
        'merge_commit_title' => 'setMergeCommitTitle',
        'merge_commit_message' => 'setMergeCommitMessage',
        'archived' => 'setArchived',
        'allow_forking' => 'setAllowForking',
        'web_commit_signoff_required' => 'setWebCommitSignoffRequired'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'homepage' => 'getHomepage',
        'private' => 'getPrivate',
        'visibility' => 'getVisibility',
        'security_and_analysis' => 'getSecurityAndAnalysis',
        'has_issues' => 'getHasIssues',
        'has_projects' => 'getHasProjects',
        'has_wiki' => 'getHasWiki',
        'is_template' => 'getIsTemplate',
        'default_branch' => 'getDefaultBranch',
        'allow_squash_merge' => 'getAllowSquashMerge',
        'allow_merge_commit' => 'getAllowMergeCommit',
        'allow_rebase_merge' => 'getAllowRebaseMerge',
        'delete_branch_on_merge' => 'getDeleteBranchOnMerge',
        'allow_update_branch' => 'getAllowUpdateBranch',
        'use_squash_pr_title_as_default' => 'getUseSquashPrTitleAsDefault',
        'squash_merge_commit_title' => 'getSquashMergeCommitTitle',
        'squash_merge_commit_message' => 'getSquashMergeCommitMessage',
        'merge_commit_title' => 'getMergeCommitTitle',
        'merge_commit_message' => 'getMergeCommitMessage',
        'archived' => 'getArchived',
        'allow_forking' => 'getAllowForking',
        'web_commit_signoff_required' => 'getWebCommitSignoffRequired'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VISIBILITY__PUBLIC = 'public';
    public const VISIBILITY__PRIVATE = 'private';
    public const VISIBILITY_INTERNAL = 'internal';
    public const SQUASH_MERGE_COMMIT_TITLE_PR_TITLE = 'PR_TITLE';
    public const SQUASH_MERGE_COMMIT_TITLE_COMMIT_OR_PR_TITLE = 'COMMIT_OR_PR_TITLE';
    public const SQUASH_MERGE_COMMIT_MESSAGE_PR_BODY = 'PR_BODY';
    public const SQUASH_MERGE_COMMIT_MESSAGE_COMMIT_MESSAGES = 'COMMIT_MESSAGES';
    public const SQUASH_MERGE_COMMIT_MESSAGE_BLANK = 'BLANK';
    public const MERGE_COMMIT_TITLE_PR_TITLE = 'PR_TITLE';
    public const MERGE_COMMIT_TITLE_MERGE_MESSAGE = 'MERGE_MESSAGE';
    public const MERGE_COMMIT_MESSAGE_PR_BODY = 'PR_BODY';
    public const MERGE_COMMIT_MESSAGE_PR_TITLE = 'PR_TITLE';
    public const MERGE_COMMIT_MESSAGE_BLANK = 'BLANK';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVisibilityAllowableValues()
    {
        return [
            self::VISIBILITY__PUBLIC,
            self::VISIBILITY__PRIVATE,
            self::VISIBILITY_INTERNAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSquashMergeCommitTitleAllowableValues()
    {
        return [
            self::SQUASH_MERGE_COMMIT_TITLE_PR_TITLE,
            self::SQUASH_MERGE_COMMIT_TITLE_COMMIT_OR_PR_TITLE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSquashMergeCommitMessageAllowableValues()
    {
        return [
            self::SQUASH_MERGE_COMMIT_MESSAGE_PR_BODY,
            self::SQUASH_MERGE_COMMIT_MESSAGE_COMMIT_MESSAGES,
            self::SQUASH_MERGE_COMMIT_MESSAGE_BLANK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMergeCommitTitleAllowableValues()
    {
        return [
            self::MERGE_COMMIT_TITLE_PR_TITLE,
            self::MERGE_COMMIT_TITLE_MERGE_MESSAGE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMergeCommitMessageAllowableValues()
    {
        return [
            self::MERGE_COMMIT_MESSAGE_PR_BODY,
            self::MERGE_COMMIT_MESSAGE_PR_TITLE,
            self::MERGE_COMMIT_MESSAGE_BLANK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('homepage', $data ?? [], null);
        $this->setIfExists('private', $data ?? [], false);
        $this->setIfExists('visibility', $data ?? [], null);
        $this->setIfExists('security_and_analysis', $data ?? [], null);
        $this->setIfExists('has_issues', $data ?? [], true);
        $this->setIfExists('has_projects', $data ?? [], true);
        $this->setIfExists('has_wiki', $data ?? [], true);
        $this->setIfExists('is_template', $data ?? [], false);
        $this->setIfExists('default_branch', $data ?? [], null);
        $this->setIfExists('allow_squash_merge', $data ?? [], true);
        $this->setIfExists('allow_merge_commit', $data ?? [], true);
        $this->setIfExists('allow_rebase_merge', $data ?? [], true);
        $this->setIfExists('delete_branch_on_merge', $data ?? [], false);
        $this->setIfExists('allow_update_branch', $data ?? [], false);
        $this->setIfExists('use_squash_pr_title_as_default', $data ?? [], false);
        $this->setIfExists('squash_merge_commit_title', $data ?? [], null);
        $this->setIfExists('squash_merge_commit_message', $data ?? [], null);
        $this->setIfExists('merge_commit_title', $data ?? [], null);
        $this->setIfExists('merge_commit_message', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], false);
        $this->setIfExists('allow_forking', $data ?? [], false);
        $this->setIfExists('web_commit_signoff_required', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVisibilityAllowableValues();
        if (!is_null($this->container['visibility']) && !in_array($this->container['visibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'visibility', must be one of '%s'",
                $this->container['visibility'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSquashMergeCommitTitleAllowableValues();
        if (!is_null($this->container['squash_merge_commit_title']) && !in_array($this->container['squash_merge_commit_title'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'squash_merge_commit_title', must be one of '%s'",
                $this->container['squash_merge_commit_title'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSquashMergeCommitMessageAllowableValues();
        if (!is_null($this->container['squash_merge_commit_message']) && !in_array($this->container['squash_merge_commit_message'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'squash_merge_commit_message', must be one of '%s'",
                $this->container['squash_merge_commit_message'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMergeCommitTitleAllowableValues();
        if (!is_null($this->container['merge_commit_title']) && !in_array($this->container['merge_commit_title'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'merge_commit_title', must be one of '%s'",
                $this->container['merge_commit_title'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMergeCommitMessageAllowableValues();
        if (!is_null($this->container['merge_commit_message']) && !in_array($this->container['merge_commit_message'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'merge_commit_message', must be one of '%s'",
                $this->container['merge_commit_message'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the repository.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A short description of the repository.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return string|null
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param string|null $homepage A URL with more information about the repository.
     *
     * @return self
     */
    public function setHomepage($homepage)
    {
        if (is_null($homepage)) {
            throw new \InvalidArgumentException('non-nullable homepage cannot be null');
        }
        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool|null
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool|null $private Either `true` to make the repository private or `false` to make it public. Default: `false`.   **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/enterprise-server@3.12/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
     *
     * @return self
     */
    public function setPrivate($private)
    {
        if (is_null($private)) {
            throw new \InvalidArgumentException('non-nullable private cannot be null');
        }
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility The visibility of the repository.
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        if (is_null($visibility)) {
            throw new \InvalidArgumentException('non-nullable visibility cannot be null');
        }
        $allowedValues = $this->getVisibilityAllowableValues();
        if (!in_array($visibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'visibility', must be one of '%s'",
                    $visibility,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets security_and_analysis
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ReposUpdateRequestSecurityAndAnalysis|null
     */
    public function getSecurityAndAnalysis()
    {
        return $this->container['security_and_analysis'];
    }

    /**
     * Sets security_and_analysis
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\ReposUpdateRequestSecurityAndAnalysis|null $security_and_analysis security_and_analysis
     *
     * @return self
     */
    public function setSecurityAndAnalysis($security_and_analysis)
    {
        if (is_null($security_and_analysis)) {
            array_push($this->openAPINullablesSetToNull, 'security_and_analysis');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('security_and_analysis', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['security_and_analysis'] = $security_and_analysis;

        return $this;
    }

    /**
     * Gets has_issues
     *
     * @return bool|null
     */
    public function getHasIssues()
    {
        return $this->container['has_issues'];
    }

    /**
     * Sets has_issues
     *
     * @param bool|null $has_issues Either `true` to enable issues for this repository or `false` to disable them.
     *
     * @return self
     */
    public function setHasIssues($has_issues)
    {
        if (is_null($has_issues)) {
            throw new \InvalidArgumentException('non-nullable has_issues cannot be null');
        }
        $this->container['has_issues'] = $has_issues;

        return $this;
    }

    /**
     * Gets has_projects
     *
     * @return bool|null
     */
    public function getHasProjects()
    {
        return $this->container['has_projects'];
    }

    /**
     * Sets has_projects
     *
     * @param bool|null $has_projects Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
     *
     * @return self
     */
    public function setHasProjects($has_projects)
    {
        if (is_null($has_projects)) {
            throw new \InvalidArgumentException('non-nullable has_projects cannot be null');
        }
        $this->container['has_projects'] = $has_projects;

        return $this;
    }

    /**
     * Gets has_wiki
     *
     * @return bool|null
     */
    public function getHasWiki()
    {
        return $this->container['has_wiki'];
    }

    /**
     * Sets has_wiki
     *
     * @param bool|null $has_wiki Either `true` to enable the wiki for this repository or `false` to disable it.
     *
     * @return self
     */
    public function setHasWiki($has_wiki)
    {
        if (is_null($has_wiki)) {
            throw new \InvalidArgumentException('non-nullable has_wiki cannot be null');
        }
        $this->container['has_wiki'] = $has_wiki;

        return $this;
    }

    /**
     * Gets is_template
     *
     * @return bool|null
     */
    public function getIsTemplate()
    {
        return $this->container['is_template'];
    }

    /**
     * Sets is_template
     *
     * @param bool|null $is_template Either `true` to make this repo available as a template repository or `false` to prevent it.
     *
     * @return self
     */
    public function setIsTemplate($is_template)
    {
        if (is_null($is_template)) {
            throw new \InvalidArgumentException('non-nullable is_template cannot be null');
        }
        $this->container['is_template'] = $is_template;

        return $this;
    }

    /**
     * Gets default_branch
     *
     * @return string|null
     */
    public function getDefaultBranch()
    {
        return $this->container['default_branch'];
    }

    /**
     * Sets default_branch
     *
     * @param string|null $default_branch Updates the default branch for this repository.
     *
     * @return self
     */
    public function setDefaultBranch($default_branch)
    {
        if (is_null($default_branch)) {
            throw new \InvalidArgumentException('non-nullable default_branch cannot be null');
        }
        $this->container['default_branch'] = $default_branch;

        return $this;
    }

    /**
     * Gets allow_squash_merge
     *
     * @return bool|null
     */
    public function getAllowSquashMerge()
    {
        return $this->container['allow_squash_merge'];
    }

    /**
     * Sets allow_squash_merge
     *
     * @param bool|null $allow_squash_merge Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
     *
     * @return self
     */
    public function setAllowSquashMerge($allow_squash_merge)
    {
        if (is_null($allow_squash_merge)) {
            throw new \InvalidArgumentException('non-nullable allow_squash_merge cannot be null');
        }
        $this->container['allow_squash_merge'] = $allow_squash_merge;

        return $this;
    }

    /**
     * Gets allow_merge_commit
     *
     * @return bool|null
     */
    public function getAllowMergeCommit()
    {
        return $this->container['allow_merge_commit'];
    }

    /**
     * Sets allow_merge_commit
     *
     * @param bool|null $allow_merge_commit Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
     *
     * @return self
     */
    public function setAllowMergeCommit($allow_merge_commit)
    {
        if (is_null($allow_merge_commit)) {
            throw new \InvalidArgumentException('non-nullable allow_merge_commit cannot be null');
        }
        $this->container['allow_merge_commit'] = $allow_merge_commit;

        return $this;
    }

    /**
     * Gets allow_rebase_merge
     *
     * @return bool|null
     */
    public function getAllowRebaseMerge()
    {
        return $this->container['allow_rebase_merge'];
    }

    /**
     * Sets allow_rebase_merge
     *
     * @param bool|null $allow_rebase_merge Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
     *
     * @return self
     */
    public function setAllowRebaseMerge($allow_rebase_merge)
    {
        if (is_null($allow_rebase_merge)) {
            throw new \InvalidArgumentException('non-nullable allow_rebase_merge cannot be null');
        }
        $this->container['allow_rebase_merge'] = $allow_rebase_merge;

        return $this;
    }

    /**
     * Gets delete_branch_on_merge
     *
     * @return bool|null
     */
    public function getDeleteBranchOnMerge()
    {
        return $this->container['delete_branch_on_merge'];
    }

    /**
     * Sets delete_branch_on_merge
     *
     * @param bool|null $delete_branch_on_merge Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
     *
     * @return self
     */
    public function setDeleteBranchOnMerge($delete_branch_on_merge)
    {
        if (is_null($delete_branch_on_merge)) {
            throw new \InvalidArgumentException('non-nullable delete_branch_on_merge cannot be null');
        }
        $this->container['delete_branch_on_merge'] = $delete_branch_on_merge;

        return $this;
    }

    /**
     * Gets allow_update_branch
     *
     * @return bool|null
     */
    public function getAllowUpdateBranch()
    {
        return $this->container['allow_update_branch'];
    }

    /**
     * Sets allow_update_branch
     *
     * @param bool|null $allow_update_branch Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
     *
     * @return self
     */
    public function setAllowUpdateBranch($allow_update_branch)
    {
        if (is_null($allow_update_branch)) {
            throw new \InvalidArgumentException('non-nullable allow_update_branch cannot be null');
        }
        $this->container['allow_update_branch'] = $allow_update_branch;

        return $this;
    }

    /**
     * Gets use_squash_pr_title_as_default
     *
     * @return bool|null
     * @deprecated
     */
    public function getUseSquashPrTitleAsDefault()
    {
        return $this->container['use_squash_pr_title_as_default'];
    }

    /**
     * Sets use_squash_pr_title_as_default
     *
     * @param bool|null $use_squash_pr_title_as_default Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
     *
     * @return self
     * @deprecated
     */
    public function setUseSquashPrTitleAsDefault($use_squash_pr_title_as_default)
    {
        if (is_null($use_squash_pr_title_as_default)) {
            throw new \InvalidArgumentException('non-nullable use_squash_pr_title_as_default cannot be null');
        }
        $this->container['use_squash_pr_title_as_default'] = $use_squash_pr_title_as_default;

        return $this;
    }

    /**
     * Gets squash_merge_commit_title
     *
     * @return string|null
     */
    public function getSquashMergeCommitTitle()
    {
        return $this->container['squash_merge_commit_title'];
    }

    /**
     * Sets squash_merge_commit_title
     *
     * @param string|null $squash_merge_commit_title The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     *
     * @return self
     */
    public function setSquashMergeCommitTitle($squash_merge_commit_title)
    {
        if (is_null($squash_merge_commit_title)) {
            throw new \InvalidArgumentException('non-nullable squash_merge_commit_title cannot be null');
        }
        $allowedValues = $this->getSquashMergeCommitTitleAllowableValues();
        if (!in_array($squash_merge_commit_title, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'squash_merge_commit_title', must be one of '%s'",
                    $squash_merge_commit_title,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['squash_merge_commit_title'] = $squash_merge_commit_title;

        return $this;
    }

    /**
     * Gets squash_merge_commit_message
     *
     * @return string|null
     */
    public function getSquashMergeCommitMessage()
    {
        return $this->container['squash_merge_commit_message'];
    }

    /**
     * Sets squash_merge_commit_message
     *
     * @param string|null $squash_merge_commit_message The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.
     *
     * @return self
     */
    public function setSquashMergeCommitMessage($squash_merge_commit_message)
    {
        if (is_null($squash_merge_commit_message)) {
            throw new \InvalidArgumentException('non-nullable squash_merge_commit_message cannot be null');
        }
        $allowedValues = $this->getSquashMergeCommitMessageAllowableValues();
        if (!in_array($squash_merge_commit_message, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'squash_merge_commit_message', must be one of '%s'",
                    $squash_merge_commit_message,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['squash_merge_commit_message'] = $squash_merge_commit_message;

        return $this;
    }

    /**
     * Gets merge_commit_title
     *
     * @return string|null
     */
    public function getMergeCommitTitle()
    {
        return $this->container['merge_commit_title'];
    }

    /**
     * Sets merge_commit_title
     *
     * @param string|null $merge_commit_title The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     *
     * @return self
     */
    public function setMergeCommitTitle($merge_commit_title)
    {
        if (is_null($merge_commit_title)) {
            throw new \InvalidArgumentException('non-nullable merge_commit_title cannot be null');
        }
        $allowedValues = $this->getMergeCommitTitleAllowableValues();
        if (!in_array($merge_commit_title, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'merge_commit_title', must be one of '%s'",
                    $merge_commit_title,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['merge_commit_title'] = $merge_commit_title;

        return $this;
    }

    /**
     * Gets merge_commit_message
     *
     * @return string|null
     */
    public function getMergeCommitMessage()
    {
        return $this->container['merge_commit_message'];
    }

    /**
     * Sets merge_commit_message
     *
     * @param string|null $merge_commit_message The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.
     *
     * @return self
     */
    public function setMergeCommitMessage($merge_commit_message)
    {
        if (is_null($merge_commit_message)) {
            throw new \InvalidArgumentException('non-nullable merge_commit_message cannot be null');
        }
        $allowedValues = $this->getMergeCommitMessageAllowableValues();
        if (!in_array($merge_commit_message, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'merge_commit_message', must be one of '%s'",
                    $merge_commit_message,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['merge_commit_message'] = $merge_commit_message;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Whether to archive this repository. `false` will unarchive a previously archived repository.
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets allow_forking
     *
     * @return bool|null
     */
    public function getAllowForking()
    {
        return $this->container['allow_forking'];
    }

    /**
     * Sets allow_forking
     *
     * @param bool|null $allow_forking Either `true` to allow private forks, or `false` to prevent private forks.
     *
     * @return self
     */
    public function setAllowForking($allow_forking)
    {
        if (is_null($allow_forking)) {
            throw new \InvalidArgumentException('non-nullable allow_forking cannot be null');
        }
        $this->container['allow_forking'] = $allow_forking;

        return $this;
    }

    /**
     * Gets web_commit_signoff_required
     *
     * @return bool|null
     */
    public function getWebCommitSignoffRequired()
    {
        return $this->container['web_commit_signoff_required'];
    }

    /**
     * Sets web_commit_signoff_required
     *
     * @param bool|null $web_commit_signoff_required Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
     *
     * @return self
     */
    public function setWebCommitSignoffRequired($web_commit_signoff_required)
    {
        if (is_null($web_commit_signoff_required)) {
            throw new \InvalidArgumentException('non-nullable web_commit_signoff_required cannot be null');
        }
        $this->container['web_commit_signoff_required'] = $web_commit_signoff_required;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


