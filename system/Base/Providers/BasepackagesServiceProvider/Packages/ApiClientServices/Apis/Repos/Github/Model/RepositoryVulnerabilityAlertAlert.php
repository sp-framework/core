<?php
/**
 * RepositoryVulnerabilityAlertAlert
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * RepositoryVulnerabilityAlertAlert Class Doc Comment
 *
 * @category Class
 * @description The security alert of the vulnerable dependency.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RepositoryVulnerabilityAlertAlert implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Repository_Vulnerability_Alert_Alert';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'affected_package_name' => 'string',
        'affected_range' => 'string',
        'created_at' => 'string',
        'dismiss_comment' => 'string',
        'dismiss_reason' => 'string',
        'dismissed_at' => 'string',
        'dismisser' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User',
        'external_identifier' => 'string',
        'external_reference' => 'string',
        'fix_reason' => 'string',
        'fixed_at' => '\DateTime',
        'fixed_in' => 'string',
        'ghsa_id' => 'string',
        'id' => 'int',
        'node_id' => 'string',
        'number' => 'int',
        'severity' => 'string',
        'state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'affected_package_name' => null,
        'affected_range' => null,
        'created_at' => null,
        'dismiss_comment' => null,
        'dismiss_reason' => null,
        'dismissed_at' => null,
        'dismisser' => null,
        'external_identifier' => null,
        'external_reference' => 'uri',
        'fix_reason' => null,
        'fixed_at' => 'date-time',
        'fixed_in' => null,
        'ghsa_id' => null,
        'id' => null,
        'node_id' => null,
        'number' => null,
        'severity' => null,
        'state' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'affected_package_name' => false,
        'affected_range' => false,
        'created_at' => false,
        'dismiss_comment' => true,
        'dismiss_reason' => false,
        'dismissed_at' => false,
        'dismisser' => true,
        'external_identifier' => false,
        'external_reference' => true,
        'fix_reason' => false,
        'fixed_at' => false,
        'fixed_in' => false,
        'ghsa_id' => false,
        'id' => false,
        'node_id' => false,
        'number' => false,
        'severity' => false,
        'state' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'affected_package_name' => 'affected_package_name',
        'affected_range' => 'affected_range',
        'created_at' => 'created_at',
        'dismiss_comment' => 'dismiss_comment',
        'dismiss_reason' => 'dismiss_reason',
        'dismissed_at' => 'dismissed_at',
        'dismisser' => 'dismisser',
        'external_identifier' => 'external_identifier',
        'external_reference' => 'external_reference',
        'fix_reason' => 'fix_reason',
        'fixed_at' => 'fixed_at',
        'fixed_in' => 'fixed_in',
        'ghsa_id' => 'ghsa_id',
        'id' => 'id',
        'node_id' => 'node_id',
        'number' => 'number',
        'severity' => 'severity',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'affected_package_name' => 'setAffectedPackageName',
        'affected_range' => 'setAffectedRange',
        'created_at' => 'setCreatedAt',
        'dismiss_comment' => 'setDismissComment',
        'dismiss_reason' => 'setDismissReason',
        'dismissed_at' => 'setDismissedAt',
        'dismisser' => 'setDismisser',
        'external_identifier' => 'setExternalIdentifier',
        'external_reference' => 'setExternalReference',
        'fix_reason' => 'setFixReason',
        'fixed_at' => 'setFixedAt',
        'fixed_in' => 'setFixedIn',
        'ghsa_id' => 'setGhsaId',
        'id' => 'setId',
        'node_id' => 'setNodeId',
        'number' => 'setNumber',
        'severity' => 'setSeverity',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'affected_package_name' => 'getAffectedPackageName',
        'affected_range' => 'getAffectedRange',
        'created_at' => 'getCreatedAt',
        'dismiss_comment' => 'getDismissComment',
        'dismiss_reason' => 'getDismissReason',
        'dismissed_at' => 'getDismissedAt',
        'dismisser' => 'getDismisser',
        'external_identifier' => 'getExternalIdentifier',
        'external_reference' => 'getExternalReference',
        'fix_reason' => 'getFixReason',
        'fixed_at' => 'getFixedAt',
        'fixed_in' => 'getFixedIn',
        'ghsa_id' => 'getGhsaId',
        'id' => 'getId',
        'node_id' => 'getNodeId',
        'number' => 'getNumber',
        'severity' => 'getSeverity',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_DISMISSED = 'dismissed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_DISMISSED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('affected_package_name', $data ?? [], null);
        $this->setIfExists('affected_range', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('dismiss_comment', $data ?? [], null);
        $this->setIfExists('dismiss_reason', $data ?? [], null);
        $this->setIfExists('dismissed_at', $data ?? [], null);
        $this->setIfExists('dismisser', $data ?? [], null);
        $this->setIfExists('external_identifier', $data ?? [], null);
        $this->setIfExists('external_reference', $data ?? [], null);
        $this->setIfExists('fix_reason', $data ?? [], null);
        $this->setIfExists('fixed_at', $data ?? [], null);
        $this->setIfExists('fixed_in', $data ?? [], null);
        $this->setIfExists('ghsa_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('severity', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['affected_package_name'] === null) {
            $invalidProperties[] = "'affected_package_name' can't be null";
        }
        if ($this->container['affected_range'] === null) {
            $invalidProperties[] = "'affected_range' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['dismiss_reason'] === null) {
            $invalidProperties[] = "'dismiss_reason' can't be null";
        }
        if ($this->container['dismissed_at'] === null) {
            $invalidProperties[] = "'dismissed_at' can't be null";
        }
        if ($this->container['dismisser'] === null) {
            $invalidProperties[] = "'dismisser' can't be null";
        }
        if ($this->container['external_identifier'] === null) {
            $invalidProperties[] = "'external_identifier' can't be null";
        }
        if ($this->container['external_reference'] === null) {
            $invalidProperties[] = "'external_reference' can't be null";
        }
        if ($this->container['ghsa_id'] === null) {
            $invalidProperties[] = "'ghsa_id' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['node_id'] === null) {
            $invalidProperties[] = "'node_id' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['severity'] === null) {
            $invalidProperties[] = "'severity' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets affected_package_name
     *
     * @return string
     */
    public function getAffectedPackageName()
    {
        return $this->container['affected_package_name'];
    }

    /**
     * Sets affected_package_name
     *
     * @param string $affected_package_name affected_package_name
     *
     * @return self
     */
    public function setAffectedPackageName($affected_package_name)
    {
        if (is_null($affected_package_name)) {
            throw new \InvalidArgumentException('non-nullable affected_package_name cannot be null');
        }
        $this->container['affected_package_name'] = $affected_package_name;

        return $this;
    }

    /**
     * Gets affected_range
     *
     * @return string
     */
    public function getAffectedRange()
    {
        return $this->container['affected_range'];
    }

    /**
     * Sets affected_range
     *
     * @param string $affected_range affected_range
     *
     * @return self
     */
    public function setAffectedRange($affected_range)
    {
        if (is_null($affected_range)) {
            throw new \InvalidArgumentException('non-nullable affected_range cannot be null');
        }
        $this->container['affected_range'] = $affected_range;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets dismiss_comment
     *
     * @return string|null
     */
    public function getDismissComment()
    {
        return $this->container['dismiss_comment'];
    }

    /**
     * Sets dismiss_comment
     *
     * @param string|null $dismiss_comment dismiss_comment
     *
     * @return self
     */
    public function setDismissComment($dismiss_comment)
    {
        if (is_null($dismiss_comment)) {
            array_push($this->openAPINullablesSetToNull, 'dismiss_comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dismiss_comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dismiss_comment'] = $dismiss_comment;

        return $this;
    }

    /**
     * Gets dismiss_reason
     *
     * @return string
     */
    public function getDismissReason()
    {
        return $this->container['dismiss_reason'];
    }

    /**
     * Sets dismiss_reason
     *
     * @param string $dismiss_reason dismiss_reason
     *
     * @return self
     */
    public function setDismissReason($dismiss_reason)
    {
        if (is_null($dismiss_reason)) {
            throw new \InvalidArgumentException('non-nullable dismiss_reason cannot be null');
        }
        $this->container['dismiss_reason'] = $dismiss_reason;

        return $this;
    }

    /**
     * Gets dismissed_at
     *
     * @return string
     */
    public function getDismissedAt()
    {
        return $this->container['dismissed_at'];
    }

    /**
     * Sets dismissed_at
     *
     * @param string $dismissed_at dismissed_at
     *
     * @return self
     */
    public function setDismissedAt($dismissed_at)
    {
        if (is_null($dismissed_at)) {
            throw new \InvalidArgumentException('non-nullable dismissed_at cannot be null');
        }
        $this->container['dismissed_at'] = $dismissed_at;

        return $this;
    }

    /**
     * Gets dismisser
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User
     */
    public function getDismisser()
    {
        return $this->container['dismisser'];
    }

    /**
     * Sets dismisser
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User $dismisser dismisser
     *
     * @return self
     */
    public function setDismisser($dismisser)
    {
        if (is_null($dismisser)) {
            array_push($this->openAPINullablesSetToNull, 'dismisser');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dismisser', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dismisser'] = $dismisser;

        return $this;
    }

    /**
     * Gets external_identifier
     *
     * @return string
     */
    public function getExternalIdentifier()
    {
        return $this->container['external_identifier'];
    }

    /**
     * Sets external_identifier
     *
     * @param string $external_identifier external_identifier
     *
     * @return self
     */
    public function setExternalIdentifier($external_identifier)
    {
        if (is_null($external_identifier)) {
            throw new \InvalidArgumentException('non-nullable external_identifier cannot be null');
        }
        $this->container['external_identifier'] = $external_identifier;

        return $this;
    }

    /**
     * Gets external_reference
     *
     * @return string
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     *
     * @param string $external_reference external_reference
     *
     * @return self
     */
    public function setExternalReference($external_reference)
    {
        if (is_null($external_reference)) {
            array_push($this->openAPINullablesSetToNull, 'external_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets fix_reason
     *
     * @return string|null
     */
    public function getFixReason()
    {
        return $this->container['fix_reason'];
    }

    /**
     * Sets fix_reason
     *
     * @param string|null $fix_reason fix_reason
     *
     * @return self
     */
    public function setFixReason($fix_reason)
    {
        if (is_null($fix_reason)) {
            throw new \InvalidArgumentException('non-nullable fix_reason cannot be null');
        }
        $this->container['fix_reason'] = $fix_reason;

        return $this;
    }

    /**
     * Gets fixed_at
     *
     * @return \DateTime|null
     */
    public function getFixedAt()
    {
        return $this->container['fixed_at'];
    }

    /**
     * Sets fixed_at
     *
     * @param \DateTime|null $fixed_at fixed_at
     *
     * @return self
     */
    public function setFixedAt($fixed_at)
    {
        if (is_null($fixed_at)) {
            throw new \InvalidArgumentException('non-nullable fixed_at cannot be null');
        }
        $this->container['fixed_at'] = $fixed_at;

        return $this;
    }

    /**
     * Gets fixed_in
     *
     * @return string|null
     */
    public function getFixedIn()
    {
        return $this->container['fixed_in'];
    }

    /**
     * Sets fixed_in
     *
     * @param string|null $fixed_in fixed_in
     *
     * @return self
     */
    public function setFixedIn($fixed_in)
    {
        if (is_null($fixed_in)) {
            throw new \InvalidArgumentException('non-nullable fixed_in cannot be null');
        }
        $this->container['fixed_in'] = $fixed_in;

        return $this;
    }

    /**
     * Gets ghsa_id
     *
     * @return string
     */
    public function getGhsaId()
    {
        return $this->container['ghsa_id'];
    }

    /**
     * Sets ghsa_id
     *
     * @param string $ghsa_id ghsa_id
     *
     * @return self
     */
    public function setGhsaId($ghsa_id)
    {
        if (is_null($ghsa_id)) {
            throw new \InvalidArgumentException('non-nullable ghsa_id cannot be null');
        }
        $this->container['ghsa_id'] = $ghsa_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string $severity severity
     *
     * @return self
     */
    public function setSeverity($severity)
    {
        if (is_null($severity)) {
            throw new \InvalidArgumentException('non-nullable severity cannot be null');
        }
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


