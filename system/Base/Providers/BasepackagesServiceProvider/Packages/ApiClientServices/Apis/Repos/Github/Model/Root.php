<?php
/**
 * Root
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * Root Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Root implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'root';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'current_user_url' => 'string',
        'current_user_authorizations_html_url' => 'string',
        'authorizations_url' => 'string',
        'code_search_url' => 'string',
        'commit_search_url' => 'string',
        'emails_url' => 'string',
        'emojis_url' => 'string',
        'events_url' => 'string',
        'feeds_url' => 'string',
        'followers_url' => 'string',
        'following_url' => 'string',
        'gists_url' => 'string',
        'hub_url' => 'string',
        'issue_search_url' => 'string',
        'issues_url' => 'string',
        'keys_url' => 'string',
        'label_search_url' => 'string',
        'notifications_url' => 'string',
        'organization_url' => 'string',
        'organization_repositories_url' => 'string',
        'organization_teams_url' => 'string',
        'public_gists_url' => 'string',
        'rate_limit_url' => 'string',
        'repository_url' => 'string',
        'repository_search_url' => 'string',
        'current_user_repositories_url' => 'string',
        'starred_url' => 'string',
        'starred_gists_url' => 'string',
        'topic_search_url' => 'string',
        'user_url' => 'string',
        'user_organizations_url' => 'string',
        'user_repositories_url' => 'string',
        'user_search_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'current_user_url' => 'uri-template',
        'current_user_authorizations_html_url' => 'uri-template',
        'authorizations_url' => 'uri-template',
        'code_search_url' => 'uri-template',
        'commit_search_url' => 'uri-template',
        'emails_url' => 'uri-template',
        'emojis_url' => 'uri-template',
        'events_url' => 'uri-template',
        'feeds_url' => 'uri-template',
        'followers_url' => 'uri-template',
        'following_url' => 'uri-template',
        'gists_url' => 'uri-template',
        'hub_url' => 'uri-template',
        'issue_search_url' => 'uri-template',
        'issues_url' => 'uri-template',
        'keys_url' => 'uri-template',
        'label_search_url' => 'uri-template',
        'notifications_url' => 'uri-template',
        'organization_url' => 'uri-template',
        'organization_repositories_url' => 'uri-template',
        'organization_teams_url' => 'uri-template',
        'public_gists_url' => 'uri-template',
        'rate_limit_url' => 'uri-template',
        'repository_url' => 'uri-template',
        'repository_search_url' => 'uri-template',
        'current_user_repositories_url' => 'uri-template',
        'starred_url' => 'uri-template',
        'starred_gists_url' => 'uri-template',
        'topic_search_url' => 'uri-template',
        'user_url' => 'uri-template',
        'user_organizations_url' => 'uri-template',
        'user_repositories_url' => 'uri-template',
        'user_search_url' => 'uri-template'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'current_user_url' => false,
        'current_user_authorizations_html_url' => false,
        'authorizations_url' => false,
        'code_search_url' => false,
        'commit_search_url' => false,
        'emails_url' => false,
        'emojis_url' => false,
        'events_url' => false,
        'feeds_url' => false,
        'followers_url' => false,
        'following_url' => false,
        'gists_url' => false,
        'hub_url' => false,
        'issue_search_url' => false,
        'issues_url' => false,
        'keys_url' => false,
        'label_search_url' => false,
        'notifications_url' => false,
        'organization_url' => false,
        'organization_repositories_url' => false,
        'organization_teams_url' => false,
        'public_gists_url' => false,
        'rate_limit_url' => false,
        'repository_url' => false,
        'repository_search_url' => false,
        'current_user_repositories_url' => false,
        'starred_url' => false,
        'starred_gists_url' => false,
        'topic_search_url' => false,
        'user_url' => false,
        'user_organizations_url' => false,
        'user_repositories_url' => false,
        'user_search_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'current_user_url' => 'current_user_url',
        'current_user_authorizations_html_url' => 'current_user_authorizations_html_url',
        'authorizations_url' => 'authorizations_url',
        'code_search_url' => 'code_search_url',
        'commit_search_url' => 'commit_search_url',
        'emails_url' => 'emails_url',
        'emojis_url' => 'emojis_url',
        'events_url' => 'events_url',
        'feeds_url' => 'feeds_url',
        'followers_url' => 'followers_url',
        'following_url' => 'following_url',
        'gists_url' => 'gists_url',
        'hub_url' => 'hub_url',
        'issue_search_url' => 'issue_search_url',
        'issues_url' => 'issues_url',
        'keys_url' => 'keys_url',
        'label_search_url' => 'label_search_url',
        'notifications_url' => 'notifications_url',
        'organization_url' => 'organization_url',
        'organization_repositories_url' => 'organization_repositories_url',
        'organization_teams_url' => 'organization_teams_url',
        'public_gists_url' => 'public_gists_url',
        'rate_limit_url' => 'rate_limit_url',
        'repository_url' => 'repository_url',
        'repository_search_url' => 'repository_search_url',
        'current_user_repositories_url' => 'current_user_repositories_url',
        'starred_url' => 'starred_url',
        'starred_gists_url' => 'starred_gists_url',
        'topic_search_url' => 'topic_search_url',
        'user_url' => 'user_url',
        'user_organizations_url' => 'user_organizations_url',
        'user_repositories_url' => 'user_repositories_url',
        'user_search_url' => 'user_search_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'current_user_url' => 'setCurrentUserUrl',
        'current_user_authorizations_html_url' => 'setCurrentUserAuthorizationsHtmlUrl',
        'authorizations_url' => 'setAuthorizationsUrl',
        'code_search_url' => 'setCodeSearchUrl',
        'commit_search_url' => 'setCommitSearchUrl',
        'emails_url' => 'setEmailsUrl',
        'emojis_url' => 'setEmojisUrl',
        'events_url' => 'setEventsUrl',
        'feeds_url' => 'setFeedsUrl',
        'followers_url' => 'setFollowersUrl',
        'following_url' => 'setFollowingUrl',
        'gists_url' => 'setGistsUrl',
        'hub_url' => 'setHubUrl',
        'issue_search_url' => 'setIssueSearchUrl',
        'issues_url' => 'setIssuesUrl',
        'keys_url' => 'setKeysUrl',
        'label_search_url' => 'setLabelSearchUrl',
        'notifications_url' => 'setNotificationsUrl',
        'organization_url' => 'setOrganizationUrl',
        'organization_repositories_url' => 'setOrganizationRepositoriesUrl',
        'organization_teams_url' => 'setOrganizationTeamsUrl',
        'public_gists_url' => 'setPublicGistsUrl',
        'rate_limit_url' => 'setRateLimitUrl',
        'repository_url' => 'setRepositoryUrl',
        'repository_search_url' => 'setRepositorySearchUrl',
        'current_user_repositories_url' => 'setCurrentUserRepositoriesUrl',
        'starred_url' => 'setStarredUrl',
        'starred_gists_url' => 'setStarredGistsUrl',
        'topic_search_url' => 'setTopicSearchUrl',
        'user_url' => 'setUserUrl',
        'user_organizations_url' => 'setUserOrganizationsUrl',
        'user_repositories_url' => 'setUserRepositoriesUrl',
        'user_search_url' => 'setUserSearchUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'current_user_url' => 'getCurrentUserUrl',
        'current_user_authorizations_html_url' => 'getCurrentUserAuthorizationsHtmlUrl',
        'authorizations_url' => 'getAuthorizationsUrl',
        'code_search_url' => 'getCodeSearchUrl',
        'commit_search_url' => 'getCommitSearchUrl',
        'emails_url' => 'getEmailsUrl',
        'emojis_url' => 'getEmojisUrl',
        'events_url' => 'getEventsUrl',
        'feeds_url' => 'getFeedsUrl',
        'followers_url' => 'getFollowersUrl',
        'following_url' => 'getFollowingUrl',
        'gists_url' => 'getGistsUrl',
        'hub_url' => 'getHubUrl',
        'issue_search_url' => 'getIssueSearchUrl',
        'issues_url' => 'getIssuesUrl',
        'keys_url' => 'getKeysUrl',
        'label_search_url' => 'getLabelSearchUrl',
        'notifications_url' => 'getNotificationsUrl',
        'organization_url' => 'getOrganizationUrl',
        'organization_repositories_url' => 'getOrganizationRepositoriesUrl',
        'organization_teams_url' => 'getOrganizationTeamsUrl',
        'public_gists_url' => 'getPublicGistsUrl',
        'rate_limit_url' => 'getRateLimitUrl',
        'repository_url' => 'getRepositoryUrl',
        'repository_search_url' => 'getRepositorySearchUrl',
        'current_user_repositories_url' => 'getCurrentUserRepositoriesUrl',
        'starred_url' => 'getStarredUrl',
        'starred_gists_url' => 'getStarredGistsUrl',
        'topic_search_url' => 'getTopicSearchUrl',
        'user_url' => 'getUserUrl',
        'user_organizations_url' => 'getUserOrganizationsUrl',
        'user_repositories_url' => 'getUserRepositoriesUrl',
        'user_search_url' => 'getUserSearchUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('current_user_url', $data ?? [], null);
        $this->setIfExists('current_user_authorizations_html_url', $data ?? [], null);
        $this->setIfExists('authorizations_url', $data ?? [], null);
        $this->setIfExists('code_search_url', $data ?? [], null);
        $this->setIfExists('commit_search_url', $data ?? [], null);
        $this->setIfExists('emails_url', $data ?? [], null);
        $this->setIfExists('emojis_url', $data ?? [], null);
        $this->setIfExists('events_url', $data ?? [], null);
        $this->setIfExists('feeds_url', $data ?? [], null);
        $this->setIfExists('followers_url', $data ?? [], null);
        $this->setIfExists('following_url', $data ?? [], null);
        $this->setIfExists('gists_url', $data ?? [], null);
        $this->setIfExists('hub_url', $data ?? [], null);
        $this->setIfExists('issue_search_url', $data ?? [], null);
        $this->setIfExists('issues_url', $data ?? [], null);
        $this->setIfExists('keys_url', $data ?? [], null);
        $this->setIfExists('label_search_url', $data ?? [], null);
        $this->setIfExists('notifications_url', $data ?? [], null);
        $this->setIfExists('organization_url', $data ?? [], null);
        $this->setIfExists('organization_repositories_url', $data ?? [], null);
        $this->setIfExists('organization_teams_url', $data ?? [], null);
        $this->setIfExists('public_gists_url', $data ?? [], null);
        $this->setIfExists('rate_limit_url', $data ?? [], null);
        $this->setIfExists('repository_url', $data ?? [], null);
        $this->setIfExists('repository_search_url', $data ?? [], null);
        $this->setIfExists('current_user_repositories_url', $data ?? [], null);
        $this->setIfExists('starred_url', $data ?? [], null);
        $this->setIfExists('starred_gists_url', $data ?? [], null);
        $this->setIfExists('topic_search_url', $data ?? [], null);
        $this->setIfExists('user_url', $data ?? [], null);
        $this->setIfExists('user_organizations_url', $data ?? [], null);
        $this->setIfExists('user_repositories_url', $data ?? [], null);
        $this->setIfExists('user_search_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['current_user_url'] === null) {
            $invalidProperties[] = "'current_user_url' can't be null";
        }
        if ($this->container['current_user_authorizations_html_url'] === null) {
            $invalidProperties[] = "'current_user_authorizations_html_url' can't be null";
        }
        if ($this->container['authorizations_url'] === null) {
            $invalidProperties[] = "'authorizations_url' can't be null";
        }
        if ($this->container['code_search_url'] === null) {
            $invalidProperties[] = "'code_search_url' can't be null";
        }
        if ($this->container['commit_search_url'] === null) {
            $invalidProperties[] = "'commit_search_url' can't be null";
        }
        if ($this->container['emails_url'] === null) {
            $invalidProperties[] = "'emails_url' can't be null";
        }
        if ($this->container['emojis_url'] === null) {
            $invalidProperties[] = "'emojis_url' can't be null";
        }
        if ($this->container['events_url'] === null) {
            $invalidProperties[] = "'events_url' can't be null";
        }
        if ($this->container['feeds_url'] === null) {
            $invalidProperties[] = "'feeds_url' can't be null";
        }
        if ($this->container['followers_url'] === null) {
            $invalidProperties[] = "'followers_url' can't be null";
        }
        if ($this->container['following_url'] === null) {
            $invalidProperties[] = "'following_url' can't be null";
        }
        if ($this->container['gists_url'] === null) {
            $invalidProperties[] = "'gists_url' can't be null";
        }
        if ($this->container['issue_search_url'] === null) {
            $invalidProperties[] = "'issue_search_url' can't be null";
        }
        if ($this->container['issues_url'] === null) {
            $invalidProperties[] = "'issues_url' can't be null";
        }
        if ($this->container['keys_url'] === null) {
            $invalidProperties[] = "'keys_url' can't be null";
        }
        if ($this->container['label_search_url'] === null) {
            $invalidProperties[] = "'label_search_url' can't be null";
        }
        if ($this->container['notifications_url'] === null) {
            $invalidProperties[] = "'notifications_url' can't be null";
        }
        if ($this->container['organization_url'] === null) {
            $invalidProperties[] = "'organization_url' can't be null";
        }
        if ($this->container['organization_repositories_url'] === null) {
            $invalidProperties[] = "'organization_repositories_url' can't be null";
        }
        if ($this->container['organization_teams_url'] === null) {
            $invalidProperties[] = "'organization_teams_url' can't be null";
        }
        if ($this->container['public_gists_url'] === null) {
            $invalidProperties[] = "'public_gists_url' can't be null";
        }
        if ($this->container['rate_limit_url'] === null) {
            $invalidProperties[] = "'rate_limit_url' can't be null";
        }
        if ($this->container['repository_url'] === null) {
            $invalidProperties[] = "'repository_url' can't be null";
        }
        if ($this->container['repository_search_url'] === null) {
            $invalidProperties[] = "'repository_search_url' can't be null";
        }
        if ($this->container['current_user_repositories_url'] === null) {
            $invalidProperties[] = "'current_user_repositories_url' can't be null";
        }
        if ($this->container['starred_url'] === null) {
            $invalidProperties[] = "'starred_url' can't be null";
        }
        if ($this->container['starred_gists_url'] === null) {
            $invalidProperties[] = "'starred_gists_url' can't be null";
        }
        if ($this->container['user_url'] === null) {
            $invalidProperties[] = "'user_url' can't be null";
        }
        if ($this->container['user_organizations_url'] === null) {
            $invalidProperties[] = "'user_organizations_url' can't be null";
        }
        if ($this->container['user_repositories_url'] === null) {
            $invalidProperties[] = "'user_repositories_url' can't be null";
        }
        if ($this->container['user_search_url'] === null) {
            $invalidProperties[] = "'user_search_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets current_user_url
     *
     * @return string
     */
    public function getCurrentUserUrl()
    {
        return $this->container['current_user_url'];
    }

    /**
     * Sets current_user_url
     *
     * @param string $current_user_url current_user_url
     *
     * @return self
     */
    public function setCurrentUserUrl($current_user_url)
    {
        if (is_null($current_user_url)) {
            throw new \InvalidArgumentException('non-nullable current_user_url cannot be null');
        }
        $this->container['current_user_url'] = $current_user_url;

        return $this;
    }

    /**
     * Gets current_user_authorizations_html_url
     *
     * @return string
     */
    public function getCurrentUserAuthorizationsHtmlUrl()
    {
        return $this->container['current_user_authorizations_html_url'];
    }

    /**
     * Sets current_user_authorizations_html_url
     *
     * @param string $current_user_authorizations_html_url current_user_authorizations_html_url
     *
     * @return self
     */
    public function setCurrentUserAuthorizationsHtmlUrl($current_user_authorizations_html_url)
    {
        if (is_null($current_user_authorizations_html_url)) {
            throw new \InvalidArgumentException('non-nullable current_user_authorizations_html_url cannot be null');
        }
        $this->container['current_user_authorizations_html_url'] = $current_user_authorizations_html_url;

        return $this;
    }

    /**
     * Gets authorizations_url
     *
     * @return string
     */
    public function getAuthorizationsUrl()
    {
        return $this->container['authorizations_url'];
    }

    /**
     * Sets authorizations_url
     *
     * @param string $authorizations_url authorizations_url
     *
     * @return self
     */
    public function setAuthorizationsUrl($authorizations_url)
    {
        if (is_null($authorizations_url)) {
            throw new \InvalidArgumentException('non-nullable authorizations_url cannot be null');
        }
        $this->container['authorizations_url'] = $authorizations_url;

        return $this;
    }

    /**
     * Gets code_search_url
     *
     * @return string
     */
    public function getCodeSearchUrl()
    {
        return $this->container['code_search_url'];
    }

    /**
     * Sets code_search_url
     *
     * @param string $code_search_url code_search_url
     *
     * @return self
     */
    public function setCodeSearchUrl($code_search_url)
    {
        if (is_null($code_search_url)) {
            throw new \InvalidArgumentException('non-nullable code_search_url cannot be null');
        }
        $this->container['code_search_url'] = $code_search_url;

        return $this;
    }

    /**
     * Gets commit_search_url
     *
     * @return string
     */
    public function getCommitSearchUrl()
    {
        return $this->container['commit_search_url'];
    }

    /**
     * Sets commit_search_url
     *
     * @param string $commit_search_url commit_search_url
     *
     * @return self
     */
    public function setCommitSearchUrl($commit_search_url)
    {
        if (is_null($commit_search_url)) {
            throw new \InvalidArgumentException('non-nullable commit_search_url cannot be null');
        }
        $this->container['commit_search_url'] = $commit_search_url;

        return $this;
    }

    /**
     * Gets emails_url
     *
     * @return string
     */
    public function getEmailsUrl()
    {
        return $this->container['emails_url'];
    }

    /**
     * Sets emails_url
     *
     * @param string $emails_url emails_url
     *
     * @return self
     */
    public function setEmailsUrl($emails_url)
    {
        if (is_null($emails_url)) {
            throw new \InvalidArgumentException('non-nullable emails_url cannot be null');
        }
        $this->container['emails_url'] = $emails_url;

        return $this;
    }

    /**
     * Gets emojis_url
     *
     * @return string
     */
    public function getEmojisUrl()
    {
        return $this->container['emojis_url'];
    }

    /**
     * Sets emojis_url
     *
     * @param string $emojis_url emojis_url
     *
     * @return self
     */
    public function setEmojisUrl($emojis_url)
    {
        if (is_null($emojis_url)) {
            throw new \InvalidArgumentException('non-nullable emojis_url cannot be null');
        }
        $this->container['emojis_url'] = $emojis_url;

        return $this;
    }

    /**
     * Gets events_url
     *
     * @return string
     */
    public function getEventsUrl()
    {
        return $this->container['events_url'];
    }

    /**
     * Sets events_url
     *
     * @param string $events_url events_url
     *
     * @return self
     */
    public function setEventsUrl($events_url)
    {
        if (is_null($events_url)) {
            throw new \InvalidArgumentException('non-nullable events_url cannot be null');
        }
        $this->container['events_url'] = $events_url;

        return $this;
    }

    /**
     * Gets feeds_url
     *
     * @return string
     */
    public function getFeedsUrl()
    {
        return $this->container['feeds_url'];
    }

    /**
     * Sets feeds_url
     *
     * @param string $feeds_url feeds_url
     *
     * @return self
     */
    public function setFeedsUrl($feeds_url)
    {
        if (is_null($feeds_url)) {
            throw new \InvalidArgumentException('non-nullable feeds_url cannot be null');
        }
        $this->container['feeds_url'] = $feeds_url;

        return $this;
    }

    /**
     * Gets followers_url
     *
     * @return string
     */
    public function getFollowersUrl()
    {
        return $this->container['followers_url'];
    }

    /**
     * Sets followers_url
     *
     * @param string $followers_url followers_url
     *
     * @return self
     */
    public function setFollowersUrl($followers_url)
    {
        if (is_null($followers_url)) {
            throw new \InvalidArgumentException('non-nullable followers_url cannot be null');
        }
        $this->container['followers_url'] = $followers_url;

        return $this;
    }

    /**
     * Gets following_url
     *
     * @return string
     */
    public function getFollowingUrl()
    {
        return $this->container['following_url'];
    }

    /**
     * Sets following_url
     *
     * @param string $following_url following_url
     *
     * @return self
     */
    public function setFollowingUrl($following_url)
    {
        if (is_null($following_url)) {
            throw new \InvalidArgumentException('non-nullable following_url cannot be null');
        }
        $this->container['following_url'] = $following_url;

        return $this;
    }

    /**
     * Gets gists_url
     *
     * @return string
     */
    public function getGistsUrl()
    {
        return $this->container['gists_url'];
    }

    /**
     * Sets gists_url
     *
     * @param string $gists_url gists_url
     *
     * @return self
     */
    public function setGistsUrl($gists_url)
    {
        if (is_null($gists_url)) {
            throw new \InvalidArgumentException('non-nullable gists_url cannot be null');
        }
        $this->container['gists_url'] = $gists_url;

        return $this;
    }

    /**
     * Gets hub_url
     *
     * @return string|null
     * @deprecated
     */
    public function getHubUrl()
    {
        return $this->container['hub_url'];
    }

    /**
     * Sets hub_url
     *
     * @param string|null $hub_url hub_url
     *
     * @return self
     * @deprecated
     */
    public function setHubUrl($hub_url)
    {
        if (is_null($hub_url)) {
            throw new \InvalidArgumentException('non-nullable hub_url cannot be null');
        }
        $this->container['hub_url'] = $hub_url;

        return $this;
    }

    /**
     * Gets issue_search_url
     *
     * @return string
     */
    public function getIssueSearchUrl()
    {
        return $this->container['issue_search_url'];
    }

    /**
     * Sets issue_search_url
     *
     * @param string $issue_search_url issue_search_url
     *
     * @return self
     */
    public function setIssueSearchUrl($issue_search_url)
    {
        if (is_null($issue_search_url)) {
            throw new \InvalidArgumentException('non-nullable issue_search_url cannot be null');
        }
        $this->container['issue_search_url'] = $issue_search_url;

        return $this;
    }

    /**
     * Gets issues_url
     *
     * @return string
     */
    public function getIssuesUrl()
    {
        return $this->container['issues_url'];
    }

    /**
     * Sets issues_url
     *
     * @param string $issues_url issues_url
     *
     * @return self
     */
    public function setIssuesUrl($issues_url)
    {
        if (is_null($issues_url)) {
            throw new \InvalidArgumentException('non-nullable issues_url cannot be null');
        }
        $this->container['issues_url'] = $issues_url;

        return $this;
    }

    /**
     * Gets keys_url
     *
     * @return string
     */
    public function getKeysUrl()
    {
        return $this->container['keys_url'];
    }

    /**
     * Sets keys_url
     *
     * @param string $keys_url keys_url
     *
     * @return self
     */
    public function setKeysUrl($keys_url)
    {
        if (is_null($keys_url)) {
            throw new \InvalidArgumentException('non-nullable keys_url cannot be null');
        }
        $this->container['keys_url'] = $keys_url;

        return $this;
    }

    /**
     * Gets label_search_url
     *
     * @return string
     */
    public function getLabelSearchUrl()
    {
        return $this->container['label_search_url'];
    }

    /**
     * Sets label_search_url
     *
     * @param string $label_search_url label_search_url
     *
     * @return self
     */
    public function setLabelSearchUrl($label_search_url)
    {
        if (is_null($label_search_url)) {
            throw new \InvalidArgumentException('non-nullable label_search_url cannot be null');
        }
        $this->container['label_search_url'] = $label_search_url;

        return $this;
    }

    /**
     * Gets notifications_url
     *
     * @return string
     */
    public function getNotificationsUrl()
    {
        return $this->container['notifications_url'];
    }

    /**
     * Sets notifications_url
     *
     * @param string $notifications_url notifications_url
     *
     * @return self
     */
    public function setNotificationsUrl($notifications_url)
    {
        if (is_null($notifications_url)) {
            throw new \InvalidArgumentException('non-nullable notifications_url cannot be null');
        }
        $this->container['notifications_url'] = $notifications_url;

        return $this;
    }

    /**
     * Gets organization_url
     *
     * @return string
     */
    public function getOrganizationUrl()
    {
        return $this->container['organization_url'];
    }

    /**
     * Sets organization_url
     *
     * @param string $organization_url organization_url
     *
     * @return self
     */
    public function setOrganizationUrl($organization_url)
    {
        if (is_null($organization_url)) {
            throw new \InvalidArgumentException('non-nullable organization_url cannot be null');
        }
        $this->container['organization_url'] = $organization_url;

        return $this;
    }

    /**
     * Gets organization_repositories_url
     *
     * @return string
     */
    public function getOrganizationRepositoriesUrl()
    {
        return $this->container['organization_repositories_url'];
    }

    /**
     * Sets organization_repositories_url
     *
     * @param string $organization_repositories_url organization_repositories_url
     *
     * @return self
     */
    public function setOrganizationRepositoriesUrl($organization_repositories_url)
    {
        if (is_null($organization_repositories_url)) {
            throw new \InvalidArgumentException('non-nullable organization_repositories_url cannot be null');
        }
        $this->container['organization_repositories_url'] = $organization_repositories_url;

        return $this;
    }

    /**
     * Gets organization_teams_url
     *
     * @return string
     */
    public function getOrganizationTeamsUrl()
    {
        return $this->container['organization_teams_url'];
    }

    /**
     * Sets organization_teams_url
     *
     * @param string $organization_teams_url organization_teams_url
     *
     * @return self
     */
    public function setOrganizationTeamsUrl($organization_teams_url)
    {
        if (is_null($organization_teams_url)) {
            throw new \InvalidArgumentException('non-nullable organization_teams_url cannot be null');
        }
        $this->container['organization_teams_url'] = $organization_teams_url;

        return $this;
    }

    /**
     * Gets public_gists_url
     *
     * @return string
     */
    public function getPublicGistsUrl()
    {
        return $this->container['public_gists_url'];
    }

    /**
     * Sets public_gists_url
     *
     * @param string $public_gists_url public_gists_url
     *
     * @return self
     */
    public function setPublicGistsUrl($public_gists_url)
    {
        if (is_null($public_gists_url)) {
            throw new \InvalidArgumentException('non-nullable public_gists_url cannot be null');
        }
        $this->container['public_gists_url'] = $public_gists_url;

        return $this;
    }

    /**
     * Gets rate_limit_url
     *
     * @return string
     */
    public function getRateLimitUrl()
    {
        return $this->container['rate_limit_url'];
    }

    /**
     * Sets rate_limit_url
     *
     * @param string $rate_limit_url rate_limit_url
     *
     * @return self
     */
    public function setRateLimitUrl($rate_limit_url)
    {
        if (is_null($rate_limit_url)) {
            throw new \InvalidArgumentException('non-nullable rate_limit_url cannot be null');
        }
        $this->container['rate_limit_url'] = $rate_limit_url;

        return $this;
    }

    /**
     * Gets repository_url
     *
     * @return string
     */
    public function getRepositoryUrl()
    {
        return $this->container['repository_url'];
    }

    /**
     * Sets repository_url
     *
     * @param string $repository_url repository_url
     *
     * @return self
     */
    public function setRepositoryUrl($repository_url)
    {
        if (is_null($repository_url)) {
            throw new \InvalidArgumentException('non-nullable repository_url cannot be null');
        }
        $this->container['repository_url'] = $repository_url;

        return $this;
    }

    /**
     * Gets repository_search_url
     *
     * @return string
     */
    public function getRepositorySearchUrl()
    {
        return $this->container['repository_search_url'];
    }

    /**
     * Sets repository_search_url
     *
     * @param string $repository_search_url repository_search_url
     *
     * @return self
     */
    public function setRepositorySearchUrl($repository_search_url)
    {
        if (is_null($repository_search_url)) {
            throw new \InvalidArgumentException('non-nullable repository_search_url cannot be null');
        }
        $this->container['repository_search_url'] = $repository_search_url;

        return $this;
    }

    /**
     * Gets current_user_repositories_url
     *
     * @return string
     */
    public function getCurrentUserRepositoriesUrl()
    {
        return $this->container['current_user_repositories_url'];
    }

    /**
     * Sets current_user_repositories_url
     *
     * @param string $current_user_repositories_url current_user_repositories_url
     *
     * @return self
     */
    public function setCurrentUserRepositoriesUrl($current_user_repositories_url)
    {
        if (is_null($current_user_repositories_url)) {
            throw new \InvalidArgumentException('non-nullable current_user_repositories_url cannot be null');
        }
        $this->container['current_user_repositories_url'] = $current_user_repositories_url;

        return $this;
    }

    /**
     * Gets starred_url
     *
     * @return string
     */
    public function getStarredUrl()
    {
        return $this->container['starred_url'];
    }

    /**
     * Sets starred_url
     *
     * @param string $starred_url starred_url
     *
     * @return self
     */
    public function setStarredUrl($starred_url)
    {
        if (is_null($starred_url)) {
            throw new \InvalidArgumentException('non-nullable starred_url cannot be null');
        }
        $this->container['starred_url'] = $starred_url;

        return $this;
    }

    /**
     * Gets starred_gists_url
     *
     * @return string
     */
    public function getStarredGistsUrl()
    {
        return $this->container['starred_gists_url'];
    }

    /**
     * Sets starred_gists_url
     *
     * @param string $starred_gists_url starred_gists_url
     *
     * @return self
     */
    public function setStarredGistsUrl($starred_gists_url)
    {
        if (is_null($starred_gists_url)) {
            throw new \InvalidArgumentException('non-nullable starred_gists_url cannot be null');
        }
        $this->container['starred_gists_url'] = $starred_gists_url;

        return $this;
    }

    /**
     * Gets topic_search_url
     *
     * @return string|null
     */
    public function getTopicSearchUrl()
    {
        return $this->container['topic_search_url'];
    }

    /**
     * Sets topic_search_url
     *
     * @param string|null $topic_search_url topic_search_url
     *
     * @return self
     */
    public function setTopicSearchUrl($topic_search_url)
    {
        if (is_null($topic_search_url)) {
            throw new \InvalidArgumentException('non-nullable topic_search_url cannot be null');
        }
        $this->container['topic_search_url'] = $topic_search_url;

        return $this;
    }

    /**
     * Gets user_url
     *
     * @return string
     */
    public function getUserUrl()
    {
        return $this->container['user_url'];
    }

    /**
     * Sets user_url
     *
     * @param string $user_url user_url
     *
     * @return self
     */
    public function setUserUrl($user_url)
    {
        if (is_null($user_url)) {
            throw new \InvalidArgumentException('non-nullable user_url cannot be null');
        }
        $this->container['user_url'] = $user_url;

        return $this;
    }

    /**
     * Gets user_organizations_url
     *
     * @return string
     */
    public function getUserOrganizationsUrl()
    {
        return $this->container['user_organizations_url'];
    }

    /**
     * Sets user_organizations_url
     *
     * @param string $user_organizations_url user_organizations_url
     *
     * @return self
     */
    public function setUserOrganizationsUrl($user_organizations_url)
    {
        if (is_null($user_organizations_url)) {
            throw new \InvalidArgumentException('non-nullable user_organizations_url cannot be null');
        }
        $this->container['user_organizations_url'] = $user_organizations_url;

        return $this;
    }

    /**
     * Gets user_repositories_url
     *
     * @return string
     */
    public function getUserRepositoriesUrl()
    {
        return $this->container['user_repositories_url'];
    }

    /**
     * Sets user_repositories_url
     *
     * @param string $user_repositories_url user_repositories_url
     *
     * @return self
     */
    public function setUserRepositoriesUrl($user_repositories_url)
    {
        if (is_null($user_repositories_url)) {
            throw new \InvalidArgumentException('non-nullable user_repositories_url cannot be null');
        }
        $this->container['user_repositories_url'] = $user_repositories_url;

        return $this;
    }

    /**
     * Gets user_search_url
     *
     * @return string
     */
    public function getUserSearchUrl()
    {
        return $this->container['user_search_url'];
    }

    /**
     * Sets user_search_url
     *
     * @param string $user_search_url user_search_url
     *
     * @return self
     */
    public function setUserSearchUrl($user_search_url)
    {
        if (is_null($user_search_url)) {
            throw new \InvalidArgumentException('non-nullable user_search_url cannot be null');
        }
        $this->container['user_search_url'] = $user_search_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


