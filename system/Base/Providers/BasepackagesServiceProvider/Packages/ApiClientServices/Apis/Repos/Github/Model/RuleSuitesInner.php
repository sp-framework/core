<?php
/**
 * RuleSuitesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * RuleSuitesInner Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RuleSuitesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'rule_suites_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'actor_id' => 'int',
        'actor_name' => 'string',
        'before_sha' => 'string',
        'after_sha' => 'string',
        'ref' => 'string',
        'repository_id' => 'int',
        'repository_name' => 'string',
        'pushed_at' => '\DateTime',
        'result' => 'string',
        'evaluation_result' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'actor_id' => null,
        'actor_name' => null,
        'before_sha' => null,
        'after_sha' => null,
        'ref' => null,
        'repository_id' => null,
        'repository_name' => null,
        'pushed_at' => 'date-time',
        'result' => null,
        'evaluation_result' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'actor_id' => false,
        'actor_name' => false,
        'before_sha' => false,
        'after_sha' => false,
        'ref' => false,
        'repository_id' => false,
        'repository_name' => false,
        'pushed_at' => false,
        'result' => false,
        'evaluation_result' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'actor_id' => 'actor_id',
        'actor_name' => 'actor_name',
        'before_sha' => 'before_sha',
        'after_sha' => 'after_sha',
        'ref' => 'ref',
        'repository_id' => 'repository_id',
        'repository_name' => 'repository_name',
        'pushed_at' => 'pushed_at',
        'result' => 'result',
        'evaluation_result' => 'evaluation_result'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'actor_id' => 'setActorId',
        'actor_name' => 'setActorName',
        'before_sha' => 'setBeforeSha',
        'after_sha' => 'setAfterSha',
        'ref' => 'setRef',
        'repository_id' => 'setRepositoryId',
        'repository_name' => 'setRepositoryName',
        'pushed_at' => 'setPushedAt',
        'result' => 'setResult',
        'evaluation_result' => 'setEvaluationResult'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'actor_id' => 'getActorId',
        'actor_name' => 'getActorName',
        'before_sha' => 'getBeforeSha',
        'after_sha' => 'getAfterSha',
        'ref' => 'getRef',
        'repository_id' => 'getRepositoryId',
        'repository_name' => 'getRepositoryName',
        'pushed_at' => 'getPushedAt',
        'result' => 'getResult',
        'evaluation_result' => 'getEvaluationResult'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RESULT_PASS = 'pass';
    public const RESULT_FAIL = 'fail';
    public const RESULT_BYPASS = 'bypass';
    public const EVALUATION_RESULT_PASS = 'pass';
    public const EVALUATION_RESULT_FAIL = 'fail';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultAllowableValues()
    {
        return [
            self::RESULT_PASS,
            self::RESULT_FAIL,
            self::RESULT_BYPASS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEvaluationResultAllowableValues()
    {
        return [
            self::EVALUATION_RESULT_PASS,
            self::EVALUATION_RESULT_FAIL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('actor_id', $data ?? [], null);
        $this->setIfExists('actor_name', $data ?? [], null);
        $this->setIfExists('before_sha', $data ?? [], null);
        $this->setIfExists('after_sha', $data ?? [], null);
        $this->setIfExists('ref', $data ?? [], null);
        $this->setIfExists('repository_id', $data ?? [], null);
        $this->setIfExists('repository_name', $data ?? [], null);
        $this->setIfExists('pushed_at', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('evaluation_result', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($this->container['result']) && !in_array($this->container['result'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'result', must be one of '%s'",
                $this->container['result'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEvaluationResultAllowableValues();
        if (!is_null($this->container['evaluation_result']) && !in_array($this->container['evaluation_result'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'evaluation_result', must be one of '%s'",
                $this->container['evaluation_result'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique identifier of the rule insight.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets actor_id
     *
     * @return int|null
     */
    public function getActorId()
    {
        return $this->container['actor_id'];
    }

    /**
     * Sets actor_id
     *
     * @param int|null $actor_id The number that identifies the user.
     *
     * @return self
     */
    public function setActorId($actor_id)
    {
        if (is_null($actor_id)) {
            throw new \InvalidArgumentException('non-nullable actor_id cannot be null');
        }
        $this->container['actor_id'] = $actor_id;

        return $this;
    }

    /**
     * Gets actor_name
     *
     * @return string|null
     */
    public function getActorName()
    {
        return $this->container['actor_name'];
    }

    /**
     * Sets actor_name
     *
     * @param string|null $actor_name The handle for the GitHub user account.
     *
     * @return self
     */
    public function setActorName($actor_name)
    {
        if (is_null($actor_name)) {
            throw new \InvalidArgumentException('non-nullable actor_name cannot be null');
        }
        $this->container['actor_name'] = $actor_name;

        return $this;
    }

    /**
     * Gets before_sha
     *
     * @return string|null
     */
    public function getBeforeSha()
    {
        return $this->container['before_sha'];
    }

    /**
     * Sets before_sha
     *
     * @param string|null $before_sha The first commit sha before the push evaluation.
     *
     * @return self
     */
    public function setBeforeSha($before_sha)
    {
        if (is_null($before_sha)) {
            throw new \InvalidArgumentException('non-nullable before_sha cannot be null');
        }
        $this->container['before_sha'] = $before_sha;

        return $this;
    }

    /**
     * Gets after_sha
     *
     * @return string|null
     */
    public function getAfterSha()
    {
        return $this->container['after_sha'];
    }

    /**
     * Sets after_sha
     *
     * @param string|null $after_sha The last commit sha in the push evaluation.
     *
     * @return self
     */
    public function setAfterSha($after_sha)
    {
        if (is_null($after_sha)) {
            throw new \InvalidArgumentException('non-nullable after_sha cannot be null');
        }
        $this->container['after_sha'] = $after_sha;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return string|null
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string|null $ref The ref name that the evaluation ran on.
     *
     * @return self
     */
    public function setRef($ref)
    {
        if (is_null($ref)) {
            throw new \InvalidArgumentException('non-nullable ref cannot be null');
        }
        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets repository_id
     *
     * @return int|null
     */
    public function getRepositoryId()
    {
        return $this->container['repository_id'];
    }

    /**
     * Sets repository_id
     *
     * @param int|null $repository_id The ID of the repository associated with the rule evaluation.
     *
     * @return self
     */
    public function setRepositoryId($repository_id)
    {
        if (is_null($repository_id)) {
            throw new \InvalidArgumentException('non-nullable repository_id cannot be null');
        }
        $this->container['repository_id'] = $repository_id;

        return $this;
    }

    /**
     * Gets repository_name
     *
     * @return string|null
     */
    public function getRepositoryName()
    {
        return $this->container['repository_name'];
    }

    /**
     * Sets repository_name
     *
     * @param string|null $repository_name The name of the repository without the `.git` extension.
     *
     * @return self
     */
    public function setRepositoryName($repository_name)
    {
        if (is_null($repository_name)) {
            throw new \InvalidArgumentException('non-nullable repository_name cannot be null');
        }
        $this->container['repository_name'] = $repository_name;

        return $this;
    }

    /**
     * Gets pushed_at
     *
     * @return \DateTime|null
     */
    public function getPushedAt()
    {
        return $this->container['pushed_at'];
    }

    /**
     * Sets pushed_at
     *
     * @param \DateTime|null $pushed_at pushed_at
     *
     * @return self
     */
    public function setPushedAt($pushed_at)
    {
        if (is_null($pushed_at)) {
            throw new \InvalidArgumentException('non-nullable pushed_at cannot be null');
        }
        $this->container['pushed_at'] = $pushed_at;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string|null $result The result of the rule evaluations for rules with the `active` enforcement status.
     *
     * @return self
     */
    public function setResult($result)
    {
        if (is_null($result)) {
            throw new \InvalidArgumentException('non-nullable result cannot be null');
        }
        $allowedValues = $this->getResultAllowableValues();
        if (!in_array($result, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'result', must be one of '%s'",
                    $result,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets evaluation_result
     *
     * @return string|null
     */
    public function getEvaluationResult()
    {
        return $this->container['evaluation_result'];
    }

    /**
     * Sets evaluation_result
     *
     * @param string|null $evaluation_result The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.
     *
     * @return self
     */
    public function setEvaluationResult($evaluation_result)
    {
        if (is_null($evaluation_result)) {
            throw new \InvalidArgumentException('non-nullable evaluation_result cannot be null');
        }
        $allowedValues = $this->getEvaluationResultAllowableValues();
        if (!in_array($evaluation_result, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'evaluation_result', must be one of '%s'",
                    $evaluation_result,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['evaluation_result'] = $evaluation_result;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


