<?php
/**
 * SecretScanningLocationWikiCommit
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * SecretScanningLocationWikiCommit Class Doc Comment
 *
 * @category Class
 * @description Represents a &#39;wiki_commit&#39; secret scanning location type. This location type shows that a secret was detected inside a commit to a repository wiki.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SecretScanningLocationWikiCommit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'secret-scanning-location-wiki-commit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'path' => 'string',
        'start_line' => 'float',
        'end_line' => 'float',
        'start_column' => 'float',
        'end_column' => 'float',
        'blob_sha' => 'string',
        'page_url' => 'string',
        'commit_sha' => 'string',
        'commit_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'path' => null,
        'start_line' => null,
        'end_line' => null,
        'start_column' => null,
        'end_column' => null,
        'blob_sha' => null,
        'page_url' => null,
        'commit_sha' => null,
        'commit_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'path' => false,
        'start_line' => false,
        'end_line' => false,
        'start_column' => false,
        'end_column' => false,
        'blob_sha' => false,
        'page_url' => false,
        'commit_sha' => false,
        'commit_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'path' => 'path',
        'start_line' => 'start_line',
        'end_line' => 'end_line',
        'start_column' => 'start_column',
        'end_column' => 'end_column',
        'blob_sha' => 'blob_sha',
        'page_url' => 'page_url',
        'commit_sha' => 'commit_sha',
        'commit_url' => 'commit_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'path' => 'setPath',
        'start_line' => 'setStartLine',
        'end_line' => 'setEndLine',
        'start_column' => 'setStartColumn',
        'end_column' => 'setEndColumn',
        'blob_sha' => 'setBlobSha',
        'page_url' => 'setPageUrl',
        'commit_sha' => 'setCommitSha',
        'commit_url' => 'setCommitUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'path' => 'getPath',
        'start_line' => 'getStartLine',
        'end_line' => 'getEndLine',
        'start_column' => 'getStartColumn',
        'end_column' => 'getEndColumn',
        'blob_sha' => 'getBlobSha',
        'page_url' => 'getPageUrl',
        'commit_sha' => 'getCommitSha',
        'commit_url' => 'getCommitUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('start_line', $data ?? [], null);
        $this->setIfExists('end_line', $data ?? [], null);
        $this->setIfExists('start_column', $data ?? [], null);
        $this->setIfExists('end_column', $data ?? [], null);
        $this->setIfExists('blob_sha', $data ?? [], null);
        $this->setIfExists('page_url', $data ?? [], null);
        $this->setIfExists('commit_sha', $data ?? [], null);
        $this->setIfExists('commit_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['path'] === null) {
            $invalidProperties[] = "'path' can't be null";
        }
        if ($this->container['start_line'] === null) {
            $invalidProperties[] = "'start_line' can't be null";
        }
        if ($this->container['end_line'] === null) {
            $invalidProperties[] = "'end_line' can't be null";
        }
        if ($this->container['start_column'] === null) {
            $invalidProperties[] = "'start_column' can't be null";
        }
        if ($this->container['end_column'] === null) {
            $invalidProperties[] = "'end_column' can't be null";
        }
        if ($this->container['blob_sha'] === null) {
            $invalidProperties[] = "'blob_sha' can't be null";
        }
        if ($this->container['page_url'] === null) {
            $invalidProperties[] = "'page_url' can't be null";
        }
        if ($this->container['commit_sha'] === null) {
            $invalidProperties[] = "'commit_sha' can't be null";
        }
        if ($this->container['commit_url'] === null) {
            $invalidProperties[] = "'commit_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The file path of the wiki page
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets start_line
     *
     * @return float
     */
    public function getStartLine()
    {
        return $this->container['start_line'];
    }

    /**
     * Sets start_line
     *
     * @param float $start_line Line number at which the secret starts in the file
     *
     * @return self
     */
    public function setStartLine($start_line)
    {
        if (is_null($start_line)) {
            throw new \InvalidArgumentException('non-nullable start_line cannot be null');
        }
        $this->container['start_line'] = $start_line;

        return $this;
    }

    /**
     * Gets end_line
     *
     * @return float
     */
    public function getEndLine()
    {
        return $this->container['end_line'];
    }

    /**
     * Sets end_line
     *
     * @param float $end_line Line number at which the secret ends in the file
     *
     * @return self
     */
    public function setEndLine($end_line)
    {
        if (is_null($end_line)) {
            throw new \InvalidArgumentException('non-nullable end_line cannot be null');
        }
        $this->container['end_line'] = $end_line;

        return $this;
    }

    /**
     * Gets start_column
     *
     * @return float
     */
    public function getStartColumn()
    {
        return $this->container['start_column'];
    }

    /**
     * Sets start_column
     *
     * @param float $start_column The column at which the secret starts within the start line when the file is interpreted as 8-bit ASCII.
     *
     * @return self
     */
    public function setStartColumn($start_column)
    {
        if (is_null($start_column)) {
            throw new \InvalidArgumentException('non-nullable start_column cannot be null');
        }
        $this->container['start_column'] = $start_column;

        return $this;
    }

    /**
     * Gets end_column
     *
     * @return float
     */
    public function getEndColumn()
    {
        return $this->container['end_column'];
    }

    /**
     * Sets end_column
     *
     * @param float $end_column The column at which the secret ends within the end line when the file is interpreted as 8-bit ASCII.
     *
     * @return self
     */
    public function setEndColumn($end_column)
    {
        if (is_null($end_column)) {
            throw new \InvalidArgumentException('non-nullable end_column cannot be null');
        }
        $this->container['end_column'] = $end_column;

        return $this;
    }

    /**
     * Gets blob_sha
     *
     * @return string
     */
    public function getBlobSha()
    {
        return $this->container['blob_sha'];
    }

    /**
     * Sets blob_sha
     *
     * @param string $blob_sha SHA-1 hash ID of the associated blob
     *
     * @return self
     */
    public function setBlobSha($blob_sha)
    {
        if (is_null($blob_sha)) {
            throw new \InvalidArgumentException('non-nullable blob_sha cannot be null');
        }
        $this->container['blob_sha'] = $blob_sha;

        return $this;
    }

    /**
     * Gets page_url
     *
     * @return string
     */
    public function getPageUrl()
    {
        return $this->container['page_url'];
    }

    /**
     * Sets page_url
     *
     * @param string $page_url The GitHub URL to get the associated wiki page
     *
     * @return self
     */
    public function setPageUrl($page_url)
    {
        if (is_null($page_url)) {
            throw new \InvalidArgumentException('non-nullable page_url cannot be null');
        }
        $this->container['page_url'] = $page_url;

        return $this;
    }

    /**
     * Gets commit_sha
     *
     * @return string
     */
    public function getCommitSha()
    {
        return $this->container['commit_sha'];
    }

    /**
     * Sets commit_sha
     *
     * @param string $commit_sha SHA-1 hash ID of the associated commit
     *
     * @return self
     */
    public function setCommitSha($commit_sha)
    {
        if (is_null($commit_sha)) {
            throw new \InvalidArgumentException('non-nullable commit_sha cannot be null');
        }
        $this->container['commit_sha'] = $commit_sha;

        return $this;
    }

    /**
     * Gets commit_url
     *
     * @return string
     */
    public function getCommitUrl()
    {
        return $this->container['commit_url'];
    }

    /**
     * Sets commit_url
     *
     * @param string $commit_url The GitHub URL to get the associated wiki commit
     *
     * @return self
     */
    public function setCommitUrl($commit_url)
    {
        if (is_null($commit_url)) {
            throw new \InvalidArgumentException('non-nullable commit_url cannot be null');
        }
        $this->container['commit_url'] = $commit_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


