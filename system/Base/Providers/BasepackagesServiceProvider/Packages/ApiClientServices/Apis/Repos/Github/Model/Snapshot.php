<?php
/**
 * Snapshot
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * Snapshot Class Doc Comment
 *
 * @category Class
 * @description Create a new snapshot of a repository&#39;s dependencies.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Snapshot implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'snapshot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'version' => 'int',
        'job' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SnapshotJob',
        'sha' => 'string',
        'ref' => 'string',
        'detector' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SnapshotDetector',
        'metadata' => 'array<string,\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Metadata1>',
        'manifests' => 'array<string,\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Manifest>',
        'scanned' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'version' => null,
        'job' => null,
        'sha' => null,
        'ref' => null,
        'detector' => null,
        'metadata' => null,
        'manifests' => null,
        'scanned' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'version' => false,
        'job' => false,
        'sha' => false,
        'ref' => false,
        'detector' => false,
        'metadata' => false,
        'manifests' => false,
        'scanned' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'job' => 'job',
        'sha' => 'sha',
        'ref' => 'ref',
        'detector' => 'detector',
        'metadata' => 'metadata',
        'manifests' => 'manifests',
        'scanned' => 'scanned'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'job' => 'setJob',
        'sha' => 'setSha',
        'ref' => 'setRef',
        'detector' => 'setDetector',
        'metadata' => 'setMetadata',
        'manifests' => 'setManifests',
        'scanned' => 'setScanned'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'job' => 'getJob',
        'sha' => 'getSha',
        'ref' => 'getRef',
        'detector' => 'getDetector',
        'metadata' => 'getMetadata',
        'manifests' => 'getManifests',
        'scanned' => 'getScanned'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('job', $data ?? [], null);
        $this->setIfExists('sha', $data ?? [], null);
        $this->setIfExists('ref', $data ?? [], null);
        $this->setIfExists('detector', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('manifests', $data ?? [], null);
        $this->setIfExists('scanned', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['job'] === null) {
            $invalidProperties[] = "'job' can't be null";
        }
        if ($this->container['sha'] === null) {
            $invalidProperties[] = "'sha' can't be null";
        }
        if ((mb_strlen($this->container['sha']) > 40)) {
            $invalidProperties[] = "invalid value for 'sha', the character length must be smaller than or equal to 40.";
        }

        if ((mb_strlen($this->container['sha']) < 40)) {
            $invalidProperties[] = "invalid value for 'sha', the character length must be bigger than or equal to 40.";
        }

        if ($this->container['ref'] === null) {
            $invalidProperties[] = "'ref' can't be null";
        }
        if (!preg_match("/^refs\//", $this->container['ref'])) {
            $invalidProperties[] = "invalid value for 'ref', must be conform to the pattern /^refs\//.";
        }

        if ($this->container['detector'] === null) {
            $invalidProperties[] = "'detector' can't be null";
        }
        if (!is_null($this->container['metadata']) && (count($this->container['metadata']) > 8)) {
            $invalidProperties[] = "invalid value for 'metadata', number of items must be less than or equal to 8.";
        }

        if ($this->container['scanned'] === null) {
            $invalidProperties[] = "'scanned' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version The version of the repository snapshot submission.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets job
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SnapshotJob
     */
    public function getJob()
    {
        return $this->container['job'];
    }

    /**
     * Sets job
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SnapshotJob $job job
     *
     * @return self
     */
    public function setJob($job)
    {
        if (is_null($job)) {
            throw new \InvalidArgumentException('non-nullable job cannot be null');
        }
        $this->container['job'] = $job;

        return $this;
    }

    /**
     * Gets sha
     *
     * @return string
     */
    public function getSha()
    {
        return $this->container['sha'];
    }

    /**
     * Sets sha
     *
     * @param string $sha The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
     *
     * @return self
     */
    public function setSha($sha)
    {
        if (is_null($sha)) {
            throw new \InvalidArgumentException('non-nullable sha cannot be null');
        }
        if ((mb_strlen($sha) > 40)) {
            throw new \InvalidArgumentException('invalid length for $sha when calling Snapshot., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($sha) < 40)) {
            throw new \InvalidArgumentException('invalid length for $sha when calling Snapshot., must be bigger than or equal to 40.');
        }

        $this->container['sha'] = $sha;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return string
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string $ref The repository branch that triggered this snapshot.
     *
     * @return self
     */
    public function setRef($ref)
    {
        if (is_null($ref)) {
            throw new \InvalidArgumentException('non-nullable ref cannot be null');
        }

        if ((!preg_match("/^refs\//", ObjectSerializer::toString($ref)))) {
            throw new \InvalidArgumentException("invalid value for \$ref when calling Snapshot., must conform to the pattern /^refs\//.");
        }

        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets detector
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SnapshotDetector
     */
    public function getDetector()
    {
        return $this->container['detector'];
    }

    /**
     * Sets detector
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SnapshotDetector $detector detector
     *
     * @return self
     */
    public function setDetector($detector)
    {
        if (is_null($detector)) {
            throw new \InvalidArgumentException('non-nullable detector cannot be null');
        }
        $this->container['detector'] = $detector;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Metadata1>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Metadata1>|null $metadata User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }

        if ((count($metadata) > 8)) {
            throw new \InvalidArgumentException('invalid value for $metadata when calling Snapshot., number of items must be less than or equal to 8.');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets manifests
     *
     * @return array<string,\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Manifest>|null
     */
    public function getManifests()
    {
        return $this->container['manifests'];
    }

    /**
     * Sets manifests
     *
     * @param array<string,\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Manifest>|null $manifests A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.
     *
     * @return self
     */
    public function setManifests($manifests)
    {
        if (is_null($manifests)) {
            throw new \InvalidArgumentException('non-nullable manifests cannot be null');
        }
        $this->container['manifests'] = $manifests;

        return $this;
    }

    /**
     * Gets scanned
     *
     * @return \DateTime
     */
    public function getScanned()
    {
        return $this->container['scanned'];
    }

    /**
     * Sets scanned
     *
     * @param \DateTime $scanned The time at which the snapshot was scanned.
     *
     * @return self
     */
    public function setScanned($scanned)
    {
        if (is_null($scanned)) {
            throw new \InvalidArgumentException('non-nullable scanned cannot be null');
        }
        $this->container['scanned'] = $scanned;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


