<?php
/**
 * SponsorshipTier
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * SponsorshipTier Class Doc Comment
 *
 * @category Class
 * @description The &#x60;tier_changed&#x60; and &#x60;pending_tier_change&#x60; will include the original tier before the change or pending change. For more information, see the pending tier change payload.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SponsorshipTier implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Sponsorship_Tier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created_at' => 'string',
        'description' => 'string',
        'is_custom_ammount' => 'bool',
        'is_custom_amount' => 'bool',
        'is_one_time' => 'bool',
        'monthly_price_in_cents' => 'int',
        'monthly_price_in_dollars' => 'int',
        'name' => 'string',
        'node_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created_at' => null,
        'description' => null,
        'is_custom_ammount' => null,
        'is_custom_amount' => null,
        'is_one_time' => null,
        'monthly_price_in_cents' => null,
        'monthly_price_in_dollars' => null,
        'name' => null,
        'node_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'created_at' => false,
        'description' => false,
        'is_custom_ammount' => false,
        'is_custom_amount' => false,
        'is_one_time' => false,
        'monthly_price_in_cents' => false,
        'monthly_price_in_dollars' => false,
        'name' => false,
        'node_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_at' => 'created_at',
        'description' => 'description',
        'is_custom_ammount' => 'is_custom_ammount',
        'is_custom_amount' => 'is_custom_amount',
        'is_one_time' => 'is_one_time',
        'monthly_price_in_cents' => 'monthly_price_in_cents',
        'monthly_price_in_dollars' => 'monthly_price_in_dollars',
        'name' => 'name',
        'node_id' => 'node_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_at' => 'setCreatedAt',
        'description' => 'setDescription',
        'is_custom_ammount' => 'setIsCustomAmmount',
        'is_custom_amount' => 'setIsCustomAmount',
        'is_one_time' => 'setIsOneTime',
        'monthly_price_in_cents' => 'setMonthlyPriceInCents',
        'monthly_price_in_dollars' => 'setMonthlyPriceInDollars',
        'name' => 'setName',
        'node_id' => 'setNodeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_at' => 'getCreatedAt',
        'description' => 'getDescription',
        'is_custom_ammount' => 'getIsCustomAmmount',
        'is_custom_amount' => 'getIsCustomAmount',
        'is_one_time' => 'getIsOneTime',
        'monthly_price_in_cents' => 'getMonthlyPriceInCents',
        'monthly_price_in_dollars' => 'getMonthlyPriceInDollars',
        'name' => 'getName',
        'node_id' => 'getNodeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('is_custom_ammount', $data ?? [], null);
        $this->setIfExists('is_custom_amount', $data ?? [], null);
        $this->setIfExists('is_one_time', $data ?? [], null);
        $this->setIfExists('monthly_price_in_cents', $data ?? [], null);
        $this->setIfExists('monthly_price_in_dollars', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('node_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['is_one_time'] === null) {
            $invalidProperties[] = "'is_one_time' can't be null";
        }
        if ($this->container['monthly_price_in_cents'] === null) {
            $invalidProperties[] = "'monthly_price_in_cents' can't be null";
        }
        if ($this->container['monthly_price_in_dollars'] === null) {
            $invalidProperties[] = "'monthly_price_in_dollars' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['node_id'] === null) {
            $invalidProperties[] = "'node_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_custom_ammount
     *
     * @return bool|null
     */
    public function getIsCustomAmmount()
    {
        return $this->container['is_custom_ammount'];
    }

    /**
     * Sets is_custom_ammount
     *
     * @param bool|null $is_custom_ammount is_custom_ammount
     *
     * @return self
     */
    public function setIsCustomAmmount($is_custom_ammount)
    {
        if (is_null($is_custom_ammount)) {
            throw new \InvalidArgumentException('non-nullable is_custom_ammount cannot be null');
        }
        $this->container['is_custom_ammount'] = $is_custom_ammount;

        return $this;
    }

    /**
     * Gets is_custom_amount
     *
     * @return bool|null
     */
    public function getIsCustomAmount()
    {
        return $this->container['is_custom_amount'];
    }

    /**
     * Sets is_custom_amount
     *
     * @param bool|null $is_custom_amount is_custom_amount
     *
     * @return self
     */
    public function setIsCustomAmount($is_custom_amount)
    {
        if (is_null($is_custom_amount)) {
            throw new \InvalidArgumentException('non-nullable is_custom_amount cannot be null');
        }
        $this->container['is_custom_amount'] = $is_custom_amount;

        return $this;
    }

    /**
     * Gets is_one_time
     *
     * @return bool
     */
    public function getIsOneTime()
    {
        return $this->container['is_one_time'];
    }

    /**
     * Sets is_one_time
     *
     * @param bool $is_one_time is_one_time
     *
     * @return self
     */
    public function setIsOneTime($is_one_time)
    {
        if (is_null($is_one_time)) {
            throw new \InvalidArgumentException('non-nullable is_one_time cannot be null');
        }
        $this->container['is_one_time'] = $is_one_time;

        return $this;
    }

    /**
     * Gets monthly_price_in_cents
     *
     * @return int
     */
    public function getMonthlyPriceInCents()
    {
        return $this->container['monthly_price_in_cents'];
    }

    /**
     * Sets monthly_price_in_cents
     *
     * @param int $monthly_price_in_cents monthly_price_in_cents
     *
     * @return self
     */
    public function setMonthlyPriceInCents($monthly_price_in_cents)
    {
        if (is_null($monthly_price_in_cents)) {
            throw new \InvalidArgumentException('non-nullable monthly_price_in_cents cannot be null');
        }
        $this->container['monthly_price_in_cents'] = $monthly_price_in_cents;

        return $this;
    }

    /**
     * Gets monthly_price_in_dollars
     *
     * @return int
     */
    public function getMonthlyPriceInDollars()
    {
        return $this->container['monthly_price_in_dollars'];
    }

    /**
     * Sets monthly_price_in_dollars
     *
     * @param int $monthly_price_in_dollars monthly_price_in_dollars
     *
     * @return self
     */
    public function setMonthlyPriceInDollars($monthly_price_in_dollars)
    {
        if (is_null($monthly_price_in_dollars)) {
            throw new \InvalidArgumentException('non-nullable monthly_price_in_dollars cannot be null');
        }
        $this->container['monthly_price_in_dollars'] = $monthly_price_in_dollars;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


