<?php
/**
 * WebhookInstallationTargetRenamedAccount
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * WebhookInstallationTargetRenamedAccount Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebhookInstallationTargetRenamedAccount implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'webhook_installation_target_renamed_account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'archived_at' => 'string',
        'avatar_url' => 'string',
        'created_at' => 'string',
        'description' => 'mixed',
        'events_url' => 'string',
        'followers' => 'int',
        'followers_url' => 'string',
        'following' => 'int',
        'following_url' => 'string',
        'gists_url' => 'string',
        'gravatar_id' => 'string',
        'has_organization_projects' => 'bool',
        'has_repository_projects' => 'bool',
        'hooks_url' => 'string',
        'html_url' => 'string',
        'id' => 'int',
        'is_verified' => 'bool',
        'issues_url' => 'string',
        'login' => 'string',
        'members_url' => 'string',
        'name' => 'string',
        'node_id' => 'string',
        'organizations_url' => 'string',
        'public_gists' => 'int',
        'public_members_url' => 'string',
        'public_repos' => 'int',
        'received_events_url' => 'string',
        'repos_url' => 'string',
        'site_admin' => 'bool',
        'slug' => 'string',
        'starred_url' => 'string',
        'subscriptions_url' => 'string',
        'type' => 'string',
        'updated_at' => 'string',
        'url' => 'string',
        'website_url' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'archived_at' => null,
        'avatar_url' => null,
        'created_at' => null,
        'description' => null,
        'events_url' => null,
        'followers' => null,
        'followers_url' => null,
        'following' => null,
        'following_url' => null,
        'gists_url' => null,
        'gravatar_id' => null,
        'has_organization_projects' => null,
        'has_repository_projects' => null,
        'hooks_url' => null,
        'html_url' => null,
        'id' => null,
        'is_verified' => null,
        'issues_url' => null,
        'login' => null,
        'members_url' => null,
        'name' => null,
        'node_id' => null,
        'organizations_url' => null,
        'public_gists' => null,
        'public_members_url' => null,
        'public_repos' => null,
        'received_events_url' => null,
        'repos_url' => null,
        'site_admin' => null,
        'slug' => null,
        'starred_url' => null,
        'subscriptions_url' => null,
        'type' => null,
        'updated_at' => null,
        'url' => null,
        'website_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'archived_at' => true,
        'avatar_url' => false,
        'created_at' => false,
        'description' => true,
        'events_url' => false,
        'followers' => false,
        'followers_url' => false,
        'following' => false,
        'following_url' => false,
        'gists_url' => false,
        'gravatar_id' => false,
        'has_organization_projects' => false,
        'has_repository_projects' => false,
        'hooks_url' => false,
        'html_url' => false,
        'id' => false,
        'is_verified' => false,
        'issues_url' => false,
        'login' => false,
        'members_url' => false,
        'name' => false,
        'node_id' => false,
        'organizations_url' => false,
        'public_gists' => false,
        'public_members_url' => false,
        'public_repos' => false,
        'received_events_url' => false,
        'repos_url' => false,
        'site_admin' => false,
        'slug' => false,
        'starred_url' => false,
        'subscriptions_url' => false,
        'type' => false,
        'updated_at' => false,
        'url' => false,
        'website_url' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'archived_at' => 'archived_at',
        'avatar_url' => 'avatar_url',
        'created_at' => 'created_at',
        'description' => 'description',
        'events_url' => 'events_url',
        'followers' => 'followers',
        'followers_url' => 'followers_url',
        'following' => 'following',
        'following_url' => 'following_url',
        'gists_url' => 'gists_url',
        'gravatar_id' => 'gravatar_id',
        'has_organization_projects' => 'has_organization_projects',
        'has_repository_projects' => 'has_repository_projects',
        'hooks_url' => 'hooks_url',
        'html_url' => 'html_url',
        'id' => 'id',
        'is_verified' => 'is_verified',
        'issues_url' => 'issues_url',
        'login' => 'login',
        'members_url' => 'members_url',
        'name' => 'name',
        'node_id' => 'node_id',
        'organizations_url' => 'organizations_url',
        'public_gists' => 'public_gists',
        'public_members_url' => 'public_members_url',
        'public_repos' => 'public_repos',
        'received_events_url' => 'received_events_url',
        'repos_url' => 'repos_url',
        'site_admin' => 'site_admin',
        'slug' => 'slug',
        'starred_url' => 'starred_url',
        'subscriptions_url' => 'subscriptions_url',
        'type' => 'type',
        'updated_at' => 'updated_at',
        'url' => 'url',
        'website_url' => 'website_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'archived_at' => 'setArchivedAt',
        'avatar_url' => 'setAvatarUrl',
        'created_at' => 'setCreatedAt',
        'description' => 'setDescription',
        'events_url' => 'setEventsUrl',
        'followers' => 'setFollowers',
        'followers_url' => 'setFollowersUrl',
        'following' => 'setFollowing',
        'following_url' => 'setFollowingUrl',
        'gists_url' => 'setGistsUrl',
        'gravatar_id' => 'setGravatarId',
        'has_organization_projects' => 'setHasOrganizationProjects',
        'has_repository_projects' => 'setHasRepositoryProjects',
        'hooks_url' => 'setHooksUrl',
        'html_url' => 'setHtmlUrl',
        'id' => 'setId',
        'is_verified' => 'setIsVerified',
        'issues_url' => 'setIssuesUrl',
        'login' => 'setLogin',
        'members_url' => 'setMembersUrl',
        'name' => 'setName',
        'node_id' => 'setNodeId',
        'organizations_url' => 'setOrganizationsUrl',
        'public_gists' => 'setPublicGists',
        'public_members_url' => 'setPublicMembersUrl',
        'public_repos' => 'setPublicRepos',
        'received_events_url' => 'setReceivedEventsUrl',
        'repos_url' => 'setReposUrl',
        'site_admin' => 'setSiteAdmin',
        'slug' => 'setSlug',
        'starred_url' => 'setStarredUrl',
        'subscriptions_url' => 'setSubscriptionsUrl',
        'type' => 'setType',
        'updated_at' => 'setUpdatedAt',
        'url' => 'setUrl',
        'website_url' => 'setWebsiteUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'archived_at' => 'getArchivedAt',
        'avatar_url' => 'getAvatarUrl',
        'created_at' => 'getCreatedAt',
        'description' => 'getDescription',
        'events_url' => 'getEventsUrl',
        'followers' => 'getFollowers',
        'followers_url' => 'getFollowersUrl',
        'following' => 'getFollowing',
        'following_url' => 'getFollowingUrl',
        'gists_url' => 'getGistsUrl',
        'gravatar_id' => 'getGravatarId',
        'has_organization_projects' => 'getHasOrganizationProjects',
        'has_repository_projects' => 'getHasRepositoryProjects',
        'hooks_url' => 'getHooksUrl',
        'html_url' => 'getHtmlUrl',
        'id' => 'getId',
        'is_verified' => 'getIsVerified',
        'issues_url' => 'getIssuesUrl',
        'login' => 'getLogin',
        'members_url' => 'getMembersUrl',
        'name' => 'getName',
        'node_id' => 'getNodeId',
        'organizations_url' => 'getOrganizationsUrl',
        'public_gists' => 'getPublicGists',
        'public_members_url' => 'getPublicMembersUrl',
        'public_repos' => 'getPublicRepos',
        'received_events_url' => 'getReceivedEventsUrl',
        'repos_url' => 'getReposUrl',
        'site_admin' => 'getSiteAdmin',
        'slug' => 'getSlug',
        'starred_url' => 'getStarredUrl',
        'subscriptions_url' => 'getSubscriptionsUrl',
        'type' => 'getType',
        'updated_at' => 'getUpdatedAt',
        'url' => 'getUrl',
        'website_url' => 'getWebsiteUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('archived_at', $data ?? [], null);
        $this->setIfExists('avatar_url', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('events_url', $data ?? [], null);
        $this->setIfExists('followers', $data ?? [], null);
        $this->setIfExists('followers_url', $data ?? [], null);
        $this->setIfExists('following', $data ?? [], null);
        $this->setIfExists('following_url', $data ?? [], null);
        $this->setIfExists('gists_url', $data ?? [], null);
        $this->setIfExists('gravatar_id', $data ?? [], null);
        $this->setIfExists('has_organization_projects', $data ?? [], null);
        $this->setIfExists('has_repository_projects', $data ?? [], null);
        $this->setIfExists('hooks_url', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_verified', $data ?? [], null);
        $this->setIfExists('issues_url', $data ?? [], null);
        $this->setIfExists('login', $data ?? [], null);
        $this->setIfExists('members_url', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('organizations_url', $data ?? [], null);
        $this->setIfExists('public_gists', $data ?? [], null);
        $this->setIfExists('public_members_url', $data ?? [], null);
        $this->setIfExists('public_repos', $data ?? [], null);
        $this->setIfExists('received_events_url', $data ?? [], null);
        $this->setIfExists('repos_url', $data ?? [], null);
        $this->setIfExists('site_admin', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('starred_url', $data ?? [], null);
        $this->setIfExists('subscriptions_url', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('website_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['avatar_url'] === null) {
            $invalidProperties[] = "'avatar_url' can't be null";
        }
        if ($this->container['html_url'] === null) {
            $invalidProperties[] = "'html_url' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['node_id'] === null) {
            $invalidProperties[] = "'node_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets archived_at
     *
     * @return string|null
     */
    public function getArchivedAt()
    {
        return $this->container['archived_at'];
    }

    /**
     * Sets archived_at
     *
     * @param string|null $archived_at archived_at
     *
     * @return self
     */
    public function setArchivedAt($archived_at)
    {
        if (is_null($archived_at)) {
            array_push($this->openAPINullablesSetToNull, 'archived_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('archived_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['archived_at'] = $archived_at;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string $avatar_url avatar_url
     *
     * @return self
     */
    public function setAvatarUrl($avatar_url)
    {
        if (is_null($avatar_url)) {
            throw new \InvalidArgumentException('non-nullable avatar_url cannot be null');
        }
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return mixed|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param mixed|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets events_url
     *
     * @return string|null
     */
    public function getEventsUrl()
    {
        return $this->container['events_url'];
    }

    /**
     * Sets events_url
     *
     * @param string|null $events_url events_url
     *
     * @return self
     */
    public function setEventsUrl($events_url)
    {
        if (is_null($events_url)) {
            throw new \InvalidArgumentException('non-nullable events_url cannot be null');
        }
        $this->container['events_url'] = $events_url;

        return $this;
    }

    /**
     * Gets followers
     *
     * @return int|null
     */
    public function getFollowers()
    {
        return $this->container['followers'];
    }

    /**
     * Sets followers
     *
     * @param int|null $followers followers
     *
     * @return self
     */
    public function setFollowers($followers)
    {
        if (is_null($followers)) {
            throw new \InvalidArgumentException('non-nullable followers cannot be null');
        }
        $this->container['followers'] = $followers;

        return $this;
    }

    /**
     * Gets followers_url
     *
     * @return string|null
     */
    public function getFollowersUrl()
    {
        return $this->container['followers_url'];
    }

    /**
     * Sets followers_url
     *
     * @param string|null $followers_url followers_url
     *
     * @return self
     */
    public function setFollowersUrl($followers_url)
    {
        if (is_null($followers_url)) {
            throw new \InvalidArgumentException('non-nullable followers_url cannot be null');
        }
        $this->container['followers_url'] = $followers_url;

        return $this;
    }

    /**
     * Gets following
     *
     * @return int|null
     */
    public function getFollowing()
    {
        return $this->container['following'];
    }

    /**
     * Sets following
     *
     * @param int|null $following following
     *
     * @return self
     */
    public function setFollowing($following)
    {
        if (is_null($following)) {
            throw new \InvalidArgumentException('non-nullable following cannot be null');
        }
        $this->container['following'] = $following;

        return $this;
    }

    /**
     * Gets following_url
     *
     * @return string|null
     */
    public function getFollowingUrl()
    {
        return $this->container['following_url'];
    }

    /**
     * Sets following_url
     *
     * @param string|null $following_url following_url
     *
     * @return self
     */
    public function setFollowingUrl($following_url)
    {
        if (is_null($following_url)) {
            throw new \InvalidArgumentException('non-nullable following_url cannot be null');
        }
        $this->container['following_url'] = $following_url;

        return $this;
    }

    /**
     * Gets gists_url
     *
     * @return string|null
     */
    public function getGistsUrl()
    {
        return $this->container['gists_url'];
    }

    /**
     * Sets gists_url
     *
     * @param string|null $gists_url gists_url
     *
     * @return self
     */
    public function setGistsUrl($gists_url)
    {
        if (is_null($gists_url)) {
            throw new \InvalidArgumentException('non-nullable gists_url cannot be null');
        }
        $this->container['gists_url'] = $gists_url;

        return $this;
    }

    /**
     * Gets gravatar_id
     *
     * @return string|null
     */
    public function getGravatarId()
    {
        return $this->container['gravatar_id'];
    }

    /**
     * Sets gravatar_id
     *
     * @param string|null $gravatar_id gravatar_id
     *
     * @return self
     */
    public function setGravatarId($gravatar_id)
    {
        if (is_null($gravatar_id)) {
            throw new \InvalidArgumentException('non-nullable gravatar_id cannot be null');
        }
        $this->container['gravatar_id'] = $gravatar_id;

        return $this;
    }

    /**
     * Gets has_organization_projects
     *
     * @return bool|null
     */
    public function getHasOrganizationProjects()
    {
        return $this->container['has_organization_projects'];
    }

    /**
     * Sets has_organization_projects
     *
     * @param bool|null $has_organization_projects has_organization_projects
     *
     * @return self
     */
    public function setHasOrganizationProjects($has_organization_projects)
    {
        if (is_null($has_organization_projects)) {
            throw new \InvalidArgumentException('non-nullable has_organization_projects cannot be null');
        }
        $this->container['has_organization_projects'] = $has_organization_projects;

        return $this;
    }

    /**
     * Gets has_repository_projects
     *
     * @return bool|null
     */
    public function getHasRepositoryProjects()
    {
        return $this->container['has_repository_projects'];
    }

    /**
     * Sets has_repository_projects
     *
     * @param bool|null $has_repository_projects has_repository_projects
     *
     * @return self
     */
    public function setHasRepositoryProjects($has_repository_projects)
    {
        if (is_null($has_repository_projects)) {
            throw new \InvalidArgumentException('non-nullable has_repository_projects cannot be null');
        }
        $this->container['has_repository_projects'] = $has_repository_projects;

        return $this;
    }

    /**
     * Gets hooks_url
     *
     * @return string|null
     */
    public function getHooksUrl()
    {
        return $this->container['hooks_url'];
    }

    /**
     * Sets hooks_url
     *
     * @param string|null $hooks_url hooks_url
     *
     * @return self
     */
    public function setHooksUrl($hooks_url)
    {
        if (is_null($hooks_url)) {
            throw new \InvalidArgumentException('non-nullable hooks_url cannot be null');
        }
        $this->container['hooks_url'] = $hooks_url;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_verified
     *
     * @return bool|null
     */
    public function getIsVerified()
    {
        return $this->container['is_verified'];
    }

    /**
     * Sets is_verified
     *
     * @param bool|null $is_verified is_verified
     *
     * @return self
     */
    public function setIsVerified($is_verified)
    {
        if (is_null($is_verified)) {
            throw new \InvalidArgumentException('non-nullable is_verified cannot be null');
        }
        $this->container['is_verified'] = $is_verified;

        return $this;
    }

    /**
     * Gets issues_url
     *
     * @return string|null
     */
    public function getIssuesUrl()
    {
        return $this->container['issues_url'];
    }

    /**
     * Sets issues_url
     *
     * @param string|null $issues_url issues_url
     *
     * @return self
     */
    public function setIssuesUrl($issues_url)
    {
        if (is_null($issues_url)) {
            throw new \InvalidArgumentException('non-nullable issues_url cannot be null');
        }
        $this->container['issues_url'] = $issues_url;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string|null
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string|null $login login
     *
     * @return self
     */
    public function setLogin($login)
    {
        if (is_null($login)) {
            throw new \InvalidArgumentException('non-nullable login cannot be null');
        }
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets members_url
     *
     * @return string|null
     */
    public function getMembersUrl()
    {
        return $this->container['members_url'];
    }

    /**
     * Sets members_url
     *
     * @param string|null $members_url members_url
     *
     * @return self
     */
    public function setMembersUrl($members_url)
    {
        if (is_null($members_url)) {
            throw new \InvalidArgumentException('non-nullable members_url cannot be null');
        }
        $this->container['members_url'] = $members_url;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets organizations_url
     *
     * @return string|null
     */
    public function getOrganizationsUrl()
    {
        return $this->container['organizations_url'];
    }

    /**
     * Sets organizations_url
     *
     * @param string|null $organizations_url organizations_url
     *
     * @return self
     */
    public function setOrganizationsUrl($organizations_url)
    {
        if (is_null($organizations_url)) {
            throw new \InvalidArgumentException('non-nullable organizations_url cannot be null');
        }
        $this->container['organizations_url'] = $organizations_url;

        return $this;
    }

    /**
     * Gets public_gists
     *
     * @return int|null
     */
    public function getPublicGists()
    {
        return $this->container['public_gists'];
    }

    /**
     * Sets public_gists
     *
     * @param int|null $public_gists public_gists
     *
     * @return self
     */
    public function setPublicGists($public_gists)
    {
        if (is_null($public_gists)) {
            throw new \InvalidArgumentException('non-nullable public_gists cannot be null');
        }
        $this->container['public_gists'] = $public_gists;

        return $this;
    }

    /**
     * Gets public_members_url
     *
     * @return string|null
     */
    public function getPublicMembersUrl()
    {
        return $this->container['public_members_url'];
    }

    /**
     * Sets public_members_url
     *
     * @param string|null $public_members_url public_members_url
     *
     * @return self
     */
    public function setPublicMembersUrl($public_members_url)
    {
        if (is_null($public_members_url)) {
            throw new \InvalidArgumentException('non-nullable public_members_url cannot be null');
        }
        $this->container['public_members_url'] = $public_members_url;

        return $this;
    }

    /**
     * Gets public_repos
     *
     * @return int|null
     */
    public function getPublicRepos()
    {
        return $this->container['public_repos'];
    }

    /**
     * Sets public_repos
     *
     * @param int|null $public_repos public_repos
     *
     * @return self
     */
    public function setPublicRepos($public_repos)
    {
        if (is_null($public_repos)) {
            throw new \InvalidArgumentException('non-nullable public_repos cannot be null');
        }
        $this->container['public_repos'] = $public_repos;

        return $this;
    }

    /**
     * Gets received_events_url
     *
     * @return string|null
     */
    public function getReceivedEventsUrl()
    {
        return $this->container['received_events_url'];
    }

    /**
     * Sets received_events_url
     *
     * @param string|null $received_events_url received_events_url
     *
     * @return self
     */
    public function setReceivedEventsUrl($received_events_url)
    {
        if (is_null($received_events_url)) {
            throw new \InvalidArgumentException('non-nullable received_events_url cannot be null');
        }
        $this->container['received_events_url'] = $received_events_url;

        return $this;
    }

    /**
     * Gets repos_url
     *
     * @return string|null
     */
    public function getReposUrl()
    {
        return $this->container['repos_url'];
    }

    /**
     * Sets repos_url
     *
     * @param string|null $repos_url repos_url
     *
     * @return self
     */
    public function setReposUrl($repos_url)
    {
        if (is_null($repos_url)) {
            throw new \InvalidArgumentException('non-nullable repos_url cannot be null');
        }
        $this->container['repos_url'] = $repos_url;

        return $this;
    }

    /**
     * Gets site_admin
     *
     * @return bool|null
     */
    public function getSiteAdmin()
    {
        return $this->container['site_admin'];
    }

    /**
     * Sets site_admin
     *
     * @param bool|null $site_admin site_admin
     *
     * @return self
     */
    public function setSiteAdmin($site_admin)
    {
        if (is_null($site_admin)) {
            throw new \InvalidArgumentException('non-nullable site_admin cannot be null');
        }
        $this->container['site_admin'] = $site_admin;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        if (is_null($slug)) {
            throw new \InvalidArgumentException('non-nullable slug cannot be null');
        }
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets starred_url
     *
     * @return string|null
     */
    public function getStarredUrl()
    {
        return $this->container['starred_url'];
    }

    /**
     * Sets starred_url
     *
     * @param string|null $starred_url starred_url
     *
     * @return self
     */
    public function setStarredUrl($starred_url)
    {
        if (is_null($starred_url)) {
            throw new \InvalidArgumentException('non-nullable starred_url cannot be null');
        }
        $this->container['starred_url'] = $starred_url;

        return $this;
    }

    /**
     * Gets subscriptions_url
     *
     * @return string|null
     */
    public function getSubscriptionsUrl()
    {
        return $this->container['subscriptions_url'];
    }

    /**
     * Sets subscriptions_url
     *
     * @param string|null $subscriptions_url subscriptions_url
     *
     * @return self
     */
    public function setSubscriptionsUrl($subscriptions_url)
    {
        if (is_null($subscriptions_url)) {
            throw new \InvalidArgumentException('non-nullable subscriptions_url cannot be null');
        }
        $this->container['subscriptions_url'] = $subscriptions_url;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return mixed|null
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param mixed|null $website_url website_url
     *
     * @return self
     */
    public function setWebsiteUrl($website_url)
    {
        if (is_null($website_url)) {
            array_push($this->openAPINullablesSetToNull, 'website_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('website_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['website_url'] = $website_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


