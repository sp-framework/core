<?php
/**
 * WebhookIssueCommentCreatedIssue
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * WebhookIssueCommentCreatedIssue Class Doc Comment
 *
 * @category Class
 * @description The [issue](https://docs.github.com/enterprise-server@3.12/rest/issues/issues#get-an-issue) the comment belongs to.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebhookIssueCommentCreatedIssue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'webhook_issue_comment_created_issue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active_lock_reason' => 'string',
        'assignee' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User1',
        'assignees' => 'object[]',
        'author_association' => 'string',
        'body' => 'string',
        'closed_at' => 'string',
        'comments' => 'int',
        'comments_url' => 'string',
        'created_at' => 'string',
        'draft' => 'bool',
        'events_url' => 'string',
        'html_url' => 'string',
        'id' => 'int',
        'labels' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Label[]',
        'labels_url' => 'string',
        'locked' => 'bool',
        'milestone' => 'object',
        'node_id' => 'string',
        'number' => 'int',
        'performed_via_github_app' => 'object',
        'pull_request' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksIssuePullRequest',
        'reactions' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhookIssueCommentCreatedIssueAllOfReactions',
        'repository_url' => 'string',
        'state' => 'string',
        'state_reason' => 'string',
        'timeline_url' => 'string',
        'title' => 'string',
        'updated_at' => 'string',
        'url' => 'string',
        'user' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksSponsorshipMaintainer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active_lock_reason' => null,
        'assignee' => null,
        'assignees' => null,
        'author_association' => null,
        'body' => null,
        'closed_at' => null,
        'comments' => null,
        'comments_url' => null,
        'created_at' => null,
        'draft' => null,
        'events_url' => null,
        'html_url' => null,
        'id' => null,
        'labels' => null,
        'labels_url' => null,
        'locked' => null,
        'milestone' => null,
        'node_id' => null,
        'number' => null,
        'performed_via_github_app' => null,
        'pull_request' => null,
        'reactions' => null,
        'repository_url' => null,
        'state' => null,
        'state_reason' => null,
        'timeline_url' => null,
        'title' => null,
        'updated_at' => null,
        'url' => null,
        'user' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'active_lock_reason' => true,
        'assignee' => true,
        'assignees' => false,
        'author_association' => false,
        'body' => true,
        'closed_at' => true,
        'comments' => false,
        'comments_url' => false,
        'created_at' => false,
        'draft' => false,
        'events_url' => false,
        'html_url' => false,
        'id' => false,
        'labels' => false,
        'labels_url' => false,
        'locked' => false,
        'milestone' => true,
        'node_id' => false,
        'number' => false,
        'performed_via_github_app' => true,
        'pull_request' => false,
        'reactions' => false,
        'repository_url' => false,
        'state' => false,
        'state_reason' => true,
        'timeline_url' => false,
        'title' => false,
        'updated_at' => false,
        'url' => false,
        'user' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_lock_reason' => 'active_lock_reason',
        'assignee' => 'assignee',
        'assignees' => 'assignees',
        'author_association' => 'author_association',
        'body' => 'body',
        'closed_at' => 'closed_at',
        'comments' => 'comments',
        'comments_url' => 'comments_url',
        'created_at' => 'created_at',
        'draft' => 'draft',
        'events_url' => 'events_url',
        'html_url' => 'html_url',
        'id' => 'id',
        'labels' => 'labels',
        'labels_url' => 'labels_url',
        'locked' => 'locked',
        'milestone' => 'milestone',
        'node_id' => 'node_id',
        'number' => 'number',
        'performed_via_github_app' => 'performed_via_github_app',
        'pull_request' => 'pull_request',
        'reactions' => 'reactions',
        'repository_url' => 'repository_url',
        'state' => 'state',
        'state_reason' => 'state_reason',
        'timeline_url' => 'timeline_url',
        'title' => 'title',
        'updated_at' => 'updated_at',
        'url' => 'url',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_lock_reason' => 'setActiveLockReason',
        'assignee' => 'setAssignee',
        'assignees' => 'setAssignees',
        'author_association' => 'setAuthorAssociation',
        'body' => 'setBody',
        'closed_at' => 'setClosedAt',
        'comments' => 'setComments',
        'comments_url' => 'setCommentsUrl',
        'created_at' => 'setCreatedAt',
        'draft' => 'setDraft',
        'events_url' => 'setEventsUrl',
        'html_url' => 'setHtmlUrl',
        'id' => 'setId',
        'labels' => 'setLabels',
        'labels_url' => 'setLabelsUrl',
        'locked' => 'setLocked',
        'milestone' => 'setMilestone',
        'node_id' => 'setNodeId',
        'number' => 'setNumber',
        'performed_via_github_app' => 'setPerformedViaGithubApp',
        'pull_request' => 'setPullRequest',
        'reactions' => 'setReactions',
        'repository_url' => 'setRepositoryUrl',
        'state' => 'setState',
        'state_reason' => 'setStateReason',
        'timeline_url' => 'setTimelineUrl',
        'title' => 'setTitle',
        'updated_at' => 'setUpdatedAt',
        'url' => 'setUrl',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_lock_reason' => 'getActiveLockReason',
        'assignee' => 'getAssignee',
        'assignees' => 'getAssignees',
        'author_association' => 'getAuthorAssociation',
        'body' => 'getBody',
        'closed_at' => 'getClosedAt',
        'comments' => 'getComments',
        'comments_url' => 'getCommentsUrl',
        'created_at' => 'getCreatedAt',
        'draft' => 'getDraft',
        'events_url' => 'getEventsUrl',
        'html_url' => 'getHtmlUrl',
        'id' => 'getId',
        'labels' => 'getLabels',
        'labels_url' => 'getLabelsUrl',
        'locked' => 'getLocked',
        'milestone' => 'getMilestone',
        'node_id' => 'getNodeId',
        'number' => 'getNumber',
        'performed_via_github_app' => 'getPerformedViaGithubApp',
        'pull_request' => 'getPullRequest',
        'reactions' => 'getReactions',
        'repository_url' => 'getRepositoryUrl',
        'state' => 'getState',
        'state_reason' => 'getStateReason',
        'timeline_url' => 'getTimelineUrl',
        'title' => 'getTitle',
        'updated_at' => 'getUpdatedAt',
        'url' => 'getUrl',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_OPEN = 'open';
    public const STATE_CLOSED = 'closed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_OPEN,
            self::STATE_CLOSED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('active_lock_reason', $data ?? [], null);
        $this->setIfExists('assignee', $data ?? [], null);
        $this->setIfExists('assignees', $data ?? [], null);
        $this->setIfExists('author_association', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('closed_at', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('comments_url', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('draft', $data ?? [], null);
        $this->setIfExists('events_url', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('labels_url', $data ?? [], null);
        $this->setIfExists('locked', $data ?? [], null);
        $this->setIfExists('milestone', $data ?? [], null);
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('performed_via_github_app', $data ?? [], null);
        $this->setIfExists('pull_request', $data ?? [], null);
        $this->setIfExists('reactions', $data ?? [], null);
        $this->setIfExists('repository_url', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('state_reason', $data ?? [], null);
        $this->setIfExists('timeline_url', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['active_lock_reason'] === null) {
            $invalidProperties[] = "'active_lock_reason' can't be null";
        }
        if ($this->container['assignee'] === null) {
            $invalidProperties[] = "'assignee' can't be null";
        }
        if ($this->container['assignees'] === null) {
            $invalidProperties[] = "'assignees' can't be null";
        }
        if ($this->container['author_association'] === null) {
            $invalidProperties[] = "'author_association' can't be null";
        }
        if ($this->container['body'] === null) {
            $invalidProperties[] = "'body' can't be null";
        }
        if ($this->container['closed_at'] === null) {
            $invalidProperties[] = "'closed_at' can't be null";
        }
        if ($this->container['comments'] === null) {
            $invalidProperties[] = "'comments' can't be null";
        }
        if ($this->container['comments_url'] === null) {
            $invalidProperties[] = "'comments_url' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['events_url'] === null) {
            $invalidProperties[] = "'events_url' can't be null";
        }
        if ($this->container['html_url'] === null) {
            $invalidProperties[] = "'html_url' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['labels'] === null) {
            $invalidProperties[] = "'labels' can't be null";
        }
        if ($this->container['labels_url'] === null) {
            $invalidProperties[] = "'labels_url' can't be null";
        }
        if ($this->container['locked'] === null) {
            $invalidProperties[] = "'locked' can't be null";
        }
        if ($this->container['milestone'] === null) {
            $invalidProperties[] = "'milestone' can't be null";
        }
        if ($this->container['node_id'] === null) {
            $invalidProperties[] = "'node_id' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['reactions'] === null) {
            $invalidProperties[] = "'reactions' can't be null";
        }
        if ($this->container['repository_url'] === null) {
            $invalidProperties[] = "'repository_url' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_lock_reason
     *
     * @return string
     */
    public function getActiveLockReason()
    {
        return $this->container['active_lock_reason'];
    }

    /**
     * Sets active_lock_reason
     *
     * @param string $active_lock_reason active_lock_reason
     *
     * @return self
     */
    public function setActiveLockReason($active_lock_reason)
    {
        if (is_null($active_lock_reason)) {
            array_push($this->openAPINullablesSetToNull, 'active_lock_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active_lock_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active_lock_reason'] = $active_lock_reason;

        return $this;
    }

    /**
     * Gets assignee
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User1
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User1 $assignee assignee
     *
     * @return self
     */
    public function setAssignee($assignee)
    {
        if (is_null($assignee)) {
            array_push($this->openAPINullablesSetToNull, 'assignee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assignee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets assignees
     *
     * @return object[]
     */
    public function getAssignees()
    {
        return $this->container['assignees'];
    }

    /**
     * Sets assignees
     *
     * @param object[] $assignees assignees
     *
     * @return self
     */
    public function setAssignees($assignees)
    {
        if (is_null($assignees)) {
            throw new \InvalidArgumentException('non-nullable assignees cannot be null');
        }
        $this->container['assignees'] = $assignees;

        return $this;
    }

    /**
     * Gets author_association
     *
     * @return string
     */
    public function getAuthorAssociation()
    {
        return $this->container['author_association'];
    }

    /**
     * Sets author_association
     *
     * @param string $author_association author_association
     *
     * @return self
     */
    public function setAuthorAssociation($author_association)
    {
        if (is_null($author_association)) {
            throw new \InvalidArgumentException('non-nullable author_association cannot be null');
        }
        $this->container['author_association'] = $author_association;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            array_push($this->openAPINullablesSetToNull, 'body');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('body', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets closed_at
     *
     * @return string
     */
    public function getClosedAt()
    {
        return $this->container['closed_at'];
    }

    /**
     * Sets closed_at
     *
     * @param string $closed_at closed_at
     *
     * @return self
     */
    public function setClosedAt($closed_at)
    {
        if (is_null($closed_at)) {
            array_push($this->openAPINullablesSetToNull, 'closed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('closed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['closed_at'] = $closed_at;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return int
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param int $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets comments_url
     *
     * @return string
     */
    public function getCommentsUrl()
    {
        return $this->container['comments_url'];
    }

    /**
     * Sets comments_url
     *
     * @param string $comments_url comments_url
     *
     * @return self
     */
    public function setCommentsUrl($comments_url)
    {
        if (is_null($comments_url)) {
            throw new \InvalidArgumentException('non-nullable comments_url cannot be null');
        }
        $this->container['comments_url'] = $comments_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets draft
     *
     * @return bool|null
     */
    public function getDraft()
    {
        return $this->container['draft'];
    }

    /**
     * Sets draft
     *
     * @param bool|null $draft draft
     *
     * @return self
     */
    public function setDraft($draft)
    {
        if (is_null($draft)) {
            throw new \InvalidArgumentException('non-nullable draft cannot be null');
        }
        $this->container['draft'] = $draft;

        return $this;
    }

    /**
     * Gets events_url
     *
     * @return string
     */
    public function getEventsUrl()
    {
        return $this->container['events_url'];
    }

    /**
     * Sets events_url
     *
     * @param string $events_url events_url
     *
     * @return self
     */
    public function setEventsUrl($events_url)
    {
        if (is_null($events_url)) {
            throw new \InvalidArgumentException('non-nullable events_url cannot be null');
        }
        $this->container['events_url'] = $events_url;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Label[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Label[] $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets labels_url
     *
     * @return string
     */
    public function getLabelsUrl()
    {
        return $this->container['labels_url'];
    }

    /**
     * Sets labels_url
     *
     * @param string $labels_url labels_url
     *
     * @return self
     */
    public function setLabelsUrl($labels_url)
    {
        if (is_null($labels_url)) {
            throw new \InvalidArgumentException('non-nullable labels_url cannot be null');
        }
        $this->container['labels_url'] = $labels_url;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked locked
     *
     * @return self
     */
    public function setLocked($locked)
    {
        if (is_null($locked)) {
            throw new \InvalidArgumentException('non-nullable locked cannot be null');
        }
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets milestone
     *
     * @return object
     */
    public function getMilestone()
    {
        return $this->container['milestone'];
    }

    /**
     * Sets milestone
     *
     * @param object $milestone milestone
     *
     * @return self
     */
    public function setMilestone($milestone)
    {
        if (is_null($milestone)) {
            array_push($this->openAPINullablesSetToNull, 'milestone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('milestone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['milestone'] = $milestone;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets performed_via_github_app
     *
     * @return object|null
     */
    public function getPerformedViaGithubApp()
    {
        return $this->container['performed_via_github_app'];
    }

    /**
     * Sets performed_via_github_app
     *
     * @param object|null $performed_via_github_app performed_via_github_app
     *
     * @return self
     */
    public function setPerformedViaGithubApp($performed_via_github_app)
    {
        if (is_null($performed_via_github_app)) {
            array_push($this->openAPINullablesSetToNull, 'performed_via_github_app');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('performed_via_github_app', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['performed_via_github_app'] = $performed_via_github_app;

        return $this;
    }

    /**
     * Gets pull_request
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksIssuePullRequest|null
     */
    public function getPullRequest()
    {
        return $this->container['pull_request'];
    }

    /**
     * Sets pull_request
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksIssuePullRequest|null $pull_request pull_request
     *
     * @return self
     */
    public function setPullRequest($pull_request)
    {
        if (is_null($pull_request)) {
            throw new \InvalidArgumentException('non-nullable pull_request cannot be null');
        }
        $this->container['pull_request'] = $pull_request;

        return $this;
    }

    /**
     * Gets reactions
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhookIssueCommentCreatedIssueAllOfReactions
     */
    public function getReactions()
    {
        return $this->container['reactions'];
    }

    /**
     * Sets reactions
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhookIssueCommentCreatedIssueAllOfReactions $reactions reactions
     *
     * @return self
     */
    public function setReactions($reactions)
    {
        if (is_null($reactions)) {
            throw new \InvalidArgumentException('non-nullable reactions cannot be null');
        }
        $this->container['reactions'] = $reactions;

        return $this;
    }

    /**
     * Gets repository_url
     *
     * @return string
     */
    public function getRepositoryUrl()
    {
        return $this->container['repository_url'];
    }

    /**
     * Sets repository_url
     *
     * @param string $repository_url repository_url
     *
     * @return self
     */
    public function setRepositoryUrl($repository_url)
    {
        if (is_null($repository_url)) {
            throw new \InvalidArgumentException('non-nullable repository_url cannot be null');
        }
        $this->container['repository_url'] = $repository_url;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the issue; either 'open' or 'closed'
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_reason
     *
     * @return string|null
     */
    public function getStateReason()
    {
        return $this->container['state_reason'];
    }

    /**
     * Sets state_reason
     *
     * @param string|null $state_reason state_reason
     *
     * @return self
     */
    public function setStateReason($state_reason)
    {
        if (is_null($state_reason)) {
            array_push($this->openAPINullablesSetToNull, 'state_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state_reason'] = $state_reason;

        return $this;
    }

    /**
     * Gets timeline_url
     *
     * @return string|null
     */
    public function getTimelineUrl()
    {
        return $this->container['timeline_url'];
    }

    /**
     * Sets timeline_url
     *
     * @param string|null $timeline_url timeline_url
     *
     * @return self
     */
    public function setTimelineUrl($timeline_url)
    {
        if (is_null($timeline_url)) {
            throw new \InvalidArgumentException('non-nullable timeline_url cannot be null');
        }
        $this->container['timeline_url'] = $timeline_url;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksSponsorshipMaintainer
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WebhooksSponsorshipMaintainer $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


