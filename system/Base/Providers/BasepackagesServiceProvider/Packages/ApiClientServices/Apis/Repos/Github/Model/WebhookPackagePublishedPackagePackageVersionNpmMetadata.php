<?php
/**
 * WebhookPackagePublishedPackagePackageVersionNpmMetadata
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * WebhookPackagePublishedPackagePackageVersionNpmMetadata Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebhookPackagePublishedPackagePackageVersionNpmMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'webhook_package_published_package_package_version_npm_metadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'version' => 'string',
        'npm_user' => 'string',
        'author' => 'object',
        'bugs' => 'object',
        'dependencies' => 'object',
        'dev_dependencies' => 'object',
        'peer_dependencies' => 'object',
        'optional_dependencies' => 'object',
        'description' => 'string',
        'dist' => 'object',
        'git_head' => 'string',
        'homepage' => 'string',
        'license' => 'string',
        'main' => 'string',
        'repository' => 'object',
        'scripts' => 'object',
        'id' => 'string',
        'node_version' => 'string',
        'npm_version' => 'string',
        'has_shrinkwrap' => 'bool',
        'maintainers' => 'object[]',
        'contributors' => 'object[]',
        'engines' => 'object',
        'keywords' => 'string[]',
        'files' => 'string[]',
        'bin' => 'object',
        'man' => 'object',
        'directories' => 'object',
        'os' => 'string[]',
        'cpu' => 'string[]',
        'readme' => 'string',
        'installation_command' => 'string',
        'release_id' => 'int',
        'commit_oid' => 'string',
        'published_via_actions' => 'bool',
        'deleted_by_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'version' => null,
        'npm_user' => null,
        'author' => null,
        'bugs' => null,
        'dependencies' => null,
        'dev_dependencies' => null,
        'peer_dependencies' => null,
        'optional_dependencies' => null,
        'description' => null,
        'dist' => null,
        'git_head' => null,
        'homepage' => null,
        'license' => null,
        'main' => null,
        'repository' => null,
        'scripts' => null,
        'id' => null,
        'node_version' => null,
        'npm_version' => null,
        'has_shrinkwrap' => null,
        'maintainers' => null,
        'contributors' => null,
        'engines' => null,
        'keywords' => null,
        'files' => null,
        'bin' => null,
        'man' => null,
        'directories' => null,
        'os' => null,
        'cpu' => null,
        'readme' => null,
        'installation_command' => null,
        'release_id' => null,
        'commit_oid' => null,
        'published_via_actions' => null,
        'deleted_by_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'version' => false,
        'npm_user' => false,
        'author' => true,
        'bugs' => true,
        'dependencies' => false,
        'dev_dependencies' => false,
        'peer_dependencies' => false,
        'optional_dependencies' => false,
        'description' => false,
        'dist' => true,
        'git_head' => false,
        'homepage' => false,
        'license' => false,
        'main' => false,
        'repository' => true,
        'scripts' => false,
        'id' => false,
        'node_version' => false,
        'npm_version' => false,
        'has_shrinkwrap' => false,
        'maintainers' => false,
        'contributors' => false,
        'engines' => false,
        'keywords' => false,
        'files' => false,
        'bin' => false,
        'man' => false,
        'directories' => true,
        'os' => false,
        'cpu' => false,
        'readme' => false,
        'installation_command' => false,
        'release_id' => false,
        'commit_oid' => false,
        'published_via_actions' => false,
        'deleted_by_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'version' => 'version',
        'npm_user' => 'npm_user',
        'author' => 'author',
        'bugs' => 'bugs',
        'dependencies' => 'dependencies',
        'dev_dependencies' => 'dev_dependencies',
        'peer_dependencies' => 'peer_dependencies',
        'optional_dependencies' => 'optional_dependencies',
        'description' => 'description',
        'dist' => 'dist',
        'git_head' => 'git_head',
        'homepage' => 'homepage',
        'license' => 'license',
        'main' => 'main',
        'repository' => 'repository',
        'scripts' => 'scripts',
        'id' => 'id',
        'node_version' => 'node_version',
        'npm_version' => 'npm_version',
        'has_shrinkwrap' => 'has_shrinkwrap',
        'maintainers' => 'maintainers',
        'contributors' => 'contributors',
        'engines' => 'engines',
        'keywords' => 'keywords',
        'files' => 'files',
        'bin' => 'bin',
        'man' => 'man',
        'directories' => 'directories',
        'os' => 'os',
        'cpu' => 'cpu',
        'readme' => 'readme',
        'installation_command' => 'installation_command',
        'release_id' => 'release_id',
        'commit_oid' => 'commit_oid',
        'published_via_actions' => 'published_via_actions',
        'deleted_by_id' => 'deleted_by_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'version' => 'setVersion',
        'npm_user' => 'setNpmUser',
        'author' => 'setAuthor',
        'bugs' => 'setBugs',
        'dependencies' => 'setDependencies',
        'dev_dependencies' => 'setDevDependencies',
        'peer_dependencies' => 'setPeerDependencies',
        'optional_dependencies' => 'setOptionalDependencies',
        'description' => 'setDescription',
        'dist' => 'setDist',
        'git_head' => 'setGitHead',
        'homepage' => 'setHomepage',
        'license' => 'setLicense',
        'main' => 'setMain',
        'repository' => 'setRepository',
        'scripts' => 'setScripts',
        'id' => 'setId',
        'node_version' => 'setNodeVersion',
        'npm_version' => 'setNpmVersion',
        'has_shrinkwrap' => 'setHasShrinkwrap',
        'maintainers' => 'setMaintainers',
        'contributors' => 'setContributors',
        'engines' => 'setEngines',
        'keywords' => 'setKeywords',
        'files' => 'setFiles',
        'bin' => 'setBin',
        'man' => 'setMan',
        'directories' => 'setDirectories',
        'os' => 'setOs',
        'cpu' => 'setCpu',
        'readme' => 'setReadme',
        'installation_command' => 'setInstallationCommand',
        'release_id' => 'setReleaseId',
        'commit_oid' => 'setCommitOid',
        'published_via_actions' => 'setPublishedViaActions',
        'deleted_by_id' => 'setDeletedById'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'version' => 'getVersion',
        'npm_user' => 'getNpmUser',
        'author' => 'getAuthor',
        'bugs' => 'getBugs',
        'dependencies' => 'getDependencies',
        'dev_dependencies' => 'getDevDependencies',
        'peer_dependencies' => 'getPeerDependencies',
        'optional_dependencies' => 'getOptionalDependencies',
        'description' => 'getDescription',
        'dist' => 'getDist',
        'git_head' => 'getGitHead',
        'homepage' => 'getHomepage',
        'license' => 'getLicense',
        'main' => 'getMain',
        'repository' => 'getRepository',
        'scripts' => 'getScripts',
        'id' => 'getId',
        'node_version' => 'getNodeVersion',
        'npm_version' => 'getNpmVersion',
        'has_shrinkwrap' => 'getHasShrinkwrap',
        'maintainers' => 'getMaintainers',
        'contributors' => 'getContributors',
        'engines' => 'getEngines',
        'keywords' => 'getKeywords',
        'files' => 'getFiles',
        'bin' => 'getBin',
        'man' => 'getMan',
        'directories' => 'getDirectories',
        'os' => 'getOs',
        'cpu' => 'getCpu',
        'readme' => 'getReadme',
        'installation_command' => 'getInstallationCommand',
        'release_id' => 'getReleaseId',
        'commit_oid' => 'getCommitOid',
        'published_via_actions' => 'getPublishedViaActions',
        'deleted_by_id' => 'getDeletedById'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('npm_user', $data ?? [], null);
        $this->setIfExists('author', $data ?? [], null);
        $this->setIfExists('bugs', $data ?? [], null);
        $this->setIfExists('dependencies', $data ?? [], null);
        $this->setIfExists('dev_dependencies', $data ?? [], null);
        $this->setIfExists('peer_dependencies', $data ?? [], null);
        $this->setIfExists('optional_dependencies', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('dist', $data ?? [], null);
        $this->setIfExists('git_head', $data ?? [], null);
        $this->setIfExists('homepage', $data ?? [], null);
        $this->setIfExists('license', $data ?? [], null);
        $this->setIfExists('main', $data ?? [], null);
        $this->setIfExists('repository', $data ?? [], null);
        $this->setIfExists('scripts', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('node_version', $data ?? [], null);
        $this->setIfExists('npm_version', $data ?? [], null);
        $this->setIfExists('has_shrinkwrap', $data ?? [], null);
        $this->setIfExists('maintainers', $data ?? [], null);
        $this->setIfExists('contributors', $data ?? [], null);
        $this->setIfExists('engines', $data ?? [], null);
        $this->setIfExists('keywords', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('bin', $data ?? [], null);
        $this->setIfExists('man', $data ?? [], null);
        $this->setIfExists('directories', $data ?? [], null);
        $this->setIfExists('os', $data ?? [], null);
        $this->setIfExists('cpu', $data ?? [], null);
        $this->setIfExists('readme', $data ?? [], null);
        $this->setIfExists('installation_command', $data ?? [], null);
        $this->setIfExists('release_id', $data ?? [], null);
        $this->setIfExists('commit_oid', $data ?? [], null);
        $this->setIfExists('published_via_actions', $data ?? [], null);
        $this->setIfExists('deleted_by_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets npm_user
     *
     * @return string|null
     */
    public function getNpmUser()
    {
        return $this->container['npm_user'];
    }

    /**
     * Sets npm_user
     *
     * @param string|null $npm_user npm_user
     *
     * @return self
     */
    public function setNpmUser($npm_user)
    {
        if (is_null($npm_user)) {
            throw new \InvalidArgumentException('non-nullable npm_user cannot be null');
        }
        $this->container['npm_user'] = $npm_user;

        return $this;
    }

    /**
     * Gets author
     *
     * @return object|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param object|null $author author
     *
     * @return self
     */
    public function setAuthor($author)
    {
        if (is_null($author)) {
            array_push($this->openAPINullablesSetToNull, 'author');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('author', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets bugs
     *
     * @return object|null
     */
    public function getBugs()
    {
        return $this->container['bugs'];
    }

    /**
     * Sets bugs
     *
     * @param object|null $bugs bugs
     *
     * @return self
     */
    public function setBugs($bugs)
    {
        if (is_null($bugs)) {
            array_push($this->openAPINullablesSetToNull, 'bugs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bugs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bugs'] = $bugs;

        return $this;
    }

    /**
     * Gets dependencies
     *
     * @return object|null
     */
    public function getDependencies()
    {
        return $this->container['dependencies'];
    }

    /**
     * Sets dependencies
     *
     * @param object|null $dependencies dependencies
     *
     * @return self
     */
    public function setDependencies($dependencies)
    {
        if (is_null($dependencies)) {
            throw new \InvalidArgumentException('non-nullable dependencies cannot be null');
        }
        $this->container['dependencies'] = $dependencies;

        return $this;
    }

    /**
     * Gets dev_dependencies
     *
     * @return object|null
     */
    public function getDevDependencies()
    {
        return $this->container['dev_dependencies'];
    }

    /**
     * Sets dev_dependencies
     *
     * @param object|null $dev_dependencies dev_dependencies
     *
     * @return self
     */
    public function setDevDependencies($dev_dependencies)
    {
        if (is_null($dev_dependencies)) {
            throw new \InvalidArgumentException('non-nullable dev_dependencies cannot be null');
        }
        $this->container['dev_dependencies'] = $dev_dependencies;

        return $this;
    }

    /**
     * Gets peer_dependencies
     *
     * @return object|null
     */
    public function getPeerDependencies()
    {
        return $this->container['peer_dependencies'];
    }

    /**
     * Sets peer_dependencies
     *
     * @param object|null $peer_dependencies peer_dependencies
     *
     * @return self
     */
    public function setPeerDependencies($peer_dependencies)
    {
        if (is_null($peer_dependencies)) {
            throw new \InvalidArgumentException('non-nullable peer_dependencies cannot be null');
        }
        $this->container['peer_dependencies'] = $peer_dependencies;

        return $this;
    }

    /**
     * Gets optional_dependencies
     *
     * @return object|null
     */
    public function getOptionalDependencies()
    {
        return $this->container['optional_dependencies'];
    }

    /**
     * Sets optional_dependencies
     *
     * @param object|null $optional_dependencies optional_dependencies
     *
     * @return self
     */
    public function setOptionalDependencies($optional_dependencies)
    {
        if (is_null($optional_dependencies)) {
            throw new \InvalidArgumentException('non-nullable optional_dependencies cannot be null');
        }
        $this->container['optional_dependencies'] = $optional_dependencies;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dist
     *
     * @return object|null
     */
    public function getDist()
    {
        return $this->container['dist'];
    }

    /**
     * Sets dist
     *
     * @param object|null $dist dist
     *
     * @return self
     */
    public function setDist($dist)
    {
        if (is_null($dist)) {
            array_push($this->openAPINullablesSetToNull, 'dist');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dist', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dist'] = $dist;

        return $this;
    }

    /**
     * Gets git_head
     *
     * @return string|null
     */
    public function getGitHead()
    {
        return $this->container['git_head'];
    }

    /**
     * Sets git_head
     *
     * @param string|null $git_head git_head
     *
     * @return self
     */
    public function setGitHead($git_head)
    {
        if (is_null($git_head)) {
            throw new \InvalidArgumentException('non-nullable git_head cannot be null');
        }
        $this->container['git_head'] = $git_head;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return string|null
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param string|null $homepage homepage
     *
     * @return self
     */
    public function setHomepage($homepage)
    {
        if (is_null($homepage)) {
            throw new \InvalidArgumentException('non-nullable homepage cannot be null');
        }
        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string|null
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string|null $license license
     *
     * @return self
     */
    public function setLicense($license)
    {
        if (is_null($license)) {
            throw new \InvalidArgumentException('non-nullable license cannot be null');
        }
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets main
     *
     * @return string|null
     */
    public function getMain()
    {
        return $this->container['main'];
    }

    /**
     * Sets main
     *
     * @param string|null $main main
     *
     * @return self
     */
    public function setMain($main)
    {
        if (is_null($main)) {
            throw new \InvalidArgumentException('non-nullable main cannot be null');
        }
        $this->container['main'] = $main;

        return $this;
    }

    /**
     * Gets repository
     *
     * @return object|null
     */
    public function getRepository()
    {
        return $this->container['repository'];
    }

    /**
     * Sets repository
     *
     * @param object|null $repository repository
     *
     * @return self
     */
    public function setRepository($repository)
    {
        if (is_null($repository)) {
            array_push($this->openAPINullablesSetToNull, 'repository');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repository', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repository'] = $repository;

        return $this;
    }

    /**
     * Gets scripts
     *
     * @return object|null
     */
    public function getScripts()
    {
        return $this->container['scripts'];
    }

    /**
     * Sets scripts
     *
     * @param object|null $scripts scripts
     *
     * @return self
     */
    public function setScripts($scripts)
    {
        if (is_null($scripts)) {
            throw new \InvalidArgumentException('non-nullable scripts cannot be null');
        }
        $this->container['scripts'] = $scripts;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets node_version
     *
     * @return string|null
     */
    public function getNodeVersion()
    {
        return $this->container['node_version'];
    }

    /**
     * Sets node_version
     *
     * @param string|null $node_version node_version
     *
     * @return self
     */
    public function setNodeVersion($node_version)
    {
        if (is_null($node_version)) {
            throw new \InvalidArgumentException('non-nullable node_version cannot be null');
        }
        $this->container['node_version'] = $node_version;

        return $this;
    }

    /**
     * Gets npm_version
     *
     * @return string|null
     */
    public function getNpmVersion()
    {
        return $this->container['npm_version'];
    }

    /**
     * Sets npm_version
     *
     * @param string|null $npm_version npm_version
     *
     * @return self
     */
    public function setNpmVersion($npm_version)
    {
        if (is_null($npm_version)) {
            throw new \InvalidArgumentException('non-nullable npm_version cannot be null');
        }
        $this->container['npm_version'] = $npm_version;

        return $this;
    }

    /**
     * Gets has_shrinkwrap
     *
     * @return bool|null
     */
    public function getHasShrinkwrap()
    {
        return $this->container['has_shrinkwrap'];
    }

    /**
     * Sets has_shrinkwrap
     *
     * @param bool|null $has_shrinkwrap has_shrinkwrap
     *
     * @return self
     */
    public function setHasShrinkwrap($has_shrinkwrap)
    {
        if (is_null($has_shrinkwrap)) {
            throw new \InvalidArgumentException('non-nullable has_shrinkwrap cannot be null');
        }
        $this->container['has_shrinkwrap'] = $has_shrinkwrap;

        return $this;
    }

    /**
     * Gets maintainers
     *
     * @return object[]|null
     */
    public function getMaintainers()
    {
        return $this->container['maintainers'];
    }

    /**
     * Sets maintainers
     *
     * @param object[]|null $maintainers maintainers
     *
     * @return self
     */
    public function setMaintainers($maintainers)
    {
        if (is_null($maintainers)) {
            throw new \InvalidArgumentException('non-nullable maintainers cannot be null');
        }
        $this->container['maintainers'] = $maintainers;

        return $this;
    }

    /**
     * Gets contributors
     *
     * @return object[]|null
     */
    public function getContributors()
    {
        return $this->container['contributors'];
    }

    /**
     * Sets contributors
     *
     * @param object[]|null $contributors contributors
     *
     * @return self
     */
    public function setContributors($contributors)
    {
        if (is_null($contributors)) {
            throw new \InvalidArgumentException('non-nullable contributors cannot be null');
        }
        $this->container['contributors'] = $contributors;

        return $this;
    }

    /**
     * Gets engines
     *
     * @return object|null
     */
    public function getEngines()
    {
        return $this->container['engines'];
    }

    /**
     * Sets engines
     *
     * @param object|null $engines engines
     *
     * @return self
     */
    public function setEngines($engines)
    {
        if (is_null($engines)) {
            throw new \InvalidArgumentException('non-nullable engines cannot be null');
        }
        $this->container['engines'] = $engines;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string[]|null
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string[]|null $keywords keywords
     *
     * @return self
     */
    public function setKeywords($keywords)
    {
        if (is_null($keywords)) {
            throw new \InvalidArgumentException('non-nullable keywords cannot be null');
        }
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets files
     *
     * @return string[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param string[]|null $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets bin
     *
     * @return object|null
     */
    public function getBin()
    {
        return $this->container['bin'];
    }

    /**
     * Sets bin
     *
     * @param object|null $bin bin
     *
     * @return self
     */
    public function setBin($bin)
    {
        if (is_null($bin)) {
            throw new \InvalidArgumentException('non-nullable bin cannot be null');
        }
        $this->container['bin'] = $bin;

        return $this;
    }

    /**
     * Gets man
     *
     * @return object|null
     */
    public function getMan()
    {
        return $this->container['man'];
    }

    /**
     * Sets man
     *
     * @param object|null $man man
     *
     * @return self
     */
    public function setMan($man)
    {
        if (is_null($man)) {
            throw new \InvalidArgumentException('non-nullable man cannot be null');
        }
        $this->container['man'] = $man;

        return $this;
    }

    /**
     * Gets directories
     *
     * @return object|null
     */
    public function getDirectories()
    {
        return $this->container['directories'];
    }

    /**
     * Sets directories
     *
     * @param object|null $directories directories
     *
     * @return self
     */
    public function setDirectories($directories)
    {
        if (is_null($directories)) {
            array_push($this->openAPINullablesSetToNull, 'directories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('directories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['directories'] = $directories;

        return $this;
    }

    /**
     * Gets os
     *
     * @return string[]|null
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param string[]|null $os os
     *
     * @return self
     */
    public function setOs($os)
    {
        if (is_null($os)) {
            throw new \InvalidArgumentException('non-nullable os cannot be null');
        }
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets cpu
     *
     * @return string[]|null
     */
    public function getCpu()
    {
        return $this->container['cpu'];
    }

    /**
     * Sets cpu
     *
     * @param string[]|null $cpu cpu
     *
     * @return self
     */
    public function setCpu($cpu)
    {
        if (is_null($cpu)) {
            throw new \InvalidArgumentException('non-nullable cpu cannot be null');
        }
        $this->container['cpu'] = $cpu;

        return $this;
    }

    /**
     * Gets readme
     *
     * @return string|null
     */
    public function getReadme()
    {
        return $this->container['readme'];
    }

    /**
     * Sets readme
     *
     * @param string|null $readme readme
     *
     * @return self
     */
    public function setReadme($readme)
    {
        if (is_null($readme)) {
            throw new \InvalidArgumentException('non-nullable readme cannot be null');
        }
        $this->container['readme'] = $readme;

        return $this;
    }

    /**
     * Gets installation_command
     *
     * @return string|null
     */
    public function getInstallationCommand()
    {
        return $this->container['installation_command'];
    }

    /**
     * Sets installation_command
     *
     * @param string|null $installation_command installation_command
     *
     * @return self
     */
    public function setInstallationCommand($installation_command)
    {
        if (is_null($installation_command)) {
            throw new \InvalidArgumentException('non-nullable installation_command cannot be null');
        }
        $this->container['installation_command'] = $installation_command;

        return $this;
    }

    /**
     * Gets release_id
     *
     * @return int|null
     */
    public function getReleaseId()
    {
        return $this->container['release_id'];
    }

    /**
     * Sets release_id
     *
     * @param int|null $release_id release_id
     *
     * @return self
     */
    public function setReleaseId($release_id)
    {
        if (is_null($release_id)) {
            throw new \InvalidArgumentException('non-nullable release_id cannot be null');
        }
        $this->container['release_id'] = $release_id;

        return $this;
    }

    /**
     * Gets commit_oid
     *
     * @return string|null
     */
    public function getCommitOid()
    {
        return $this->container['commit_oid'];
    }

    /**
     * Sets commit_oid
     *
     * @param string|null $commit_oid commit_oid
     *
     * @return self
     */
    public function setCommitOid($commit_oid)
    {
        if (is_null($commit_oid)) {
            throw new \InvalidArgumentException('non-nullable commit_oid cannot be null');
        }
        $this->container['commit_oid'] = $commit_oid;

        return $this;
    }

    /**
     * Gets published_via_actions
     *
     * @return bool|null
     */
    public function getPublishedViaActions()
    {
        return $this->container['published_via_actions'];
    }

    /**
     * Sets published_via_actions
     *
     * @param bool|null $published_via_actions published_via_actions
     *
     * @return self
     */
    public function setPublishedViaActions($published_via_actions)
    {
        if (is_null($published_via_actions)) {
            throw new \InvalidArgumentException('non-nullable published_via_actions cannot be null');
        }
        $this->container['published_via_actions'] = $published_via_actions;

        return $this;
    }

    /**
     * Gets deleted_by_id
     *
     * @return int|null
     */
    public function getDeletedById()
    {
        return $this->container['deleted_by_id'];
    }

    /**
     * Sets deleted_by_id
     *
     * @param int|null $deleted_by_id deleted_by_id
     *
     * @return self
     */
    public function setDeletedById($deleted_by_id)
    {
        if (is_null($deleted_by_id)) {
            throw new \InvalidArgumentException('non-nullable deleted_by_id cannot be null');
        }
        $this->container['deleted_by_id'] = $deleted_by_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


