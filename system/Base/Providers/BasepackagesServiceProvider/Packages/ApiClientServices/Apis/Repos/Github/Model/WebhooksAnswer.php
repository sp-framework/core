<?php
/**
 * WebhooksAnswer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * WebhooksAnswer Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebhooksAnswer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'webhooks_answer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'author_association' => 'string',
        'body' => 'string',
        'child_comment_count' => 'int',
        'created_at' => '\DateTime',
        'discussion_id' => 'int',
        'html_url' => 'string',
        'id' => 'int',
        'node_id' => 'string',
        'parent_id' => 'mixed',
        'reactions' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Reactions',
        'repository_url' => 'string',
        'updated_at' => '\DateTime',
        'user' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'author_association' => null,
        'body' => null,
        'child_comment_count' => null,
        'created_at' => 'date-time',
        'discussion_id' => null,
        'html_url' => null,
        'id' => null,
        'node_id' => null,
        'parent_id' => null,
        'reactions' => null,
        'repository_url' => null,
        'updated_at' => 'date-time',
        'user' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'author_association' => false,
        'body' => false,
        'child_comment_count' => false,
        'created_at' => false,
        'discussion_id' => false,
        'html_url' => false,
        'id' => false,
        'node_id' => false,
        'parent_id' => true,
        'reactions' => false,
        'repository_url' => false,
        'updated_at' => false,
        'user' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'author_association' => 'author_association',
        'body' => 'body',
        'child_comment_count' => 'child_comment_count',
        'created_at' => 'created_at',
        'discussion_id' => 'discussion_id',
        'html_url' => 'html_url',
        'id' => 'id',
        'node_id' => 'node_id',
        'parent_id' => 'parent_id',
        'reactions' => 'reactions',
        'repository_url' => 'repository_url',
        'updated_at' => 'updated_at',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'author_association' => 'setAuthorAssociation',
        'body' => 'setBody',
        'child_comment_count' => 'setChildCommentCount',
        'created_at' => 'setCreatedAt',
        'discussion_id' => 'setDiscussionId',
        'html_url' => 'setHtmlUrl',
        'id' => 'setId',
        'node_id' => 'setNodeId',
        'parent_id' => 'setParentId',
        'reactions' => 'setReactions',
        'repository_url' => 'setRepositoryUrl',
        'updated_at' => 'setUpdatedAt',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'author_association' => 'getAuthorAssociation',
        'body' => 'getBody',
        'child_comment_count' => 'getChildCommentCount',
        'created_at' => 'getCreatedAt',
        'discussion_id' => 'getDiscussionId',
        'html_url' => 'getHtmlUrl',
        'id' => 'getId',
        'node_id' => 'getNodeId',
        'parent_id' => 'getParentId',
        'reactions' => 'getReactions',
        'repository_url' => 'getRepositoryUrl',
        'updated_at' => 'getUpdatedAt',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AUTHOR_ASSOCIATION_COLLABORATOR = 'COLLABORATOR';
    public const AUTHOR_ASSOCIATION_CONTRIBUTOR = 'CONTRIBUTOR';
    public const AUTHOR_ASSOCIATION_FIRST_TIMER = 'FIRST_TIMER';
    public const AUTHOR_ASSOCIATION_FIRST_TIME_CONTRIBUTOR = 'FIRST_TIME_CONTRIBUTOR';
    public const AUTHOR_ASSOCIATION_MANNEQUIN = 'MANNEQUIN';
    public const AUTHOR_ASSOCIATION_MEMBER = 'MEMBER';
    public const AUTHOR_ASSOCIATION_NONE = 'NONE';
    public const AUTHOR_ASSOCIATION_OWNER = 'OWNER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthorAssociationAllowableValues()
    {
        return [
            self::AUTHOR_ASSOCIATION_COLLABORATOR,
            self::AUTHOR_ASSOCIATION_CONTRIBUTOR,
            self::AUTHOR_ASSOCIATION_FIRST_TIMER,
            self::AUTHOR_ASSOCIATION_FIRST_TIME_CONTRIBUTOR,
            self::AUTHOR_ASSOCIATION_MANNEQUIN,
            self::AUTHOR_ASSOCIATION_MEMBER,
            self::AUTHOR_ASSOCIATION_NONE,
            self::AUTHOR_ASSOCIATION_OWNER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('author_association', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('child_comment_count', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('discussion_id', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('reactions', $data ?? [], null);
        $this->setIfExists('repository_url', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['author_association'] === null) {
            $invalidProperties[] = "'author_association' can't be null";
        }
        $allowedValues = $this->getAuthorAssociationAllowableValues();
        if (!is_null($this->container['author_association']) && !in_array($this->container['author_association'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'author_association', must be one of '%s'",
                $this->container['author_association'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['body'] === null) {
            $invalidProperties[] = "'body' can't be null";
        }
        if ($this->container['child_comment_count'] === null) {
            $invalidProperties[] = "'child_comment_count' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['discussion_id'] === null) {
            $invalidProperties[] = "'discussion_id' can't be null";
        }
        if ($this->container['html_url'] === null) {
            $invalidProperties[] = "'html_url' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['node_id'] === null) {
            $invalidProperties[] = "'node_id' can't be null";
        }
        if ($this->container['parent_id'] === null) {
            $invalidProperties[] = "'parent_id' can't be null";
        }
        if ($this->container['repository_url'] === null) {
            $invalidProperties[] = "'repository_url' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets author_association
     *
     * @return string
     */
    public function getAuthorAssociation()
    {
        return $this->container['author_association'];
    }

    /**
     * Sets author_association
     *
     * @param string $author_association How the author is associated with the repository.
     *
     * @return self
     */
    public function setAuthorAssociation($author_association)
    {
        if (is_null($author_association)) {
            throw new \InvalidArgumentException('non-nullable author_association cannot be null');
        }
        $allowedValues = $this->getAuthorAssociationAllowableValues();
        if (!in_array($author_association, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'author_association', must be one of '%s'",
                    $author_association,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['author_association'] = $author_association;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets child_comment_count
     *
     * @return int
     */
    public function getChildCommentCount()
    {
        return $this->container['child_comment_count'];
    }

    /**
     * Sets child_comment_count
     *
     * @param int $child_comment_count child_comment_count
     *
     * @return self
     */
    public function setChildCommentCount($child_comment_count)
    {
        if (is_null($child_comment_count)) {
            throw new \InvalidArgumentException('non-nullable child_comment_count cannot be null');
        }
        $this->container['child_comment_count'] = $child_comment_count;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets discussion_id
     *
     * @return int
     */
    public function getDiscussionId()
    {
        return $this->container['discussion_id'];
    }

    /**
     * Sets discussion_id
     *
     * @param int $discussion_id discussion_id
     *
     * @return self
     */
    public function setDiscussionId($discussion_id)
    {
        if (is_null($discussion_id)) {
            throw new \InvalidArgumentException('non-nullable discussion_id cannot be null');
        }
        $this->container['discussion_id'] = $discussion_id;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return mixed
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param mixed $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets reactions
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Reactions|null
     */
    public function getReactions()
    {
        return $this->container['reactions'];
    }

    /**
     * Sets reactions
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\Reactions|null $reactions reactions
     *
     * @return self
     */
    public function setReactions($reactions)
    {
        if (is_null($reactions)) {
            throw new \InvalidArgumentException('non-nullable reactions cannot be null');
        }
        $this->container['reactions'] = $reactions;

        return $this;
    }

    /**
     * Gets repository_url
     *
     * @return string
     */
    public function getRepositoryUrl()
    {
        return $this->container['repository_url'];
    }

    /**
     * Sets repository_url
     *
     * @param string $repository_url repository_url
     *
     * @return self
     */
    public function setRepositoryUrl($repository_url)
    {
        if (is_null($repository_url)) {
            throw new \InvalidArgumentException('non-nullable repository_url cannot be null');
        }
        $this->container['repository_url'] = $repository_url;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


