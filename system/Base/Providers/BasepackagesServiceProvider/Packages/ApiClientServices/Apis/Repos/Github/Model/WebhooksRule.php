<?php
/**
 * WebhooksRule
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * WebhooksRule Class Doc Comment
 *
 * @category Class
 * @description The branch protection rule. Includes a &#x60;name&#x60; and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of &#x60;off&#x60;, &#x60;non_admins&#x60;, or &#x60;everyone&#x60;. Actor and build lists are arrays of strings.
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebhooksRule implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'webhooks_rule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'admin_enforced' => 'bool',
        'allow_deletions_enforcement_level' => 'string',
        'allow_force_pushes_enforcement_level' => 'string',
        'authorized_actor_names' => 'string[]',
        'authorized_actors_only' => 'bool',
        'authorized_dismissal_actors_only' => 'bool',
        'create_protected' => 'bool',
        'created_at' => '\DateTime',
        'dismiss_stale_reviews_on_push' => 'bool',
        'id' => 'int',
        'ignore_approvals_from_contributors' => 'bool',
        'linear_history_requirement_enforcement_level' => 'string',
        'merge_queue_enforcement_level' => 'string',
        'name' => 'string',
        'pull_request_reviews_enforcement_level' => 'string',
        'repository_id' => 'int',
        'require_code_owner_review' => 'bool',
        'require_last_push_approval' => 'bool',
        'required_approving_review_count' => 'int',
        'required_conversation_resolution_level' => 'string',
        'required_deployments_enforcement_level' => 'string',
        'required_status_checks' => 'string[]',
        'required_status_checks_enforcement_level' => 'string',
        'signature_requirement_enforcement_level' => 'string',
        'strict_required_status_checks_policy' => 'bool',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'admin_enforced' => null,
        'allow_deletions_enforcement_level' => null,
        'allow_force_pushes_enforcement_level' => null,
        'authorized_actor_names' => null,
        'authorized_actors_only' => null,
        'authorized_dismissal_actors_only' => null,
        'create_protected' => null,
        'created_at' => 'date-time',
        'dismiss_stale_reviews_on_push' => null,
        'id' => null,
        'ignore_approvals_from_contributors' => null,
        'linear_history_requirement_enforcement_level' => null,
        'merge_queue_enforcement_level' => null,
        'name' => null,
        'pull_request_reviews_enforcement_level' => null,
        'repository_id' => null,
        'require_code_owner_review' => null,
        'require_last_push_approval' => null,
        'required_approving_review_count' => null,
        'required_conversation_resolution_level' => null,
        'required_deployments_enforcement_level' => null,
        'required_status_checks' => null,
        'required_status_checks_enforcement_level' => null,
        'signature_requirement_enforcement_level' => null,
        'strict_required_status_checks_policy' => null,
        'updated_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'admin_enforced' => false,
        'allow_deletions_enforcement_level' => false,
        'allow_force_pushes_enforcement_level' => false,
        'authorized_actor_names' => false,
        'authorized_actors_only' => false,
        'authorized_dismissal_actors_only' => false,
        'create_protected' => false,
        'created_at' => false,
        'dismiss_stale_reviews_on_push' => false,
        'id' => false,
        'ignore_approvals_from_contributors' => false,
        'linear_history_requirement_enforcement_level' => false,
        'merge_queue_enforcement_level' => false,
        'name' => false,
        'pull_request_reviews_enforcement_level' => false,
        'repository_id' => false,
        'require_code_owner_review' => false,
        'require_last_push_approval' => false,
        'required_approving_review_count' => false,
        'required_conversation_resolution_level' => false,
        'required_deployments_enforcement_level' => false,
        'required_status_checks' => false,
        'required_status_checks_enforcement_level' => false,
        'signature_requirement_enforcement_level' => false,
        'strict_required_status_checks_policy' => false,
        'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'admin_enforced' => 'admin_enforced',
        'allow_deletions_enforcement_level' => 'allow_deletions_enforcement_level',
        'allow_force_pushes_enforcement_level' => 'allow_force_pushes_enforcement_level',
        'authorized_actor_names' => 'authorized_actor_names',
        'authorized_actors_only' => 'authorized_actors_only',
        'authorized_dismissal_actors_only' => 'authorized_dismissal_actors_only',
        'create_protected' => 'create_protected',
        'created_at' => 'created_at',
        'dismiss_stale_reviews_on_push' => 'dismiss_stale_reviews_on_push',
        'id' => 'id',
        'ignore_approvals_from_contributors' => 'ignore_approvals_from_contributors',
        'linear_history_requirement_enforcement_level' => 'linear_history_requirement_enforcement_level',
        'merge_queue_enforcement_level' => 'merge_queue_enforcement_level',
        'name' => 'name',
        'pull_request_reviews_enforcement_level' => 'pull_request_reviews_enforcement_level',
        'repository_id' => 'repository_id',
        'require_code_owner_review' => 'require_code_owner_review',
        'require_last_push_approval' => 'require_last_push_approval',
        'required_approving_review_count' => 'required_approving_review_count',
        'required_conversation_resolution_level' => 'required_conversation_resolution_level',
        'required_deployments_enforcement_level' => 'required_deployments_enforcement_level',
        'required_status_checks' => 'required_status_checks',
        'required_status_checks_enforcement_level' => 'required_status_checks_enforcement_level',
        'signature_requirement_enforcement_level' => 'signature_requirement_enforcement_level',
        'strict_required_status_checks_policy' => 'strict_required_status_checks_policy',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'admin_enforced' => 'setAdminEnforced',
        'allow_deletions_enforcement_level' => 'setAllowDeletionsEnforcementLevel',
        'allow_force_pushes_enforcement_level' => 'setAllowForcePushesEnforcementLevel',
        'authorized_actor_names' => 'setAuthorizedActorNames',
        'authorized_actors_only' => 'setAuthorizedActorsOnly',
        'authorized_dismissal_actors_only' => 'setAuthorizedDismissalActorsOnly',
        'create_protected' => 'setCreateProtected',
        'created_at' => 'setCreatedAt',
        'dismiss_stale_reviews_on_push' => 'setDismissStaleReviewsOnPush',
        'id' => 'setId',
        'ignore_approvals_from_contributors' => 'setIgnoreApprovalsFromContributors',
        'linear_history_requirement_enforcement_level' => 'setLinearHistoryRequirementEnforcementLevel',
        'merge_queue_enforcement_level' => 'setMergeQueueEnforcementLevel',
        'name' => 'setName',
        'pull_request_reviews_enforcement_level' => 'setPullRequestReviewsEnforcementLevel',
        'repository_id' => 'setRepositoryId',
        'require_code_owner_review' => 'setRequireCodeOwnerReview',
        'require_last_push_approval' => 'setRequireLastPushApproval',
        'required_approving_review_count' => 'setRequiredApprovingReviewCount',
        'required_conversation_resolution_level' => 'setRequiredConversationResolutionLevel',
        'required_deployments_enforcement_level' => 'setRequiredDeploymentsEnforcementLevel',
        'required_status_checks' => 'setRequiredStatusChecks',
        'required_status_checks_enforcement_level' => 'setRequiredStatusChecksEnforcementLevel',
        'signature_requirement_enforcement_level' => 'setSignatureRequirementEnforcementLevel',
        'strict_required_status_checks_policy' => 'setStrictRequiredStatusChecksPolicy',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'admin_enforced' => 'getAdminEnforced',
        'allow_deletions_enforcement_level' => 'getAllowDeletionsEnforcementLevel',
        'allow_force_pushes_enforcement_level' => 'getAllowForcePushesEnforcementLevel',
        'authorized_actor_names' => 'getAuthorizedActorNames',
        'authorized_actors_only' => 'getAuthorizedActorsOnly',
        'authorized_dismissal_actors_only' => 'getAuthorizedDismissalActorsOnly',
        'create_protected' => 'getCreateProtected',
        'created_at' => 'getCreatedAt',
        'dismiss_stale_reviews_on_push' => 'getDismissStaleReviewsOnPush',
        'id' => 'getId',
        'ignore_approvals_from_contributors' => 'getIgnoreApprovalsFromContributors',
        'linear_history_requirement_enforcement_level' => 'getLinearHistoryRequirementEnforcementLevel',
        'merge_queue_enforcement_level' => 'getMergeQueueEnforcementLevel',
        'name' => 'getName',
        'pull_request_reviews_enforcement_level' => 'getPullRequestReviewsEnforcementLevel',
        'repository_id' => 'getRepositoryId',
        'require_code_owner_review' => 'getRequireCodeOwnerReview',
        'require_last_push_approval' => 'getRequireLastPushApproval',
        'required_approving_review_count' => 'getRequiredApprovingReviewCount',
        'required_conversation_resolution_level' => 'getRequiredConversationResolutionLevel',
        'required_deployments_enforcement_level' => 'getRequiredDeploymentsEnforcementLevel',
        'required_status_checks' => 'getRequiredStatusChecks',
        'required_status_checks_enforcement_level' => 'getRequiredStatusChecksEnforcementLevel',
        'signature_requirement_enforcement_level' => 'getSignatureRequirementEnforcementLevel',
        'strict_required_status_checks_policy' => 'getStrictRequiredStatusChecksPolicy',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ALLOW_DELETIONS_ENFORCEMENT_LEVEL_OFF = 'off';
    public const ALLOW_DELETIONS_ENFORCEMENT_LEVEL_NON_ADMINS = 'non_admins';
    public const ALLOW_DELETIONS_ENFORCEMENT_LEVEL_EVERYONE = 'everyone';
    public const ALLOW_FORCE_PUSHES_ENFORCEMENT_LEVEL_OFF = 'off';
    public const ALLOW_FORCE_PUSHES_ENFORCEMENT_LEVEL_NON_ADMINS = 'non_admins';
    public const ALLOW_FORCE_PUSHES_ENFORCEMENT_LEVEL_EVERYONE = 'everyone';
    public const LINEAR_HISTORY_REQUIREMENT_ENFORCEMENT_LEVEL_OFF = 'off';
    public const LINEAR_HISTORY_REQUIREMENT_ENFORCEMENT_LEVEL_NON_ADMINS = 'non_admins';
    public const LINEAR_HISTORY_REQUIREMENT_ENFORCEMENT_LEVEL_EVERYONE = 'everyone';
    public const MERGE_QUEUE_ENFORCEMENT_LEVEL_OFF = 'off';
    public const MERGE_QUEUE_ENFORCEMENT_LEVEL_NON_ADMINS = 'non_admins';
    public const MERGE_QUEUE_ENFORCEMENT_LEVEL_EVERYONE = 'everyone';
    public const PULL_REQUEST_REVIEWS_ENFORCEMENT_LEVEL_OFF = 'off';
    public const PULL_REQUEST_REVIEWS_ENFORCEMENT_LEVEL_NON_ADMINS = 'non_admins';
    public const PULL_REQUEST_REVIEWS_ENFORCEMENT_LEVEL_EVERYONE = 'everyone';
    public const REQUIRED_CONVERSATION_RESOLUTION_LEVEL_OFF = 'off';
    public const REQUIRED_CONVERSATION_RESOLUTION_LEVEL_NON_ADMINS = 'non_admins';
    public const REQUIRED_CONVERSATION_RESOLUTION_LEVEL_EVERYONE = 'everyone';
    public const REQUIRED_DEPLOYMENTS_ENFORCEMENT_LEVEL_OFF = 'off';
    public const REQUIRED_DEPLOYMENTS_ENFORCEMENT_LEVEL_NON_ADMINS = 'non_admins';
    public const REQUIRED_DEPLOYMENTS_ENFORCEMENT_LEVEL_EVERYONE = 'everyone';
    public const REQUIRED_STATUS_CHECKS_ENFORCEMENT_LEVEL_OFF = 'off';
    public const REQUIRED_STATUS_CHECKS_ENFORCEMENT_LEVEL_NON_ADMINS = 'non_admins';
    public const REQUIRED_STATUS_CHECKS_ENFORCEMENT_LEVEL_EVERYONE = 'everyone';
    public const SIGNATURE_REQUIREMENT_ENFORCEMENT_LEVEL_OFF = 'off';
    public const SIGNATURE_REQUIREMENT_ENFORCEMENT_LEVEL_NON_ADMINS = 'non_admins';
    public const SIGNATURE_REQUIREMENT_ENFORCEMENT_LEVEL_EVERYONE = 'everyone';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowDeletionsEnforcementLevelAllowableValues()
    {
        return [
            self::ALLOW_DELETIONS_ENFORCEMENT_LEVEL_OFF,
            self::ALLOW_DELETIONS_ENFORCEMENT_LEVEL_NON_ADMINS,
            self::ALLOW_DELETIONS_ENFORCEMENT_LEVEL_EVERYONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowForcePushesEnforcementLevelAllowableValues()
    {
        return [
            self::ALLOW_FORCE_PUSHES_ENFORCEMENT_LEVEL_OFF,
            self::ALLOW_FORCE_PUSHES_ENFORCEMENT_LEVEL_NON_ADMINS,
            self::ALLOW_FORCE_PUSHES_ENFORCEMENT_LEVEL_EVERYONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinearHistoryRequirementEnforcementLevelAllowableValues()
    {
        return [
            self::LINEAR_HISTORY_REQUIREMENT_ENFORCEMENT_LEVEL_OFF,
            self::LINEAR_HISTORY_REQUIREMENT_ENFORCEMENT_LEVEL_NON_ADMINS,
            self::LINEAR_HISTORY_REQUIREMENT_ENFORCEMENT_LEVEL_EVERYONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMergeQueueEnforcementLevelAllowableValues()
    {
        return [
            self::MERGE_QUEUE_ENFORCEMENT_LEVEL_OFF,
            self::MERGE_QUEUE_ENFORCEMENT_LEVEL_NON_ADMINS,
            self::MERGE_QUEUE_ENFORCEMENT_LEVEL_EVERYONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPullRequestReviewsEnforcementLevelAllowableValues()
    {
        return [
            self::PULL_REQUEST_REVIEWS_ENFORCEMENT_LEVEL_OFF,
            self::PULL_REQUEST_REVIEWS_ENFORCEMENT_LEVEL_NON_ADMINS,
            self::PULL_REQUEST_REVIEWS_ENFORCEMENT_LEVEL_EVERYONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequiredConversationResolutionLevelAllowableValues()
    {
        return [
            self::REQUIRED_CONVERSATION_RESOLUTION_LEVEL_OFF,
            self::REQUIRED_CONVERSATION_RESOLUTION_LEVEL_NON_ADMINS,
            self::REQUIRED_CONVERSATION_RESOLUTION_LEVEL_EVERYONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequiredDeploymentsEnforcementLevelAllowableValues()
    {
        return [
            self::REQUIRED_DEPLOYMENTS_ENFORCEMENT_LEVEL_OFF,
            self::REQUIRED_DEPLOYMENTS_ENFORCEMENT_LEVEL_NON_ADMINS,
            self::REQUIRED_DEPLOYMENTS_ENFORCEMENT_LEVEL_EVERYONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequiredStatusChecksEnforcementLevelAllowableValues()
    {
        return [
            self::REQUIRED_STATUS_CHECKS_ENFORCEMENT_LEVEL_OFF,
            self::REQUIRED_STATUS_CHECKS_ENFORCEMENT_LEVEL_NON_ADMINS,
            self::REQUIRED_STATUS_CHECKS_ENFORCEMENT_LEVEL_EVERYONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSignatureRequirementEnforcementLevelAllowableValues()
    {
        return [
            self::SIGNATURE_REQUIREMENT_ENFORCEMENT_LEVEL_OFF,
            self::SIGNATURE_REQUIREMENT_ENFORCEMENT_LEVEL_NON_ADMINS,
            self::SIGNATURE_REQUIREMENT_ENFORCEMENT_LEVEL_EVERYONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('admin_enforced', $data ?? [], null);
        $this->setIfExists('allow_deletions_enforcement_level', $data ?? [], null);
        $this->setIfExists('allow_force_pushes_enforcement_level', $data ?? [], null);
        $this->setIfExists('authorized_actor_names', $data ?? [], null);
        $this->setIfExists('authorized_actors_only', $data ?? [], null);
        $this->setIfExists('authorized_dismissal_actors_only', $data ?? [], null);
        $this->setIfExists('create_protected', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('dismiss_stale_reviews_on_push', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('ignore_approvals_from_contributors', $data ?? [], null);
        $this->setIfExists('linear_history_requirement_enforcement_level', $data ?? [], null);
        $this->setIfExists('merge_queue_enforcement_level', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('pull_request_reviews_enforcement_level', $data ?? [], null);
        $this->setIfExists('repository_id', $data ?? [], null);
        $this->setIfExists('require_code_owner_review', $data ?? [], null);
        $this->setIfExists('require_last_push_approval', $data ?? [], null);
        $this->setIfExists('required_approving_review_count', $data ?? [], null);
        $this->setIfExists('required_conversation_resolution_level', $data ?? [], null);
        $this->setIfExists('required_deployments_enforcement_level', $data ?? [], null);
        $this->setIfExists('required_status_checks', $data ?? [], null);
        $this->setIfExists('required_status_checks_enforcement_level', $data ?? [], null);
        $this->setIfExists('signature_requirement_enforcement_level', $data ?? [], null);
        $this->setIfExists('strict_required_status_checks_policy', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['admin_enforced'] === null) {
            $invalidProperties[] = "'admin_enforced' can't be null";
        }
        if ($this->container['allow_deletions_enforcement_level'] === null) {
            $invalidProperties[] = "'allow_deletions_enforcement_level' can't be null";
        }
        $allowedValues = $this->getAllowDeletionsEnforcementLevelAllowableValues();
        if (!is_null($this->container['allow_deletions_enforcement_level']) && !in_array($this->container['allow_deletions_enforcement_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_deletions_enforcement_level', must be one of '%s'",
                $this->container['allow_deletions_enforcement_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['allow_force_pushes_enforcement_level'] === null) {
            $invalidProperties[] = "'allow_force_pushes_enforcement_level' can't be null";
        }
        $allowedValues = $this->getAllowForcePushesEnforcementLevelAllowableValues();
        if (!is_null($this->container['allow_force_pushes_enforcement_level']) && !in_array($this->container['allow_force_pushes_enforcement_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_force_pushes_enforcement_level', must be one of '%s'",
                $this->container['allow_force_pushes_enforcement_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['authorized_actor_names'] === null) {
            $invalidProperties[] = "'authorized_actor_names' can't be null";
        }
        if ($this->container['authorized_actors_only'] === null) {
            $invalidProperties[] = "'authorized_actors_only' can't be null";
        }
        if ($this->container['authorized_dismissal_actors_only'] === null) {
            $invalidProperties[] = "'authorized_dismissal_actors_only' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['dismiss_stale_reviews_on_push'] === null) {
            $invalidProperties[] = "'dismiss_stale_reviews_on_push' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['ignore_approvals_from_contributors'] === null) {
            $invalidProperties[] = "'ignore_approvals_from_contributors' can't be null";
        }
        if ($this->container['linear_history_requirement_enforcement_level'] === null) {
            $invalidProperties[] = "'linear_history_requirement_enforcement_level' can't be null";
        }
        $allowedValues = $this->getLinearHistoryRequirementEnforcementLevelAllowableValues();
        if (!is_null($this->container['linear_history_requirement_enforcement_level']) && !in_array($this->container['linear_history_requirement_enforcement_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'linear_history_requirement_enforcement_level', must be one of '%s'",
                $this->container['linear_history_requirement_enforcement_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['merge_queue_enforcement_level'] === null) {
            $invalidProperties[] = "'merge_queue_enforcement_level' can't be null";
        }
        $allowedValues = $this->getMergeQueueEnforcementLevelAllowableValues();
        if (!is_null($this->container['merge_queue_enforcement_level']) && !in_array($this->container['merge_queue_enforcement_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'merge_queue_enforcement_level', must be one of '%s'",
                $this->container['merge_queue_enforcement_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['pull_request_reviews_enforcement_level'] === null) {
            $invalidProperties[] = "'pull_request_reviews_enforcement_level' can't be null";
        }
        $allowedValues = $this->getPullRequestReviewsEnforcementLevelAllowableValues();
        if (!is_null($this->container['pull_request_reviews_enforcement_level']) && !in_array($this->container['pull_request_reviews_enforcement_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pull_request_reviews_enforcement_level', must be one of '%s'",
                $this->container['pull_request_reviews_enforcement_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['repository_id'] === null) {
            $invalidProperties[] = "'repository_id' can't be null";
        }
        if ($this->container['require_code_owner_review'] === null) {
            $invalidProperties[] = "'require_code_owner_review' can't be null";
        }
        if ($this->container['required_approving_review_count'] === null) {
            $invalidProperties[] = "'required_approving_review_count' can't be null";
        }
        if ($this->container['required_conversation_resolution_level'] === null) {
            $invalidProperties[] = "'required_conversation_resolution_level' can't be null";
        }
        $allowedValues = $this->getRequiredConversationResolutionLevelAllowableValues();
        if (!is_null($this->container['required_conversation_resolution_level']) && !in_array($this->container['required_conversation_resolution_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'required_conversation_resolution_level', must be one of '%s'",
                $this->container['required_conversation_resolution_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['required_deployments_enforcement_level'] === null) {
            $invalidProperties[] = "'required_deployments_enforcement_level' can't be null";
        }
        $allowedValues = $this->getRequiredDeploymentsEnforcementLevelAllowableValues();
        if (!is_null($this->container['required_deployments_enforcement_level']) && !in_array($this->container['required_deployments_enforcement_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'required_deployments_enforcement_level', must be one of '%s'",
                $this->container['required_deployments_enforcement_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['required_status_checks'] === null) {
            $invalidProperties[] = "'required_status_checks' can't be null";
        }
        if ($this->container['required_status_checks_enforcement_level'] === null) {
            $invalidProperties[] = "'required_status_checks_enforcement_level' can't be null";
        }
        $allowedValues = $this->getRequiredStatusChecksEnforcementLevelAllowableValues();
        if (!is_null($this->container['required_status_checks_enforcement_level']) && !in_array($this->container['required_status_checks_enforcement_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'required_status_checks_enforcement_level', must be one of '%s'",
                $this->container['required_status_checks_enforcement_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['signature_requirement_enforcement_level'] === null) {
            $invalidProperties[] = "'signature_requirement_enforcement_level' can't be null";
        }
        $allowedValues = $this->getSignatureRequirementEnforcementLevelAllowableValues();
        if (!is_null($this->container['signature_requirement_enforcement_level']) && !in_array($this->container['signature_requirement_enforcement_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'signature_requirement_enforcement_level', must be one of '%s'",
                $this->container['signature_requirement_enforcement_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['strict_required_status_checks_policy'] === null) {
            $invalidProperties[] = "'strict_required_status_checks_policy' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets admin_enforced
     *
     * @return bool
     */
    public function getAdminEnforced()
    {
        return $this->container['admin_enforced'];
    }

    /**
     * Sets admin_enforced
     *
     * @param bool $admin_enforced admin_enforced
     *
     * @return self
     */
    public function setAdminEnforced($admin_enforced)
    {
        if (is_null($admin_enforced)) {
            throw new \InvalidArgumentException('non-nullable admin_enforced cannot be null');
        }
        $this->container['admin_enforced'] = $admin_enforced;

        return $this;
    }

    /**
     * Gets allow_deletions_enforcement_level
     *
     * @return string
     */
    public function getAllowDeletionsEnforcementLevel()
    {
        return $this->container['allow_deletions_enforcement_level'];
    }

    /**
     * Sets allow_deletions_enforcement_level
     *
     * @param string $allow_deletions_enforcement_level allow_deletions_enforcement_level
     *
     * @return self
     */
    public function setAllowDeletionsEnforcementLevel($allow_deletions_enforcement_level)
    {
        if (is_null($allow_deletions_enforcement_level)) {
            throw new \InvalidArgumentException('non-nullable allow_deletions_enforcement_level cannot be null');
        }
        $allowedValues = $this->getAllowDeletionsEnforcementLevelAllowableValues();
        if (!in_array($allow_deletions_enforcement_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_deletions_enforcement_level', must be one of '%s'",
                    $allow_deletions_enforcement_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_deletions_enforcement_level'] = $allow_deletions_enforcement_level;

        return $this;
    }

    /**
     * Gets allow_force_pushes_enforcement_level
     *
     * @return string
     */
    public function getAllowForcePushesEnforcementLevel()
    {
        return $this->container['allow_force_pushes_enforcement_level'];
    }

    /**
     * Sets allow_force_pushes_enforcement_level
     *
     * @param string $allow_force_pushes_enforcement_level allow_force_pushes_enforcement_level
     *
     * @return self
     */
    public function setAllowForcePushesEnforcementLevel($allow_force_pushes_enforcement_level)
    {
        if (is_null($allow_force_pushes_enforcement_level)) {
            throw new \InvalidArgumentException('non-nullable allow_force_pushes_enforcement_level cannot be null');
        }
        $allowedValues = $this->getAllowForcePushesEnforcementLevelAllowableValues();
        if (!in_array($allow_force_pushes_enforcement_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_force_pushes_enforcement_level', must be one of '%s'",
                    $allow_force_pushes_enforcement_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_force_pushes_enforcement_level'] = $allow_force_pushes_enforcement_level;

        return $this;
    }

    /**
     * Gets authorized_actor_names
     *
     * @return string[]
     */
    public function getAuthorizedActorNames()
    {
        return $this->container['authorized_actor_names'];
    }

    /**
     * Sets authorized_actor_names
     *
     * @param string[] $authorized_actor_names authorized_actor_names
     *
     * @return self
     */
    public function setAuthorizedActorNames($authorized_actor_names)
    {
        if (is_null($authorized_actor_names)) {
            throw new \InvalidArgumentException('non-nullable authorized_actor_names cannot be null');
        }
        $this->container['authorized_actor_names'] = $authorized_actor_names;

        return $this;
    }

    /**
     * Gets authorized_actors_only
     *
     * @return bool
     */
    public function getAuthorizedActorsOnly()
    {
        return $this->container['authorized_actors_only'];
    }

    /**
     * Sets authorized_actors_only
     *
     * @param bool $authorized_actors_only authorized_actors_only
     *
     * @return self
     */
    public function setAuthorizedActorsOnly($authorized_actors_only)
    {
        if (is_null($authorized_actors_only)) {
            throw new \InvalidArgumentException('non-nullable authorized_actors_only cannot be null');
        }
        $this->container['authorized_actors_only'] = $authorized_actors_only;

        return $this;
    }

    /**
     * Gets authorized_dismissal_actors_only
     *
     * @return bool
     */
    public function getAuthorizedDismissalActorsOnly()
    {
        return $this->container['authorized_dismissal_actors_only'];
    }

    /**
     * Sets authorized_dismissal_actors_only
     *
     * @param bool $authorized_dismissal_actors_only authorized_dismissal_actors_only
     *
     * @return self
     */
    public function setAuthorizedDismissalActorsOnly($authorized_dismissal_actors_only)
    {
        if (is_null($authorized_dismissal_actors_only)) {
            throw new \InvalidArgumentException('non-nullable authorized_dismissal_actors_only cannot be null');
        }
        $this->container['authorized_dismissal_actors_only'] = $authorized_dismissal_actors_only;

        return $this;
    }

    /**
     * Gets create_protected
     *
     * @return bool|null
     */
    public function getCreateProtected()
    {
        return $this->container['create_protected'];
    }

    /**
     * Sets create_protected
     *
     * @param bool|null $create_protected create_protected
     *
     * @return self
     */
    public function setCreateProtected($create_protected)
    {
        if (is_null($create_protected)) {
            throw new \InvalidArgumentException('non-nullable create_protected cannot be null');
        }
        $this->container['create_protected'] = $create_protected;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets dismiss_stale_reviews_on_push
     *
     * @return bool
     */
    public function getDismissStaleReviewsOnPush()
    {
        return $this->container['dismiss_stale_reviews_on_push'];
    }

    /**
     * Sets dismiss_stale_reviews_on_push
     *
     * @param bool $dismiss_stale_reviews_on_push dismiss_stale_reviews_on_push
     *
     * @return self
     */
    public function setDismissStaleReviewsOnPush($dismiss_stale_reviews_on_push)
    {
        if (is_null($dismiss_stale_reviews_on_push)) {
            throw new \InvalidArgumentException('non-nullable dismiss_stale_reviews_on_push cannot be null');
        }
        $this->container['dismiss_stale_reviews_on_push'] = $dismiss_stale_reviews_on_push;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ignore_approvals_from_contributors
     *
     * @return bool
     */
    public function getIgnoreApprovalsFromContributors()
    {
        return $this->container['ignore_approvals_from_contributors'];
    }

    /**
     * Sets ignore_approvals_from_contributors
     *
     * @param bool $ignore_approvals_from_contributors ignore_approvals_from_contributors
     *
     * @return self
     */
    public function setIgnoreApprovalsFromContributors($ignore_approvals_from_contributors)
    {
        if (is_null($ignore_approvals_from_contributors)) {
            throw new \InvalidArgumentException('non-nullable ignore_approvals_from_contributors cannot be null');
        }
        $this->container['ignore_approvals_from_contributors'] = $ignore_approvals_from_contributors;

        return $this;
    }

    /**
     * Gets linear_history_requirement_enforcement_level
     *
     * @return string
     */
    public function getLinearHistoryRequirementEnforcementLevel()
    {
        return $this->container['linear_history_requirement_enforcement_level'];
    }

    /**
     * Sets linear_history_requirement_enforcement_level
     *
     * @param string $linear_history_requirement_enforcement_level linear_history_requirement_enforcement_level
     *
     * @return self
     */
    public function setLinearHistoryRequirementEnforcementLevel($linear_history_requirement_enforcement_level)
    {
        if (is_null($linear_history_requirement_enforcement_level)) {
            throw new \InvalidArgumentException('non-nullable linear_history_requirement_enforcement_level cannot be null');
        }
        $allowedValues = $this->getLinearHistoryRequirementEnforcementLevelAllowableValues();
        if (!in_array($linear_history_requirement_enforcement_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'linear_history_requirement_enforcement_level', must be one of '%s'",
                    $linear_history_requirement_enforcement_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['linear_history_requirement_enforcement_level'] = $linear_history_requirement_enforcement_level;

        return $this;
    }

    /**
     * Gets merge_queue_enforcement_level
     *
     * @return string
     */
    public function getMergeQueueEnforcementLevel()
    {
        return $this->container['merge_queue_enforcement_level'];
    }

    /**
     * Sets merge_queue_enforcement_level
     *
     * @param string $merge_queue_enforcement_level merge_queue_enforcement_level
     *
     * @return self
     */
    public function setMergeQueueEnforcementLevel($merge_queue_enforcement_level)
    {
        if (is_null($merge_queue_enforcement_level)) {
            throw new \InvalidArgumentException('non-nullable merge_queue_enforcement_level cannot be null');
        }
        $allowedValues = $this->getMergeQueueEnforcementLevelAllowableValues();
        if (!in_array($merge_queue_enforcement_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'merge_queue_enforcement_level', must be one of '%s'",
                    $merge_queue_enforcement_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['merge_queue_enforcement_level'] = $merge_queue_enforcement_level;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pull_request_reviews_enforcement_level
     *
     * @return string
     */
    public function getPullRequestReviewsEnforcementLevel()
    {
        return $this->container['pull_request_reviews_enforcement_level'];
    }

    /**
     * Sets pull_request_reviews_enforcement_level
     *
     * @param string $pull_request_reviews_enforcement_level pull_request_reviews_enforcement_level
     *
     * @return self
     */
    public function setPullRequestReviewsEnforcementLevel($pull_request_reviews_enforcement_level)
    {
        if (is_null($pull_request_reviews_enforcement_level)) {
            throw new \InvalidArgumentException('non-nullable pull_request_reviews_enforcement_level cannot be null');
        }
        $allowedValues = $this->getPullRequestReviewsEnforcementLevelAllowableValues();
        if (!in_array($pull_request_reviews_enforcement_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pull_request_reviews_enforcement_level', must be one of '%s'",
                    $pull_request_reviews_enforcement_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pull_request_reviews_enforcement_level'] = $pull_request_reviews_enforcement_level;

        return $this;
    }

    /**
     * Gets repository_id
     *
     * @return int
     */
    public function getRepositoryId()
    {
        return $this->container['repository_id'];
    }

    /**
     * Sets repository_id
     *
     * @param int $repository_id repository_id
     *
     * @return self
     */
    public function setRepositoryId($repository_id)
    {
        if (is_null($repository_id)) {
            throw new \InvalidArgumentException('non-nullable repository_id cannot be null');
        }
        $this->container['repository_id'] = $repository_id;

        return $this;
    }

    /**
     * Gets require_code_owner_review
     *
     * @return bool
     */
    public function getRequireCodeOwnerReview()
    {
        return $this->container['require_code_owner_review'];
    }

    /**
     * Sets require_code_owner_review
     *
     * @param bool $require_code_owner_review require_code_owner_review
     *
     * @return self
     */
    public function setRequireCodeOwnerReview($require_code_owner_review)
    {
        if (is_null($require_code_owner_review)) {
            throw new \InvalidArgumentException('non-nullable require_code_owner_review cannot be null');
        }
        $this->container['require_code_owner_review'] = $require_code_owner_review;

        return $this;
    }

    /**
     * Gets require_last_push_approval
     *
     * @return bool|null
     */
    public function getRequireLastPushApproval()
    {
        return $this->container['require_last_push_approval'];
    }

    /**
     * Sets require_last_push_approval
     *
     * @param bool|null $require_last_push_approval Whether the most recent push must be approved by someone other than the person who pushed it
     *
     * @return self
     */
    public function setRequireLastPushApproval($require_last_push_approval)
    {
        if (is_null($require_last_push_approval)) {
            throw new \InvalidArgumentException('non-nullable require_last_push_approval cannot be null');
        }
        $this->container['require_last_push_approval'] = $require_last_push_approval;

        return $this;
    }

    /**
     * Gets required_approving_review_count
     *
     * @return int
     */
    public function getRequiredApprovingReviewCount()
    {
        return $this->container['required_approving_review_count'];
    }

    /**
     * Sets required_approving_review_count
     *
     * @param int $required_approving_review_count required_approving_review_count
     *
     * @return self
     */
    public function setRequiredApprovingReviewCount($required_approving_review_count)
    {
        if (is_null($required_approving_review_count)) {
            throw new \InvalidArgumentException('non-nullable required_approving_review_count cannot be null');
        }
        $this->container['required_approving_review_count'] = $required_approving_review_count;

        return $this;
    }

    /**
     * Gets required_conversation_resolution_level
     *
     * @return string
     */
    public function getRequiredConversationResolutionLevel()
    {
        return $this->container['required_conversation_resolution_level'];
    }

    /**
     * Sets required_conversation_resolution_level
     *
     * @param string $required_conversation_resolution_level required_conversation_resolution_level
     *
     * @return self
     */
    public function setRequiredConversationResolutionLevel($required_conversation_resolution_level)
    {
        if (is_null($required_conversation_resolution_level)) {
            throw new \InvalidArgumentException('non-nullable required_conversation_resolution_level cannot be null');
        }
        $allowedValues = $this->getRequiredConversationResolutionLevelAllowableValues();
        if (!in_array($required_conversation_resolution_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'required_conversation_resolution_level', must be one of '%s'",
                    $required_conversation_resolution_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['required_conversation_resolution_level'] = $required_conversation_resolution_level;

        return $this;
    }

    /**
     * Gets required_deployments_enforcement_level
     *
     * @return string
     */
    public function getRequiredDeploymentsEnforcementLevel()
    {
        return $this->container['required_deployments_enforcement_level'];
    }

    /**
     * Sets required_deployments_enforcement_level
     *
     * @param string $required_deployments_enforcement_level required_deployments_enforcement_level
     *
     * @return self
     */
    public function setRequiredDeploymentsEnforcementLevel($required_deployments_enforcement_level)
    {
        if (is_null($required_deployments_enforcement_level)) {
            throw new \InvalidArgumentException('non-nullable required_deployments_enforcement_level cannot be null');
        }
        $allowedValues = $this->getRequiredDeploymentsEnforcementLevelAllowableValues();
        if (!in_array($required_deployments_enforcement_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'required_deployments_enforcement_level', must be one of '%s'",
                    $required_deployments_enforcement_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['required_deployments_enforcement_level'] = $required_deployments_enforcement_level;

        return $this;
    }

    /**
     * Gets required_status_checks
     *
     * @return string[]
     */
    public function getRequiredStatusChecks()
    {
        return $this->container['required_status_checks'];
    }

    /**
     * Sets required_status_checks
     *
     * @param string[] $required_status_checks required_status_checks
     *
     * @return self
     */
    public function setRequiredStatusChecks($required_status_checks)
    {
        if (is_null($required_status_checks)) {
            throw new \InvalidArgumentException('non-nullable required_status_checks cannot be null');
        }
        $this->container['required_status_checks'] = $required_status_checks;

        return $this;
    }

    /**
     * Gets required_status_checks_enforcement_level
     *
     * @return string
     */
    public function getRequiredStatusChecksEnforcementLevel()
    {
        return $this->container['required_status_checks_enforcement_level'];
    }

    /**
     * Sets required_status_checks_enforcement_level
     *
     * @param string $required_status_checks_enforcement_level required_status_checks_enforcement_level
     *
     * @return self
     */
    public function setRequiredStatusChecksEnforcementLevel($required_status_checks_enforcement_level)
    {
        if (is_null($required_status_checks_enforcement_level)) {
            throw new \InvalidArgumentException('non-nullable required_status_checks_enforcement_level cannot be null');
        }
        $allowedValues = $this->getRequiredStatusChecksEnforcementLevelAllowableValues();
        if (!in_array($required_status_checks_enforcement_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'required_status_checks_enforcement_level', must be one of '%s'",
                    $required_status_checks_enforcement_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['required_status_checks_enforcement_level'] = $required_status_checks_enforcement_level;

        return $this;
    }

    /**
     * Gets signature_requirement_enforcement_level
     *
     * @return string
     */
    public function getSignatureRequirementEnforcementLevel()
    {
        return $this->container['signature_requirement_enforcement_level'];
    }

    /**
     * Sets signature_requirement_enforcement_level
     *
     * @param string $signature_requirement_enforcement_level signature_requirement_enforcement_level
     *
     * @return self
     */
    public function setSignatureRequirementEnforcementLevel($signature_requirement_enforcement_level)
    {
        if (is_null($signature_requirement_enforcement_level)) {
            throw new \InvalidArgumentException('non-nullable signature_requirement_enforcement_level cannot be null');
        }
        $allowedValues = $this->getSignatureRequirementEnforcementLevelAllowableValues();
        if (!in_array($signature_requirement_enforcement_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'signature_requirement_enforcement_level', must be one of '%s'",
                    $signature_requirement_enforcement_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['signature_requirement_enforcement_level'] = $signature_requirement_enforcement_level;

        return $this;
    }

    /**
     * Gets strict_required_status_checks_policy
     *
     * @return bool
     */
    public function getStrictRequiredStatusChecksPolicy()
    {
        return $this->container['strict_required_status_checks_policy'];
    }

    /**
     * Sets strict_required_status_checks_policy
     *
     * @param bool $strict_required_status_checks_policy strict_required_status_checks_policy
     *
     * @return self
     */
    public function setStrictRequiredStatusChecksPolicy($strict_required_status_checks_policy)
    {
        if (is_null($strict_required_status_checks_policy)) {
            throw new \InvalidArgumentException('non-nullable strict_required_status_checks_policy cannot be null');
        }
        $this->container['strict_required_status_checks_policy'] = $strict_required_status_checks_policy;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


