<?php
/**
 * WorkflowRun
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model;

use \ArrayAccess;
use \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\ObjectSerializer;

/**
 * WorkflowRun Class Doc Comment
 *
 * @category Class
 * @package  System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WorkflowRun implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Workflow_Run';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actor' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User',
        'artifacts_url' => 'string',
        'cancel_url' => 'string',
        'check_suite_id' => 'int',
        'check_suite_node_id' => 'string',
        'check_suite_url' => 'string',
        'conclusion' => 'string',
        'created_at' => '\DateTime',
        'event' => 'string',
        'head_branch' => 'string',
        'head_commit' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleCommit',
        'head_repository' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RepositoryLite',
        'head_sha' => 'string',
        'html_url' => 'string',
        'id' => 'int',
        'jobs_url' => 'string',
        'logs_url' => 'string',
        'name' => 'string',
        'node_id' => 'string',
        'path' => 'string',
        'previous_attempt_url' => 'string',
        'pull_requests' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WorkflowRunPullRequestsInner[]',
        'referenced_workflows' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DeploymentWorkflowRunReferencedWorkflowsInner[]',
        'repository' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RepositoryLite',
        'rerun_url' => 'string',
        'run_attempt' => 'int',
        'run_number' => 'int',
        'run_started_at' => '\DateTime',
        'status' => 'string',
        'triggering_actor' => '\System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User',
        'updated_at' => '\DateTime',
        'url' => 'string',
        'workflow_id' => 'int',
        'workflow_url' => 'string',
        'display_title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actor' => null,
        'artifacts_url' => 'uri',
        'cancel_url' => 'uri',
        'check_suite_id' => null,
        'check_suite_node_id' => null,
        'check_suite_url' => 'uri',
        'conclusion' => null,
        'created_at' => 'date-time',
        'event' => null,
        'head_branch' => null,
        'head_commit' => null,
        'head_repository' => null,
        'head_sha' => null,
        'html_url' => 'uri',
        'id' => null,
        'jobs_url' => 'uri',
        'logs_url' => 'uri',
        'name' => null,
        'node_id' => null,
        'path' => null,
        'previous_attempt_url' => 'uri',
        'pull_requests' => null,
        'referenced_workflows' => null,
        'repository' => null,
        'rerun_url' => 'uri',
        'run_attempt' => null,
        'run_number' => null,
        'run_started_at' => 'date-time',
        'status' => null,
        'triggering_actor' => null,
        'updated_at' => 'date-time',
        'url' => 'uri',
        'workflow_id' => null,
        'workflow_url' => 'uri',
        'display_title' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'actor' => true,
        'artifacts_url' => false,
        'cancel_url' => false,
        'check_suite_id' => false,
        'check_suite_node_id' => false,
        'check_suite_url' => false,
        'conclusion' => true,
        'created_at' => false,
        'event' => false,
        'head_branch' => true,
        'head_commit' => false,
        'head_repository' => false,
        'head_sha' => false,
        'html_url' => false,
        'id' => false,
        'jobs_url' => false,
        'logs_url' => false,
        'name' => true,
        'node_id' => false,
        'path' => false,
        'previous_attempt_url' => true,
        'pull_requests' => false,
        'referenced_workflows' => true,
        'repository' => false,
        'rerun_url' => false,
        'run_attempt' => false,
        'run_number' => false,
        'run_started_at' => false,
        'status' => false,
        'triggering_actor' => true,
        'updated_at' => false,
        'url' => false,
        'workflow_id' => false,
        'workflow_url' => false,
        'display_title' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actor' => 'actor',
        'artifacts_url' => 'artifacts_url',
        'cancel_url' => 'cancel_url',
        'check_suite_id' => 'check_suite_id',
        'check_suite_node_id' => 'check_suite_node_id',
        'check_suite_url' => 'check_suite_url',
        'conclusion' => 'conclusion',
        'created_at' => 'created_at',
        'event' => 'event',
        'head_branch' => 'head_branch',
        'head_commit' => 'head_commit',
        'head_repository' => 'head_repository',
        'head_sha' => 'head_sha',
        'html_url' => 'html_url',
        'id' => 'id',
        'jobs_url' => 'jobs_url',
        'logs_url' => 'logs_url',
        'name' => 'name',
        'node_id' => 'node_id',
        'path' => 'path',
        'previous_attempt_url' => 'previous_attempt_url',
        'pull_requests' => 'pull_requests',
        'referenced_workflows' => 'referenced_workflows',
        'repository' => 'repository',
        'rerun_url' => 'rerun_url',
        'run_attempt' => 'run_attempt',
        'run_number' => 'run_number',
        'run_started_at' => 'run_started_at',
        'status' => 'status',
        'triggering_actor' => 'triggering_actor',
        'updated_at' => 'updated_at',
        'url' => 'url',
        'workflow_id' => 'workflow_id',
        'workflow_url' => 'workflow_url',
        'display_title' => 'display_title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actor' => 'setActor',
        'artifacts_url' => 'setArtifactsUrl',
        'cancel_url' => 'setCancelUrl',
        'check_suite_id' => 'setCheckSuiteId',
        'check_suite_node_id' => 'setCheckSuiteNodeId',
        'check_suite_url' => 'setCheckSuiteUrl',
        'conclusion' => 'setConclusion',
        'created_at' => 'setCreatedAt',
        'event' => 'setEvent',
        'head_branch' => 'setHeadBranch',
        'head_commit' => 'setHeadCommit',
        'head_repository' => 'setHeadRepository',
        'head_sha' => 'setHeadSha',
        'html_url' => 'setHtmlUrl',
        'id' => 'setId',
        'jobs_url' => 'setJobsUrl',
        'logs_url' => 'setLogsUrl',
        'name' => 'setName',
        'node_id' => 'setNodeId',
        'path' => 'setPath',
        'previous_attempt_url' => 'setPreviousAttemptUrl',
        'pull_requests' => 'setPullRequests',
        'referenced_workflows' => 'setReferencedWorkflows',
        'repository' => 'setRepository',
        'rerun_url' => 'setRerunUrl',
        'run_attempt' => 'setRunAttempt',
        'run_number' => 'setRunNumber',
        'run_started_at' => 'setRunStartedAt',
        'status' => 'setStatus',
        'triggering_actor' => 'setTriggeringActor',
        'updated_at' => 'setUpdatedAt',
        'url' => 'setUrl',
        'workflow_id' => 'setWorkflowId',
        'workflow_url' => 'setWorkflowUrl',
        'display_title' => 'setDisplayTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actor' => 'getActor',
        'artifacts_url' => 'getArtifactsUrl',
        'cancel_url' => 'getCancelUrl',
        'check_suite_id' => 'getCheckSuiteId',
        'check_suite_node_id' => 'getCheckSuiteNodeId',
        'check_suite_url' => 'getCheckSuiteUrl',
        'conclusion' => 'getConclusion',
        'created_at' => 'getCreatedAt',
        'event' => 'getEvent',
        'head_branch' => 'getHeadBranch',
        'head_commit' => 'getHeadCommit',
        'head_repository' => 'getHeadRepository',
        'head_sha' => 'getHeadSha',
        'html_url' => 'getHtmlUrl',
        'id' => 'getId',
        'jobs_url' => 'getJobsUrl',
        'logs_url' => 'getLogsUrl',
        'name' => 'getName',
        'node_id' => 'getNodeId',
        'path' => 'getPath',
        'previous_attempt_url' => 'getPreviousAttemptUrl',
        'pull_requests' => 'getPullRequests',
        'referenced_workflows' => 'getReferencedWorkflows',
        'repository' => 'getRepository',
        'rerun_url' => 'getRerunUrl',
        'run_attempt' => 'getRunAttempt',
        'run_number' => 'getRunNumber',
        'run_started_at' => 'getRunStartedAt',
        'status' => 'getStatus',
        'triggering_actor' => 'getTriggeringActor',
        'updated_at' => 'getUpdatedAt',
        'url' => 'getUrl',
        'workflow_id' => 'getWorkflowId',
        'workflow_url' => 'getWorkflowUrl',
        'display_title' => 'getDisplayTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CONCLUSION_ACTION_REQUIRED = 'action_required';
    public const CONCLUSION_CANCELLED = 'cancelled';
    public const CONCLUSION_FAILURE = 'failure';
    public const CONCLUSION_NEUTRAL = 'neutral';
    public const CONCLUSION_SKIPPED = 'skipped';
    public const CONCLUSION_STALE = 'stale';
    public const CONCLUSION_SUCCESS = 'success';
    public const CONCLUSION_TIMED_OUT = 'timed_out';
    public const STATUS_REQUESTED = 'requested';
    public const STATUS_IN_PROGRESS = 'in_progress';
    public const STATUS_COMPLETED = 'completed';
    public const STATUS_QUEUED = 'queued';
    public const STATUS_PENDING = 'pending';
    public const STATUS_WAITING = 'waiting';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConclusionAllowableValues()
    {
        return [
            self::CONCLUSION_ACTION_REQUIRED,
            self::CONCLUSION_CANCELLED,
            self::CONCLUSION_FAILURE,
            self::CONCLUSION_NEUTRAL,
            self::CONCLUSION_SKIPPED,
            self::CONCLUSION_STALE,
            self::CONCLUSION_SUCCESS,
            self::CONCLUSION_TIMED_OUT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_REQUESTED,
            self::STATUS_IN_PROGRESS,
            self::STATUS_COMPLETED,
            self::STATUS_QUEUED,
            self::STATUS_PENDING,
            self::STATUS_WAITING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('actor', $data ?? [], null);
        $this->setIfExists('artifacts_url', $data ?? [], null);
        $this->setIfExists('cancel_url', $data ?? [], null);
        $this->setIfExists('check_suite_id', $data ?? [], null);
        $this->setIfExists('check_suite_node_id', $data ?? [], null);
        $this->setIfExists('check_suite_url', $data ?? [], null);
        $this->setIfExists('conclusion', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('head_branch', $data ?? [], null);
        $this->setIfExists('head_commit', $data ?? [], null);
        $this->setIfExists('head_repository', $data ?? [], null);
        $this->setIfExists('head_sha', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('jobs_url', $data ?? [], null);
        $this->setIfExists('logs_url', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('previous_attempt_url', $data ?? [], null);
        $this->setIfExists('pull_requests', $data ?? [], null);
        $this->setIfExists('referenced_workflows', $data ?? [], null);
        $this->setIfExists('repository', $data ?? [], null);
        $this->setIfExists('rerun_url', $data ?? [], null);
        $this->setIfExists('run_attempt', $data ?? [], null);
        $this->setIfExists('run_number', $data ?? [], null);
        $this->setIfExists('run_started_at', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('triggering_actor', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('workflow_id', $data ?? [], null);
        $this->setIfExists('workflow_url', $data ?? [], null);
        $this->setIfExists('display_title', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['actor'] === null) {
            $invalidProperties[] = "'actor' can't be null";
        }
        if ($this->container['artifacts_url'] === null) {
            $invalidProperties[] = "'artifacts_url' can't be null";
        }
        if ($this->container['cancel_url'] === null) {
            $invalidProperties[] = "'cancel_url' can't be null";
        }
        if ($this->container['check_suite_id'] === null) {
            $invalidProperties[] = "'check_suite_id' can't be null";
        }
        if ($this->container['check_suite_node_id'] === null) {
            $invalidProperties[] = "'check_suite_node_id' can't be null";
        }
        if ($this->container['check_suite_url'] === null) {
            $invalidProperties[] = "'check_suite_url' can't be null";
        }
        if ($this->container['conclusion'] === null) {
            $invalidProperties[] = "'conclusion' can't be null";
        }
        $allowedValues = $this->getConclusionAllowableValues();
        if (!is_null($this->container['conclusion']) && !in_array($this->container['conclusion'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'conclusion', must be one of '%s'",
                $this->container['conclusion'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['event'] === null) {
            $invalidProperties[] = "'event' can't be null";
        }
        if ($this->container['head_branch'] === null) {
            $invalidProperties[] = "'head_branch' can't be null";
        }
        if ($this->container['head_commit'] === null) {
            $invalidProperties[] = "'head_commit' can't be null";
        }
        if ($this->container['head_repository'] === null) {
            $invalidProperties[] = "'head_repository' can't be null";
        }
        if ($this->container['head_sha'] === null) {
            $invalidProperties[] = "'head_sha' can't be null";
        }
        if ($this->container['html_url'] === null) {
            $invalidProperties[] = "'html_url' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['jobs_url'] === null) {
            $invalidProperties[] = "'jobs_url' can't be null";
        }
        if ($this->container['logs_url'] === null) {
            $invalidProperties[] = "'logs_url' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['node_id'] === null) {
            $invalidProperties[] = "'node_id' can't be null";
        }
        if ($this->container['path'] === null) {
            $invalidProperties[] = "'path' can't be null";
        }
        if ($this->container['previous_attempt_url'] === null) {
            $invalidProperties[] = "'previous_attempt_url' can't be null";
        }
        if ($this->container['pull_requests'] === null) {
            $invalidProperties[] = "'pull_requests' can't be null";
        }
        if ($this->container['repository'] === null) {
            $invalidProperties[] = "'repository' can't be null";
        }
        if ($this->container['rerun_url'] === null) {
            $invalidProperties[] = "'rerun_url' can't be null";
        }
        if ($this->container['run_attempt'] === null) {
            $invalidProperties[] = "'run_attempt' can't be null";
        }
        if ($this->container['run_number'] === null) {
            $invalidProperties[] = "'run_number' can't be null";
        }
        if ($this->container['run_started_at'] === null) {
            $invalidProperties[] = "'run_started_at' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['triggering_actor'] === null) {
            $invalidProperties[] = "'triggering_actor' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['workflow_id'] === null) {
            $invalidProperties[] = "'workflow_id' can't be null";
        }
        if ($this->container['workflow_url'] === null) {
            $invalidProperties[] = "'workflow_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actor
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User
     */
    public function getActor()
    {
        return $this->container['actor'];
    }

    /**
     * Sets actor
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User $actor actor
     *
     * @return self
     */
    public function setActor($actor)
    {
        if (is_null($actor)) {
            array_push($this->openAPINullablesSetToNull, 'actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['actor'] = $actor;

        return $this;
    }

    /**
     * Gets artifacts_url
     *
     * @return string
     */
    public function getArtifactsUrl()
    {
        return $this->container['artifacts_url'];
    }

    /**
     * Sets artifacts_url
     *
     * @param string $artifacts_url artifacts_url
     *
     * @return self
     */
    public function setArtifactsUrl($artifacts_url)
    {
        if (is_null($artifacts_url)) {
            throw new \InvalidArgumentException('non-nullable artifacts_url cannot be null');
        }
        $this->container['artifacts_url'] = $artifacts_url;

        return $this;
    }

    /**
     * Gets cancel_url
     *
     * @return string
     */
    public function getCancelUrl()
    {
        return $this->container['cancel_url'];
    }

    /**
     * Sets cancel_url
     *
     * @param string $cancel_url cancel_url
     *
     * @return self
     */
    public function setCancelUrl($cancel_url)
    {
        if (is_null($cancel_url)) {
            throw new \InvalidArgumentException('non-nullable cancel_url cannot be null');
        }
        $this->container['cancel_url'] = $cancel_url;

        return $this;
    }

    /**
     * Gets check_suite_id
     *
     * @return int
     */
    public function getCheckSuiteId()
    {
        return $this->container['check_suite_id'];
    }

    /**
     * Sets check_suite_id
     *
     * @param int $check_suite_id check_suite_id
     *
     * @return self
     */
    public function setCheckSuiteId($check_suite_id)
    {
        if (is_null($check_suite_id)) {
            throw new \InvalidArgumentException('non-nullable check_suite_id cannot be null');
        }
        $this->container['check_suite_id'] = $check_suite_id;

        return $this;
    }

    /**
     * Gets check_suite_node_id
     *
     * @return string
     */
    public function getCheckSuiteNodeId()
    {
        return $this->container['check_suite_node_id'];
    }

    /**
     * Sets check_suite_node_id
     *
     * @param string $check_suite_node_id check_suite_node_id
     *
     * @return self
     */
    public function setCheckSuiteNodeId($check_suite_node_id)
    {
        if (is_null($check_suite_node_id)) {
            throw new \InvalidArgumentException('non-nullable check_suite_node_id cannot be null');
        }
        $this->container['check_suite_node_id'] = $check_suite_node_id;

        return $this;
    }

    /**
     * Gets check_suite_url
     *
     * @return string
     */
    public function getCheckSuiteUrl()
    {
        return $this->container['check_suite_url'];
    }

    /**
     * Sets check_suite_url
     *
     * @param string $check_suite_url check_suite_url
     *
     * @return self
     */
    public function setCheckSuiteUrl($check_suite_url)
    {
        if (is_null($check_suite_url)) {
            throw new \InvalidArgumentException('non-nullable check_suite_url cannot be null');
        }
        $this->container['check_suite_url'] = $check_suite_url;

        return $this;
    }

    /**
     * Gets conclusion
     *
     * @return string
     */
    public function getConclusion()
    {
        return $this->container['conclusion'];
    }

    /**
     * Sets conclusion
     *
     * @param string $conclusion conclusion
     *
     * @return self
     */
    public function setConclusion($conclusion)
    {
        if (is_null($conclusion)) {
            array_push($this->openAPINullablesSetToNull, 'conclusion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conclusion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getConclusionAllowableValues();
        if (!is_null($conclusion) && !in_array($conclusion, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'conclusion', must be one of '%s'",
                    $conclusion,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['conclusion'] = $conclusion;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets event
     *
     * @return string
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string $event event
     *
     * @return self
     */
    public function setEvent($event)
    {
        if (is_null($event)) {
            throw new \InvalidArgumentException('non-nullable event cannot be null');
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets head_branch
     *
     * @return string
     */
    public function getHeadBranch()
    {
        return $this->container['head_branch'];
    }

    /**
     * Sets head_branch
     *
     * @param string $head_branch head_branch
     *
     * @return self
     */
    public function setHeadBranch($head_branch)
    {
        if (is_null($head_branch)) {
            array_push($this->openAPINullablesSetToNull, 'head_branch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('head_branch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['head_branch'] = $head_branch;

        return $this;
    }

    /**
     * Gets head_commit
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleCommit
     */
    public function getHeadCommit()
    {
        return $this->container['head_commit'];
    }

    /**
     * Sets head_commit
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\SimpleCommit $head_commit head_commit
     *
     * @return self
     */
    public function setHeadCommit($head_commit)
    {
        if (is_null($head_commit)) {
            throw new \InvalidArgumentException('non-nullable head_commit cannot be null');
        }
        $this->container['head_commit'] = $head_commit;

        return $this;
    }

    /**
     * Gets head_repository
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RepositoryLite
     */
    public function getHeadRepository()
    {
        return $this->container['head_repository'];
    }

    /**
     * Sets head_repository
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RepositoryLite $head_repository head_repository
     *
     * @return self
     */
    public function setHeadRepository($head_repository)
    {
        if (is_null($head_repository)) {
            throw new \InvalidArgumentException('non-nullable head_repository cannot be null');
        }
        $this->container['head_repository'] = $head_repository;

        return $this;
    }

    /**
     * Gets head_sha
     *
     * @return string
     */
    public function getHeadSha()
    {
        return $this->container['head_sha'];
    }

    /**
     * Sets head_sha
     *
     * @param string $head_sha head_sha
     *
     * @return self
     */
    public function setHeadSha($head_sha)
    {
        if (is_null($head_sha)) {
            throw new \InvalidArgumentException('non-nullable head_sha cannot be null');
        }
        $this->container['head_sha'] = $head_sha;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        if (is_null($html_url)) {
            throw new \InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets jobs_url
     *
     * @return string
     */
    public function getJobsUrl()
    {
        return $this->container['jobs_url'];
    }

    /**
     * Sets jobs_url
     *
     * @param string $jobs_url jobs_url
     *
     * @return self
     */
    public function setJobsUrl($jobs_url)
    {
        if (is_null($jobs_url)) {
            throw new \InvalidArgumentException('non-nullable jobs_url cannot be null');
        }
        $this->container['jobs_url'] = $jobs_url;

        return $this;
    }

    /**
     * Gets logs_url
     *
     * @return string
     */
    public function getLogsUrl()
    {
        return $this->container['logs_url'];
    }

    /**
     * Sets logs_url
     *
     * @param string $logs_url logs_url
     *
     * @return self
     */
    public function setLogsUrl($logs_url)
    {
        if (is_null($logs_url)) {
            throw new \InvalidArgumentException('non-nullable logs_url cannot be null');
        }
        $this->container['logs_url'] = $logs_url;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets previous_attempt_url
     *
     * @return string
     */
    public function getPreviousAttemptUrl()
    {
        return $this->container['previous_attempt_url'];
    }

    /**
     * Sets previous_attempt_url
     *
     * @param string $previous_attempt_url previous_attempt_url
     *
     * @return self
     */
    public function setPreviousAttemptUrl($previous_attempt_url)
    {
        if (is_null($previous_attempt_url)) {
            array_push($this->openAPINullablesSetToNull, 'previous_attempt_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('previous_attempt_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['previous_attempt_url'] = $previous_attempt_url;

        return $this;
    }

    /**
     * Gets pull_requests
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WorkflowRunPullRequestsInner[]
     */
    public function getPullRequests()
    {
        return $this->container['pull_requests'];
    }

    /**
     * Sets pull_requests
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\WorkflowRunPullRequestsInner[] $pull_requests pull_requests
     *
     * @return self
     */
    public function setPullRequests($pull_requests)
    {
        if (is_null($pull_requests)) {
            throw new \InvalidArgumentException('non-nullable pull_requests cannot be null');
        }
        $this->container['pull_requests'] = $pull_requests;

        return $this;
    }

    /**
     * Gets referenced_workflows
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DeploymentWorkflowRunReferencedWorkflowsInner[]|null
     */
    public function getReferencedWorkflows()
    {
        return $this->container['referenced_workflows'];
    }

    /**
     * Sets referenced_workflows
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\DeploymentWorkflowRunReferencedWorkflowsInner[]|null $referenced_workflows referenced_workflows
     *
     * @return self
     */
    public function setReferencedWorkflows($referenced_workflows)
    {
        if (is_null($referenced_workflows)) {
            array_push($this->openAPINullablesSetToNull, 'referenced_workflows');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referenced_workflows', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['referenced_workflows'] = $referenced_workflows;

        return $this;
    }

    /**
     * Gets repository
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RepositoryLite
     */
    public function getRepository()
    {
        return $this->container['repository'];
    }

    /**
     * Sets repository
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\RepositoryLite $repository repository
     *
     * @return self
     */
    public function setRepository($repository)
    {
        if (is_null($repository)) {
            throw new \InvalidArgumentException('non-nullable repository cannot be null');
        }
        $this->container['repository'] = $repository;

        return $this;
    }

    /**
     * Gets rerun_url
     *
     * @return string
     */
    public function getRerunUrl()
    {
        return $this->container['rerun_url'];
    }

    /**
     * Sets rerun_url
     *
     * @param string $rerun_url rerun_url
     *
     * @return self
     */
    public function setRerunUrl($rerun_url)
    {
        if (is_null($rerun_url)) {
            throw new \InvalidArgumentException('non-nullable rerun_url cannot be null');
        }
        $this->container['rerun_url'] = $rerun_url;

        return $this;
    }

    /**
     * Gets run_attempt
     *
     * @return int
     */
    public function getRunAttempt()
    {
        return $this->container['run_attempt'];
    }

    /**
     * Sets run_attempt
     *
     * @param int $run_attempt run_attempt
     *
     * @return self
     */
    public function setRunAttempt($run_attempt)
    {
        if (is_null($run_attempt)) {
            throw new \InvalidArgumentException('non-nullable run_attempt cannot be null');
        }
        $this->container['run_attempt'] = $run_attempt;

        return $this;
    }

    /**
     * Gets run_number
     *
     * @return int
     */
    public function getRunNumber()
    {
        return $this->container['run_number'];
    }

    /**
     * Sets run_number
     *
     * @param int $run_number run_number
     *
     * @return self
     */
    public function setRunNumber($run_number)
    {
        if (is_null($run_number)) {
            throw new \InvalidArgumentException('non-nullable run_number cannot be null');
        }
        $this->container['run_number'] = $run_number;

        return $this;
    }

    /**
     * Gets run_started_at
     *
     * @return \DateTime
     */
    public function getRunStartedAt()
    {
        return $this->container['run_started_at'];
    }

    /**
     * Sets run_started_at
     *
     * @param \DateTime $run_started_at run_started_at
     *
     * @return self
     */
    public function setRunStartedAt($run_started_at)
    {
        if (is_null($run_started_at)) {
            throw new \InvalidArgumentException('non-nullable run_started_at cannot be null');
        }
        $this->container['run_started_at'] = $run_started_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets triggering_actor
     *
     * @return \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User
     */
    public function getTriggeringActor()
    {
        return $this->container['triggering_actor'];
    }

    /**
     * Sets triggering_actor
     *
     * @param \System\Base\Providers\BasepackagesServiceProvider\Packages\ApiClientServices\Apis\Repos\Github\Model\User $triggering_actor triggering_actor
     *
     * @return self
     */
    public function setTriggeringActor($triggering_actor)
    {
        if (is_null($triggering_actor)) {
            array_push($this->openAPINullablesSetToNull, 'triggering_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('triggering_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['triggering_actor'] = $triggering_actor;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets workflow_id
     *
     * @return int
     */
    public function getWorkflowId()
    {
        return $this->container['workflow_id'];
    }

    /**
     * Sets workflow_id
     *
     * @param int $workflow_id workflow_id
     *
     * @return self
     */
    public function setWorkflowId($workflow_id)
    {
        if (is_null($workflow_id)) {
            throw new \InvalidArgumentException('non-nullable workflow_id cannot be null');
        }
        $this->container['workflow_id'] = $workflow_id;

        return $this;
    }

    /**
     * Gets workflow_url
     *
     * @return string
     */
    public function getWorkflowUrl()
    {
        return $this->container['workflow_url'];
    }

    /**
     * Sets workflow_url
     *
     * @param string $workflow_url workflow_url
     *
     * @return self
     */
    public function setWorkflowUrl($workflow_url)
    {
        if (is_null($workflow_url)) {
            throw new \InvalidArgumentException('non-nullable workflow_url cannot be null');
        }
        $this->container['workflow_url'] = $workflow_url;

        return $this;
    }

    /**
     * Gets display_title
     *
     * @return string|null
     */
    public function getDisplayTitle()
    {
        return $this->container['display_title'];
    }

    /**
     * Sets display_title
     *
     * @param string|null $display_title The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
     *
     * @return self
     */
    public function setDisplayTitle($display_title)
    {
        if (is_null($display_title)) {
            throw new \InvalidArgumentException('non-nullable display_title cannot be null');
        }
        $this->container['display_title'] = $display_title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


